
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800820c  0800820c  000203d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800820c  0800820c  0001820c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008214  08008214  000203d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  0800821c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200003d8  080085f4  000203d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  080085f4  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bab  00000000  00000000  00020401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f13  00000000  00000000  00032fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00036f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e4  00000000  00000000  00037e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ff5  00000000  00000000  0005a7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba3d3  00000000  00000000  000717d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012bbac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  0012bbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200003d8 	.word	0x200003d8
 8000200:	00000000 	.word	0x00000000
 8000204:	080081bc 	.word	0x080081bc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200003dc 	.word	0x200003dc
 8000220:	080081bc 	.word	0x080081bc

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <MX_CAN1_Init+0xa0>)
 8000536:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800053a:	2209      	movs	r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800054c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000550:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000554:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000558:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000580:	f004 f8ea 	bl	8004758 <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058a:	f000 ffd9 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_CAN1_Init+0x9c>)
 80005bc:	f004 f9c8 	bl	8004950 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200003f4 	.word	0x200003f4
 80005cc:	40006400 	.word	0x40006400

080005d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <HAL_CAN_MspInit+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d149      	bne.n	8000684 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000636:	f005 fc69 	bl	8005f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000650:	f005 fc5c 	bl	8005f0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f004 ff9e 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f004 ffb7 	bl	80055d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2015      	movs	r0, #21
 800066a:	f004 ff96 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800066e:	2015      	movs	r0, #21
 8000670:	f004 ffaf 	bl	80055d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2016      	movs	r0, #22
 800067a:	f004 ff8e 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800067e:	2016      	movs	r0, #22
 8000680:	f004 ffa7 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40006400 	.word	0x40006400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
//	EVCU_setData_i.dataID = 0;
//	EVCU_setData_i.fixSetS.bit.mode = targetMode;
//	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
//	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
//	EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <EVCU_setData_write+0x30>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <EVCU_setData_write+0x30>)
 80006b0:	7892      	ldrb	r2, [r2, #2]
 80006b2:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <EVCU_setData_write+0x34>)
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4905      	ldr	r1, [pc, #20]	; (80006d0 <EVCU_setData_write+0x38>)
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <EVCU_setData_write+0x3c>)
 80006bc:	f004 fa6c 	bl	8004b98 <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000041c 	.word	0x2000041c
 80006cc:	20000540 	.word	0x20000540
 80006d0:	200004d8 	.word	0x200004d8
 80006d4:	200003f4 	.word	0x200003f4

080006d8 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	091b      	lsrs	r3, r3, #4
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <EVCU_getData_read_40+0x10c>)
 80006ec:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	10db      	asrs	r3, r3, #3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <EVCU_getData_read_40+0x110>)
 8000700:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	109b      	asrs	r3, r3, #2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <EVCU_getData_read_40+0x114>)
 8000714:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3301      	adds	r3, #1
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	105b      	asrs	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <EVCU_getData_read_40+0x118>)
 8000728:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <EVCU_getData_read_40+0x11c>)
 8000738:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <EVCU_getData_read_40+0x120>)
 8000746:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3302      	adds	r3, #2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	119b      	asrs	r3, r3, #6
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <EVCU_getData_read_40+0x124>)
 800075a:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3302      	adds	r3, #2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	111b      	asrs	r3, r3, #4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <EVCU_getData_read_40+0x128>)
 800076e:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3302      	adds	r3, #2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	10db      	asrs	r3, r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <EVCU_getData_read_40+0x12c>)
 8000782:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3302      	adds	r3, #2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	109b      	asrs	r3, r3, #2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <EVCU_getData_read_40+0x130>)
 8000796:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3304      	adds	r3, #4
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3303      	adds	r3, #3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <EVCU_getData_read_40+0x134>)
 80007b0:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3305      	adds	r3, #5
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <EVCU_getData_read_40+0x138>)
 80007bc:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3307      	adds	r3, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3306      	adds	r3, #6
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <EVCU_getData_read_40+0x13c>)
 80007d8:	801a      	strh	r2, [r3, #0]



}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000484 	.word	0x20000484
 80007e8:	20000486 	.word	0x20000486
 80007ec:	20000487 	.word	0x20000487
 80007f0:	20000488 	.word	0x20000488
 80007f4:	20000489 	.word	0x20000489
 80007f8:	2000048a 	.word	0x2000048a
 80007fc:	2000048b 	.word	0x2000048b
 8000800:	2000048c 	.word	0x2000048c
 8000804:	200004b5 	.word	0x200004b5
 8000808:	2000048e 	.word	0x2000048e
 800080c:	20000482 	.word	0x20000482
 8000810:	20000470 	.word	0x20000470
 8000814:	2000047c 	.word	0x2000047c

08000818 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d129      	bne.n	800087c <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b7f      	ldr	r3, [pc, #508]	; (8000a34 <EVCU_getData_read_41+0x21c>)
 8000836:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	111b      	asrs	r3, r3, #4
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b7b      	ldr	r3, [pc, #492]	; (8000a38 <EVCU_getData_read_41+0x220>)
 800084a:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	119b      	asrs	r3, r3, #6
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b77      	ldr	r3, [pc, #476]	; (8000a3c <EVCU_getData_read_41+0x224>)
 800085e:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3301      	adds	r3, #1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	09db      	lsrs	r3, r3, #7
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b75      	ldr	r3, [pc, #468]	; (8000a40 <EVCU_getData_read_41+0x228>)
 800086c:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3302      	adds	r3, #2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	099b      	lsrs	r3, r3, #6
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b72      	ldr	r3, [pc, #456]	; (8000a44 <EVCU_getData_read_41+0x22c>)
 800087a:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d119      	bne.n	80008b8 <EVCU_getData_read_41+0xa0>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3304      	adds	r3, #4
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3303      	adds	r3, #3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	431a      	orrs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3302      	adds	r3, #2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	061b      	lsls	r3, r3, #24
 80008a8:	4313      	orrs	r3, r2
 80008aa:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <EVCU_getData_read_41+0x230>)
 80008ae:	601a      	str	r2, [r3, #0]
		distance.range = canRX[5];
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	795a      	ldrb	r2, [r3, #5]
 80008b4:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <EVCU_getData_read_41+0x230>)
 80008b6:	719a      	strb	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d127      	bne.n	8000910 <EVCU_getData_read_41+0xf8>

		soc_value = canRX[1];
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	785a      	ldrb	r2, [r3, #1]
 80008c4:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <EVCU_getData_read_41+0x234>)
 80008c6:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	789a      	ldrb	r2, [r3, #2]
 80008cc:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <EVCU_getData_read_41+0x238>)
 80008ce:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	78da      	ldrb	r2, [r3, #3]
 80008d4:	4b5f      	ldr	r3, [pc, #380]	; (8000a54 <EVCU_getData_read_41+0x23c>)
 80008d6:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3305      	adds	r3, #5
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b21a      	sxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3304      	adds	r3, #4
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <EVCU_getData_read_41+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3307      	adds	r3, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3306      	adds	r3, #6
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21b      	sxth	r3, r3
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b53      	ldr	r3, [pc, #332]	; (8000a5c <EVCU_getData_read_41+0x244>)
 800090e:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d11a      	bne.n	800094e <EVCU_getData_read_41+0x136>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3302      	adds	r3, #2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b21a      	sxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <EVCU_getData_read_41+0x248>)
 8000932:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3304      	adds	r3, #4
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3303      	adds	r3, #3
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <EVCU_getData_read_41+0x24c>)
 800094c:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b04      	cmp	r3, #4
 8000954:	d11b      	bne.n	800098e <EVCU_getData_read_41+0x176>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3302      	adds	r3, #2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b21a      	sxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3301      	adds	r3, #1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21b      	sxth	r3, r3
 800096c:	b29a      	uxth	r2, r3
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <EVCU_getData_read_41+0x230>)
 8000970:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3306      	adds	r3, #6
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3305      	adds	r3, #5
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21b      	sxth	r3, r3
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <EVCU_getData_read_41+0x230>)
 800098c:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b05      	cmp	r3, #5
 8000994:	d129      	bne.n	80009ea <EVCU_getData_read_41+0x1d2>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3302      	adds	r3, #2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b21a      	sxth	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3301      	adds	r3, #1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <EVCU_getData_read_41+0x250>)
 80009b0:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3304      	adds	r3, #4
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3303      	adds	r3, #3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <EVCU_getData_read_41+0x250>)
 80009cc:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3306      	adds	r3, #6
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3305      	adds	r3, #5
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <EVCU_getData_read_41+0x250>)
 80009e8:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d11b      	bne.n	8000a2a <EVCU_getData_read_41+0x212>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3302      	adds	r3, #2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3301      	adds	r3, #1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <EVCU_getData_read_41+0x230>)
 8000a0c:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3304      	adds	r3, #4
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <EVCU_getData_read_41+0x250>)
 8000a28:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	2000048f 	.word	0x2000048f
 8000a38:	20000490 	.word	0x20000490
 8000a3c:	20000491 	.word	0x20000491
 8000a40:	20000000 	.word	0x20000000
 8000a44:	2000048d 	.word	0x2000048d
 8000a48:	20000448 	.word	0x20000448
 8000a4c:	20000474 	.word	0x20000474
 8000a50:	20000475 	.word	0x20000475
 8000a54:	2000047e 	.word	0x2000047e
 8000a58:	2000047a 	.word	0x2000047a
 8000a5c:	20000478 	.word	0x20000478
 8000a60:	20000476 	.word	0x20000476
 8000a64:	20000480 	.word	0x20000480
 8000a68:	20000458 	.word	0x20000458

08000a6c <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d12d      	bne.n	8000ad8 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	785a      	ldrb	r2, [r3, #1]
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000a82:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3303      	adds	r3, #3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b21a      	sxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3304      	adds	r3, #4
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000a9e:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3305      	adds	r3, #5
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3306      	adds	r3, #6
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000aba:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3307      	adds	r3, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3306      	adds	r3, #6
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000ad6:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d121      	bne.n	8000b24 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	785a      	ldrb	r2, [r3, #1]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000ae6:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3303      	adds	r3, #3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3302      	adds	r3, #2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b02:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791a      	ldrb	r2, [r3, #4]
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b0a:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	795a      	ldrb	r2, [r3, #5]
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b12:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	799a      	ldrb	r2, [r3, #6]
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b1a:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	79da      	ldrb	r2, [r3, #7]
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b22:	73da      	strb	r2, [r3, #15]
	}
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000460 	.word	0x20000460

08000b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_DMA_Init+0x38>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <MX_DMA_Init+0x38>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_DMA_Init+0x38>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200c      	movs	r0, #12
 8000b58:	f004 fd1f 	bl	800559a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b5c:	200c      	movs	r0, #12
 8000b5e:	f004 fd38 	bl	80055d2 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000b74:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <setError+0x214>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d13a      	bne.n	8000bf2 <setError+0x82>
		switch (err_error) {
 8000b7c:	4b82      	ldr	r3, [pc, #520]	; (8000d88 <setError+0x218>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d026      	beq.n	8000bd2 <setError+0x62>
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	dc36      	bgt.n	8000bf6 <setError+0x86>
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <setError+0x22>
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d010      	beq.n	8000bb2 <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000b90:	e031      	b.n	8000bf6 <setError+0x86>
			error_on = true;
 8000b92:	4b7e      	ldr	r3, [pc, #504]	; (8000d8c <setError+0x21c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000b98:	4b7d      	ldr	r3, [pc, #500]	; (8000d90 <setError+0x220>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000b9e:	4b7d      	ldr	r3, [pc, #500]	; (8000d94 <setError+0x224>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000ba4:	4b7c      	ldr	r3, [pc, #496]	; (8000d98 <setError+0x228>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000baa:	4b7c      	ldr	r3, [pc, #496]	; (8000d9c <setError+0x22c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
			break;
 8000bb0:	e022      	b.n	8000bf8 <setError+0x88>
			error_on = true;
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <setError+0x21c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000bb8:	4b75      	ldr	r3, [pc, #468]	; (8000d90 <setError+0x220>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000bbe:	4b75      	ldr	r3, [pc, #468]	; (8000d94 <setError+0x224>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000bc4:	4b74      	ldr	r3, [pc, #464]	; (8000d98 <setError+0x228>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000bca:	4b74      	ldr	r3, [pc, #464]	; (8000d9c <setError+0x22c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
			break;
 8000bd0:	e012      	b.n	8000bf8 <setError+0x88>
			error_on = false;
 8000bd2:	4b6e      	ldr	r3, [pc, #440]	; (8000d8c <setError+0x21c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000bd8:	4b6d      	ldr	r3, [pc, #436]	; (8000d90 <setError+0x220>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000bde:	4b6d      	ldr	r3, [pc, #436]	; (8000d94 <setError+0x224>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <setError+0x228>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <setError+0x22c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
			break;
 8000bf0:	e002      	b.n	8000bf8 <setError+0x88>
		}
	}
 8000bf2:	bf00      	nop
 8000bf4:	e000      	b.n	8000bf8 <setError+0x88>
			break;
 8000bf6:	bf00      	nop
	if (err_device == 1) { //BMS
 8000bf8:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <setError+0x214>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	f040 80bb 	bne.w	8000d78 <setError+0x208>
		switch (err_error) {
 8000c02:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <setError+0x218>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	f200 80a6 	bhi.w	8000d58 <setError+0x1e8>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <setError+0xa4>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c39 	.word	0x08000c39
 8000c18:	08000c59 	.word	0x08000c59
 8000c1c:	08000c79 	.word	0x08000c79
 8000c20:	08000c99 	.word	0x08000c99
 8000c24:	08000cb9 	.word	0x08000cb9
 8000c28:	08000cd9 	.word	0x08000cd9
 8000c2c:	08000cf9 	.word	0x08000cf9
 8000c30:	08000d19 	.word	0x08000d19
 8000c34:	08000d39 	.word	0x08000d39
		case 0: //Over_Discharge_Current
			error_on = true;
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <setError+0x21c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c3e:	4b54      	ldr	r3, [pc, #336]	; (8000d90 <setError+0x220>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <setError+0x224>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <setError+0x228>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c50:	4b52      	ldr	r3, [pc, #328]	; (8000d9c <setError+0x22c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000c56:	e090      	b.n	8000d7a <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000c58:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <setError+0x21c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000c5e:	4b4c      	ldr	r3, [pc, #304]	; (8000d90 <setError+0x220>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <setError+0x224>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <setError+0x228>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <setError+0x22c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000c76:	e080      	b.n	8000d7a <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000c78:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <setError+0x21c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c7e:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <setError+0x220>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <setError+0x224>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <setError+0x228>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c90:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <setError+0x22c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000c96:	e070      	b.n	8000d7a <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000c98:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <setError+0x21c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <setError+0x220>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <setError+0x224>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <setError+0x228>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <setError+0x22c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cb6:	e060      	b.n	8000d7a <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000cb8:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <setError+0x21c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <setError+0x220>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <setError+0x224>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <setError+0x228>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <setError+0x22c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cd6:	e050      	b.n	8000d7a <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <setError+0x21c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <setError+0x220>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <setError+0x224>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <setError+0x228>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <setError+0x22c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cf6:	e040      	b.n	8000d7a <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <setError+0x21c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <setError+0x220>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <setError+0x224>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <setError+0x228>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <setError+0x22c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d16:	e030      	b.n	8000d7a <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <setError+0x21c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <setError+0x220>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <setError+0x224>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <setError+0x228>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <setError+0x22c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d36:	e020      	b.n	8000d7a <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <setError+0x21c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <setError+0x220>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <setError+0x224>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <setError+0x228>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <setError+0x22c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d56:	e010      	b.n	8000d7a <setError+0x20a>
		default:
			error_on = false;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <setError+0x21c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <setError+0x220>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <setError+0x224>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <setError+0x228>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <setError+0x22c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
			break;
 8000d76:	e000      	b.n	8000d7a <setError+0x20a>
		}
	}
 8000d78:	bf00      	nop
	//_errorSelection = true;
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000490 	.word	0x20000490
 8000d88:	2000048f 	.word	0x2000048f
 8000d8c:	200004aa 	.word	0x200004aa
 8000d90:	200004ab 	.word	0x200004ab
 8000d94:	200004ac 	.word	0x200004ac
 8000d98:	200004ad 	.word	0x200004ad
 8000d9c:	200004ae 	.word	0x200004ae

08000da0 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a39      	ldr	r2, [pc, #228]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin | LED_2_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2103      	movs	r1, #3
 8000e18:	4828      	ldr	r0, [pc, #160]	; (8000ebc <MX_GPIO_Init+0x11c>)
 8000e1a:	f005 fa12 	bl	8006242 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PCPin PCPin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4821      	ldr	r0, [pc, #132]	; (8000ebc <MX_GPIO_Init+0x11c>)
 8000e36:	f005 f869 	bl	8005f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = IN4_Pin | IN3_Pin | IN2_Pin;
 8000e3a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000e3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000e50:	f005 f85c 	bl	8005f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin PCPin
	 PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = IN7_Pin | IN6_Pin | IN9_Pin | IN10_Pin | IN11_Pin
 8000e54:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000e58:	613b      	str	r3, [r7, #16]
			| IN12_Pin | IN5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_GPIO_Init+0x11c>)
 8000e6a:	f005 f84f 	bl	8005f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = IN8_Pin | IN1_Pin;
 8000e6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e84:	f005 f842 	bl	8005f0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = Btn_Int_1_Pin | Btn_Int_2_Pin;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_GPIO_Init+0x128>)
 8000e8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e9c:	f005 f836 	bl	8005f0c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2017      	movs	r0, #23
 8000ea6:	f004 fb78 	bl	800559a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eaa:	2017      	movs	r0, #23
 8000eac:	f004 fb91 	bl	80055d2 <HAL_NVIC_EnableIRQ>

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	10110000 	.word	0x10110000

08000ecc <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	4851      	ldr	r0, [pc, #324]	; (800101c <getInputs+0x150>)
 8000ed6:	f005 f99d 	bl	8006214 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	b2d9      	uxtb	r1, r3
 8000ee2:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <getInputs+0x154>)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	f361 0300 	bfi	r3, r1, #0, #1
 8000eea:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	484c      	ldr	r0, [pc, #304]	; (8001024 <getInputs+0x158>)
 8000ef2:	f005 f98f 	bl	8006214 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	4a48      	ldr	r2, [pc, #288]	; (8001020 <getInputs+0x154>)
 8000f00:	7813      	ldrb	r3, [r2, #0]
 8000f02:	f361 0341 	bfi	r3, r1, #1, #1
 8000f06:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4846      	ldr	r0, [pc, #280]	; (8001024 <getInputs+0x158>)
 8000f0c:	f005 f982 	bl	8006214 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	b2d9      	uxtb	r1, r3
 8000f18:	4a41      	ldr	r2, [pc, #260]	; (8001020 <getInputs+0x154>)
 8000f1a:	7813      	ldrb	r3, [r2, #0]
 8000f1c:	f361 0382 	bfi	r3, r1, #2, #1
 8000f20:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8000f22:	2104      	movs	r1, #4
 8000f24:	483f      	ldr	r0, [pc, #252]	; (8001024 <getInputs+0x158>)
 8000f26:	f005 f975 	bl	8006214 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	b2d9      	uxtb	r1, r3
 8000f32:	4a3b      	ldr	r2, [pc, #236]	; (8001020 <getInputs+0x154>)
 8000f34:	7813      	ldrb	r3, [r2, #0]
 8000f36:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f3a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	4839      	ldr	r0, [pc, #228]	; (8001028 <getInputs+0x15c>)
 8000f42:	f005 f967 	bl	8006214 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4a34      	ldr	r2, [pc, #208]	; (8001020 <getInputs+0x154>)
 8000f50:	7813      	ldrb	r3, [r2, #0]
 8000f52:	f361 1304 	bfi	r3, r1, #4, #1
 8000f56:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 8000f58:	2120      	movs	r1, #32
 8000f5a:	4833      	ldr	r0, [pc, #204]	; (8001028 <getInputs+0x15c>)
 8000f5c:	f005 f95a 	bl	8006214 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2d9      	uxtb	r1, r3
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <getInputs+0x154>)
 8000f6a:	7813      	ldrb	r3, [r2, #0]
 8000f6c:	f361 1345 	bfi	r3, r1, #5, #1
 8000f70:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8000f72:	2110      	movs	r1, #16
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <getInputs+0x15c>)
 8000f76:	f005 f94d 	bl	8006214 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	b2d9      	uxtb	r1, r3
 8000f82:	4a27      	ldr	r2, [pc, #156]	; (8001020 <getInputs+0x154>)
 8000f84:	7813      	ldrb	r3, [r2, #0]
 8000f86:	f361 1386 	bfi	r3, r1, #6, #1
 8000f8a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	4822      	ldr	r0, [pc, #136]	; (800101c <getInputs+0x150>)
 8000f92:	f005 f93f 	bl	8006214 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2d9      	uxtb	r1, r3
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <getInputs+0x154>)
 8000fa0:	7813      	ldrb	r3, [r2, #0]
 8000fa2:	f361 13c7 	bfi	r3, r1, #7, #1
 8000fa6:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	481f      	ldr	r0, [pc, #124]	; (8001028 <getInputs+0x15c>)
 8000fac:	f005 f932 	bl	8006214 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	b2d9      	uxtb	r1, r3
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <getInputs+0x154>)
 8000fba:	7853      	ldrb	r3, [r2, #1]
 8000fbc:	f361 0300 	bfi	r3, r1, #0, #1
 8000fc0:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <getInputs+0x15c>)
 8000fc6:	f005 f925 	bl	8006214 <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2d9      	uxtb	r1, r3
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <getInputs+0x154>)
 8000fd4:	7853      	ldrb	r3, [r2, #1]
 8000fd6:	f361 0341 	bfi	r3, r1, #1, #1
 8000fda:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <getInputs+0x15c>)
 8000fe2:	f005 f917 	bl	8006214 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <getInputs+0x154>)
 8000ff0:	7853      	ldrb	r3, [r2, #1]
 8000ff2:	f361 0382 	bfi	r3, r1, #2, #1
 8000ff6:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <getInputs+0x15c>)
 8000ffe:	f005 f909 	bl	8006214 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	b2d9      	uxtb	r1, r3
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <getInputs+0x154>)
 800100c:	7853      	ldrb	r3, [r2, #1]
 800100e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001012:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001014:	f000 f8a4 	bl	8001160 <buttonOkay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010c00 	.word	0x40010c00
 8001020:	20000424 	.word	0x20000424
 8001024:	40010800 	.word	0x40010800
 8001028:	40011000 	.word	0x40011000

0800102c <setInputs>:

void setInputs() {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
//	if (gpio.buttonInputs.bit.in10) //pageUp
//	{
//		door = true;
//		HAL_Delay(50);
//	}
	if (gpio.buttonInputs.bit.in7) //pageUp
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <setInputs+0x104>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <setInputs+0x2e>
	{
		buttonCounterForward++;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <setInputs+0x108>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <setInputs+0x108>)
 8001048:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <setInputs+0x108>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d806      	bhi.n	8001060 <setInputs+0x34>
			forward = true;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <setInputs+0x10c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e002      	b.n	8001060 <setInputs+0x34>
		}
	} else {
		buttonCounterForward = 0;
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <setInputs+0x108>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in5) //pageDown
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <setInputs+0x104>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00d      	beq.n	800108a <setInputs+0x5e>
	{
		buttonCounterBackward++;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <setInputs+0x110>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <setInputs+0x110>)
 8001078:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <setInputs+0x110>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d806      	bhi.n	8001090 <setInputs+0x64>
			backward = true;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <setInputs+0x114>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <setInputs+0x64>
		}
	} else {
		buttonCounterBackward = 0;
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <setInputs+0x110>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in8) //back
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <setInputs+0x104>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <setInputs+0x8e>
	{
		buttonCounterBack++;
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <setInputs+0x118>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <setInputs+0x118>)
 80010a8:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <setInputs+0x118>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d806      	bhi.n	80010c0 <setInputs+0x94>
			back = true;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <setInputs+0x11c>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e002      	b.n	80010c0 <setInputs+0x94>
		}
	}
	else
	{
		buttonCounterBack = 0;
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <setInputs+0x118>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //mode //After fixing the okay button change mode to okay
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <setInputs+0x104>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d010      	beq.n	80010f0 <setInputs+0xc4>
	{
		buttonCounterMode++;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <setInputs+0x120>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <setInputs+0x120>)
 80010d8:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <setInputs+0x120>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d809      	bhi.n	80010f6 <setInputs+0xca>
			mode = true;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <setInputs+0x124>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
			_modeChanged = true;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <setInputs+0x128>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e002      	b.n	80010f6 <setInputs+0xca>
		}
	}
	else
	{
		buttonCounterMode = 0;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <setInputs+0x120>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6 == 1) //okay
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <setInputs+0x104>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <setInputs+0xf4>
	{
		buttonCounterOkay++;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <setInputs+0x12c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <setInputs+0x12c>)
 800110e:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <setInputs+0x12c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d806      	bhi.n	8001126 <setInputs+0xfa>
			okay = true;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <setInputs+0x130>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 800111e:	e002      	b.n	8001126 <setInputs+0xfa>
		buttonCounterOkay = 0;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <setInputs+0x12c>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000424 	.word	0x20000424
 8001134:	200004d0 	.word	0x200004d0
 8001138:	20000428 	.word	0x20000428
 800113c:	200004d1 	.word	0x200004d1
 8001140:	20000429 	.word	0x20000429
 8001144:	200004d2 	.word	0x200004d2
 8001148:	2000042e 	.word	0x2000042e
 800114c:	200004d4 	.word	0x200004d4
 8001150:	2000042d 	.word	0x2000042d
 8001154:	200004c5 	.word	0x200004c5
 8001158:	200004d3 	.word	0x200004d3
 800115c:	2000042a 	.word	0x2000042a

08001160 <buttonOkay>:

void buttonOkay(void) {
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in6 == 1) {
 8001164:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <buttonOkay+0x54>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <buttonOkay+0x20>
		buttonCounterLongPress++;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <buttonOkay+0x58>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <buttonOkay+0x58>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e005      	b.n	800118c <buttonOkay+0x2c>
	} else {
		buttonCounterLongPress = 0;
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <buttonOkay+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
		okay = false;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <buttonOkay+0x5c>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <buttonOkay+0x58>)
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <buttonOkay+0x60>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d308      	bcc.n	80011aa <buttonOkay+0x4a>
		longpress = true;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <buttonOkay+0x64>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
		okay = false;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <buttonOkay+0x5c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <buttonOkay+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
	}

}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000424 	.word	0x20000424
 80011b8:	200004cf 	.word	0x200004cf
 80011bc:	2000042a 	.word	0x2000042a
 80011c0:	20000014 	.word	0x20000014
 80011c4:	2000042c 	.word	0x2000042c

080011c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011cc:	f003 fa3e 	bl	800464c <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f003 fa9c 	bl	8004710 <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d8:	f000 f8ac 	bl	8001334 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011dc:	f7ff fde0 	bl	8000da0 <MX_GPIO_Init>
	MX_DMA_Init();
 80011e0:	f7ff fca8 	bl	8000b34 <MX_DMA_Init>
	MX_CAN1_Init();
 80011e4:	f7ff f9a2 	bl	800052c <MX_CAN1_Init>
	MX_TIM2_Init();
 80011e8:	f001 fb5c 	bl	80028a4 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80011ec:	f003 f89a 	bl	8004324 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <main+0x130>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 80011f6:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <main+0x130>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 80011fc:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <main+0x130>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <main+0x130>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 8001208:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <main+0x130>)
 800120a:	2242      	movs	r2, #66	; 0x42
 800120c:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <main+0x130>)
 8001210:	2200      	movs	r2, #0
 8001212:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <main+0x134>)
 8001216:	22f3      	movs	r2, #243	; 0xf3
 8001218:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <main+0x138>)
 800121c:	2208      	movs	r2, #8
 800121e:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <main+0x138>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <main+0x138>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 800122c:	4b34      	ldr	r3, [pc, #208]	; (8001300 <main+0x138>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <main+0x138>)
 8001234:	2252      	movs	r2, #82	; 0x52
 8001236:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <main+0x138>)
 800123a:	2200      	movs	r2, #0
 800123c:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <main+0x13c>)
 8001240:	22f3      	movs	r2, #243	; 0xf3
 8001242:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 8001244:	2208      	movs	r2, #8
 8001246:	2100      	movs	r1, #0
 8001248:	482f      	ldr	r0, [pc, #188]	; (8001308 <main+0x140>)
 800124a:	f006 ffaf 	bl	80081ac <memset>
	memset(strDATA2, 0, 10);
 800124e:	220a      	movs	r2, #10
 8001250:	2100      	movs	r1, #0
 8001252:	482e      	ldr	r0, [pc, #184]	; (800130c <main+0x144>)
 8001254:	f006 ffaa 	bl	80081ac <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <main+0x140>)
 800125a:	225a      	movs	r2, #90	; 0x5a
 800125c:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <main+0x140>)
 8001260:	22a5      	movs	r2, #165	; 0xa5
 8001262:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 8001264:	4b28      	ldr	r3, [pc, #160]	; (8001308 <main+0x140>)
 8001266:	2205      	movs	r2, #5
 8001268:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <main+0x140>)
 800126c:	2282      	movs	r2, #130	; 0x82
 800126e:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <main+0x144>)
 8001272:	225a      	movs	r2, #90	; 0x5a
 8001274:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <main+0x144>)
 8001278:	22a5      	movs	r2, #165	; 0xa5
 800127a:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <main+0x144>)
 800127e:	2207      	movs	r2, #7
 8001280:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <main+0x144>)
 8001284:	2282      	movs	r2, #130	; 0x82
 8001286:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <main+0x148>)
 800128a:	f003 fc41 	bl	8004b10 <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800128e:	2102      	movs	r1, #2
 8001290:	481f      	ldr	r0, [pc, #124]	; (8001310 <main+0x148>)
 8001292:	f003 fe6c 	bl	8004f6e <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <main+0x14c>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
	currentMode = mode_evcu;
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <main+0x150>)
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <main+0x154>)
 80012a2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80012a4:	481e      	ldr	r0, [pc, #120]	; (8001320 <main+0x158>)
 80012a6:	f005 fdc7 	bl	8006e38 <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <main+0x15c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <main+0x15c>)
 80012b4:	701a      	strb	r2, [r3, #0]
		counter2++;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <main+0x160>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <main+0x160>)
 80012c0:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(10);

		if (gpioSetFlag) {
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <main+0x164>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <main+0x116>
			getInputs();
 80012ca:	f7ff fdff 	bl	8000ecc <getInputs>
			setInputs();
 80012ce:	f7ff fead 	bl	800102c <setInputs>
			gpioSetFlag = false;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <main+0x164>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
			//mainStateMachine();
			counter = 0;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <main+0x15c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	701a      	strb	r2, [r3, #0]

		}
		if (timeout.timeout_0_5s == true) {
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <main+0x168>)
 80012e0:	795b      	ldrb	r3, [r3, #5]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0e0      	beq.n	80012aa <main+0xe2>
			if (counter2 >= 10) {
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <main+0x160>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	d9dc      	bls.n	80012aa <main+0xe2>
				//transmit();
				counter2 = 0;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <main+0x160>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
		counter++;
 80012f6:	e7d8      	b.n	80012aa <main+0xe2>
 80012f8:	200004d8 	.word	0x200004d8
 80012fc:	2000054c 	.word	0x2000054c
 8001300:	2000050c 	.word	0x2000050c
 8001304:	20000018 	.word	0x20000018
 8001308:	20000434 	.word	0x20000434
 800130c:	2000043c 	.word	0x2000043c
 8001310:	200003f4 	.word	0x200003f4
 8001314:	200004cc 	.word	0x200004cc
 8001318:	2000048c 	.word	0x2000048c
 800131c:	200004a2 	.word	0x200004a2
 8001320:	20000564 	.word	0x20000564
 8001324:	2000055c 	.word	0x2000055c
 8001328:	2000055d 	.word	0x2000055d
 800132c:	20000560 	.word	0x20000560
 8001330:	200005ac 	.word	0x200005ac

08001334 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	2238      	movs	r2, #56	; 0x38
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f006 ff32 	bl	80081ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001364:	2301      	movs	r3, #1
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001370:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001376:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800137c:	2300      	movs	r3, #0
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4618      	mov	r0, r3
 8001386:	f004 ffa5 	bl	80062d4 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x60>
		Error_Handler();
 8001390:	f000 f8d6 	bl	8001540 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2102      	movs	r1, #2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f005 faa6 	bl	8006900 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x8a>
		Error_Handler();
 80013ba:	f000 f8c1 	bl	8001540 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80013be:	4b03      	ldr	r3, [pc, #12]	; (80013cc <SystemClock_Config+0x98>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3750      	adds	r7, #80	; 0x50
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	42420070 	.word	0x42420070

080013d0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	can_Counter++;
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80013e2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2101      	movs	r1, #1
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80013ea:	f004 ff2a 	bl	8006242 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80013f0:	4a17      	ldr	r2, [pc, #92]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f003 fca9 	bl	8004d4c <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b40      	cmp	r3, #64	; 0x40
 8001400:	d106      	bne.n	8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800140c:	f7ff f964 	bl	80006d8 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b41      	cmp	r3, #65	; 0x41
 8001416:	d106      	bne.n	8001426 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 8001420:	480a      	ldr	r0, [pc, #40]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001422:	f7ff f9f9 	bl	8000818 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b43      	cmp	r3, #67	; 0x43
 800142c:	d106      	bne.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001438:	f7ff fb18 	bl	8000a6c <EVCU_getData_read_43>
	}
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000055e 	.word	0x2000055e
 8001448:	40011000 	.word	0x40011000
 800144c:	20000544 	.word	0x20000544
 8001450:	200004f0 	.word	0x200004f0

08001454 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	counter2++;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8001466:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2102      	movs	r1, #2
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800146e:	f004 fee8 	bl	8006242 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 8001476:	2101      	movs	r1, #1
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f003 fc67 	bl	8004d4c <HAL_CAN_GetRxMessage>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000055d 	.word	0x2000055d
 800148c:	40011000 	.word	0x40011000
 8001490:	20000554 	.word	0x20000554
 8001494:	20000524 	.word	0x20000524

08001498 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_GPIO_EXTI_Callback+0x20>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_GPIO_EXTI_Callback+0x24>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
	}
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000426 	.word	0x20000426
 80014bc:	20000427 	.word	0x20000427

080014c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 80014c8:	480f      	ldr	r0, [pc, #60]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014ca:	f001 fa5b 	bl	8002984 <tick_count>
	gpioSetFlag = true;//50ms
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
	mainStateMachine();
 80014d4:	f000 fe34 	bl	8002140 <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 80014d8:	2101      	movs	r1, #1
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014dc:	f004 fec9 	bl	8006272 <HAL_GPIO_TogglePin>
	timCounter++;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014ea:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 80014ec:	f001 fab8 	bl	8002a60 <transmit>

	//gpioSetFlag = true;

	if (timeout.timeout_1s == true) {
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014f2:	799b      	ldrb	r3, [r3, #6]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <HAL_TIM_PeriodElapsedCallback+0x40>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014fc:	f7ff f8cc 	bl	8000698 <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200005ac 	.word	0x200005ac
 800150c:	20000560 	.word	0x20000560
 8001510:	40011000 	.word	0x40011000
 8001514:	2000055f 	.word	0x2000055f
 8001518:	2000054c 	.word	0x2000054c

0800151c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>
	...

0800154c <navigation>:
#include <menu.h>

void navigation(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <navigation+0xc4>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d103      	bne.n	8001560 <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <navigation+0xc8>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
 800155e:	e002      	b.n	8001566 <navigation+0x1a>
	} else {
		_navigation = false;
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <navigation+0xc8>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
	}
	switch (currentPage) {
 8001566:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <navigation+0xcc>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b07      	cmp	r3, #7
 800156e:	d84c      	bhi.n	800160a <navigation+0xbe>
 8001570:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <navigation+0x2c>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	08001599 	.word	0x08001599
 800157c:	080015b1 	.word	0x080015b1
 8001580:	080015c9 	.word	0x080015c9
 8001584:	080015e1 	.word	0x080015e1
 8001588:	0800160b 	.word	0x0800160b
 800158c:	0800160b 	.word	0x0800160b
 8001590:	0800160b 	.word	0x0800160b
 8001594:	080015f9 	.word	0x080015f9
	case front:
		front_mainPage();
 8001598:	f000 f846 	bl	8001628 <front_mainPage>
		_realTimeData = true;
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <navigation+0xd0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <navigation+0xd4>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
		previousPage = front;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <navigation+0xd8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
		break;
 80015ae:	e02d      	b.n	800160c <navigation+0xc0>
	case trip:
		trip_mainPage();
 80015b0:	f000 f89a 	bl	80016e8 <trip_mainPage>
		_realTimeData = true;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <navigation+0xd0>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <navigation+0xd4>)
 80015bc:	2201      	movs	r2, #1
 80015be:	701a      	strb	r2, [r3, #0]
		previousPage = trip;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <navigation+0xd8>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
		break;
 80015c6:	e021      	b.n	800160c <navigation+0xc0>
	case after_charge:
		after_charge_mainPage();
 80015c8:	f000 f8e4 	bl	8001794 <after_charge_mainPage>
		_realTimeData = true;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <navigation+0xd0>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <navigation+0xd4>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
		previousPage = after_charge;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <navigation+0xd8>)
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
		break;
 80015de:	e015      	b.n	800160c <navigation+0xc0>
	case info:
		info_mainPage();
 80015e0:	f000 f920 	bl	8001824 <info_mainPage>
		_realTimeData = true;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <navigation+0xd0>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <navigation+0xd4>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
		previousPage = info;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <navigation+0xd8>)
 80015f2:	2203      	movs	r2, #3
 80015f4:	701a      	strb	r2, [r3, #0]
		break;
 80015f6:	e009      	b.n	800160c <navigation+0xc0>
	case settings:
		settings_mainPage();
 80015f8:	f000 fa30 	bl	8001a5c <settings_mainPage>
		_realTimeData = true;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <navigation+0xd0>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
		previousPage = settings;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <navigation+0xd8>)
 8001604:	2207      	movs	r2, #7
 8001606:	701a      	strb	r2, [r3, #0]
		break;
 8001608:	e000      	b.n	800160c <navigation+0xc0>
	default:
		break;
 800160a:	bf00      	nop
	}

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000486 	.word	0x20000486
 8001614:	200004b8 	.word	0x200004b8
 8001618:	2000049a 	.word	0x2000049a
 800161c:	200004b9 	.word	0x200004b9
 8001620:	200004bb 	.word	0x200004bb
 8001624:	2000049b 	.word	0x2000049b

08001628 <front_mainPage>:

void front_mainPage(void) {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	if (page_entry) {
 800162c:	4b23      	ldr	r3, [pc, #140]	; (80016bc <front_mainPage+0x94>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00e      	beq.n	8001652 <front_mainPage+0x2a>
		page_entry = false;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <front_mainPage+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		currentMode = modeCleared;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <front_mainPage+0x98>)
 800163c:	2204      	movs	r2, #4
 800163e:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <front_mainPage+0x9c>)
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <front_mainPage+0xa0>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <front_mainPage+0xa4>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <front_mainPage+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <front_mainPage+0xac>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <front_mainPage+0xb0>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00f      	beq.n	8001686 <front_mainPage+0x5e>
		currentPage = trip;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <front_mainPage+0xb4>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <front_mainPage+0x94>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <front_mainPage+0xb0>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <front_mainPage+0xb8>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <front_mainPage+0xbc>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
		return;
 8001684:	e016      	b.n	80016b4 <front_mainPage+0x8c>
	}

	if (backward == true) {
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <front_mainPage+0xb8>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d012      	beq.n	80016b4 <front_mainPage+0x8c>

		currentPage = settings;
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <front_mainPage+0xb4>)
 8001690:	2207      	movs	r2, #7
 8001692:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <front_mainPage+0x94>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
		forward = false;
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <front_mainPage+0xb0>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <front_mainPage+0xbc>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
		backward = false;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <front_mainPage+0xb8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <front_mainPage+0xac>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
		return;
 80016b2:	bf00      	nop
	}
}
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000013 	.word	0x20000013
 80016c0:	200004a2 	.word	0x200004a2
 80016c4:	200004bc 	.word	0x200004bc
 80016c8:	200004c6 	.word	0x200004c6
 80016cc:	200004c7 	.word	0x200004c7
 80016d0:	200004cd 	.word	0x200004cd
 80016d4:	200004ce 	.word	0x200004ce
 80016d8:	20000428 	.word	0x20000428
 80016dc:	2000049a 	.word	0x2000049a
 80016e0:	20000429 	.word	0x20000429
 80016e4:	200004a1 	.word	0x200004a1

080016e8 <trip_mainPage>:

void trip_mainPage(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <trip_mainPage+0x88>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d002      	beq.n	80016fa <trip_mainPage+0x12>
		page_entry = false;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <trip_mainPage+0x88>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <trip_mainPage+0x8c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <trip_mainPage+0x26>
		tripreset = true;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <trip_mainPage+0x90>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
		longpress = false;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <trip_mainPage+0x8c>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <trip_mainPage+0x94>)
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <trip_mainPage+0x98>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
	trip_reset();
 800171a:	f002 ff5f 	bl	80045dc <trip_reset>

	if (forward == true) {
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <trip_mainPage+0x9c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00f      	beq.n	8001746 <trip_mainPage+0x5e>

		currentPage = after_charge;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <trip_mainPage+0xa0>)
 8001728:	2202      	movs	r2, #2
 800172a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <trip_mainPage+0x88>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <trip_mainPage+0x9c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <trip_mainPage+0xa4>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <trip_mainPage+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
		return;
 8001744:	e013      	b.n	800176e <trip_mainPage+0x86>
	}

	if (backward == true) {
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <trip_mainPage+0xa4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00f      	beq.n	800176e <trip_mainPage+0x86>

		currentPage = front;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <trip_mainPage+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <trip_mainPage+0x88>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
		forward = false;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <trip_mainPage+0x9c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <trip_mainPage+0xa4>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <trip_mainPage+0xa8>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
		return;
 800176c:	bf00      	nop
	}
}
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000013 	.word	0x20000013
 8001774:	2000042c 	.word	0x2000042c
 8001778:	2000042b 	.word	0x2000042b
 800177c:	200004cd 	.word	0x200004cd
 8001780:	200004ce 	.word	0x200004ce
 8001784:	20000428 	.word	0x20000428
 8001788:	2000049a 	.word	0x2000049a
 800178c:	20000429 	.word	0x20000429
 8001790:	200004a1 	.word	0x200004a1

08001794 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <after_charge_mainPage+0x74>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <after_charge_mainPage+0x12>
		page_entry = false;
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <after_charge_mainPage+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <after_charge_mainPage+0x78>)
 80017a8:	2202      	movs	r2, #2
 80017aa:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <after_charge_mainPage+0x7c>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <after_charge_mainPage+0x80>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00f      	beq.n	80017da <after_charge_mainPage+0x46>

		currentPage = info;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <after_charge_mainPage+0x84>)
 80017bc:	2203      	movs	r2, #3
 80017be:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <after_charge_mainPage+0x74>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
		forward = false;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <after_charge_mainPage+0x80>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
		backward = false;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <after_charge_mainPage+0x88>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <after_charge_mainPage+0x8c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
		return;
 80017d8:	e013      	b.n	8001802 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <after_charge_mainPage+0x88>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00f      	beq.n	8001802 <after_charge_mainPage+0x6e>
		currentPage = trip;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <after_charge_mainPage+0x84>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <after_charge_mainPage+0x74>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
		forward = false;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <after_charge_mainPage+0x80>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
		backward = false;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <after_charge_mainPage+0x88>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <after_charge_mainPage+0x8c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
		return;
 8001800:	bf00      	nop
	}
}
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000013 	.word	0x20000013
 800180c:	200004cd 	.word	0x200004cd
 8001810:	200004ce 	.word	0x200004ce
 8001814:	20000428 	.word	0x20000428
 8001818:	2000049a 	.word	0x2000049a
 800181c:	20000429 	.word	0x20000429
 8001820:	200004a1 	.word	0x200004a1

08001824 <info_mainPage>:

void info_mainPage(void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001828:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <info_mainPage+0x204>)
 800182a:	2203      	movs	r2, #3
 800182c:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 800182e:	4b7f      	ldr	r3, [pc, #508]	; (8001a2c <info_mainPage+0x208>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001834:	4b7e      	ldr	r3, [pc, #504]	; (8001a30 <info_mainPage+0x20c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <info_mainPage+0x36>
		if (okay == true) {
 8001842:	4b7c      	ldr	r3, [pc, #496]	; (8001a34 <info_mainPage+0x210>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80c4 	beq.w	80019d4 <info_mainPage+0x1b0>
			inInfoBat = true;
 800184c:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <info_mainPage+0x20c>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001852:	4b78      	ldr	r3, [pc, #480]	; (8001a34 <info_mainPage+0x210>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e0bc      	b.n	80019d4 <info_mainPage+0x1b0>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 800185a:	4b77      	ldr	r3, [pc, #476]	; (8001a38 <info_mainPage+0x214>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00f      	beq.n	8001882 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001862:	4b76      	ldr	r3, [pc, #472]	; (8001a3c <info_mainPage+0x218>)
 8001864:	2204      	movs	r2, #4
 8001866:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001868:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <info_mainPage+0x21c>)
 800186a:	2206      	movs	r2, #6
 800186c:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 800186e:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <info_mainPage+0x220>)
 8001870:	2205      	movs	r2, #5
 8001872:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001874:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <info_mainPage+0x214>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 800187a:	2004      	movs	r0, #4
 800187c:	f001 fb06 	bl	8002e8c <vehicleInfo_UI>
 8001880:	e005      	b.n	800188e <info_mainPage+0x6a>
		} else {
			vehicleInfo_UI(currentMenu);
 8001882:	4b6e      	ldr	r3, [pc, #440]	; (8001a3c <info_mainPage+0x218>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f001 faff 	bl	8002e8c <vehicleInfo_UI>
		}
		if (forward == true) {
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <info_mainPage+0x224>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d044      	beq.n	8001920 <info_mainPage+0xfc>

			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001896:	4b69      	ldr	r3, [pc, #420]	; (8001a3c <info_mainPage+0x218>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b06      	cmp	r3, #6
 800189e:	d111      	bne.n	80018c4 <info_mainPage+0xa0>
 80018a0:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <info_mainPage+0x21c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10c      	bne.n	80018c4 <info_mainPage+0xa0>
				currentMenu = infobat;
 80018aa:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <info_mainPage+0x218>)
 80018ac:	2204      	movs	r2, #4
 80018ae:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 80018b0:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <info_mainPage+0x21c>)
 80018b2:	2206      	movs	r2, #6
 80018b4:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <info_mainPage+0x220>)
 80018b8:	2205      	movs	r2, #5
 80018ba:	701a      	strb	r2, [r3, #0]
				forward = false;
 80018bc:	4b62      	ldr	r3, [pc, #392]	; (8001a48 <info_mainPage+0x224>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
				return;
 80018c2:	e0b0      	b.n	8001a26 <info_mainPage+0x202>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 80018c4:	4b5d      	ldr	r3, [pc, #372]	; (8001a3c <info_mainPage+0x218>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d111      	bne.n	80018f2 <info_mainPage+0xce>
 80018ce:	4b5c      	ldr	r3, [pc, #368]	; (8001a40 <info_mainPage+0x21c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b06      	cmp	r3, #6
 80018d6:	d10c      	bne.n	80018f2 <info_mainPage+0xce>
				currentMenu = infomot;
 80018d8:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <info_mainPage+0x218>)
 80018da:	2205      	movs	r2, #5
 80018dc:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 80018de:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <info_mainPage+0x21c>)
 80018e0:	2204      	movs	r2, #4
 80018e2:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <info_mainPage+0x220>)
 80018e6:	2206      	movs	r2, #6
 80018e8:	701a      	strb	r2, [r3, #0]
				forward = false;
 80018ea:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <info_mainPage+0x224>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
				return;
 80018f0:	e099      	b.n	8001a26 <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <info_mainPage+0x218>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d111      	bne.n	8001920 <info_mainPage+0xfc>
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <info_mainPage+0x21c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b04      	cmp	r3, #4
 8001904:	d10c      	bne.n	8001920 <info_mainPage+0xfc>
				currentMenu = infoinv;
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <info_mainPage+0x218>)
 8001908:	2206      	movs	r2, #6
 800190a:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <info_mainPage+0x21c>)
 800190e:	2205      	movs	r2, #5
 8001910:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <info_mainPage+0x220>)
 8001914:	2204      	movs	r2, #4
 8001916:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <info_mainPage+0x224>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
				return;
 800191e:	e082      	b.n	8001a26 <info_mainPage+0x202>
			}

		}

		if (backward == true) {
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <info_mainPage+0x228>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d044      	beq.n	80019b2 <info_mainPage+0x18e>
			//currentMenu--;
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001928:	4b44      	ldr	r3, [pc, #272]	; (8001a3c <info_mainPage+0x218>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b04      	cmp	r3, #4
 8001930:	d111      	bne.n	8001956 <info_mainPage+0x132>
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <info_mainPage+0x220>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b05      	cmp	r3, #5
 800193a:	d10c      	bne.n	8001956 <info_mainPage+0x132>
				currentMenu = infoinv;
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <info_mainPage+0x218>)
 800193e:	2206      	movs	r2, #6
 8001940:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <info_mainPage+0x220>)
 8001944:	2204      	movs	r2, #4
 8001946:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <info_mainPage+0x21c>)
 800194a:	2205      	movs	r2, #5
 800194c:	701a      	strb	r2, [r3, #0]
				backward = false;
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <info_mainPage+0x228>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
				return;
 8001954:	e067      	b.n	8001a26 <info_mainPage+0x202>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <info_mainPage+0x218>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b06      	cmp	r3, #6
 800195e:	d111      	bne.n	8001984 <info_mainPage+0x160>
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <info_mainPage+0x220>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b04      	cmp	r3, #4
 8001968:	d10c      	bne.n	8001984 <info_mainPage+0x160>
				currentMenu = infomot;
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <info_mainPage+0x218>)
 800196c:	2205      	movs	r2, #5
 800196e:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <info_mainPage+0x220>)
 8001972:	2206      	movs	r2, #6
 8001974:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <info_mainPage+0x21c>)
 8001978:	2204      	movs	r2, #4
 800197a:	701a      	strb	r2, [r3, #0]
				backward = false;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <info_mainPage+0x228>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
				return;
 8001982:	e050      	b.n	8001a26 <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <info_mainPage+0x218>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b05      	cmp	r3, #5
 800198c:	d111      	bne.n	80019b2 <info_mainPage+0x18e>
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <info_mainPage+0x220>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b06      	cmp	r3, #6
 8001996:	d10c      	bne.n	80019b2 <info_mainPage+0x18e>
				currentMenu = infobat;
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <info_mainPage+0x218>)
 800199a:	2204      	movs	r2, #4
 800199c:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <info_mainPage+0x220>)
 80019a0:	2205      	movs	r2, #5
 80019a2:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <info_mainPage+0x21c>)
 80019a6:	2206      	movs	r2, #6
 80019a8:	701a      	strb	r2, [r3, #0]
				backward = false;
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <info_mainPage+0x228>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
				return;
 80019b0:	e039      	b.n	8001a26 <info_mainPage+0x202>
			}

		}

		if (back == true) {
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <info_mainPage+0x22c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d034      	beq.n	8001a24 <info_mainPage+0x200>
			page_entry = true;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <info_mainPage+0x214>)
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <info_mainPage+0x20c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
			back = false;
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <info_mainPage+0x22c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 80019cc:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <info_mainPage+0x230>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		}
		return;
 80019d2:	e027      	b.n	8001a24 <info_mainPage+0x200>
	}

	if (forward == true) {
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <info_mainPage+0x224>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00f      	beq.n	80019fc <info_mainPage+0x1d8>
		currentPage = settings;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <info_mainPage+0x234>)
 80019de:	2207      	movs	r2, #7
 80019e0:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <info_mainPage+0x214>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
		forward = false;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <info_mainPage+0x224>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
		backward = false;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <info_mainPage+0x228>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <info_mainPage+0x230>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
		return;
 80019fa:	e014      	b.n	8001a26 <info_mainPage+0x202>
	}

	if (backward == true) {
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <info_mainPage+0x228>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d010      	beq.n	8001a26 <info_mainPage+0x202>
		currentPage = after_charge;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <info_mainPage+0x234>)
 8001a06:	2202      	movs	r2, #2
 8001a08:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <info_mainPage+0x214>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <info_mainPage+0x224>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <info_mainPage+0x228>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <info_mainPage+0x230>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
		return;
 8001a22:	e000      	b.n	8001a26 <info_mainPage+0x202>
		return;
 8001a24:	bf00      	nop
	}
}
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200004cd 	.word	0x200004cd
 8001a2c:	200004ce 	.word	0x200004ce
 8001a30:	20000430 	.word	0x20000430
 8001a34:	2000042a 	.word	0x2000042a
 8001a38:	20000013 	.word	0x20000013
 8001a3c:	2000000f 	.word	0x2000000f
 8001a40:	20000010 	.word	0x20000010
 8001a44:	20000011 	.word	0x20000011
 8001a48:	20000428 	.word	0x20000428
 8001a4c:	20000429 	.word	0x20000429
 8001a50:	2000042e 	.word	0x2000042e
 8001a54:	200004a1 	.word	0x200004a1
 8001a58:	2000049a 	.word	0x2000049a

08001a5c <settings_mainPage>:

void settings_mainPage(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

	//selection_UI(front);
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001a60:	4ba2      	ldr	r3, [pc, #648]	; (8001cec <settings_mainPage+0x290>)
 8001a62:	2207      	movs	r2, #7
 8001a64:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001a66:	4ba2      	ldr	r3, [pc, #648]	; (8001cf0 <settings_mainPage+0x294>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]

	if (!(inSettings)) {
 8001a6c:	4ba1      	ldr	r3, [pc, #644]	; (8001cf4 <settings_mainPage+0x298>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00e      	beq.n	8001a98 <settings_mainPage+0x3c>
		selection_UI(front);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f001 fafc 	bl	8003078 <selection_UI>
		if (okay == true) {
 8001a80:	4b9d      	ldr	r3, [pc, #628]	; (8001cf8 <settings_mainPage+0x29c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8160 	beq.w	8001d4a <settings_mainPage+0x2ee>
			inSettings = true;
 8001a8a:	4b9a      	ldr	r3, [pc, #616]	; (8001cf4 <settings_mainPage+0x298>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001a90:	4b99      	ldr	r3, [pc, #612]	; (8001cf8 <settings_mainPage+0x29c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e158      	b.n	8001d4a <settings_mainPage+0x2ee>
		}
	} else {
		if (page_entry == true) {
 8001a98:	4b98      	ldr	r3, [pc, #608]	; (8001cfc <settings_mainPage+0x2a0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00e      	beq.n	8001abe <settings_mainPage+0x62>
			currentMenu = vehicleMenu;
 8001aa0:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <settings_mainPage+0x2a4>)
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	701a      	strb	r2, [r3, #0]
			previousMenuForward = errorsMenu;
 8001aa6:	4b97      	ldr	r3, [pc, #604]	; (8001d04 <settings_mainPage+0x2a8>)
 8001aa8:	220b      	movs	r2, #11
 8001aaa:	701a      	strb	r2, [r3, #0]
			previousMenuBack = systemMenu;
 8001aac:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <settings_mainPage+0x2ac>)
 8001aae:	2209      	movs	r2, #9
 8001ab0:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001ab2:	4b96      	ldr	r3, [pc, #600]	; (8001d0c <settings_mainPage+0x2b0>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001ab8:	4b90      	ldr	r3, [pc, #576]	; (8001cfc <settings_mainPage+0x2a0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
		}
		if(menuCounter>2)
 8001abe:	4b94      	ldr	r3, [pc, #592]	; (8001d10 <settings_mainPage+0x2b4>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d90f      	bls.n	8001ae6 <settings_mainPage+0x8a>
		{
			if (_menuChanged) {
 8001ac6:	4b91      	ldr	r3, [pc, #580]	; (8001d0c <settings_mainPage+0x2b0>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <settings_mainPage+0x84>
				_menuChanged = false;
 8001ace:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <settings_mainPage+0x2b0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
				selection_UI(currentMenu);
 8001ad4:	4b8a      	ldr	r3, [pc, #552]	; (8001d00 <settings_mainPage+0x2a4>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 facc 	bl	8003078 <selection_UI>
			}
			menuCounter = 0;
 8001ae0:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <settings_mainPage+0x2b4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
		}


		if (!(menuAccess)) {
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	; (8001d14 <settings_mainPage+0x2b8>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f083 0301 	eor.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80de 	beq.w	8001cb2 <settings_mainPage+0x256>
			menuCounter++;
 8001af6:	4b86      	ldr	r3, [pc, #536]	; (8001d10 <settings_mainPage+0x2b4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <settings_mainPage+0x2b4>)
 8001b00:	701a      	strb	r2, [r3, #0]
			if (forward == true) {
 8001b02:	4b85      	ldr	r3, [pc, #532]	; (8001d18 <settings_mainPage+0x2bc>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d067      	beq.n	8001bda <settings_mainPage+0x17e>
//				currentMenu--;
//				if (currentMenu <= 7) {
//					currentMenu = errorsMenu;
//				}
				if (currentMenu == errorsMenu && previousMenuBack == vehicleMenu) {
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <settings_mainPage+0x2a4>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b0b      	cmp	r3, #11
 8001b12:	d114      	bne.n	8001b3e <settings_mainPage+0xe2>
 8001b14:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <settings_mainPage+0x2ac>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d10f      	bne.n	8001b3e <settings_mainPage+0xe2>
					currentMenu = bluetoothMenu;
 8001b1e:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <settings_mainPage+0x2a4>)
 8001b20:	220a      	movs	r2, #10
 8001b22:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001b24:	4b77      	ldr	r3, [pc, #476]	; (8001d04 <settings_mainPage+0x2a8>)
 8001b26:	2209      	movs	r2, #9
 8001b28:	701a      	strb	r2, [r3, #0]
					previousMenuBack = errorsMenu;
 8001b2a:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <settings_mainPage+0x2ac>)
 8001b2c:	220b      	movs	r2, #11
 8001b2e:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001b30:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <settings_mainPage+0x2b0>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001b36:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <settings_mainPage+0x2bc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
					return;
 8001b3c:	e130      	b.n	8001da0 <settings_mainPage+0x344>
				}
				if (currentMenu == vehicleMenu && previousMenuBack == systemMenu) {
 8001b3e:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <settings_mainPage+0x2a4>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d114      	bne.n	8001b72 <settings_mainPage+0x116>
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <settings_mainPage+0x2ac>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d10f      	bne.n	8001b72 <settings_mainPage+0x116>
					currentMenu = errorsMenu;
 8001b52:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <settings_mainPage+0x2a4>)
 8001b54:	220b      	movs	r2, #11
 8001b56:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <settings_mainPage+0x2a8>)
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	701a      	strb	r2, [r3, #0]
					previousMenuBack = vehicleMenu;
 8001b5e:	4b6a      	ldr	r3, [pc, #424]	; (8001d08 <settings_mainPage+0x2ac>)
 8001b60:	2208      	movs	r2, #8
 8001b62:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <settings_mainPage+0x2b0>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001b6a:	4b6b      	ldr	r3, [pc, #428]	; (8001d18 <settings_mainPage+0x2bc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
					return;
 8001b70:	e116      	b.n	8001da0 <settings_mainPage+0x344>
				}
				if (currentMenu == systemMenu && previousMenuBack == bluetoothMenu) {
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <settings_mainPage+0x2a4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d114      	bne.n	8001ba6 <settings_mainPage+0x14a>
 8001b7c:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <settings_mainPage+0x2ac>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d10f      	bne.n	8001ba6 <settings_mainPage+0x14a>
					currentMenu = vehicleMenu;
 8001b86:	4b5e      	ldr	r3, [pc, #376]	; (8001d00 <settings_mainPage+0x2a4>)
 8001b88:	2208      	movs	r2, #8
 8001b8a:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001b8c:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <settings_mainPage+0x2a8>)
 8001b8e:	220b      	movs	r2, #11
 8001b90:	701a      	strb	r2, [r3, #0]
					previousMenuBack = systemMenu;
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <settings_mainPage+0x2ac>)
 8001b94:	2209      	movs	r2, #9
 8001b96:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001b98:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <settings_mainPage+0x2b0>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <settings_mainPage+0x2bc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
					return;
 8001ba4:	e0fc      	b.n	8001da0 <settings_mainPage+0x344>
				}
				if (currentMenu == bluetoothMenu && previousMenuBack == errorsMenu) {
 8001ba6:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <settings_mainPage+0x2a4>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b0a      	cmp	r3, #10
 8001bae:	d114      	bne.n	8001bda <settings_mainPage+0x17e>
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <settings_mainPage+0x2ac>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b0b      	cmp	r3, #11
 8001bb8:	d10f      	bne.n	8001bda <settings_mainPage+0x17e>
					currentMenu = systemMenu;
 8001bba:	4b51      	ldr	r3, [pc, #324]	; (8001d00 <settings_mainPage+0x2a4>)
 8001bbc:	2209      	movs	r2, #9
 8001bbe:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001bc0:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <settings_mainPage+0x2a8>)
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	701a      	strb	r2, [r3, #0]
					previousMenuBack = bluetoothMenu;
 8001bc6:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <settings_mainPage+0x2ac>)
 8001bc8:	220a      	movs	r2, #10
 8001bca:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	; (8001d0c <settings_mainPage+0x2b0>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001bd2:	4b51      	ldr	r3, [pc, #324]	; (8001d18 <settings_mainPage+0x2bc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
					return;
 8001bd8:	e0e2      	b.n	8001da0 <settings_mainPage+0x344>
				}
			}

			if (backward == true) {
 8001bda:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <settings_mainPage+0x2c0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d067      	beq.n	8001cb2 <settings_mainPage+0x256>
//				currentMenu++;
//				if (currentMenu >= 12) {
//					currentMenu = vehicleMenu;
//				}
				if (currentMenu == vehicleMenu && previousMenuForward == errorsMenu) {
 8001be2:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <settings_mainPage+0x2a4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d114      	bne.n	8001c16 <settings_mainPage+0x1ba>
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <settings_mainPage+0x2a8>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b0b      	cmp	r3, #11
 8001bf4:	d10f      	bne.n	8001c16 <settings_mainPage+0x1ba>
					currentMenu = systemMenu;
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <settings_mainPage+0x2a4>)
 8001bf8:	2209      	movs	r2, #9
 8001bfa:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001bfc:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <settings_mainPage+0x2a8>)
 8001bfe:	2208      	movs	r2, #8
 8001c00:	701a      	strb	r2, [r3, #0]

					previousMenuBack = bluetoothMenu;
 8001c02:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <settings_mainPage+0x2ac>)
 8001c04:	220a      	movs	r2, #10
 8001c06:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001c08:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <settings_mainPage+0x2b0>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001c0e:	4b43      	ldr	r3, [pc, #268]	; (8001d1c <settings_mainPage+0x2c0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
					return;
 8001c14:	e0c4      	b.n	8001da0 <settings_mainPage+0x344>
				}
				if (currentMenu == errorsMenu && previousMenuForward == bluetoothMenu) {
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <settings_mainPage+0x2a4>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b0b      	cmp	r3, #11
 8001c1e:	d114      	bne.n	8001c4a <settings_mainPage+0x1ee>
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <settings_mainPage+0x2a8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d10f      	bne.n	8001c4a <settings_mainPage+0x1ee>
					currentMenu = vehicleMenu;
 8001c2a:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <settings_mainPage+0x2a4>)
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <settings_mainPage+0x2a8>)
 8001c32:	220b      	movs	r2, #11
 8001c34:	701a      	strb	r2, [r3, #0]

					previousMenuBack = systemMenu;
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <settings_mainPage+0x2ac>)
 8001c38:	2209      	movs	r2, #9
 8001c3a:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <settings_mainPage+0x2b0>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <settings_mainPage+0x2c0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
					return;
 8001c48:	e0aa      	b.n	8001da0 <settings_mainPage+0x344>
				}
				if (currentMenu == bluetoothMenu && previousMenuForward == systemMenu) {
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <settings_mainPage+0x2a4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	d114      	bne.n	8001c7e <settings_mainPage+0x222>
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <settings_mainPage+0x2a8>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b09      	cmp	r3, #9
 8001c5c:	d10f      	bne.n	8001c7e <settings_mainPage+0x222>
					currentMenu = errorsMenu;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <settings_mainPage+0x2a4>)
 8001c60:	220b      	movs	r2, #11
 8001c62:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <settings_mainPage+0x2a8>)
 8001c66:	220a      	movs	r2, #10
 8001c68:	701a      	strb	r2, [r3, #0]

					previousMenuBack = vehicleMenu;
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <settings_mainPage+0x2ac>)
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001c70:	4b26      	ldr	r3, [pc, #152]	; (8001d0c <settings_mainPage+0x2b0>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <settings_mainPage+0x2c0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
					return;
 8001c7c:	e090      	b.n	8001da0 <settings_mainPage+0x344>
				}
				if (currentMenu == systemMenu && previousMenuForward == vehicleMenu) {
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <settings_mainPage+0x2a4>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	d114      	bne.n	8001cb2 <settings_mainPage+0x256>
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <settings_mainPage+0x2a8>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d10f      	bne.n	8001cb2 <settings_mainPage+0x256>
					currentMenu = bluetoothMenu;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <settings_mainPage+0x2a4>)
 8001c94:	220a      	movs	r2, #10
 8001c96:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <settings_mainPage+0x2a8>)
 8001c9a:	2209      	movs	r2, #9
 8001c9c:	701a      	strb	r2, [r3, #0]

					previousMenuBack = errorsMenu;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <settings_mainPage+0x2ac>)
 8001ca0:	220b      	movs	r2, #11
 8001ca2:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <settings_mainPage+0x2b0>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <settings_mainPage+0x2c0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
					return;
 8001cb0:	e076      	b.n	8001da0 <settings_mainPage+0x344>
				}

			}

		}
		switch (currentMenu) {
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <settings_mainPage+0x2a4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3b08      	subs	r3, #8
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d830      	bhi.n	8001d20 <settings_mainPage+0x2c4>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <settings_mainPage+0x268>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001cdb 	.word	0x08001cdb
 8001ccc:	08001ce1 	.word	0x08001ce1
 8001cd0:	08001ce7 	.word	0x08001ce7
		case vehicleMenu:
			vehicle_page();
 8001cd4:	f000 f876 	bl	8001dc4 <vehicle_page>
			break;
 8001cd8:	e023      	b.n	8001d22 <settings_mainPage+0x2c6>
		case systemMenu:
			system_page();
 8001cda:	f000 f8bf 	bl	8001e5c <system_page>
			break;
 8001cde:	e020      	b.n	8001d22 <settings_mainPage+0x2c6>
		case bluetoothMenu:
			bluetooth_page();
 8001ce0:	f000 f996 	bl	8002010 <bluetooth_page>
			break;
 8001ce4:	e01d      	b.n	8001d22 <settings_mainPage+0x2c6>
		case errorsMenu:
			errors_page();
 8001ce6:	f000 f9df 	bl	80020a8 <errors_page>
			break;
 8001cea:	e01a      	b.n	8001d22 <settings_mainPage+0x2c6>
 8001cec:	200004cd 	.word	0x200004cd
 8001cf0:	200004ce 	.word	0x200004ce
 8001cf4:	2000042f 	.word	0x2000042f
 8001cf8:	2000042a 	.word	0x2000042a
 8001cfc:	20000013 	.word	0x20000013
 8001d00:	2000000f 	.word	0x2000000f
 8001d04:	20000011 	.word	0x20000011
 8001d08:	20000010 	.word	0x20000010
 8001d0c:	200004c8 	.word	0x200004c8
 8001d10:	200004c9 	.word	0x200004c9
 8001d14:	200004a4 	.word	0x200004a4
 8001d18:	20000428 	.word	0x20000428
 8001d1c:	20000429 	.word	0x20000429
		default:
			break;
 8001d20:	bf00      	nop
		}

		if (back == true) {
 8001d22:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <settings_mainPage+0x348>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d039      	beq.n	8001d9e <settings_mainPage+0x342>
			page_entry = true;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <settings_mainPage+0x34c>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
			inSettings = false;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <settings_mainPage+0x350>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
			selection_UI(front);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f001 f99e 	bl	8003078 <selection_UI>
			_menupage = 0;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <settings_mainPage+0x354>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
			back = false;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <settings_mainPage+0x348>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001d48:	e029      	b.n	8001d9e <settings_mainPage+0x342>
	}

	if (forward == true) {
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <settings_mainPage+0x358>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d011      	beq.n	8001d76 <settings_mainPage+0x31a>
		currentPage = front;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <settings_mainPage+0x35c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <settings_mainPage+0x34c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <settings_mainPage+0x358>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <settings_mainPage+0x354>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001d6a:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <settings_mainPage+0x360>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <settings_mainPage+0x364>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
	}

	if (backward == true) {
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <settings_mainPage+0x364>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <settings_mainPage+0x344>
		currentPage = info;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <settings_mainPage+0x35c>)
 8001d80:	2203      	movs	r2, #3
 8001d82:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <settings_mainPage+0x34c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <settings_mainPage+0x358>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <settings_mainPage+0x354>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <settings_mainPage+0x364>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	e000      	b.n	8001da0 <settings_mainPage+0x344>
		return;
 8001d9e:	bf00      	nop
	}

}
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000042e 	.word	0x2000042e
 8001da8:	20000013 	.word	0x20000013
 8001dac:	2000042f 	.word	0x2000042f
 8001db0:	200004a1 	.word	0x200004a1
 8001db4:	20000428 	.word	0x20000428
 8001db8:	2000049a 	.word	0x2000049a
 8001dbc:	200004ce 	.word	0x200004ce
 8001dc0:	20000429 	.word	0x20000429

08001dc4 <vehicle_page>:

void vehicle_page(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <vehicle_page+0x7c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f083 0301 	eor.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <vehicle_page+0x34>
		if (okay == true) {
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <vehicle_page+0x80>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d02e      	beq.n	8001e3c <vehicle_page+0x78>
			menuAccess = true;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <vehicle_page+0x84>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <vehicle_page+0x7c>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <vehicle_page+0x88>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <vehicle_page+0x80>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8001df6:	e021      	b.n	8001e3c <vehicle_page+0x78>
		if (subMenuCounter>2) {
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <vehicle_page+0x8c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d909      	bls.n	8001e14 <vehicle_page+0x50>
			if (inTheMenu) {
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <vehicle_page+0x88>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <vehicle_page+0x4a>
				inTheMenu = false;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <vehicle_page+0x88>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <vehicle_page+0x8c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
		settings_UI(vehicleMenu,10);
 8001e14:	210a      	movs	r1, #10
 8001e16:	2008      	movs	r0, #8
 8001e18:	f001 f8b2 	bl	8002f80 <settings_UI>
		if (back == true) {
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <vehicle_page+0x90>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00b      	beq.n	8001e3c <vehicle_page+0x78>
			menuAccess = false;
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <vehicle_page+0x84>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <vehicle_page+0x7c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <vehicle_page+0x94>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
			back = false;
 8001e36:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <vehicle_page+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200004a5 	.word	0x200004a5
 8001e44:	2000042a 	.word	0x2000042a
 8001e48:	200004a4 	.word	0x200004a4
 8001e4c:	200004a9 	.word	0x200004a9
 8001e50:	200004ca 	.word	0x200004ca
 8001e54:	2000042e 	.word	0x2000042e
 8001e58:	200004c8 	.word	0x200004c8

08001e5c <system_page>:
void system_page(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 8001e60:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <system_page+0x180>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d01a      	beq.n	8001ea4 <system_page+0x48>
		if (okay == true) {
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <system_page+0x184>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a0 	beq.w	8001fb8 <system_page+0x15c>
			menuAccess = true;
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <system_page+0x188>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 8001e7e:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <system_page+0x180>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8001e84:	4b58      	ldr	r3, [pc, #352]	; (8001fe8 <system_page+0x18c>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001e8a:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <system_page+0x184>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
			currentSubMenu = 0;
 8001e90:	4b56      	ldr	r3, [pc, #344]	; (8001fec <system_page+0x190>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
			previousSubMenuBack = 1;
 8001e96:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <system_page+0x194>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
			previousSubMenuForward = 1;
 8001e9c:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <system_page+0x198>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e089      	b.n	8001fb8 <system_page+0x15c>
		}
	} else {
		if (subMenuCounter>2) {
 8001ea4:	4b54      	ldr	r3, [pc, #336]	; (8001ff8 <system_page+0x19c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d909      	bls.n	8001ec0 <system_page+0x64>
			if (inTheMenu) {
 8001eac:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <system_page+0x18c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <system_page+0x5e>
				inTheMenu = false;
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <system_page+0x18c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				//settings_UI(systemMenu);
			}
			subMenuCounter = 0;
 8001eba:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <system_page+0x19c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(systemMenu,currentSubMenu);
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <system_page+0x190>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	2009      	movs	r0, #9
 8001eca:	f001 f859 	bl	8002f80 <settings_UI>
		//if (!inTimeSettings) {
			if (forward == true) {
 8001ece:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <system_page+0x1a0>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d02d      	beq.n	8001f32 <system_page+0xd6>
				if (currentSubMenu == 0 && previousSubMenuBack == 1) {
 8001ed6:	4b45      	ldr	r3, [pc, #276]	; (8001fec <system_page+0x190>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <system_page+0xa8>
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <system_page+0x194>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10c      	bne.n	8001f04 <system_page+0xa8>
					currentSubMenu = 1;
 8001eea:	4b40      	ldr	r3, [pc, #256]	; (8001fec <system_page+0x190>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8001ef0:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <system_page+0x198>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 0;
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <system_page+0x194>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <system_page+0x1a0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
					return;
 8001f02:	e069      	b.n	8001fd8 <system_page+0x17c>
				}
				if (currentSubMenu == 1 && previousSubMenuBack == 0) {
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <system_page+0x190>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d111      	bne.n	8001f32 <system_page+0xd6>
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <system_page+0x194>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10c      	bne.n	8001f32 <system_page+0xd6>
					currentSubMenu = 0;
 8001f18:	4b34      	ldr	r3, [pc, #208]	; (8001fec <system_page+0x190>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <system_page+0x198>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 1;
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <system_page+0x194>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <system_page+0x1a0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
					return;
 8001f30:	e052      	b.n	8001fd8 <system_page+0x17c>
				}
			}

			if (backward == true) {
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <system_page+0x1a4>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d02d      	beq.n	8001f96 <system_page+0x13a>
				if (currentSubMenu == 0 && previousSubMenuForward == 1) {
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <system_page+0x190>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d111      	bne.n	8001f68 <system_page+0x10c>
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <system_page+0x198>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10c      	bne.n	8001f68 <system_page+0x10c>
					currentSubMenu = 1;
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <system_page+0x190>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8001f54:	4b27      	ldr	r3, [pc, #156]	; (8001ff4 <system_page+0x198>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 0;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <system_page+0x194>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <system_page+0x1a4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
					return;
 8001f66:	e037      	b.n	8001fd8 <system_page+0x17c>
				}
				if (currentSubMenu == 1 && previousSubMenuForward == 0) {
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <system_page+0x190>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d111      	bne.n	8001f96 <system_page+0x13a>
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <system_page+0x198>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10c      	bne.n	8001f96 <system_page+0x13a>
					currentSubMenu = 0;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <system_page+0x190>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <system_page+0x198>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 1;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <system_page+0x194>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <system_page+0x1a4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
					return;
 8001f94:	e020      	b.n	8001fd8 <system_page+0x17c>
//				timerSetValue = 0;
//			}
//
//		}

		if (!(inSystemSubMenu)) {
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <system_page+0x1a8>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <system_page+0x15c>
			if (okay == true) {
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <system_page+0x184>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <system_page+0x15c>
				inSystemSubMenu = true;
 8001fac:	4b15      	ldr	r3, [pc, #84]	; (8002004 <system_page+0x1a8>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
				okay = false;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <system_page+0x184>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
		} else {

		}
	}

	if (back == true) {
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <system_page+0x1ac>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <system_page+0x17c>
		menuAccess = false;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <system_page+0x188>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <system_page+0x180>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
		_menuChanged = true;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <system_page+0x1b0>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
		back = false;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <system_page+0x1ac>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]

	}
}
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200004a6 	.word	0x200004a6
 8001fe0:	2000042a 	.word	0x2000042a
 8001fe4:	200004a4 	.word	0x200004a4
 8001fe8:	200004a9 	.word	0x200004a9
 8001fec:	2000049e 	.word	0x2000049e
 8001ff0:	2000049f 	.word	0x2000049f
 8001ff4:	200004a0 	.word	0x200004a0
 8001ff8:	200004ca 	.word	0x200004ca
 8001ffc:	20000428 	.word	0x20000428
 8002000:	20000429 	.word	0x20000429
 8002004:	200004cb 	.word	0x200004cb
 8002008:	2000042e 	.word	0x2000042e
 800200c:	200004c8 	.word	0x200004c8

08002010 <bluetooth_page>:

void bluetooth_page(void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <bluetooth_page+0x7c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <bluetooth_page+0x34>
		if (okay == true) {
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <bluetooth_page+0x80>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02e      	beq.n	8002088 <bluetooth_page+0x78>
			menuAccess = true;
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <bluetooth_page+0x84>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <bluetooth_page+0x7c>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <bluetooth_page+0x88>)
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
			okay = false;
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <bluetooth_page+0x80>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8002042:	e021      	b.n	8002088 <bluetooth_page+0x78>
		if (subMenuCounter>2) {
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <bluetooth_page+0x8c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d909      	bls.n	8002060 <bluetooth_page+0x50>
			if (inTheMenu) {
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <bluetooth_page+0x88>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <bluetooth_page+0x4a>
				inTheMenu = false;
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <bluetooth_page+0x88>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <bluetooth_page+0x8c>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
		settings_UI(bluetoothMenu,10);
 8002060:	210a      	movs	r1, #10
 8002062:	200a      	movs	r0, #10
 8002064:	f000 ff8c 	bl	8002f80 <settings_UI>
		if (back == true) {
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <bluetooth_page+0x90>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00b      	beq.n	8002088 <bluetooth_page+0x78>
			menuAccess = false;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <bluetooth_page+0x84>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <bluetooth_page+0x7c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <bluetooth_page+0x94>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
			back = false;
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <bluetooth_page+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200004a7 	.word	0x200004a7
 8002090:	2000042a 	.word	0x2000042a
 8002094:	200004a4 	.word	0x200004a4
 8002098:	200004a9 	.word	0x200004a9
 800209c:	200004ca 	.word	0x200004ca
 80020a0:	2000042e 	.word	0x2000042e
 80020a4:	200004c8 	.word	0x200004c8

080020a8 <errors_page>:
void errors_page(void) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <errors_page+0x7c>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <errors_page+0x34>
		if (okay == true) {
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <errors_page+0x80>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d02e      	beq.n	8002120 <errors_page+0x78>
			menuAccess = true;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <errors_page+0x84>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <errors_page+0x7c>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <errors_page+0x88>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
			okay = false;
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <errors_page+0x80>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 80020da:	e021      	b.n	8002120 <errors_page+0x78>
		if (subMenuCounter>2) {
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <errors_page+0x8c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d909      	bls.n	80020f8 <errors_page+0x50>
			if (inTheMenu) {
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <errors_page+0x88>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <errors_page+0x4a>
				inTheMenu = false;
 80020ec:	4b10      	ldr	r3, [pc, #64]	; (8002130 <errors_page+0x88>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <errors_page+0x8c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
		settings_UI(errorsMenu,10);
 80020f8:	210a      	movs	r1, #10
 80020fa:	200b      	movs	r0, #11
 80020fc:	f000 ff40 	bl	8002f80 <settings_UI>
		if (back == true) {
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <errors_page+0x90>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <errors_page+0x78>
			menuAccess = false;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <errors_page+0x84>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <errors_page+0x7c>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <errors_page+0x94>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
			back = false;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <errors_page+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200004a8 	.word	0x200004a8
 8002128:	2000042a 	.word	0x2000042a
 800212c:	200004a4 	.word	0x200004a4
 8002130:	200004a9 	.word	0x200004a9
 8002134:	200004ca 	.word	0x200004ca
 8002138:	2000042e 	.word	0x2000042e
 800213c:	200004c8 	.word	0x200004c8

08002140 <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <mainStateMachine+0x44>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b03      	cmp	r3, #3
 800214c:	d816      	bhi.n	800217c <mainStateMachine+0x3c>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <mainStateMachine+0x14>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	0800216b 	.word	0x0800216b
 800215c:	08002171 	.word	0x08002171
 8002160:	08002177 	.word	0x08002177
	case startingup_state:
		startUpState();
 8002164:	f000 f810 	bl	8002188 <startUpState>
		break;
 8002168:	e009      	b.n	800217e <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 800216a:	f000 f8eb 	bl	8002344 <driveState>
		break;
 800216e:	e006      	b.n	800217e <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 8002170:	f000 f97e 	bl	8002470 <chargeState>
		break;
 8002174:	e003      	b.n	800217e <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 8002176:	f000 f9f9 	bl	800256c <errorState>
		break;
 800217a:	e000      	b.n	800217e <mainStateMachine+0x3e>
	default:
		break;
 800217c:	bf00      	nop
	}
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000049c 	.word	0x2000049c

08002188 <startUpState>:

void startUpState(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0

	dataCounter++;
 800218c:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <startUpState+0x140>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <startUpState+0x140>)
 8002196:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 8002198:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <startUpState+0x144>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <startUpState+0x3e>
		state_entry = false;
 80021a0:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <startUpState+0x144>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <startUpState+0x148>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 80021ac:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <startUpState+0x14c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <startUpState+0x150>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <startUpState+0x154>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <startUpState+0x3e>
			_errorSetIcon = false;
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <startUpState+0x158>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
		}
	}

	//	fillandTransmit();
	if (dataCounter > 2) {
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <startUpState+0x140>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d905      	bls.n	80021da <startUpState+0x52>
		_oneTimeData = true;
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <startUpState+0x15c>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <startUpState+0x140>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
	}

	//	fillandTransmitCommon();
	_realTimeData = true;
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <startUpState+0x160>)
 80021dc:	2201      	movs	r2, #1
 80021de:	701a      	strb	r2, [r3, #0]

	if (err_error != 0) {
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <startUpState+0x164>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d016      	beq.n	8002216 <startUpState+0x8e>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 80021e8:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <startUpState+0x154>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d167      	bne.n	80022c0 <startUpState+0x138>
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <startUpState+0x168>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <startUpState+0x16c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d061      	beq.n	80022c0 <startUpState+0x138>
			currentStateSM = Error_state;
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <startUpState+0x170>)
 80021fe:	2203      	movs	r2, #3
 8002200:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <startUpState+0x174>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <startUpState+0x144>)
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <startUpState+0x178>)
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 8002214:	e054      	b.n	80022c0 <startUpState+0x138>
	}

	if (currentstate == 4) {
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <startUpState+0x17c>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d109      	bne.n	8002232 <startUpState+0xaa>
		currentStateSM = charging_state;
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <startUpState+0x170>)
 8002220:	2202      	movs	r2, #2
 8002222:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 8002224:	4b35      	ldr	r3, [pc, #212]	; (80022fc <startUpState+0x174>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <startUpState+0x144>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
		return;
 8002230:	e049      	b.n	80022c6 <startUpState+0x13e>
	}
	if (accessory == 1) {
 8002232:	4b35      	ldr	r3, [pc, #212]	; (8002308 <startUpState+0x180>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d112      	bne.n	8002260 <startUpState+0xd8>
		navigation(); //enable navigation in Accessory Mode
 800223a:	f7ff f987 	bl	800154c <navigation>
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 800223e:	4b27      	ldr	r3, [pc, #156]	; (80022dc <startUpState+0x154>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d025      	beq.n	8002292 <startUpState+0x10a>
			entry = true;
 8002246:	4b31      	ldr	r3, [pc, #196]	; (800230c <startUpState+0x184>)
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
			startup = true;
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <startUpState+0x188>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
			checklit = true;
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <startUpState+0x18c>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 8002258:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <startUpState+0x190>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e018      	b.n	8002292 <startUpState+0x10a>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 8002260:	4b2e      	ldr	r3, [pc, #184]	; (800231c <startUpState+0x194>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <startUpState+0x198>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 800226c:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <startUpState+0x19c>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <startUpState+0x1a0>)
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <startUpState+0x1a4>)
 8002278:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <startUpState+0x148>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]

		inInfoBat = false;
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <startUpState+0x1a8>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
		inSettings = false;
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <startUpState+0x1ac>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]

		_trasmitGlobal = Disengage_Page;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <startUpState+0x150>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
	}

	//StartingUp Transmit flag
	//Fill and Transmit
	//startingUp();
	_startingUp = true;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <startUpState+0x190>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]

	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <startUpState+0x1b0>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d111      	bne.n	80022c4 <startUpState+0x13c>
		return;
	}

	currentStateSM = driving_state;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <startUpState+0x170>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <startUpState+0x174>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
	_modeSelection = true;
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <startUpState+0x1b4>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
	_modeChanged = true;
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <startUpState+0x1b8>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
	state_entry = true;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <startUpState+0x144>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e002      	b.n	80022c6 <startUpState+0x13e>
		return; //Will exit from the function
 80022c0:	bf00      	nop
 80022c2:	e000      	b.n	80022c6 <startUpState+0x13e>
		return;
 80022c4:	bf00      	nop
}
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000561 	.word	0x20000561
 80022cc:	20000012 	.word	0x20000012
 80022d0:	2000049a 	.word	0x2000049a
 80022d4:	2000042a 	.word	0x2000042a
 80022d8:	200004ce 	.word	0x200004ce
 80022dc:	20000000 	.word	0x20000000
 80022e0:	200004c0 	.word	0x200004c0
 80022e4:	200004bb 	.word	0x200004bb
 80022e8:	200004b9 	.word	0x200004b9
 80022ec:	2000048f 	.word	0x2000048f
 80022f0:	20000004 	.word	0x20000004
 80022f4:	20000494 	.word	0x20000494
 80022f8:	2000049c 	.word	0x2000049c
 80022fc:	2000049d 	.word	0x2000049d
 8002300:	200004c1 	.word	0x200004c1
 8002304:	20000484 	.word	0x20000484
 8002308:	20000486 	.word	0x20000486
 800230c:	2000000d 	.word	0x2000000d
 8002310:	2000000c 	.word	0x2000000c
 8002314:	2000000e 	.word	0x2000000e
 8002318:	200004b7 	.word	0x200004b7
 800231c:	20000428 	.word	0x20000428
 8002320:	20000429 	.word	0x20000429
 8002324:	200004b8 	.word	0x200004b8
 8002328:	2000048c 	.word	0x2000048c
 800232c:	200004a2 	.word	0x200004a2
 8002330:	20000430 	.word	0x20000430
 8002334:	2000042f 	.word	0x2000042f
 8002338:	20000487 	.word	0x20000487
 800233c:	200004bc 	.word	0x200004bc
 8002340:	200004c5 	.word	0x200004c5

08002344 <driveState>:

void driveState(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	if (state_entry) {
 8002348:	4b34      	ldr	r3, [pc, #208]	; (800241c <driveState+0xd8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d018      	beq.n	8002382 <driveState+0x3e>
		state_entry = false;
 8002350:	4b32      	ldr	r3, [pc, #200]	; (800241c <driveState+0xd8>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 8002356:	4b32      	ldr	r3, [pc, #200]	; (8002420 <driveState+0xdc>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 800235c:	4b31      	ldr	r3, [pc, #196]	; (8002424 <driveState+0xe0>)
 800235e:	2200      	movs	r2, #0
 8002360:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002362:	4b31      	ldr	r3, [pc, #196]	; (8002428 <driveState+0xe4>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
		_realTimeData = true;
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <driveState+0xe8>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
		///////////////////////
		_oneTimeData = true;
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <driveState+0xec>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
		//////////////////////
		if (err_or_not != 0) {
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <driveState+0xf0>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <driveState+0x3e>
			_errorSetIcon = false;
 800237c:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <driveState+0xf4>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <driveState+0xf0>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d112      	bne.n	80023b0 <driveState+0x6c>
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <driveState+0xf8>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <driveState+0xfc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d00c      	beq.n	80023b0 <driveState+0x6c>
		currentStateSM = Error_state;
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <driveState+0x100>)
 8002398:	2203      	movs	r2, #3
 800239a:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <driveState+0x104>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <driveState+0xd8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <driveState+0x108>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
		return;
 80023ae:	e034      	b.n	800241a <driveState+0xd6>
	}

	if (accessory == 1) {
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <driveState+0x10c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d109      	bne.n	80023cc <driveState+0x88>
		currentStateSM = startingup_state;
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <driveState+0x100>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 80023be:	4b22      	ldr	r3, [pc, #136]	; (8002448 <driveState+0x104>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <driveState+0xd8>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
		return;
 80023ca:	e026      	b.n	800241a <driveState+0xd6>
	}

	if (currentstate == 2) {
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <driveState+0x110>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d101      	bne.n	80023d8 <driveState+0x94>
		evcuMode();
 80023d4:	f002 f86c 	bl	80044b0 <evcuMode>

	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <driveState+0x114>)
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <driveState+0x110>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d006      	beq.n	80023f2 <driveState+0xae>
		_gearChanged = true;
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <driveState+0x118>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <driveState+0x110>)
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <driveState+0x114>)
 80023f0:	701a      	strb	r2, [r3, #0]
	}

	_modeSelection = true;
 80023f2:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <driveState+0x11c>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]

	//fillandTransmitCommon();
	_realTimeData = true;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <driveState+0xe8>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
	_oneTimeData = true;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <driveState+0xec>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
	_driverPageSet = true;
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <driveState+0x120>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
//	if (_modeChanged) {
//		modeSelection(currentMode);	//This should be called using a flag _modeSelection
//	}
	if (rtn) { //rtn True when there is a error
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <driveState+0x124>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <driveState+0xd6>
		_allowNavigation = true;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <driveState+0x128>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
		return;
 8002418:	bf00      	nop
	}
}
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000012 	.word	0x20000012
 8002420:	2000049a 	.word	0x2000049a
 8002424:	20000472 	.word	0x20000472
 8002428:	200004ce 	.word	0x200004ce
 800242c:	200004b9 	.word	0x200004b9
 8002430:	200004bb 	.word	0x200004bb
 8002434:	20000000 	.word	0x20000000
 8002438:	200004c0 	.word	0x200004c0
 800243c:	20000004 	.word	0x20000004
 8002440:	20000494 	.word	0x20000494
 8002444:	2000049c 	.word	0x2000049c
 8002448:	2000049d 	.word	0x2000049d
 800244c:	200004c1 	.word	0x200004c1
 8002450:	20000486 	.word	0x20000486
 8002454:	20000484 	.word	0x20000484
 8002458:	20000485 	.word	0x20000485
 800245c:	200004c7 	.word	0x200004c7
 8002460:	200004bc 	.word	0x200004bc
 8002464:	200004ba 	.word	0x200004ba
 8002468:	20000499 	.word	0x20000499
 800246c:	200004bd 	.word	0x200004bd

08002470 <chargeState>:

void chargeState(void) {
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	if (state_entry) {
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <chargeState+0xc0>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00f      	beq.n	800249c <chargeState+0x2c>
		state_entry = false;
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <chargeState+0xc0>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002482:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <chargeState+0xc4>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <chargeState+0xc8>)
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <chargeState+0xcc>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <chargeState+0x2c>
			_errorSetIcon = false;
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <chargeState+0xd0>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <chargeState+0xd4>)
 800249e:	2201      	movs	r2, #1
 80024a0:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <chargeState+0xd8>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <chargeState+0xdc>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <chargeState+0xe0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d009      	beq.n	80024ca <chargeState+0x5a>
		currentStateSM = startingup_state;
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <chargeState+0xe4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <chargeState+0xe8>)
 80024be:	2202      	movs	r2, #2
 80024c0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <chargeState+0xc0>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
		return;
 80024c8:	e02e      	b.n	8002528 <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <chargeState+0xcc>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d113      	bne.n	80024fa <chargeState+0x8a>
		currentStateSM = Error_state;
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <chargeState+0xe4>)
 80024d4:	2203      	movs	r2, #3
 80024d6:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <chargeState+0xe8>)
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <chargeState+0xc0>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <chargeState+0xec>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <chargeState+0xcc>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d019      	beq.n	8002526 <chargeState+0xb6>
			_errorSetIcon = false;
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <chargeState+0xd0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
		}
		return;
 80024f8:	e015      	b.n	8002526 <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <chargeState+0xf0>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d106      	bne.n	8002510 <chargeState+0xa0>
		_chargeComplete = true;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <chargeState+0xf4>)
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002508:	4b17      	ldr	r3, [pc, #92]	; (8002568 <chargeState+0xf8>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
		return;
 800250e:	e00b      	b.n	8002528 <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <chargeState+0xf8>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <chargeState+0xf8>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e000      	b.n	8002528 <chargeState+0xb8>
		return;
 8002526:	bf00      	nop
	}

}
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000012 	.word	0x20000012
 8002534:	200004ce 	.word	0x200004ce
 8002538:	200004b7 	.word	0x200004b7
 800253c:	20000000 	.word	0x20000000
 8002540:	200004c0 	.word	0x200004c0
 8002544:	200004c2 	.word	0x200004c2
 8002548:	200004b9 	.word	0x200004b9
 800254c:	200004bb 	.word	0x200004bb
 8002550:	20000484 	.word	0x20000484
 8002554:	2000049c 	.word	0x2000049c
 8002558:	2000049d 	.word	0x2000049d
 800255c:	200004c1 	.word	0x200004c1
 8002560:	200004b4 	.word	0x200004b4
 8002564:	200004c4 	.word	0x200004c4
 8002568:	200004c3 	.word	0x200004c3

0800256c <errorState>:

void errorState(void) {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

	if (state_entry) {
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <errorState+0x194>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <errorState+0x44>
		state_entry = false;
 8002578:	4b61      	ldr	r3, [pc, #388]	; (8002700 <errorState+0x194>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 800257e:	4b61      	ldr	r3, [pc, #388]	; (8002704 <errorState+0x198>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
		error_check = true;
 8002584:	4b60      	ldr	r3, [pc, #384]	; (8002708 <errorState+0x19c>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 800258a:	4b60      	ldr	r3, [pc, #384]	; (800270c <errorState+0x1a0>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
		rtn = true;
 8002590:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <errorState+0x1a4>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <errorState+0x1a8>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 800259c:	4b5e      	ldr	r3, [pc, #376]	; (8002718 <errorState+0x1ac>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80025a2:	4b5e      	ldr	r3, [pc, #376]	; (800271c <errorState+0x1b0>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <errorState+0x44>
			_errorSetIcon = false;
 80025aa:	4b5d      	ldr	r3, [pc, #372]	; (8002720 <errorState+0x1b4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 80025b0:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <errorState+0x1b8>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]

	setError();
 80025b6:	f7fe fadb 	bl	8000b70 <setError>

	_errorSetPopup = true; //Transmit pop-up
 80025ba:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <errorState+0x1bc>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 80025c0:	4b57      	ldr	r3, [pc, #348]	; (8002720 <errorState+0x1b4>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 80025c6:	4b59      	ldr	r3, [pc, #356]	; (800272c <errorState+0x1c0>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <errorState+0x1c4>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <errorState+0x74>
		_errorSetPopup = false;
 80025d4:	4b54      	ldr	r3, [pc, #336]	; (8002728 <errorState+0x1bc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 80025da:	4b54      	ldr	r3, [pc, #336]	; (800272c <errorState+0x1c0>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 80025e0:	f001 ff66 	bl	80044b0 <evcuMode>

	if (previousStateSM == driving_state) {
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <errorState+0x1c8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d123      	bne.n	8002636 <errorState+0xca>
		modeSelection(currentMode);
 80025ee:	4b52      	ldr	r3, [pc, #328]	; (8002738 <errorState+0x1cc>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 feab 	bl	8003350 <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <errorState+0x1d0>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d019      	beq.n	8002636 <errorState+0xca>
			err_previous = err_fullerror;
 8002602:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <errorState+0x1d4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <errorState+0x1d8>)
 8002608:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 800260a:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <errorState+0x1dc>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002610:	4b48      	ldr	r3, [pc, #288]	; (8002734 <errorState+0x1c8>)
 8002612:	2203      	movs	r2, #3
 8002614:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002616:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <errorState+0x194>)
 8002618:	2201      	movs	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
			okay = false;
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <errorState+0x1d0>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <errorState+0x1bc>)
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <errorState+0x1c0>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 800262e:	4b40      	ldr	r3, [pc, #256]	; (8002730 <errorState+0x1c4>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
			return;
 8002634:	e063      	b.n	80026fe <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 8002636:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <errorState+0x1c8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d10d      	bne.n	800265c <errorState+0xf0>
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <errorState+0x19c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <errorState+0xf0>
		charge_error = true;
 8002648:	4b40      	ldr	r3, [pc, #256]	; (800274c <errorState+0x1e0>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <errorState+0x194>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 8002654:	200f      	movs	r0, #15
 8002656:	f000 fc4d 	bl	8002ef4 <charging_UI>
		return;
 800265a:	e050      	b.n	80026fe <errorState+0x192>
	}

	if (accessory == 1) {
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <errorState+0x1e4>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d110      	bne.n	8002686 <errorState+0x11a>
		err_previous = err_fullerror;
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <errorState+0x1d4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a36      	ldr	r2, [pc, #216]	; (8002744 <errorState+0x1d8>)
 800266a:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <errorState+0x1dc>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <errorState+0x1c8>)
 8002674:	2203      	movs	r2, #3
 8002676:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <errorState+0x194>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <errorState+0x1bc>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 8002684:	e03b      	b.n	80026fe <errorState+0x192>
	}

	if (okay) {
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <errorState+0x1d0>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <errorState+0x140>
		okay = false;
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <errorState+0x1d0>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <errorState+0x1a0>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <errorState+0x1bc>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <errorState+0x1c0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <errorState+0x1c4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <errorState+0x1a4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d024      	beq.n	80026fe <errorState+0x192>
		if (err_State_Navigation) {
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <errorState+0x1a0>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 80026bc:	f7fe ff46 	bl	800154c <navigation>
			_errorSetPopup = false;
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <errorState+0x1bc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <errorState+0x1c0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 80026cc:	e016      	b.n	80026fc <errorState+0x190>
			if (mode) {
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <errorState+0x1e8>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00f      	beq.n	80026f6 <errorState+0x18a>
				mode = false;
 80026d6:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <errorState+0x1e8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <errorState+0x1bc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <errorState+0x1c0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <errorState+0x1cc>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fe2e 	bl	8003350 <modeSelection>
		return;
 80026f4:	e002      	b.n	80026fc <errorState+0x190>
				_errorSetCode = true;
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <errorState+0x1c0>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
		return;
 80026fc:	bf00      	nop
	}
}
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000012 	.word	0x20000012
 8002704:	2000049a 	.word	0x2000049a
 8002708:	200004b0 	.word	0x200004b0
 800270c:	20000498 	.word	0x20000498
 8002710:	20000499 	.word	0x20000499
 8002714:	200004c3 	.word	0x200004c3
 8002718:	200004ce 	.word	0x200004ce
 800271c:	20000000 	.word	0x20000000
 8002720:	200004c0 	.word	0x200004c0
 8002724:	200004b9 	.word	0x200004b9
 8002728:	200004be 	.word	0x200004be
 800272c:	200004bf 	.word	0x200004bf
 8002730:	200004c1 	.word	0x200004c1
 8002734:	2000049d 	.word	0x2000049d
 8002738:	200004a2 	.word	0x200004a2
 800273c:	2000042a 	.word	0x2000042a
 8002740:	20000004 	.word	0x20000004
 8002744:	20000494 	.word	0x20000494
 8002748:	2000049c 	.word	0x2000049c
 800274c:	200004b3 	.word	0x200004b3
 8002750:	20000486 	.word	0x20000486
 8002754:	2000042d 	.word	0x2000042d

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <HAL_MspInit+0x5c>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_MspInit+0x5c>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6193      	str	r3, [r2, #24]
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_MspInit+0x5c>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_MspInit+0x5c>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_MspInit+0x5c>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_MspInit+0x5c>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_MspInit+0x60>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_MspInit+0x60>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010000 	.word	0x40010000

080027bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <NMI_Handler+0x4>

080027c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler+0x4>

080027ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler+0x4>

080027da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002802:	f001 ff69 	bl	80046d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <DMA1_Channel2_IRQHandler+0x10>)
 8002812:	f003 f911 	bl	8005a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000608 	.word	0x20000608

08002820 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <CAN1_RX0_IRQHandler+0x10>)
 8002826:	f002 fbc7 	bl	8004fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200003f4 	.word	0x200003f4

08002834 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <CAN1_RX1_IRQHandler+0x10>)
 800283a:	f002 fbbd 	bl	8004fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200003f4 	.word	0x200003f4

08002848 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <CAN1_SCE_IRQHandler+0x10>)
 800284e:	f002 fbb3 	bl	8004fb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200003f4 	.word	0x200003f4

0800285c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 8002860:	2040      	movs	r0, #64	; 0x40
 8002862:	f003 fd1f 	bl	80062a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 8002866:	2080      	movs	r0, #128	; 0x80
 8002868:	f003 fd1c 	bl	80062a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <TIM2_IRQHandler+0x10>)
 8002876:	f004 fb39 	bl	8006eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000564 	.word	0x20000564

08002884 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <USART3_IRQHandler+0x10>)
 800288a:	f004 ffe5 	bl	8007858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200005c4 	.word	0x200005c4

08002898 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	463b      	mov	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028c0:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <MX_TIM2_Init+0x94>)
 80028c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <MX_TIM2_Init+0x94>)
 80028ca:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80028ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <MX_TIM2_Init+0x94>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <MX_TIM2_Init+0x94>)
 80028d8:	2264      	movs	r2, #100	; 0x64
 80028da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	4b16      	ldr	r3, [pc, #88]	; (8002938 <MX_TIM2_Init+0x94>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_TIM2_Init+0x94>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028e8:	4813      	ldr	r0, [pc, #76]	; (8002938 <MX_TIM2_Init+0x94>)
 80028ea:	f004 fa55 	bl	8006d98 <HAL_TIM_Base_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028f4:	f7fe fe24 	bl	8001540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	4619      	mov	r1, r3
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <MX_TIM2_Init+0x94>)
 8002906:	f004 fbf9 	bl	80070fc <HAL_TIM_ConfigClockSource>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002910:	f7fe fe16 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800291c:	463b      	mov	r3, r7
 800291e:	4619      	mov	r1, r3
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_TIM2_Init+0x94>)
 8002922:	f004 fdd5 	bl	80074d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800292c:	f7fe fe08 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000564 	.word	0x20000564

0800293c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294c:	d113      	bne.n	8002976 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <HAL_TIM_Base_MspInit+0x44>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_TIM_Base_MspInit+0x44>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	61d3      	str	r3, [r2, #28]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_TIM_Base_MspInit+0x44>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	201c      	movs	r0, #28
 800296c:	f002 fe15 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002970:	201c      	movs	r0, #28
 8002972:	f002 fe2e 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000

08002984 <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f241 7270 	movw	r2, #6000	; 0x1770
 800299e:	4293      	cmp	r3, r2
 80029a0:	d054      	beq.n	8002a4c <tick_count+0xc8>
 80029a2:	f241 7270 	movw	r2, #6000	; 0x1770
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d854      	bhi.n	8002a54 <tick_count+0xd0>
 80029aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80029ae:	d049      	beq.n	8002a44 <tick_count+0xc0>
 80029b0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80029b4:	d84e      	bhi.n	8002a54 <tick_count+0xd0>
 80029b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80029ba:	d03f      	beq.n	8002a3c <tick_count+0xb8>
 80029bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80029c0:	d848      	bhi.n	8002a54 <tick_count+0xd0>
 80029c2:	2bc8      	cmp	r3, #200	; 0xc8
 80029c4:	d036      	beq.n	8002a34 <tick_count+0xb0>
 80029c6:	2bc8      	cmp	r3, #200	; 0xc8
 80029c8:	d844      	bhi.n	8002a54 <tick_count+0xd0>
 80029ca:	2ba0      	cmp	r3, #160	; 0xa0
 80029cc:	d02e      	beq.n	8002a2c <tick_count+0xa8>
 80029ce:	2ba0      	cmp	r3, #160	; 0xa0
 80029d0:	d840      	bhi.n	8002a54 <tick_count+0xd0>
 80029d2:	2b78      	cmp	r3, #120	; 0x78
 80029d4:	d026      	beq.n	8002a24 <tick_count+0xa0>
 80029d6:	2b78      	cmp	r3, #120	; 0x78
 80029d8:	d83c      	bhi.n	8002a54 <tick_count+0xd0>
 80029da:	2b50      	cmp	r3, #80	; 0x50
 80029dc:	d01e      	beq.n	8002a1c <tick_count+0x98>
 80029de:	2b50      	cmp	r3, #80	; 0x50
 80029e0:	d838      	bhi.n	8002a54 <tick_count+0xd0>
 80029e2:	2b28      	cmp	r3, #40	; 0x28
 80029e4:	d016      	beq.n	8002a14 <tick_count+0x90>
 80029e6:	2b28      	cmp	r3, #40	; 0x28
 80029e8:	d834      	bhi.n	8002a54 <tick_count+0xd0>
 80029ea:	2b14      	cmp	r3, #20
 80029ec:	d00e      	beq.n	8002a0c <tick_count+0x88>
 80029ee:	2b14      	cmp	r3, #20
 80029f0:	d830      	bhi.n	8002a54 <tick_count+0xd0>
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d002      	beq.n	80029fc <tick_count+0x78>
 80029f6:	2b0a      	cmp	r3, #10
 80029f8:	d004      	beq.n	8002a04 <tick_count+0x80>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 80029fa:	e02b      	b.n	8002a54 <tick_count+0xd0>
			timer_ptr->timeout_50ms = true;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	711a      	strb	r2, [r3, #4]
			break;
 8002a02:	e028      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_0_5s = true;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	715a      	strb	r2, [r3, #5]
			break;
 8002a0a:	e024      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_1s = true;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	719a      	strb	r2, [r3, #6]
			break;
 8002a12:	e020      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_2s = true;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	71da      	strb	r2, [r3, #7]
			break;
 8002a1a:	e01c      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_4s = true;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	721a      	strb	r2, [r3, #8]
			break;
 8002a22:	e018      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_6s = true;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	725a      	strb	r2, [r3, #9]
			break;
 8002a2a:	e014      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_8s = true;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	729a      	strb	r2, [r3, #10]
			break;
 8002a32:	e010      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_10s = true;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	72da      	strb	r2, [r3, #11]
			break;
 8002a3a:	e00c      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_15s = true;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	731a      	strb	r2, [r3, #12]
			break;
 8002a42:	e008      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_30s = true;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	735a      	strb	r2, [r3, #13]
			break;
 8002a4a:	e004      	b.n	8002a56 <tick_count+0xd2>
			timer_ptr->timeout_5m = true;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	739a      	strb	r2, [r3, #14]
			break;
 8002a52:	e000      	b.n	8002a56 <tick_count+0xd2>
			break;
 8002a54:	bf00      	nop
	}
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	_transmit_Function++;
 8002a64:	4b51      	ldr	r3, [pc, #324]	; (8002bac <transmit+0x14c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <transmit+0x14c>)
 8002a6e:	701a      	strb	r2, [r3, #0]
	if (_transmit_Function == 1) {
 8002a70:	4b4e      	ldr	r3, [pc, #312]	; (8002bac <transmit+0x14c>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d108      	bne.n	8002a8a <transmit+0x2a>
		if (_realTimeData) {
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <transmit+0x150>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d004      	beq.n	8002a8a <transmit+0x2a>
			realTimeData();
 8002a80:	f000 fe2a 	bl	80036d8 <realTimeData>
			_realTimeData = false;
 8002a84:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <transmit+0x150>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 2) {
 8002a8a:	4b48      	ldr	r3, [pc, #288]	; (8002bac <transmit+0x14c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d108      	bne.n	8002aa4 <transmit+0x44>
		if (_oneTimeData) {
 8002a92:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <transmit+0x154>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <transmit+0x44>
			oneTimeData();
 8002a9a:	f001 fa3f 	bl	8003f1c <oneTimeData>
			_oneTimeData = false;
 8002a9e:	4b45      	ldr	r3, [pc, #276]	; (8002bb4 <transmit+0x154>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 3) {
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <transmit+0x14c>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d109      	bne.n	8002ac0 <transmit+0x60>
		if (_startingUp) {
 8002aac:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <transmit+0x158>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <transmit+0x60>
			_startingUp = false;
 8002ab4:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <transmit+0x158>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
			startingUp();
 8002aba:	f000 fd35 	bl	8003528 <startingUp>
			return;
 8002abe:	e073      	b.n	8002ba8 <transmit+0x148>
		}
	}

	if (_transmit_Function == 4) {
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	; (8002bac <transmit+0x14c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d109      	bne.n	8002adc <transmit+0x7c>
		if (_gearChanged) {
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <transmit+0x15c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <transmit+0x7c>
			_gearChanged = false;
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <transmit+0x15c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 8002ad6:	f001 fbdf 	bl	8004298 <gearUpdate>
			return;
 8002ada:	e065      	b.n	8002ba8 <transmit+0x148>
		}
	}

	if (_transmit_Function == 5) {
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <transmit+0x14c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d12f      	bne.n	8002b44 <transmit+0xe4>
		_transmit_Function = 0;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <transmit+0x14c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
		if (_modeSelection && currentStateSM == driving_state) {
 8002aea:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <transmit+0x160>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <transmit+0xbe>
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <transmit+0x164>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d110      	bne.n	8002b1e <transmit+0xbe>
			if (_modeChanged) {
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <transmit+0x168>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <transmit+0xbe>
				modeSelection(currentMode);
 8002b04:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <transmit+0x16c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fc20 	bl	8003350 <modeSelection>
				_modeChanged = false;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <transmit+0x168>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
				_modeSelection = false;
 8002b16:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <transmit+0x160>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
				return;
 8002b1c:	e044      	b.n	8002ba8 <transmit+0x148>
			//At the Start
//			modeSelection(mode_evcu);
//			_modeSelection = false;
//			return;
		}
		if (_modeSelection && currentStateSM == startingup_state) {
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <transmit+0x160>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <transmit+0xe4>
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <transmit+0x164>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <transmit+0xe4>
			modeSelection(currentMode);
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <transmit+0x16c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fc0a 	bl	8003350 <modeSelection>
			_modeSelection = false;
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <transmit+0x160>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
			return;
 8002b42:	e031      	b.n	8002ba8 <transmit+0x148>
//			drivePageSetter(currentPage);
//			return;
//		}
//	}

	if (_errorSetIcon) {
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <transmit+0x170>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <transmit+0xf0>
		errorIcon();
 8002b4c:	f000 faea 	bl	8003124 <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <transmit+0x174>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <transmit+0x10e>
 8002b58:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <transmit+0x178>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <transmit+0x10e>
		errorCode();
 8002b66:	f000 fb81 	bl	800326c <errorCode>
		errorPopup();
 8002b6a:	f000 fb5f 	bl	800322c <errorPopup>
	}

	if (_charingState) {
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <transmit+0x17c>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <transmit+0x148>
		_charingState = false;
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <transmit+0x17c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
		if (_chargingUI) {
 8002b7c:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <transmit+0x180>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <transmit+0x132>
			charging_UI(charging_ui);
 8002b84:	200d      	movs	r0, #13
 8002b86:	f000 f9b5 	bl	8002ef4 <charging_UI>
			_chargingUI = false;
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <transmit+0x180>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 2;
			return;
 8002b90:	e00a      	b.n	8002ba8 <transmit+0x148>
		}
		if (_chargeComplete) {
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <transmit+0x184>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <transmit+0x148>
			charging_UI(chargingcomp_ui);
 8002b9a:	200e      	movs	r0, #14
 8002b9c:	f000 f9aa 	bl	8002ef4 <charging_UI>
			_chargeComplete = false;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <transmit+0x184>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 3;
			return;
 8002ba6:	bf00      	nop
		}
	}
}
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200005be 	.word	0x200005be
 8002bb0:	200004b9 	.word	0x200004b9
 8002bb4:	200004bb 	.word	0x200004bb
 8002bb8:	200004b7 	.word	0x200004b7
 8002bbc:	200004c7 	.word	0x200004c7
 8002bc0:	200004bc 	.word	0x200004bc
 8002bc4:	2000049c 	.word	0x2000049c
 8002bc8:	200004c5 	.word	0x200004c5
 8002bcc:	200004a2 	.word	0x200004a2
 8002bd0:	200004c0 	.word	0x200004c0
 8002bd4:	200004be 	.word	0x200004be
 8002bd8:	200004c1 	.word	0x200004c1
 8002bdc:	200004c2 	.word	0x200004c2
 8002be0:	200004c3 	.word	0x200004c3
 8002be4:	200004c4 	.word	0x200004c4

08002be8 <drivePageSetter>:

uint8_t drivePageTransmit = 0;

void drivePageSetter(uitype_t page) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 8002bf2:	4b90      	ldr	r3, [pc, #576]	; (8002e34 <drivePageSetter+0x24c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b8e      	ldr	r3, [pc, #568]	; (8002e34 <drivePageSetter+0x24c>)
 8002bfc:	701a      	strb	r2, [r3, #0]
	switch (page) {
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b07      	cmp	r3, #7
 8002c02:	f200 8109 	bhi.w	8002e18 <drivePageSetter+0x230>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <drivePageSetter+0x24>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c2d 	.word	0x08002c2d
 8002c10:	08002da1 	.word	0x08002da1
 8002c14:	08002dbf 	.word	0x08002dbf
 8002c18:	08002ddd 	.word	0x08002ddd
 8002c1c:	08002e19 	.word	0x08002e19
 8002c20:	08002e19 	.word	0x08002e19
 8002c24:	08002e19 	.word	0x08002e19
 8002c28:	08002dfb 	.word	0x08002dfb
	case front:
		//Checking for Errors
		if (error_check) {
 8002c2c:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <drivePageSetter+0x250>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d07c      	beq.n	8002d2e <drivePageSetter+0x146>
			if (accessory == 1) {
 8002c34:	4b81      	ldr	r3, [pc, #516]	; (8002e3c <drivePageSetter+0x254>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d123      	bne.n	8002c84 <drivePageSetter+0x9c>
				if (drivePageTransmit == 1) {
 8002c3c:	4b7d      	ldr	r3, [pc, #500]	; (8002e34 <drivePageSetter+0x24c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d106      	bne.n	8002c52 <drivePageSetter+0x6a>
					ReadytoDrive_OFF_Icon;
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	2208      	movs	r2, #8
 8002c4a:	497d      	ldr	r1, [pc, #500]	; (8002e40 <drivePageSetter+0x258>)
 8002c4c:	487d      	ldr	r0, [pc, #500]	; (8002e44 <drivePageSetter+0x25c>)
 8002c4e:	f004 fd04 	bl	800765a <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 2) {
 8002c52:	4b78      	ldr	r3, [pc, #480]	; (8002e34 <drivePageSetter+0x24c>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d106      	bne.n	8002c68 <drivePageSetter+0x80>
					ModeClear_Icon;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4979      	ldr	r1, [pc, #484]	; (8002e48 <drivePageSetter+0x260>)
 8002c62:	4878      	ldr	r0, [pc, #480]	; (8002e44 <drivePageSetter+0x25c>)
 8002c64:	f004 fcf9 	bl	800765a <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 3) {
 8002c68:	4b72      	ldr	r3, [pc, #456]	; (8002e34 <drivePageSetter+0x24c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d109      	bne.n	8002c84 <drivePageSetter+0x9c>
					PowerLimitON_Icon;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
 8002c74:	2208      	movs	r2, #8
 8002c76:	4975      	ldr	r1, [pc, #468]	; (8002e4c <drivePageSetter+0x264>)
 8002c78:	4872      	ldr	r0, [pc, #456]	; (8002e44 <drivePageSetter+0x25c>)
 8002c7a:	f004 fcee 	bl	800765a <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8002c7e:	4b6d      	ldr	r3, [pc, #436]	; (8002e34 <drivePageSetter+0x24c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 8002c84:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <drivePageSetter+0x268>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <drivePageSetter+0xc0>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 8002c8c:	4b69      	ldr	r3, [pc, #420]	; (8002e34 <drivePageSetter+0x24c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d109      	bne.n	8002ca8 <drivePageSetter+0xc0>
					SysError_Shutdown_Page;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	220a      	movs	r2, #10
 8002c9a:	496e      	ldr	r1, [pc, #440]	; (8002e54 <drivePageSetter+0x26c>)
 8002c9c:	4869      	ldr	r0, [pc, #420]	; (8002e44 <drivePageSetter+0x25c>)
 8002c9e:	f004 fcdc 	bl	800765a <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8002ca2:	4b64      	ldr	r3, [pc, #400]	; (8002e34 <drivePageSetter+0x24c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 8002ca8:	4b6b      	ldr	r3, [pc, #428]	; (8002e58 <drivePageSetter+0x270>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	f040 80b4 	bne.w	8002e1c <drivePageSetter+0x234>
				if (shutdown == 1) {
 8002cb4:	4b69      	ldr	r3, [pc, #420]	; (8002e5c <drivePageSetter+0x274>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d10d      	bne.n	8002cd8 <drivePageSetter+0xf0>
					if (drivePageTransmit == 1) {
 8002cbc:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <drivePageSetter+0x24c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d109      	bne.n	8002cd8 <drivePageSetter+0xf0>
						SysError_StopDrive_Page;
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	220a      	movs	r2, #10
 8002cca:	4965      	ldr	r1, [pc, #404]	; (8002e60 <drivePageSetter+0x278>)
 8002ccc:	485d      	ldr	r0, [pc, #372]	; (8002e44 <drivePageSetter+0x25c>)
 8002cce:	f004 fcc4 	bl	800765a <HAL_UART_Transmit>
						drivePageTransmit = 0;
 8002cd2:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <drivePageSetter+0x24c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 8002cd8:	4b60      	ldr	r3, [pc, #384]	; (8002e5c <drivePageSetter+0x274>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 809d 	bne.w	8002e1c <drivePageSetter+0x234>
					if (mode) {
 8002ce2:	4b60      	ldr	r3, [pc, #384]	; (8002e64 <drivePageSetter+0x27c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d011      	beq.n	8002d0e <drivePageSetter+0x126>
						if (drivePageTransmit == 1) {
 8002cea:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <drivePageSetter+0x24c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d109      	bne.n	8002d06 <drivePageSetter+0x11e>
							ModeChangeOFF_Page;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	220a      	movs	r2, #10
 8002cf8:	495b      	ldr	r1, [pc, #364]	; (8002e68 <drivePageSetter+0x280>)
 8002cfa:	4852      	ldr	r0, [pc, #328]	; (8002e44 <drivePageSetter+0x25c>)
 8002cfc:	f004 fcad 	bl	800765a <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <drivePageSetter+0x24c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 8002d06:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <drivePageSetter+0x27c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
					drivePageTransmit = 0;
				}
			}
		}
		break;
 8002d0c:	e086      	b.n	8002e1c <drivePageSetter+0x234>
						if (drivePageTransmit == 1) {
 8002d0e:	4b49      	ldr	r3, [pc, #292]	; (8002e34 <drivePageSetter+0x24c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	f040 8082 	bne.w	8002e1c <drivePageSetter+0x234>
							SysError_StopDrive_Page;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	220a      	movs	r2, #10
 8002d1e:	4950      	ldr	r1, [pc, #320]	; (8002e60 <drivePageSetter+0x278>)
 8002d20:	4848      	ldr	r0, [pc, #288]	; (8002e44 <drivePageSetter+0x25c>)
 8002d22:	f004 fc9a 	bl	800765a <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8002d26:	4b43      	ldr	r3, [pc, #268]	; (8002e34 <drivePageSetter+0x24c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
		break;
 8002d2c:	e076      	b.n	8002e1c <drivePageSetter+0x234>
			if (accessory == 1) {
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <drivePageSetter+0x254>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d123      	bne.n	8002d7e <drivePageSetter+0x196>
				if (drivePageTransmit == 1) {
 8002d36:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <drivePageSetter+0x24c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d106      	bne.n	8002d4c <drivePageSetter+0x164>
					ReadytoDrive_OFF_Icon;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	2208      	movs	r2, #8
 8002d44:	493e      	ldr	r1, [pc, #248]	; (8002e40 <drivePageSetter+0x258>)
 8002d46:	483f      	ldr	r0, [pc, #252]	; (8002e44 <drivePageSetter+0x25c>)
 8002d48:	f004 fc87 	bl	800765a <HAL_UART_Transmit>
				if (drivePageTransmit == 2) {
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <drivePageSetter+0x24c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d106      	bne.n	8002d62 <drivePageSetter+0x17a>
					ModeClear_Icon;
 8002d54:	f04f 33ff 	mov.w	r3, #4294967295
 8002d58:	2208      	movs	r2, #8
 8002d5a:	493b      	ldr	r1, [pc, #236]	; (8002e48 <drivePageSetter+0x260>)
 8002d5c:	4839      	ldr	r0, [pc, #228]	; (8002e44 <drivePageSetter+0x25c>)
 8002d5e:	f004 fc7c 	bl	800765a <HAL_UART_Transmit>
				if (drivePageTransmit == 3) {
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <drivePageSetter+0x24c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d109      	bne.n	8002d7e <drivePageSetter+0x196>
					Disengage_KillSwitch_Page;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6e:	220a      	movs	r2, #10
 8002d70:	493e      	ldr	r1, [pc, #248]	; (8002e6c <drivePageSetter+0x284>)
 8002d72:	4834      	ldr	r0, [pc, #208]	; (8002e44 <drivePageSetter+0x25c>)
 8002d74:	f004 fc71 	bl	800765a <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8002d78:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <drivePageSetter+0x24c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
			if (readytodrive == 1) {
 8002d7e:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <drivePageSetter+0x288>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d14a      	bne.n	8002e1c <drivePageSetter+0x234>
				if (drivePageTransmit == 1) {
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <drivePageSetter+0x24c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d146      	bne.n	8002e1c <drivePageSetter+0x234>
					HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
 8002d8e:	220a      	movs	r2, #10
 8002d90:	4938      	ldr	r1, [pc, #224]	; (8002e74 <drivePageSetter+0x28c>)
 8002d92:	482c      	ldr	r0, [pc, #176]	; (8002e44 <drivePageSetter+0x25c>)
 8002d94:	f004 fcf4 	bl	8007780 <HAL_UART_Transmit_DMA>
					drivePageTransmit = 0;
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <drivePageSetter+0x24c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
		break;
 8002d9e:	e03d      	b.n	8002e1c <drivePageSetter+0x234>
	case trip:
		if (_menupage == 1) {
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <drivePageSetter+0x290>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d03b      	beq.n	8002e20 <drivePageSetter+0x238>
			return;
		}
		_menupage = 1;
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <drivePageSetter+0x290>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	220a      	movs	r2, #10
 8002db4:	4931      	ldr	r1, [pc, #196]	; (8002e7c <drivePageSetter+0x294>)
 8002db6:	4823      	ldr	r0, [pc, #140]	; (8002e44 <drivePageSetter+0x25c>)
 8002db8:	f004 fc4f 	bl	800765a <HAL_UART_Transmit>
		break;
 8002dbc:	e037      	b.n	8002e2e <drivePageSetter+0x246>
	case after_charge:
		if (_menupage == 2) {
 8002dbe:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <drivePageSetter+0x290>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d02e      	beq.n	8002e24 <drivePageSetter+0x23c>
			return;
		}
		_menupage = 2;
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <drivePageSetter+0x290>)
 8002dc8:	2202      	movs	r2, #2
 8002dca:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	220a      	movs	r2, #10
 8002dd2:	492b      	ldr	r1, [pc, #172]	; (8002e80 <drivePageSetter+0x298>)
 8002dd4:	481b      	ldr	r0, [pc, #108]	; (8002e44 <drivePageSetter+0x25c>)
 8002dd6:	f004 fc40 	bl	800765a <HAL_UART_Transmit>
		break;
 8002dda:	e028      	b.n	8002e2e <drivePageSetter+0x246>
	case info:
		if (_menupage == 3) {
 8002ddc:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <drivePageSetter+0x290>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d021      	beq.n	8002e28 <drivePageSetter+0x240>
			return;
		}
		_menupage = 3;
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <drivePageSetter+0x290>)
 8002de6:	2203      	movs	r2, #3
 8002de8:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	220a      	movs	r2, #10
 8002df0:	4924      	ldr	r1, [pc, #144]	; (8002e84 <drivePageSetter+0x29c>)
 8002df2:	4814      	ldr	r0, [pc, #80]	; (8002e44 <drivePageSetter+0x25c>)
 8002df4:	f004 fc31 	bl	800765a <HAL_UART_Transmit>
		break;
 8002df8:	e019      	b.n	8002e2e <drivePageSetter+0x246>
	case settings:
		if (_menupage == 4) {
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <drivePageSetter+0x290>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d014      	beq.n	8002e2c <drivePageSetter+0x244>
			return;
		}
		_menupage = 4;
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <drivePageSetter+0x290>)
 8002e04:	2204      	movs	r2, #4
 8002e06:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	220a      	movs	r2, #10
 8002e0e:	491e      	ldr	r1, [pc, #120]	; (8002e88 <drivePageSetter+0x2a0>)
 8002e10:	480c      	ldr	r0, [pc, #48]	; (8002e44 <drivePageSetter+0x25c>)
 8002e12:	f004 fc22 	bl	800765a <HAL_UART_Transmit>
		break;
 8002e16:	e00a      	b.n	8002e2e <drivePageSetter+0x246>
	default:
		break;
 8002e18:	bf00      	nop
 8002e1a:	e008      	b.n	8002e2e <drivePageSetter+0x246>
		break;
 8002e1c:	bf00      	nop
 8002e1e:	e006      	b.n	8002e2e <drivePageSetter+0x246>
			return;
 8002e20:	bf00      	nop
 8002e22:	e004      	b.n	8002e2e <drivePageSetter+0x246>
			return;
 8002e24:	bf00      	nop
 8002e26:	e002      	b.n	8002e2e <drivePageSetter+0x246>
			return;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <drivePageSetter+0x246>
			return;
 8002e2c:	bf00      	nop

	}

}
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	200005bf 	.word	0x200005bf
 8002e38:	200004b0 	.word	0x200004b0
 8002e3c:	20000486 	.word	0x20000486
 8002e40:	200001a8 	.word	0x200001a8
 8002e44:	200005c4 	.word	0x200005c4
 8002e48:	200001e8 	.word	0x200001e8
 8002e4c:	20000190 	.word	0x20000190
 8002e50:	20000498 	.word	0x20000498
 8002e54:	200000e4 	.word	0x200000e4
 8002e58:	2000049c 	.word	0x2000049c
 8002e5c:	2000048e 	.word	0x2000048e
 8002e60:	200000f0 	.word	0x200000f0
 8002e64:	2000042d 	.word	0x2000042d
 8002e68:	20000294 	.word	0x20000294
 8002e6c:	20000024 	.word	0x20000024
 8002e70:	20000487 	.word	0x20000487
 8002e74:	20000144 	.word	0x20000144
 8002e78:	200004a1 	.word	0x200004a1
 8002e7c:	20000060 	.word	0x20000060
 8002e80:	2000006c 	.word	0x2000006c
 8002e84:	20000078 	.word	0x20000078
 8002e88:	200000a8 	.word	0x200000a8

08002e8c <vehicleInfo_UI>:

void vehicleInfo_UI(uitype_t InfoUI) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d016      	beq.n	8002eca <vehicleInfo_UI+0x3e>
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	dc1c      	bgt.n	8002eda <vehicleInfo_UI+0x4e>
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d002      	beq.n	8002eaa <vehicleInfo_UI+0x1e>
 8002ea4:	2b05      	cmp	r3, #5
 8002ea6:	d008      	beq.n	8002eba <vehicleInfo_UI+0x2e>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 8002ea8:	e017      	b.n	8002eda <vehicleInfo_UI+0x4e>
		Battery_Info_Page;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	220a      	movs	r2, #10
 8002eb0:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <vehicleInfo_UI+0x58>)
 8002eb2:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <vehicleInfo_UI+0x5c>)
 8002eb4:	f004 fbd1 	bl	800765a <HAL_UART_Transmit>
		break;
 8002eb8:	e010      	b.n	8002edc <vehicleInfo_UI+0x50>
		Motor_Info_Page;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	220a      	movs	r2, #10
 8002ec0:	490a      	ldr	r1, [pc, #40]	; (8002eec <vehicleInfo_UI+0x60>)
 8002ec2:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <vehicleInfo_UI+0x5c>)
 8002ec4:	f004 fbc9 	bl	800765a <HAL_UART_Transmit>
		break;
 8002ec8:	e008      	b.n	8002edc <vehicleInfo_UI+0x50>
		Inverter_Info_Page;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	220a      	movs	r2, #10
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <vehicleInfo_UI+0x64>)
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <vehicleInfo_UI+0x5c>)
 8002ed4:	f004 fbc1 	bl	800765a <HAL_UART_Transmit>
		break;
 8002ed8:	e000      	b.n	8002edc <vehicleInfo_UI+0x50>
		break;
 8002eda:	bf00      	nop
	}
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000084 	.word	0x20000084
 8002ee8:	200005c4 	.word	0x200005c4
 8002eec:	20000090 	.word	0x20000090
 8002ef0:	2000009c 	.word	0x2000009c

08002ef4 <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d016      	beq.n	8002f32 <charging_UI+0x3e>
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	dc27      	bgt.n	8002f58 <charging_UI+0x64>
 8002f08:	2b0d      	cmp	r3, #13
 8002f0a:	d002      	beq.n	8002f12 <charging_UI+0x1e>
 8002f0c:	2b0e      	cmp	r3, #14
 8002f0e:	d008      	beq.n	8002f22 <charging_UI+0x2e>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 8002f10:	e022      	b.n	8002f58 <charging_UI+0x64>
		Charging_Page;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	220a      	movs	r2, #10
 8002f18:	4913      	ldr	r1, [pc, #76]	; (8002f68 <charging_UI+0x74>)
 8002f1a:	4814      	ldr	r0, [pc, #80]	; (8002f6c <charging_UI+0x78>)
 8002f1c:	f004 fb9d 	bl	800765a <HAL_UART_Transmit>
		break;
 8002f20:	e01d      	b.n	8002f5e <charging_UI+0x6a>
		ChargeComplete_Page;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	220a      	movs	r2, #10
 8002f28:	4911      	ldr	r1, [pc, #68]	; (8002f70 <charging_UI+0x7c>)
 8002f2a:	4810      	ldr	r0, [pc, #64]	; (8002f6c <charging_UI+0x78>)
 8002f2c:	f004 fb95 	bl	800765a <HAL_UART_Transmit>
		break;
 8002f30:	e015      	b.n	8002f5e <charging_UI+0x6a>
		Charge_Error_Page;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	220a      	movs	r2, #10
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <charging_UI+0x80>)
 8002f3a:	480c      	ldr	r0, [pc, #48]	; (8002f6c <charging_UI+0x78>)
 8002f3c:	f004 fb8d 	bl	800765a <HAL_UART_Transmit>
		if (charge_error) {
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <charging_UI+0x84>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <charging_UI+0x68>
			Charge_Connection_Error_Popup_ON;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	490b      	ldr	r1, [pc, #44]	; (8002f7c <charging_UI+0x88>)
 8002f50:	4806      	ldr	r0, [pc, #24]	; (8002f6c <charging_UI+0x78>)
 8002f52:	f004 fb82 	bl	800765a <HAL_UART_Transmit>
		break;
 8002f56:	e001      	b.n	8002f5c <charging_UI+0x68>
		break;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <charging_UI+0x6a>
		break;
 8002f5c:	bf00      	nop
	}
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000108 	.word	0x20000108
 8002f6c:	200005c4 	.word	0x200005c4
 8002f70:	20000114 	.word	0x20000114
 8002f74:	20000120 	.word	0x20000120
 8002f78:	200004b3 	.word	0x200004b3
 8002f7c:	200002a0 	.word	0x200002a0

08002f80 <settings_UI>:

void settings_UI(uitype_t SettingsMenu, uint8_t selectedOption) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	460a      	mov	r2, r1
 8002f8a:	71fb      	strb	r3, [r7, #7]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	71bb      	strb	r3, [r7, #6]
	switch (SettingsMenu) {
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	3b08      	subs	r3, #8
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d854      	bhi.n	8003042 <settings_UI+0xc2>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <settings_UI+0x20>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	0800301d 	.word	0x0800301d
 8002fac:	0800302d 	.word	0x0800302d
	case vehicleMenu:
		General_Menu_Page;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	220a      	movs	r2, #10
 8002fb6:	4926      	ldr	r1, [pc, #152]	; (8003050 <settings_UI+0xd0>)
 8002fb8:	4826      	ldr	r0, [pc, #152]	; (8003054 <settings_UI+0xd4>)
 8002fba:	f004 fb4e 	bl	800765a <HAL_UART_Transmit>
		break;
 8002fbe:	e043      	b.n	8003048 <settings_UI+0xc8>
	case systemMenu:
		System_Menu_Page;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	220a      	movs	r2, #10
 8002fc6:	4924      	ldr	r1, [pc, #144]	; (8003058 <settings_UI+0xd8>)
 8002fc8:	4822      	ldr	r0, [pc, #136]	; (8003054 <settings_UI+0xd4>)
 8002fca:	f004 fb46 	bl	800765a <HAL_UART_Transmit>
		if(selectedOption == 0) {
 8002fce:	79bb      	ldrb	r3, [r7, #6]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10f      	bne.n	8002ff4 <settings_UI+0x74>
			TimeSetting_Button;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4920      	ldr	r1, [pc, #128]	; (800305c <settings_UI+0xdc>)
 8002fdc:	481d      	ldr	r0, [pc, #116]	; (8003054 <settings_UI+0xd4>)
 8002fde:	f004 fb3c 	bl	800765a <HAL_UART_Transmit>
			BrightnessSetting_Button_OFF;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	491d      	ldr	r1, [pc, #116]	; (8003060 <settings_UI+0xe0>)
 8002fea:	481a      	ldr	r0, [pc, #104]	; (8003054 <settings_UI+0xd4>)
 8002fec:	f004 fb35 	bl	800765a <HAL_UART_Transmit>

			selectedOption = 10;
 8002ff0:	230a      	movs	r3, #10
 8002ff2:	71bb      	strb	r3, [r7, #6]
		}
		if(selectedOption == 1)
 8002ff4:	79bb      	ldrb	r3, [r7, #6]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d125      	bne.n	8003046 <settings_UI+0xc6>
		{
			BrightnessSetting_Button;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	2208      	movs	r2, #8
 8003000:	4918      	ldr	r1, [pc, #96]	; (8003064 <settings_UI+0xe4>)
 8003002:	4814      	ldr	r0, [pc, #80]	; (8003054 <settings_UI+0xd4>)
 8003004:	f004 fb29 	bl	800765a <HAL_UART_Transmit>
			TimeSetting_Button_OFF;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	2208      	movs	r2, #8
 800300e:	4916      	ldr	r1, [pc, #88]	; (8003068 <settings_UI+0xe8>)
 8003010:	4810      	ldr	r0, [pc, #64]	; (8003054 <settings_UI+0xd4>)
 8003012:	f004 fb22 	bl	800765a <HAL_UART_Transmit>
			selectedOption = 10;
 8003016:	230a      	movs	r3, #10
 8003018:	71bb      	strb	r3, [r7, #6]
		}
		if (selectedOption == 4) {

		}

		break;
 800301a:	e014      	b.n	8003046 <settings_UI+0xc6>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	220a      	movs	r2, #10
 8003022:	4912      	ldr	r1, [pc, #72]	; (800306c <settings_UI+0xec>)
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <settings_UI+0xd4>)
 8003026:	f004 fb18 	bl	800765a <HAL_UART_Transmit>
		break;
 800302a:	e00d      	b.n	8003048 <settings_UI+0xc8>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <settings_UI+0xf0>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	220a      	movs	r2, #10
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <settings_UI+0xf4>)
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <settings_UI+0xd4>)
 800303c:	f004 fb0d 	bl	800765a <HAL_UART_Transmit>
		break;
 8003040:	e002      	b.n	8003048 <settings_UI+0xc8>
	default:
		break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <settings_UI+0xc8>
		break;
 8003046:	bf00      	nop
	}
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200000b4 	.word	0x200000b4
 8003054:	200005c4 	.word	0x200005c4
 8003058:	200000c0 	.word	0x200000c0
 800305c:	20000240 	.word	0x20000240
 8003060:	20000258 	.word	0x20000258
 8003064:	20000250 	.word	0x20000250
 8003068:	20000248 	.word	0x20000248
 800306c:	200000cc 	.word	0x200000cc
 8003070:	200004af 	.word	0x200004af
 8003074:	200000d8 	.word	0x200000d8

08003078 <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	220a      	movs	r2, #10
 8003088:	491f      	ldr	r1, [pc, #124]	; (8003108 <selection_UI+0x90>)
 800308a:	4820      	ldr	r0, [pc, #128]	; (800310c <selection_UI+0x94>)
 800308c:	f004 fae5 	bl	800765a <HAL_UART_Transmit>
	switch (SettingsMenu) {
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	3b08      	subs	r3, #8
 8003094:	2b03      	cmp	r3, #3
 8003096:	d82b      	bhi.n	80030f0 <selection_UI+0x78>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <selection_UI+0x28>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030c1 	.word	0x080030c1
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	080030e1 	.word	0x080030e1
	case vehicleMenu:
		Vehicle_Button;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	2208      	movs	r2, #8
 80030b6:	4916      	ldr	r1, [pc, #88]	; (8003110 <selection_UI+0x98>)
 80030b8:	4814      	ldr	r0, [pc, #80]	; (800310c <selection_UI+0x94>)
 80030ba:	f004 face 	bl	800765a <HAL_UART_Transmit>
		break;
 80030be:	e01f      	b.n	8003100 <selection_UI+0x88>
	case systemMenu:
		System_Button;
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
 80030c4:	2208      	movs	r2, #8
 80030c6:	4913      	ldr	r1, [pc, #76]	; (8003114 <selection_UI+0x9c>)
 80030c8:	4810      	ldr	r0, [pc, #64]	; (800310c <selection_UI+0x94>)
 80030ca:	f004 fac6 	bl	800765a <HAL_UART_Transmit>
		break;
 80030ce:	e017      	b.n	8003100 <selection_UI+0x88>
	case bluetoothMenu:
		Bluetooth_Button;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	2208      	movs	r2, #8
 80030d6:	4910      	ldr	r1, [pc, #64]	; (8003118 <selection_UI+0xa0>)
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <selection_UI+0x94>)
 80030da:	f004 fabe 	bl	800765a <HAL_UART_Transmit>
		break;
 80030de:	e00f      	b.n	8003100 <selection_UI+0x88>
	case errorsMenu:
		Error_Button;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	2208      	movs	r2, #8
 80030e6:	490d      	ldr	r1, [pc, #52]	; (800311c <selection_UI+0xa4>)
 80030e8:	4808      	ldr	r0, [pc, #32]	; (800310c <selection_UI+0x94>)
 80030ea:	f004 fab6 	bl	800765a <HAL_UART_Transmit>
		break;
 80030ee:	e007      	b.n	8003100 <selection_UI+0x88>
	default:
		NO_Button;
 80030f0:	f04f 33ff 	mov.w	r3, #4294967295
 80030f4:	2208      	movs	r2, #8
 80030f6:	490a      	ldr	r1, [pc, #40]	; (8003120 <selection_UI+0xa8>)
 80030f8:	4804      	ldr	r0, [pc, #16]	; (800310c <selection_UI+0x94>)
 80030fa:	f004 faae 	bl	800765a <HAL_UART_Transmit>
		break;
 80030fe:	bf00      	nop
	}
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200000a8 	.word	0x200000a8
 800310c:	200005c4 	.word	0x200005c4
 8003110:	20000218 	.word	0x20000218
 8003114:	20000220 	.word	0x20000220
 8003118:	20000228 	.word	0x20000228
 800311c:	20000230 	.word	0x20000230
 8003120:	20000238 	.word	0x20000238

08003124 <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0

	if (error_on == true) {
 8003128:	4b30      	ldr	r3, [pc, #192]	; (80031ec <errorIcon+0xc8>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <errorIcon+0x1c>
		Error_ON_Icon;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	2208      	movs	r2, #8
 8003136:	492e      	ldr	r1, [pc, #184]	; (80031f0 <errorIcon+0xcc>)
 8003138:	482e      	ldr	r0, [pc, #184]	; (80031f4 <errorIcon+0xd0>)
 800313a:	f004 fa8e 	bl	800765a <HAL_UART_Transmit>
 800313e:	e006      	b.n	800314e <errorIcon+0x2a>
	} else {
		Error_OFF_Icon;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	2208      	movs	r2, #8
 8003146:	492c      	ldr	r1, [pc, #176]	; (80031f8 <errorIcon+0xd4>)
 8003148:	482a      	ldr	r0, [pc, #168]	; (80031f4 <errorIcon+0xd0>)
 800314a:	f004 fa86 	bl	800765a <HAL_UART_Transmit>
	}
	if (milderror_on == true) {
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <errorIcon+0xd8>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <errorIcon+0x42>
		Mild_Error_ON_Icon;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	2208      	movs	r2, #8
 800315c:	4928      	ldr	r1, [pc, #160]	; (8003200 <errorIcon+0xdc>)
 800315e:	4825      	ldr	r0, [pc, #148]	; (80031f4 <errorIcon+0xd0>)
 8003160:	f004 fa7b 	bl	800765a <HAL_UART_Transmit>
 8003164:	e006      	b.n	8003174 <errorIcon+0x50>
	} else {
		Mild_Error_OFF_Icon;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	2208      	movs	r2, #8
 800316c:	4925      	ldr	r1, [pc, #148]	; (8003204 <errorIcon+0xe0>)
 800316e:	4821      	ldr	r0, [pc, #132]	; (80031f4 <errorIcon+0xd0>)
 8003170:	f004 fa73 	bl	800765a <HAL_UART_Transmit>
	}
	if (service_on == true) {
 8003174:	4b24      	ldr	r3, [pc, #144]	; (8003208 <errorIcon+0xe4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <errorIcon+0x68>
		Service_Error_ON_Icon;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	2208      	movs	r2, #8
 8003182:	4922      	ldr	r1, [pc, #136]	; (800320c <errorIcon+0xe8>)
 8003184:	481b      	ldr	r0, [pc, #108]	; (80031f4 <errorIcon+0xd0>)
 8003186:	f004 fa68 	bl	800765a <HAL_UART_Transmit>
 800318a:	e006      	b.n	800319a <errorIcon+0x76>
	} else {
		Service_Error_OFF_Icon;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
 8003190:	2208      	movs	r2, #8
 8003192:	491f      	ldr	r1, [pc, #124]	; (8003210 <errorIcon+0xec>)
 8003194:	4817      	ldr	r0, [pc, #92]	; (80031f4 <errorIcon+0xd0>)
 8003196:	f004 fa60 	bl	800765a <HAL_UART_Transmit>
	}
	if (bat_temp_high == true) {
 800319a:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <errorIcon+0xf0>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <errorIcon+0x8e>
		Battery_High_Temp_Popup_ON;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	2208      	movs	r2, #8
 80031a8:	491b      	ldr	r1, [pc, #108]	; (8003218 <errorIcon+0xf4>)
 80031aa:	4812      	ldr	r0, [pc, #72]	; (80031f4 <errorIcon+0xd0>)
 80031ac:	f004 fa55 	bl	800765a <HAL_UART_Transmit>
 80031b0:	e006      	b.n	80031c0 <errorIcon+0x9c>
	} else {
		Battery_High_Temp_Popup_OFF;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	2208      	movs	r2, #8
 80031b8:	4918      	ldr	r1, [pc, #96]	; (800321c <errorIcon+0xf8>)
 80031ba:	480e      	ldr	r0, [pc, #56]	; (80031f4 <errorIcon+0xd0>)
 80031bc:	f004 fa4d 	bl	800765a <HAL_UART_Transmit>
	}
	if (aux_low_on == true) {
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <errorIcon+0xfc>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <errorIcon+0xb4>
		Battery_ON_Icon;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	2208      	movs	r2, #8
 80031ce:	4915      	ldr	r1, [pc, #84]	; (8003224 <errorIcon+0x100>)
 80031d0:	4808      	ldr	r0, [pc, #32]	; (80031f4 <errorIcon+0xd0>)
 80031d2:	f004 fa42 	bl	800765a <HAL_UART_Transmit>
	} else {
		Battery_OFF_Icon;
	}
}
 80031d6:	e006      	b.n	80031e6 <errorIcon+0xc2>
		Battery_OFF_Icon;
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	2208      	movs	r2, #8
 80031de:	4912      	ldr	r1, [pc, #72]	; (8003228 <errorIcon+0x104>)
 80031e0:	4804      	ldr	r0, [pc, #16]	; (80031f4 <errorIcon+0xd0>)
 80031e2:	f004 fa3a 	bl	800765a <HAL_UART_Transmit>
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200004aa 	.word	0x200004aa
 80031f0:	20000160 	.word	0x20000160
 80031f4:	200005c4 	.word	0x200005c4
 80031f8:	20000168 	.word	0x20000168
 80031fc:	200004ab 	.word	0x200004ab
 8003200:	20000180 	.word	0x20000180
 8003204:	20000188 	.word	0x20000188
 8003208:	200004ac 	.word	0x200004ac
 800320c:	20000170 	.word	0x20000170
 8003210:	20000178 	.word	0x20000178
 8003214:	200004ad 	.word	0x200004ad
 8003218:	20000260 	.word	0x20000260
 800321c:	20000268 	.word	0x20000268
 8003220:	200004ae 	.word	0x200004ae
 8003224:	20000150 	.word	0x20000150
 8003228:	20000158 	.word	0x20000158

0800322c <errorPopup>:

void errorPopup(void) {
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 8003230:	4b0a      	ldr	r3, [pc, #40]	; (800325c <errorPopup+0x30>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d107      	bne.n	8003248 <errorPopup+0x1c>
		SystemError_Critical_Popup;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	220a      	movs	r2, #10
 800323e:	4908      	ldr	r1, [pc, #32]	; (8003260 <errorPopup+0x34>)
 8003240:	4808      	ldr	r0, [pc, #32]	; (8003264 <errorPopup+0x38>)
 8003242:	f004 fa0a 	bl	800765a <HAL_UART_Transmit>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 8003246:	e006      	b.n	8003256 <errorPopup+0x2a>
		SystemError_Mild_Popup_Page;
 8003248:	f04f 33ff 	mov.w	r3, #4294967295
 800324c:	220a      	movs	r2, #10
 800324e:	4906      	ldr	r1, [pc, #24]	; (8003268 <errorPopup+0x3c>)
 8003250:	4804      	ldr	r0, [pc, #16]	; (8003264 <errorPopup+0x38>)
 8003252:	f004 fa02 	bl	800765a <HAL_UART_Transmit>
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000491 	.word	0x20000491
 8003260:	20000138 	.word	0x20000138
 8003264:	200005c4 	.word	0x200005c4
 8003268:	2000012c 	.word	0x2000012c

0800326c <errorCode>:

void errorCode(void) {
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <errorCode+0xd0>)
 8003272:	2211      	movs	r2, #17
 8003274:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <errorCode+0xd0>)
 8003278:	2294      	movs	r2, #148	; 0x94
 800327a:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <errorCode+0xd0>)
 800327e:	2200      	movs	r2, #0
 8003280:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 8003282:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <errorCode+0xd4>)
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	4b2d      	ldr	r3, [pc, #180]	; (800333c <errorCode+0xd0>)
 8003288:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	2208      	movs	r2, #8
 8003290:	492a      	ldr	r1, [pc, #168]	; (800333c <errorCode+0xd0>)
 8003292:	482c      	ldr	r0, [pc, #176]	; (8003344 <errorCode+0xd8>)
 8003294:	f004 f9e1 	bl	800765a <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <errorCode+0xd0>)
 800329a:	2211      	movs	r2, #17
 800329c:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <errorCode+0xd0>)
 80032a0:	2297      	movs	r2, #151	; 0x97
 80032a2:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	2208      	movs	r2, #8
 80032aa:	4924      	ldr	r1, [pc, #144]	; (800333c <errorCode+0xd0>)
 80032ac:	4825      	ldr	r0, [pc, #148]	; (8003344 <errorCode+0xd8>)
 80032ae:	f004 f9d4 	bl	800765a <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <errorCode+0xd0>)
 80032b4:	2211      	movs	r2, #17
 80032b6:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 80032b8:	4b20      	ldr	r3, [pc, #128]	; (800333c <errorCode+0xd0>)
 80032ba:	2295      	movs	r2, #149	; 0x95
 80032bc:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <errorCode+0xd0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <errorCode+0xdc>)
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <errorCode+0xd0>)
 80032ca:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	2208      	movs	r2, #8
 80032d2:	491a      	ldr	r1, [pc, #104]	; (800333c <errorCode+0xd0>)
 80032d4:	481b      	ldr	r0, [pc, #108]	; (8003344 <errorCode+0xd8>)
 80032d6:	f004 f9c0 	bl	800765a <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <errorCode+0xd0>)
 80032dc:	2211      	movs	r2, #17
 80032de:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 80032e0:	4b16      	ldr	r3, [pc, #88]	; (800333c <errorCode+0xd0>)
 80032e2:	2298      	movs	r2, #152	; 0x98
 80032e4:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	2208      	movs	r2, #8
 80032ec:	4913      	ldr	r1, [pc, #76]	; (800333c <errorCode+0xd0>)
 80032ee:	4815      	ldr	r0, [pc, #84]	; (8003344 <errorCode+0xd8>)
 80032f0:	f004 f9b3 	bl	800765a <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <errorCode+0xd0>)
 80032f6:	2211      	movs	r2, #17
 80032f8:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <errorCode+0xd0>)
 80032fc:	2296      	movs	r2, #150	; 0x96
 80032fe:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003300:	4b0e      	ldr	r3, [pc, #56]	; (800333c <errorCode+0xd0>)
 8003302:	2200      	movs	r2, #0
 8003304:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <errorCode+0xe0>)
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <errorCode+0xd0>)
 800330c:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	2208      	movs	r2, #8
 8003314:	4909      	ldr	r1, [pc, #36]	; (800333c <errorCode+0xd0>)
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <errorCode+0xd8>)
 8003318:	f004 f99f 	bl	800765a <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <errorCode+0xd0>)
 800331e:	2211      	movs	r2, #17
 8003320:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <errorCode+0xd0>)
 8003324:	2299      	movs	r2, #153	; 0x99
 8003326:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	2208      	movs	r2, #8
 800332e:	4903      	ldr	r1, [pc, #12]	; (800333c <errorCode+0xd0>)
 8003330:	4804      	ldr	r0, [pc, #16]	; (8003344 <errorCode+0xd8>)
 8003332:	f004 f992 	bl	800765a <HAL_UART_Transmit>
	;

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000434 	.word	0x20000434
 8003340:	2000048f 	.word	0x2000048f
 8003344:	200005c4 	.word	0x200005c4
 8003348:	20000490 	.word	0x20000490
 800334c:	20000491 	.word	0x20000491

08003350 <modeSelection>:

void modeSelection(uimode_t currentMode) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
	if (!_modeChanged) {
 800335a:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <modeSelection+0x170>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	f083 0301 	eor.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <modeSelection+0x24>
		drivePageSetter(currentPage);
 8003368:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <modeSelection+0x174>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fc3a 	bl	8002be8 <drivePageSetter>
	}
	if (currentMode == modeCleared) {
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d107      	bne.n	800338a <modeSelection+0x3a>
		ModeClear_Icon;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	2208      	movs	r2, #8
 8003380:	4951      	ldr	r1, [pc, #324]	; (80034c8 <modeSelection+0x178>)
 8003382:	4852      	ldr	r0, [pc, #328]	; (80034cc <modeSelection+0x17c>)
 8003384:	f004 f969 	bl	800765a <HAL_UART_Transmit>
		return;
 8003388:	e097      	b.n	80034ba <modeSelection+0x16a>
	}
	mode_count++;
 800338a:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <modeSelection+0x180>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b4f      	ldr	r3, [pc, #316]	; (80034d0 <modeSelection+0x180>)
 8003394:	801a      	strh	r2, [r3, #0]
	//Mode set pop-up timer
	if (mode_count > 15) {
 8003396:	4b4e      	ldr	r3, [pc, #312]	; (80034d0 <modeSelection+0x180>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	2b0f      	cmp	r3, #15
 800339c:	d905      	bls.n	80033aa <modeSelection+0x5a>
		rtn = true;
 800339e:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <modeSelection+0x184>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 80033a4:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <modeSelection+0x180>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	801a      	strh	r2, [r3, #0]
	}
	switch (currentMode) {
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d062      	beq.n	8003476 <modeSelection+0x126>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	dc7d      	bgt.n	80034b0 <modeSelection+0x160>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <modeSelection+0x6e>
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d020      	beq.n	80033fe <modeSelection+0xae>
			modeMenu = false;
			SportMode_Icon;
		}
		break;
	default:
		break;
 80033bc:	e078      	b.n	80034b0 <modeSelection+0x160>
		if (_modeChanged && modeMenu) {
 80033be:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <modeSelection+0x170>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <modeSelection+0x98>
 80033c6:	4b44      	ldr	r3, [pc, #272]	; (80034d8 <modeSelection+0x188>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <modeSelection+0x98>
			NormalMode_Popup;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	220a      	movs	r2, #10
 80033d4:	4941      	ldr	r1, [pc, #260]	; (80034dc <modeSelection+0x18c>)
 80033d6:	483d      	ldr	r0, [pc, #244]	; (80034cc <modeSelection+0x17c>)
 80033d8:	f004 f93f 	bl	800765a <HAL_UART_Transmit>
			_modeChanged = false;
 80033dc:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <modeSelection+0x170>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
			modeMenu = false;
 80033e2:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <modeSelection+0x188>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
		modeMenu = false;
 80033e8:	4b3b      	ldr	r3, [pc, #236]	; (80034d8 <modeSelection+0x188>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
		NormalMode_Icon;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	2208      	movs	r2, #8
 80033f4:	493a      	ldr	r1, [pc, #232]	; (80034e0 <modeSelection+0x190>)
 80033f6:	4835      	ldr	r0, [pc, #212]	; (80034cc <modeSelection+0x17c>)
 80033f8:	f004 f92f 	bl	800765a <HAL_UART_Transmit>
		break;
 80033fc:	e05d      	b.n	80034ba <modeSelection+0x16a>
		if (_modeChanged) {
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <modeSelection+0x170>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <modeSelection+0xca>
			EcoMode_Popup;
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	220a      	movs	r2, #10
 800340c:	4935      	ldr	r1, [pc, #212]	; (80034e4 <modeSelection+0x194>)
 800340e:	482f      	ldr	r0, [pc, #188]	; (80034cc <modeSelection+0x17c>)
 8003410:	f004 f923 	bl	800765a <HAL_UART_Transmit>
			_modeChanged = false;
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <modeSelection+0x170>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
		if (mode_evcu == 1) {
 800341a:	4b33      	ldr	r3, [pc, #204]	; (80034e8 <modeSelection+0x198>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <modeSelection+0xe2>
			PowerLimitON_Icon;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	2208      	movs	r2, #8
 8003428:	4930      	ldr	r1, [pc, #192]	; (80034ec <modeSelection+0x19c>)
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <modeSelection+0x17c>)
 800342c:	f004 f915 	bl	800765a <HAL_UART_Transmit>
 8003430:	e006      	b.n	8003440 <modeSelection+0xf0>
			PowerLimitOFF_Icon;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	2208      	movs	r2, #8
 8003438:	492d      	ldr	r1, [pc, #180]	; (80034f0 <modeSelection+0x1a0>)
 800343a:	4824      	ldr	r0, [pc, #144]	; (80034cc <modeSelection+0x17c>)
 800343c:	f004 f90d 	bl	800765a <HAL_UART_Transmit>
		if (modeMenu) {
 8003440:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <modeSelection+0x188>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d035      	beq.n	80034b4 <modeSelection+0x164>
			modeMenu = false;
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <modeSelection+0x188>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
			if (mode_override == 1) {
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <modeSelection+0x1a4>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <modeSelection+0x116>
				ModeChangeOFF_Page;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	220a      	movs	r2, #10
 800345c:	4926      	ldr	r1, [pc, #152]	; (80034f8 <modeSelection+0x1a8>)
 800345e:	481b      	ldr	r0, [pc, #108]	; (80034cc <modeSelection+0x17c>)
 8003460:	f004 f8fb 	bl	800765a <HAL_UART_Transmit>
				return;
 8003464:	e029      	b.n	80034ba <modeSelection+0x16a>
				EcoMode_Icon;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	2208      	movs	r2, #8
 800346c:	4923      	ldr	r1, [pc, #140]	; (80034fc <modeSelection+0x1ac>)
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <modeSelection+0x17c>)
 8003470:	f004 f8f3 	bl	800765a <HAL_UART_Transmit>
		break;
 8003474:	e01e      	b.n	80034b4 <modeSelection+0x164>
		if (_modeChanged) {
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <modeSelection+0x170>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <modeSelection+0x142>
			SportMode_Popup;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	220a      	movs	r2, #10
 8003484:	491e      	ldr	r1, [pc, #120]	; (8003500 <modeSelection+0x1b0>)
 8003486:	4811      	ldr	r0, [pc, #68]	; (80034cc <modeSelection+0x17c>)
 8003488:	f004 f8e7 	bl	800765a <HAL_UART_Transmit>
			_modeChanged = false;
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <modeSelection+0x170>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
		if (modeMenu) {
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <modeSelection+0x188>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00e      	beq.n	80034b8 <modeSelection+0x168>
			modeMenu = false;
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <modeSelection+0x188>)
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 80034a0:	f04f 33ff 	mov.w	r3, #4294967295
 80034a4:	2208      	movs	r2, #8
 80034a6:	4917      	ldr	r1, [pc, #92]	; (8003504 <modeSelection+0x1b4>)
 80034a8:	4808      	ldr	r0, [pc, #32]	; (80034cc <modeSelection+0x17c>)
 80034aa:	f004 f8d6 	bl	800765a <HAL_UART_Transmit>
		break;
 80034ae:	e003      	b.n	80034b8 <modeSelection+0x168>
		break;
 80034b0:	bf00      	nop
 80034b2:	e002      	b.n	80034ba <modeSelection+0x16a>
		break;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <modeSelection+0x16a>
		break;
 80034b8:	bf00      	nop
	}
}
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200004c5 	.word	0x200004c5
 80034c4:	2000049a 	.word	0x2000049a
 80034c8:	200001e8 	.word	0x200001e8
 80034cc:	200005c4 	.word	0x200005c4
 80034d0:	20000472 	.word	0x20000472
 80034d4:	20000499 	.word	0x20000499
 80034d8:	200004b2 	.word	0x200004b2
 80034dc:	2000027c 	.word	0x2000027c
 80034e0:	200001d8 	.word	0x200001d8
 80034e4:	20000270 	.word	0x20000270
 80034e8:	2000048c 	.word	0x2000048c
 80034ec:	20000190 	.word	0x20000190
 80034f0:	20000198 	.word	0x20000198
 80034f4:	2000048b 	.word	0x2000048b
 80034f8:	20000294 	.word	0x20000294
 80034fc:	200001d0 	.word	0x200001d0
 8003500:	20000288 	.word	0x20000288
 8003504:	200001e0 	.word	0x200001e0

08003508 <startupModeChange>:

//When Mode change unavailable
void startupModeChange() {
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, Tuk, sizeof(Tuk),
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	220a      	movs	r2, #10
 8003512:	4903      	ldr	r1, [pc, #12]	; (8003520 <startupModeChange+0x18>)
 8003514:	4803      	ldr	r0, [pc, #12]	; (8003524 <startupModeChange+0x1c>)
 8003516:	f004 f8a0 	bl	800765a <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200000fc 	.word	0x200000fc
 8003524:	200005c4 	.word	0x200005c4

08003528 <startingUp>:

	}
}
uint8_t delayCounter = 0;

void startingUp(void) {
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0

//	if (accessory == 0) {
//		modeSelection(currentMode);
//	}

	if (error_check) {
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <startingUp+0x150>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <startingUp+0x22>
		if (err_State_Navigation == true) {
 8003534:	4b51      	ldr	r3, [pc, #324]	; (800367c <startingUp+0x154>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <startingUp+0x22>
			SysError_Shutdown_Page;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295
 8003540:	220a      	movs	r2, #10
 8003542:	494f      	ldr	r1, [pc, #316]	; (8003680 <startingUp+0x158>)
 8003544:	484f      	ldr	r0, [pc, #316]	; (8003684 <startingUp+0x15c>)
 8003546:	f004 f888 	bl	800765a <HAL_UART_Transmit>
		}
	}

	if (entry == true) {
 800354a:	4b4f      	ldr	r3, [pc, #316]	; (8003688 <startingUp+0x160>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d024      	beq.n	800359c <startingUp+0x74>
		if (_navigation) {
 8003552:	4b4e      	ldr	r3, [pc, #312]	; (800368c <startingUp+0x164>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <startingUp+0x66>
			if (_trasmitGlobal == MainMenuPages) {
 800355a:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <startingUp+0x168>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d106      	bne.n	8003572 <startingUp+0x4a>
				drivePageSetter(_drivePageSet);
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <startingUp+0x16c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fb3c 	bl	8002be8 <drivePageSetter>
				return;
 8003570:	e081      	b.n	8003676 <startingUp+0x14e>
			}
			_trasmitGlobal = MainMenuPages;
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <startingUp+0x168>)
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	220a      	movs	r2, #10
 800357e:	4946      	ldr	r1, [pc, #280]	; (8003698 <startingUp+0x170>)
 8003580:	4840      	ldr	r0, [pc, #256]	; (8003684 <startingUp+0x15c>)
 8003582:	f004 f86a 	bl	800765a <HAL_UART_Transmit>
			_navigation = false;
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <startingUp+0x164>)
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
			return;
 800358c:	e073      	b.n	8003676 <startingUp+0x14e>

//		if (_trasmitGlobal == 4) {
//			return;
//		}
//		_trasmitGlobal = 4;
		Press_Brake_Page;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	220a      	movs	r2, #10
 8003594:	4941      	ldr	r1, [pc, #260]	; (800369c <startingUp+0x174>)
 8003596:	483b      	ldr	r0, [pc, #236]	; (8003684 <startingUp+0x15c>)
 8003598:	f004 f85f 	bl	800765a <HAL_UART_Transmit>
	}

	if (start == 1) {
 800359c:	4b40      	ldr	r3, [pc, #256]	; (80036a0 <startingUp+0x178>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d13e      	bne.n	8003622 <startingUp+0xfa>
		entry = false;
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <startingUp+0x160>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <startingUp+0x17c>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <startingUp+0x90>
			//bootAnimation();
			checklit = false;
 80035b2:	4b3c      	ldr	r3, [pc, #240]	; (80036a4 <startingUp+0x17c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 80035b8:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <startingUp+0x180>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d115      	bne.n	80035ec <startingUp+0xc4>
			ReadytoDrive_ON_Icon;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	2208      	movs	r2, #8
 80035c6:	4939      	ldr	r1, [pc, #228]	; (80036ac <startingUp+0x184>)
 80035c8:	482e      	ldr	r0, [pc, #184]	; (8003684 <startingUp+0x15c>)
 80035ca:	f004 f846 	bl	800765a <HAL_UART_Transmit>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <startingUp+0x188>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d011      	beq.n	80035fa <startingUp+0xd2>
				ReadytoDrive_Page;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	220a      	movs	r2, #10
 80035dc:	4935      	ldr	r1, [pc, #212]	; (80036b4 <startingUp+0x18c>)
 80035de:	4829      	ldr	r0, [pc, #164]	; (8003684 <startingUp+0x15c>)
 80035e0:	f004 f83b 	bl	800765a <HAL_UART_Transmit>
				startup = false;
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <startingUp+0x188>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e006      	b.n	80035fa <startingUp+0xd2>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	220a      	movs	r2, #10
 80035f2:	4931      	ldr	r1, [pc, #196]	; (80036b8 <startingUp+0x190>)
 80035f4:	4823      	ldr	r0, [pc, #140]	; (8003684 <startingUp+0x15c>)
 80035f6:	f004 f830 	bl	800765a <HAL_UART_Transmit>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <startingUp+0x194>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <startingUp+0xea>
			Charge_Connection_Error_Popup_ON;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	2208      	movs	r2, #8
 8003608:	492d      	ldr	r1, [pc, #180]	; (80036c0 <startingUp+0x198>)
 800360a:	481e      	ldr	r0, [pc, #120]	; (8003684 <startingUp+0x15c>)
 800360c:	f004 f825 	bl	800765a <HAL_UART_Transmit>
 8003610:	e031      	b.n	8003676 <startingUp+0x14e>
		} else {
			Charge_Connection_Error_Popup_OFF;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	2208      	movs	r2, #8
 8003618:	492a      	ldr	r1, [pc, #168]	; (80036c4 <startingUp+0x19c>)
 800361a:	481a      	ldr	r0, [pc, #104]	; (8003684 <startingUp+0x15c>)
 800361c:	f004 f81d 	bl	800765a <HAL_UART_Transmit>
 8003620:	e029      	b.n	8003676 <startingUp+0x14e>
		}
		/////////////////////////////////////////////////////////

	} else { //if Start == 0//
		if (mode) {
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <startingUp+0x1a0>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d004      	beq.n	8003634 <startingUp+0x10c>
			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
 800362a:	f7ff ff6d 	bl	8003508 <startupModeChange>
			//Final: Mode Change unavailable before ignition
			mode = false;
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <startingUp+0x1a0>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
		}
		if (warning == 1) {
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <startingUp+0x1a4>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <startingUp+0x122>
			Press_Brake_Page;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	220a      	movs	r2, #10
 8003642:	4916      	ldr	r1, [pc, #88]	; (800369c <startingUp+0x174>)
 8003644:	480f      	ldr	r0, [pc, #60]	; (8003684 <startingUp+0x15c>)
 8003646:	f004 f808 	bl	800765a <HAL_UART_Transmit>
		}
		if (warning == 2) {
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <startingUp+0x1a4>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d106      	bne.n	8003660 <startingUp+0x138>
			Mild_Error_ON_Icon;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	2208      	movs	r2, #8
 8003658:	491d      	ldr	r1, [pc, #116]	; (80036d0 <startingUp+0x1a8>)
 800365a:	480a      	ldr	r0, [pc, #40]	; (8003684 <startingUp+0x15c>)
 800365c:	f003 fffd 	bl	800765a <HAL_UART_Transmit>
		}
		if (warning == 3) {
 8003660:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <startingUp+0x1a4>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d106      	bne.n	8003676 <startingUp+0x14e>
			Gear_Error_Page;
 8003668:	f04f 33ff 	mov.w	r3, #4294967295
 800366c:	220a      	movs	r2, #10
 800366e:	4919      	ldr	r1, [pc, #100]	; (80036d4 <startingUp+0x1ac>)
 8003670:	4804      	ldr	r0, [pc, #16]	; (8003684 <startingUp+0x15c>)
 8003672:	f003 fff2 	bl	800765a <HAL_UART_Transmit>

		}
	}

}
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200004b0 	.word	0x200004b0
 800367c:	20000498 	.word	0x20000498
 8003680:	200000e4 	.word	0x200000e4
 8003684:	200005c4 	.word	0x200005c4
 8003688:	2000000d 	.word	0x2000000d
 800368c:	200004b8 	.word	0x200004b8
 8003690:	200004ce 	.word	0x200004ce
 8003694:	200004cd 	.word	0x200004cd
 8003698:	20000024 	.word	0x20000024
 800369c:	20000030 	.word	0x20000030
 80036a0:	20000488 	.word	0x20000488
 80036a4:	2000000e 	.word	0x2000000e
 80036a8:	20000487 	.word	0x20000487
 80036ac:	200001a0 	.word	0x200001a0
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	20000054 	.word	0x20000054
 80036b8:	20000048 	.word	0x20000048
 80036bc:	200004b5 	.word	0x200004b5
 80036c0:	200002a0 	.word	0x200002a0
 80036c4:	200002a8 	.word	0x200002a8
 80036c8:	2000042d 	.word	0x2000042d
 80036cc:	2000048d 	.word	0x2000048d
 80036d0:	20000180 	.word	0x20000180
 80036d4:	2000003c 	.word	0x2000003c

080036d8 <realTimeData>:

uint8_t powerBarTransmit = 0;

void realTimeData(void) { //Realtime updatable data sending
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
//Speed
	realTime_counter++;
 80036dc:	4ba3      	ldr	r3, [pc, #652]	; (800396c <realTimeData+0x294>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4ba1      	ldr	r3, [pc, #644]	; (800396c <realTimeData+0x294>)
 80036e6:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 1) {
 80036e8:	4ba0      	ldr	r3, [pc, #640]	; (800396c <realTimeData+0x294>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d11b      	bne.n	8003728 <realTimeData+0x50>
		strDATA[4] = 0x11; //
 80036f0:	4b9f      	ldr	r3, [pc, #636]	; (8003970 <realTimeData+0x298>)
 80036f2:	2211      	movs	r2, #17
 80036f4:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x00; //
 80036f6:	4b9e      	ldr	r3, [pc, #632]	; (8003970 <realTimeData+0x298>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (test_speed & 0xFF);
 80036fc:	4b9d      	ldr	r3, [pc, #628]	; (8003974 <realTimeData+0x29c>)
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b9b      	ldr	r3, [pc, #620]	; (8003970 <realTimeData+0x298>)
 8003704:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (test_speed >> 8);
 8003706:	4b9b      	ldr	r3, [pc, #620]	; (8003974 <realTimeData+0x29c>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	b29b      	uxth	r3, r3
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b97      	ldr	r3, [pc, #604]	; (8003970 <realTimeData+0x298>)
 8003712:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003714:	f04f 33ff 	mov.w	r3, #4294967295
 8003718:	2208      	movs	r2, #8
 800371a:	4995      	ldr	r1, [pc, #596]	; (8003970 <realTimeData+0x298>)
 800371c:	4896      	ldr	r0, [pc, #600]	; (8003978 <realTimeData+0x2a0>)
 800371e:	f003 ff9c 	bl	800765a <HAL_UART_Transmit>
		;
		testFlag_2 = true;
 8003722:	4b96      	ldr	r3, [pc, #600]	; (800397c <realTimeData+0x2a4>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
	}
//ODO
	if (realTime_counter == 2) {
 8003728:	4b90      	ldr	r3, [pc, #576]	; (800396c <realTimeData+0x294>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d123      	bne.n	8003778 <realTimeData+0xa0>
		strDATA2[4] = 0x11;
 8003730:	4b93      	ldr	r3, [pc, #588]	; (8003980 <realTimeData+0x2a8>)
 8003732:	2211      	movs	r2, #17
 8003734:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x20;
 8003736:	4b92      	ldr	r3, [pc, #584]	; (8003980 <realTimeData+0x2a8>)
 8003738:	2220      	movs	r2, #32
 800373a:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.ODO & 0xFF);
 800373c:	4b91      	ldr	r3, [pc, #580]	; (8003984 <realTimeData+0x2ac>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	4b8f      	ldr	r3, [pc, #572]	; (8003980 <realTimeData+0x2a8>)
 8003744:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.ODO >> 8);
 8003746:	4b8f      	ldr	r3, [pc, #572]	; (8003984 <realTimeData+0x2ac>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0a1b      	lsrs	r3, r3, #8
 800374c:	b2da      	uxtb	r2, r3
 800374e:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <realTimeData+0x2a8>)
 8003750:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.ODO >> 16);
 8003752:	4b8c      	ldr	r3, [pc, #560]	; (8003984 <realTimeData+0x2ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <realTimeData+0x2a8>)
 800375c:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.ODO >> 24);
 800375e:	4b89      	ldr	r3, [pc, #548]	; (8003984 <realTimeData+0x2ac>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	0e1b      	lsrs	r3, r3, #24
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b86      	ldr	r3, [pc, #536]	; (8003980 <realTimeData+0x2a8>)
 8003768:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA2
 800376a:	f04f 33ff 	mov.w	r3, #4294967295
 800376e:	220a      	movs	r2, #10
 8003770:	4983      	ldr	r1, [pc, #524]	; (8003980 <realTimeData+0x2a8>)
 8003772:	4881      	ldr	r0, [pc, #516]	; (8003978 <realTimeData+0x2a0>)
 8003774:	f003 ff71 	bl	800765a <HAL_UART_Transmit>
		;
	}
////Trip
	if (realTime_counter == 3) {
 8003778:	4b7c      	ldr	r3, [pc, #496]	; (800396c <realTimeData+0x294>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d124      	bne.n	80037ca <realTimeData+0xf2>
		strDATA2[4] = 0x11;
 8003780:	4b7f      	ldr	r3, [pc, #508]	; (8003980 <realTimeData+0x2a8>)
 8003782:	2211      	movs	r2, #17
 8003784:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x40;
 8003786:	4b7e      	ldr	r3, [pc, #504]	; (8003980 <realTimeData+0x2a8>)
 8003788:	2240      	movs	r2, #64	; 0x40
 800378a:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.trip & 0xFF);
 800378c:	4b7d      	ldr	r3, [pc, #500]	; (8003984 <realTimeData+0x2ac>)
 800378e:	889b      	ldrh	r3, [r3, #4]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <realTimeData+0x2a8>)
 8003794:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.trip >> 8);
 8003796:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <realTimeData+0x2ac>)
 8003798:	889b      	ldrh	r3, [r3, #4]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	b29b      	uxth	r3, r3
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4b77      	ldr	r3, [pc, #476]	; (8003980 <realTimeData+0x2a8>)
 80037a2:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.trip >> 16);
 80037a4:	4b77      	ldr	r3, [pc, #476]	; (8003984 <realTimeData+0x2ac>)
 80037a6:	889b      	ldrh	r3, [r3, #4]
 80037a8:	141b      	asrs	r3, r3, #16
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	4b74      	ldr	r3, [pc, #464]	; (8003980 <realTimeData+0x2a8>)
 80037ae:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.trip >> 24);
 80037b0:	4b74      	ldr	r3, [pc, #464]	; (8003984 <realTimeData+0x2ac>)
 80037b2:	889b      	ldrh	r3, [r3, #4]
 80037b4:	161b      	asrs	r3, r3, #24
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b71      	ldr	r3, [pc, #452]	; (8003980 <realTimeData+0x2a8>)
 80037ba:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA2
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
 80037c0:	220a      	movs	r2, #10
 80037c2:	496f      	ldr	r1, [pc, #444]	; (8003980 <realTimeData+0x2a8>)
 80037c4:	486c      	ldr	r0, [pc, #432]	; (8003978 <realTimeData+0x2a0>)
 80037c6:	f003 ff48 	bl	800765a <HAL_UART_Transmit>
		;
	}
//Power Bar
	powerBarTransmit++;
 80037ca:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <realTimeData+0x2b0>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <realTimeData+0x2b0>)
 80037d4:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 10) {
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <realTimeData+0x294>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b0a      	cmp	r3, #10
 80037dc:	f040 817b 	bne.w	8003ad6 <realTimeData+0x3fe>

		if (rpm_meter >= 1) {
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <realTimeData+0x2b4>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8173 	beq.w	8003ad0 <realTimeData+0x3f8>
			if (powerBarTransmit == 9) {
 80037ea:	4b67      	ldr	r3, [pc, #412]	; (8003988 <realTimeData+0x2b0>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b09      	cmp	r3, #9
 80037f0:	d10f      	bne.n	8003812 <realTimeData+0x13a>
				if (power_90 <= power) {
 80037f2:	4b67      	ldr	r3, [pc, #412]	; (8003990 <realTimeData+0x2b8>)
 80037f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f8:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80037fc:	dd06      	ble.n	800380c <realTimeData+0x134>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power5, sizeof(power5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power5, sizeof(power5),
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	2208      	movs	r2, #8
 8003804:	4963      	ldr	r1, [pc, #396]	; (8003994 <realTimeData+0x2bc>)
 8003806:	485c      	ldr	r0, [pc, #368]	; (8003978 <realTimeData+0x2a0>)
 8003808:	f003 ff27 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
				powerBarTransmit = 0;
 800380c:	4b5e      	ldr	r3, [pc, #376]	; (8003988 <realTimeData+0x2b0>)
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
			}
			if (powerBarTransmit == 8) {
 8003812:	4b5d      	ldr	r3, [pc, #372]	; (8003988 <realTimeData+0x2b0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d113      	bne.n	8003842 <realTimeData+0x16a>
				if (power_80 <= power && power < power_90) {
 800381a:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <realTimeData+0x2b8>)
 800381c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003820:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003824:	4293      	cmp	r3, r2
 8003826:	dd0c      	ble.n	8003842 <realTimeData+0x16a>
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <realTimeData+0x2b8>)
 800382a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800382e:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003832:	dc06      	bgt.n	8003842 <realTimeData+0x16a>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power4, sizeof(power4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power4, sizeof(power4),
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	2208      	movs	r2, #8
 800383a:	4957      	ldr	r1, [pc, #348]	; (8003998 <realTimeData+0x2c0>)
 800383c:	484e      	ldr	r0, [pc, #312]	; (8003978 <realTimeData+0x2a0>)
 800383e:	f003 ff0c 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 7) {
 8003842:	4b51      	ldr	r3, [pc, #324]	; (8003988 <realTimeData+0x2b0>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b07      	cmp	r3, #7
 8003848:	d114      	bne.n	8003874 <realTimeData+0x19c>
				if (power_70 <= power && power < power_80) {
 800384a:	4b51      	ldr	r3, [pc, #324]	; (8003990 <realTimeData+0x2b8>)
 800384c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003850:	f240 2295 	movw	r2, #661	; 0x295
 8003854:	4293      	cmp	r3, r2
 8003856:	dd0d      	ble.n	8003874 <realTimeData+0x19c>
 8003858:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <realTimeData+0x2b8>)
 800385a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003862:	4293      	cmp	r3, r2
 8003864:	dc06      	bgt.n	8003874 <realTimeData+0x19c>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power3, sizeof(power3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power3, sizeof(power3),
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	2208      	movs	r2, #8
 800386c:	494b      	ldr	r1, [pc, #300]	; (800399c <realTimeData+0x2c4>)
 800386e:	4842      	ldr	r0, [pc, #264]	; (8003978 <realTimeData+0x2a0>)
 8003870:	f003 fef3 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 6) {
 8003874:	4b44      	ldr	r3, [pc, #272]	; (8003988 <realTimeData+0x2b0>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b06      	cmp	r3, #6
 800387a:	d113      	bne.n	80038a4 <realTimeData+0x1cc>
				if (power_60 <= power && power < power_70) {
 800387c:	4b44      	ldr	r3, [pc, #272]	; (8003990 <realTimeData+0x2b8>)
 800387e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003882:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8003886:	dd0d      	ble.n	80038a4 <realTimeData+0x1cc>
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <realTimeData+0x2b8>)
 800388a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388e:	f240 2295 	movw	r2, #661	; 0x295
 8003892:	4293      	cmp	r3, r2
 8003894:	dc06      	bgt.n	80038a4 <realTimeData+0x1cc>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power2, sizeof(power2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power2, sizeof(power2),
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	2208      	movs	r2, #8
 800389c:	4940      	ldr	r1, [pc, #256]	; (80039a0 <realTimeData+0x2c8>)
 800389e:	4836      	ldr	r0, [pc, #216]	; (8003978 <realTimeData+0x2a0>)
 80038a0:	f003 fedb 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 5) {
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <realTimeData+0x2b0>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d112      	bne.n	80038d2 <realTimeData+0x1fa>
				if (eco_50 <= power && power < power_60) {
 80038ac:	4b38      	ldr	r3, [pc, #224]	; (8003990 <realTimeData+0x2b8>)
 80038ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038b6:	dd0c      	ble.n	80038d2 <realTimeData+0x1fa>
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <realTimeData+0x2b8>)
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80038c2:	dc06      	bgt.n	80038d2 <realTimeData+0x1fa>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power1, sizeof(power1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power1, sizeof(power1),
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	2208      	movs	r2, #8
 80038ca:	4936      	ldr	r1, [pc, #216]	; (80039a4 <realTimeData+0x2cc>)
 80038cc:	482a      	ldr	r0, [pc, #168]	; (8003978 <realTimeData+0x2a0>)
 80038ce:	f003 fec4 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 4) {
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <realTimeData+0x2b0>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d112      	bne.n	8003900 <realTimeData+0x228>
				if (eco_40 <= power && power < eco_50) {
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <realTimeData+0x2b8>)
 80038dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80038e4:	dd0c      	ble.n	8003900 <realTimeData+0x228>
 80038e6:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <realTimeData+0x2b8>)
 80038e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038f0:	dc06      	bgt.n	8003900 <realTimeData+0x228>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco5, sizeof(eco5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco5, sizeof(eco5),
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	2208      	movs	r2, #8
 80038f8:	492b      	ldr	r1, [pc, #172]	; (80039a8 <realTimeData+0x2d0>)
 80038fa:	481f      	ldr	r0, [pc, #124]	; (8003978 <realTimeData+0x2a0>)
 80038fc:	f003 fead 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 3) {
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <realTimeData+0x2b0>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d112      	bne.n	800392e <realTimeData+0x256>
				if (eco_30 <= power && power < eco_40) {
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <realTimeData+0x2b8>)
 800390a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800390e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003912:	dd0c      	ble.n	800392e <realTimeData+0x256>
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <realTimeData+0x2b8>)
 8003916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800391e:	dc06      	bgt.n	800392e <realTimeData+0x256>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco4, sizeof(eco4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco4, sizeof(eco4),
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	2208      	movs	r2, #8
 8003926:	4921      	ldr	r1, [pc, #132]	; (80039ac <realTimeData+0x2d4>)
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <realTimeData+0x2a0>)
 800392a:	f003 fe96 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 2) {
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <realTimeData+0x2b0>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d111      	bne.n	800395a <realTimeData+0x282>
				if (eco_20 <= power && power < eco_30) {
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <realTimeData+0x2b8>)
 8003938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393c:	2bc8      	cmp	r3, #200	; 0xc8
 800393e:	dd0c      	ble.n	800395a <realTimeData+0x282>
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <realTimeData+0x2b8>)
 8003942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003946:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800394a:	dc06      	bgt.n	800395a <realTimeData+0x282>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco3, sizeof(eco3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco3, sizeof(eco3),
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	2208      	movs	r2, #8
 8003952:	4917      	ldr	r1, [pc, #92]	; (80039b0 <realTimeData+0x2d8>)
 8003954:	4808      	ldr	r0, [pc, #32]	; (8003978 <realTimeData+0x2a0>)
 8003956:	f003 fe80 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 1) {
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <realTimeData+0x2b0>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d135      	bne.n	80039ce <realTimeData+0x2f6>
				if (eco_10 <= power && power < eco_20) {
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <realTimeData+0x2b8>)
 8003964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003968:	2b64      	cmp	r3, #100	; 0x64
 800396a:	e023      	b.n	80039b4 <realTimeData+0x2dc>
 800396c:	200005bc 	.word	0x200005bc
 8003970:	20000434 	.word	0x20000434
 8003974:	20000470 	.word	0x20000470
 8003978:	200005c4 	.word	0x200005c4
 800397c:	200004b6 	.word	0x200004b6
 8003980:	2000043c 	.word	0x2000043c
 8003984:	20000448 	.word	0x20000448
 8003988:	200005c0 	.word	0x200005c0
 800398c:	2000047c 	.word	0x2000047c
 8003990:	20000482 	.word	0x20000482
 8003994:	200003a0 	.word	0x200003a0
 8003998:	20000398 	.word	0x20000398
 800399c:	20000390 	.word	0x20000390
 80039a0:	20000388 	.word	0x20000388
 80039a4:	20000380 	.word	0x20000380
 80039a8:	20000378 	.word	0x20000378
 80039ac:	20000370 	.word	0x20000370
 80039b0:	20000368 	.word	0x20000368
 80039b4:	dd0b      	ble.n	80039ce <realTimeData+0x2f6>
 80039b6:	4ba6      	ldr	r3, [pc, #664]	; (8003c50 <realTimeData+0x578>)
 80039b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039bc:	2bc8      	cmp	r3, #200	; 0xc8
 80039be:	dc06      	bgt.n	80039ce <realTimeData+0x2f6>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco2, sizeof(eco2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco2, sizeof(eco2),
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	2208      	movs	r2, #8
 80039c6:	49a3      	ldr	r1, [pc, #652]	; (8003c54 <realTimeData+0x57c>)
 80039c8:	48a3      	ldr	r0, [pc, #652]	; (8003c58 <realTimeData+0x580>)
 80039ca:	f003 fe46 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 0) {
 80039ce:	4ba3      	ldr	r3, [pc, #652]	; (8003c5c <realTimeData+0x584>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d110      	bne.n	80039f8 <realTimeData+0x320>
				if (0 <= power && power < eco_10) {
 80039d6:	4b9e      	ldr	r3, [pc, #632]	; (8003c50 <realTimeData+0x578>)
 80039d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	db0b      	blt.n	80039f8 <realTimeData+0x320>
 80039e0:	4b9b      	ldr	r3, [pc, #620]	; (8003c50 <realTimeData+0x578>)
 80039e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	dc06      	bgt.n	80039f8 <realTimeData+0x320>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco1, sizeof(eco1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco1, sizeof(eco1),
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	2208      	movs	r2, #8
 80039f0:	499b      	ldr	r1, [pc, #620]	; (8003c60 <realTimeData+0x588>)
 80039f2:	4899      	ldr	r0, [pc, #612]	; (8003c58 <realTimeData+0x580>)
 80039f4:	f003 fe31 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 10) {
 80039f8:	4b98      	ldr	r3, [pc, #608]	; (8003c5c <realTimeData+0x584>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b0a      	cmp	r3, #10
 80039fe:	d111      	bne.n	8003a24 <realTimeData+0x34c>
				if (-1 >= power && power >= -50) {
 8003a00:	4b93      	ldr	r3, [pc, #588]	; (8003c50 <realTimeData+0x578>)
 8003a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da0c      	bge.n	8003a24 <realTimeData+0x34c>
 8003a0a:	4b91      	ldr	r3, [pc, #580]	; (8003c50 <realTimeData+0x578>)
 8003a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a10:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8003a14:	db06      	blt.n	8003a24 <realTimeData+0x34c>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge1, sizeof(charge1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge1, sizeof(charge1),
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4991      	ldr	r1, [pc, #580]	; (8003c64 <realTimeData+0x58c>)
 8003a1e:	488e      	ldr	r0, [pc, #568]	; (8003c58 <realTimeData+0x580>)
 8003a20:	f003 fe1b 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 11) {
 8003a24:	4b8d      	ldr	r3, [pc, #564]	; (8003c5c <realTimeData+0x584>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b0b      	cmp	r3, #11
 8003a2a:	d112      	bne.n	8003a52 <realTimeData+0x37a>
				if (-51 >= power && power >= -101) {
 8003a2c:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <realTimeData+0x578>)
 8003a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a32:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8003a36:	da0c      	bge.n	8003a52 <realTimeData+0x37a>
 8003a38:	4b85      	ldr	r3, [pc, #532]	; (8003c50 <realTimeData+0x578>)
 8003a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a3e:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8003a42:	db06      	blt.n	8003a52 <realTimeData+0x37a>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge2, sizeof(charge2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge2, sizeof(charge2),
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295
 8003a48:	2208      	movs	r2, #8
 8003a4a:	4987      	ldr	r1, [pc, #540]	; (8003c68 <realTimeData+0x590>)
 8003a4c:	4882      	ldr	r0, [pc, #520]	; (8003c58 <realTimeData+0x580>)
 8003a4e:	f003 fe04 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 12) {
 8003a52:	4b82      	ldr	r3, [pc, #520]	; (8003c5c <realTimeData+0x584>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d112      	bne.n	8003a80 <realTimeData+0x3a8>
				if (-102 >= power && power >= -152) {
 8003a5a:	4b7d      	ldr	r3, [pc, #500]	; (8003c50 <realTimeData+0x578>)
 8003a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a60:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8003a64:	da0c      	bge.n	8003a80 <realTimeData+0x3a8>
 8003a66:	4b7a      	ldr	r3, [pc, #488]	; (8003c50 <realTimeData+0x578>)
 8003a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a6c:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003a70:	db06      	blt.n	8003a80 <realTimeData+0x3a8>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge3, sizeof(charge3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge3, sizeof(charge3),
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	2208      	movs	r2, #8
 8003a78:	497c      	ldr	r1, [pc, #496]	; (8003c6c <realTimeData+0x594>)
 8003a7a:	4877      	ldr	r0, [pc, #476]	; (8003c58 <realTimeData+0x580>)
 8003a7c:	f003 fded 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 13) {
 8003a80:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <realTimeData+0x584>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b0d      	cmp	r3, #13
 8003a86:	d112      	bne.n	8003aae <realTimeData+0x3d6>
				if (-153 >= power && power >= -203) {
 8003a88:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <realTimeData+0x578>)
 8003a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a8e:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003a92:	da0c      	bge.n	8003aae <realTimeData+0x3d6>
 8003a94:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <realTimeData+0x578>)
 8003a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9a:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003a9e:	db06      	blt.n	8003aae <realTimeData+0x3d6>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge4, sizeof(charge4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge4, sizeof(charge4),
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	4972      	ldr	r1, [pc, #456]	; (8003c70 <realTimeData+0x598>)
 8003aa8:	486b      	ldr	r0, [pc, #428]	; (8003c58 <realTimeData+0x580>)
 8003aaa:	f003 fdd6 	bl	800765a <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 14) {
 8003aae:	4b6b      	ldr	r3, [pc, #428]	; (8003c5c <realTimeData+0x584>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b0e      	cmp	r3, #14
 8003ab4:	d10c      	bne.n	8003ad0 <realTimeData+0x3f8>
				if (-204 >= power) {
 8003ab6:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <realTimeData+0x578>)
 8003ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003abc:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003ac0:	da06      	bge.n	8003ad0 <realTimeData+0x3f8>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge5, sizeof(charge5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge5, sizeof(charge5),
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	496a      	ldr	r1, [pc, #424]	; (8003c74 <realTimeData+0x59c>)
 8003aca:	4863      	ldr	r0, [pc, #396]	; (8003c58 <realTimeData+0x580>)
 8003acc:	f003 fdc5 	bl	800765a <HAL_UART_Transmit>
#endif
				}
			}

		}
		realTime_counter = 0;
 8003ad0:	4b69      	ldr	r3, [pc, #420]	; (8003c78 <realTimeData+0x5a0>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
	}
	if (rpm_meter == 0) {
 8003ad6:	4b69      	ldr	r3, [pc, #420]	; (8003c7c <realTimeData+0x5a4>)
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <realTimeData+0x414>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, eco0, sizeof(eco0));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, eco0, sizeof(eco0), HAL_MAX_DELAY);
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	4966      	ldr	r1, [pc, #408]	; (8003c80 <realTimeData+0x5a8>)
 8003ae6:	485c      	ldr	r0, [pc, #368]	; (8003c58 <realTimeData+0x580>)
 8003ae8:	f003 fdb7 	bl	800765a <HAL_UART_Transmit>
//		}

	///}

//Battery Bar
	if (soc_value <= 5) {
 8003aec:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <realTimeData+0x5ac>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d80d      	bhi.n	8003b10 <realTimeData+0x438>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat0, sizeof(bat0));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat0, sizeof(bat0), HAL_MAX_DELAY);
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295
 8003af8:	2208      	movs	r2, #8
 8003afa:	4963      	ldr	r1, [pc, #396]	; (8003c88 <realTimeData+0x5b0>)
 8003afc:	4856      	ldr	r0, [pc, #344]	; (8003c58 <realTimeData+0x580>)
 8003afe:	f003 fdac 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
 8003b06:	2208      	movs	r2, #8
 8003b08:	4960      	ldr	r1, [pc, #384]	; (8003c8c <realTimeData+0x5b4>)
 8003b0a:	4853      	ldr	r0, [pc, #332]	; (8003c58 <realTimeData+0x580>)
 8003b0c:	f003 fda5 	bl	800765a <HAL_UART_Transmit>
#endif
	}
	if (6 <= soc_value && soc_value <= 10) {
 8003b10:	4b5c      	ldr	r3, [pc, #368]	; (8003c84 <realTimeData+0x5ac>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d911      	bls.n	8003b3c <realTimeData+0x464>
 8003b18:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <realTimeData+0x5ac>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b0a      	cmp	r3, #10
 8003b1e:	d80d      	bhi.n	8003b3c <realTimeData+0x464>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat5, sizeof(bat5));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat5, sizeof(bat5), HAL_MAX_DELAY);
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	2208      	movs	r2, #8
 8003b26:	495a      	ldr	r1, [pc, #360]	; (8003c90 <realTimeData+0x5b8>)
 8003b28:	484b      	ldr	r0, [pc, #300]	; (8003c58 <realTimeData+0x580>)
 8003b2a:	f003 fd96 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	2208      	movs	r2, #8
 8003b34:	4955      	ldr	r1, [pc, #340]	; (8003c8c <realTimeData+0x5b4>)
 8003b36:	4848      	ldr	r0, [pc, #288]	; (8003c58 <realTimeData+0x580>)
 8003b38:	f003 fd8f 	bl	800765a <HAL_UART_Transmit>
#endif
	}
	if (11 <= soc_value && soc_value <= 15) {
 8003b3c:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <realTimeData+0x5ac>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b0a      	cmp	r3, #10
 8003b42:	d911      	bls.n	8003b68 <realTimeData+0x490>
 8003b44:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <realTimeData+0x5ac>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d80d      	bhi.n	8003b68 <realTimeData+0x490>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat10, sizeof(bat10));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat10, sizeof(bat10), HAL_MAX_DELAY);
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b50:	2208      	movs	r2, #8
 8003b52:	4950      	ldr	r1, [pc, #320]	; (8003c94 <realTimeData+0x5bc>)
 8003b54:	4840      	ldr	r0, [pc, #256]	; (8003c58 <realTimeData+0x580>)
 8003b56:	f003 fd80 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	2208      	movs	r2, #8
 8003b60:	494a      	ldr	r1, [pc, #296]	; (8003c8c <realTimeData+0x5b4>)
 8003b62:	483d      	ldr	r0, [pc, #244]	; (8003c58 <realTimeData+0x580>)
 8003b64:	f003 fd79 	bl	800765a <HAL_UART_Transmit>
#endif
	}
	if (16 <= soc_value && soc_value <= 20) {
 8003b68:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <realTimeData+0x5ac>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b0f      	cmp	r3, #15
 8003b6e:	d911      	bls.n	8003b94 <realTimeData+0x4bc>
 8003b70:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <realTimeData+0x5ac>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b14      	cmp	r3, #20
 8003b76:	d80d      	bhi.n	8003b94 <realTimeData+0x4bc>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat15, sizeof(bat15));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat15, sizeof(bat15), HAL_MAX_DELAY);
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	4946      	ldr	r1, [pc, #280]	; (8003c98 <realTimeData+0x5c0>)
 8003b80:	4835      	ldr	r0, [pc, #212]	; (8003c58 <realTimeData+0x580>)
 8003b82:	f003 fd6a 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	493f      	ldr	r1, [pc, #252]	; (8003c8c <realTimeData+0x5b4>)
 8003b8e:	4832      	ldr	r0, [pc, #200]	; (8003c58 <realTimeData+0x580>)
 8003b90:	f003 fd63 	bl	800765a <HAL_UART_Transmit>
#endif
	}
	if (21 <= soc_value && soc_value <= 25) {
 8003b94:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <realTimeData+0x5ac>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b14      	cmp	r3, #20
 8003b9a:	d911      	bls.n	8003bc0 <realTimeData+0x4e8>
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <realTimeData+0x5ac>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b19      	cmp	r3, #25
 8003ba2:	d80d      	bhi.n	8003bc0 <realTimeData+0x4e8>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat20, sizeof(bat20));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat20, sizeof(bat20), HAL_MAX_DELAY);
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	2208      	movs	r2, #8
 8003baa:	493c      	ldr	r1, [pc, #240]	; (8003c9c <realTimeData+0x5c4>)
 8003bac:	482a      	ldr	r0, [pc, #168]	; (8003c58 <realTimeData+0x580>)
 8003bae:	f003 fd54 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	4939      	ldr	r1, [pc, #228]	; (8003ca0 <realTimeData+0x5c8>)
 8003bba:	4827      	ldr	r0, [pc, #156]	; (8003c58 <realTimeData+0x580>)
 8003bbc:	f003 fd4d 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (26 <= soc_value && soc_value <= 30) {
 8003bc0:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <realTimeData+0x5ac>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b19      	cmp	r3, #25
 8003bc6:	d911      	bls.n	8003bec <realTimeData+0x514>
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <realTimeData+0x5ac>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b1e      	cmp	r3, #30
 8003bce:	d80d      	bhi.n	8003bec <realTimeData+0x514>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat25, sizeof(bat25));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat25, sizeof(bat25), HAL_MAX_DELAY);
 8003bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4933      	ldr	r1, [pc, #204]	; (8003ca4 <realTimeData+0x5cc>)
 8003bd8:	481f      	ldr	r0, [pc, #124]	; (8003c58 <realTimeData+0x580>)
 8003bda:	f003 fd3e 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	2208      	movs	r2, #8
 8003be4:	492e      	ldr	r1, [pc, #184]	; (8003ca0 <realTimeData+0x5c8>)
 8003be6:	481c      	ldr	r0, [pc, #112]	; (8003c58 <realTimeData+0x580>)
 8003be8:	f003 fd37 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (31 <= soc_value && soc_value <= 35) {
 8003bec:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <realTimeData+0x5ac>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b1e      	cmp	r3, #30
 8003bf2:	d911      	bls.n	8003c18 <realTimeData+0x540>
 8003bf4:	4b23      	ldr	r3, [pc, #140]	; (8003c84 <realTimeData+0x5ac>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b23      	cmp	r3, #35	; 0x23
 8003bfa:	d80d      	bhi.n	8003c18 <realTimeData+0x540>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat30, sizeof(bat30));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat30, sizeof(bat30), HAL_MAX_DELAY);
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	2208      	movs	r2, #8
 8003c02:	4929      	ldr	r1, [pc, #164]	; (8003ca8 <realTimeData+0x5d0>)
 8003c04:	4814      	ldr	r0, [pc, #80]	; (8003c58 <realTimeData+0x580>)
 8003c06:	f003 fd28 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	2208      	movs	r2, #8
 8003c10:	4923      	ldr	r1, [pc, #140]	; (8003ca0 <realTimeData+0x5c8>)
 8003c12:	4811      	ldr	r0, [pc, #68]	; (8003c58 <realTimeData+0x580>)
 8003c14:	f003 fd21 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (36 <= soc_value && soc_value <= 40) {
 8003c18:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <realTimeData+0x5ac>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b23      	cmp	r3, #35	; 0x23
 8003c1e:	d911      	bls.n	8003c44 <realTimeData+0x56c>
 8003c20:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <realTimeData+0x5ac>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b28      	cmp	r3, #40	; 0x28
 8003c26:	d80d      	bhi.n	8003c44 <realTimeData+0x56c>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat35, sizeof(bat35));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat35, sizeof(bat35), HAL_MAX_DELAY);
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	491f      	ldr	r1, [pc, #124]	; (8003cac <realTimeData+0x5d4>)
 8003c30:	4809      	ldr	r0, [pc, #36]	; (8003c58 <realTimeData+0x580>)
 8003c32:	f003 fd12 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4918      	ldr	r1, [pc, #96]	; (8003ca0 <realTimeData+0x5c8>)
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <realTimeData+0x580>)
 8003c40:	f003 fd0b 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (41 <= soc_value && soc_value <= 45) {
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <realTimeData+0x5ac>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b28      	cmp	r3, #40	; 0x28
 8003c4a:	d943      	bls.n	8003cd4 <realTimeData+0x5fc>
 8003c4c:	e030      	b.n	8003cb0 <realTimeData+0x5d8>
 8003c4e:	bf00      	nop
 8003c50:	20000482 	.word	0x20000482
 8003c54:	20000360 	.word	0x20000360
 8003c58:	200005c4 	.word	0x200005c4
 8003c5c:	200005c0 	.word	0x200005c0
 8003c60:	20000358 	.word	0x20000358
 8003c64:	200003a8 	.word	0x200003a8
 8003c68:	200003b0 	.word	0x200003b0
 8003c6c:	200003b8 	.word	0x200003b8
 8003c70:	200003c0 	.word	0x200003c0
 8003c74:	200003c8 	.word	0x200003c8
 8003c78:	200005bc 	.word	0x200005bc
 8003c7c:	2000047c 	.word	0x2000047c
 8003c80:	20000350 	.word	0x20000350
 8003c84:	20000474 	.word	0x20000474
 8003c88:	200002b0 	.word	0x200002b0
 8003c8c:	20000210 	.word	0x20000210
 8003c90:	200002b8 	.word	0x200002b8
 8003c94:	200002c0 	.word	0x200002c0
 8003c98:	200002c8 	.word	0x200002c8
 8003c9c:	200002d0 	.word	0x200002d0
 8003ca0:	20000208 	.word	0x20000208
 8003ca4:	200002d8 	.word	0x200002d8
 8003ca8:	200002e0 	.word	0x200002e0
 8003cac:	200002e8 	.word	0x200002e8
 8003cb0:	4b8b      	ldr	r3, [pc, #556]	; (8003ee0 <realTimeData+0x808>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b2d      	cmp	r3, #45	; 0x2d
 8003cb6:	d80d      	bhi.n	8003cd4 <realTimeData+0x5fc>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat40, sizeof(bat40));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat40, sizeof(bat40), HAL_MAX_DELAY);
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	4989      	ldr	r1, [pc, #548]	; (8003ee4 <realTimeData+0x80c>)
 8003cc0:	4889      	ldr	r0, [pc, #548]	; (8003ee8 <realTimeData+0x810>)
 8003cc2:	f003 fcca 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cca:	2208      	movs	r2, #8
 8003ccc:	4987      	ldr	r1, [pc, #540]	; (8003eec <realTimeData+0x814>)
 8003cce:	4886      	ldr	r0, [pc, #536]	; (8003ee8 <realTimeData+0x810>)
 8003cd0:	f003 fcc3 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (46 <= soc_value && soc_value <= 50) {
 8003cd4:	4b82      	ldr	r3, [pc, #520]	; (8003ee0 <realTimeData+0x808>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b2d      	cmp	r3, #45	; 0x2d
 8003cda:	d911      	bls.n	8003d00 <realTimeData+0x628>
 8003cdc:	4b80      	ldr	r3, [pc, #512]	; (8003ee0 <realTimeData+0x808>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b32      	cmp	r3, #50	; 0x32
 8003ce2:	d80d      	bhi.n	8003d00 <realTimeData+0x628>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat45, sizeof(bat45));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat45, sizeof(bat45), HAL_MAX_DELAY);
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	2208      	movs	r2, #8
 8003cea:	4981      	ldr	r1, [pc, #516]	; (8003ef0 <realTimeData+0x818>)
 8003cec:	487e      	ldr	r0, [pc, #504]	; (8003ee8 <realTimeData+0x810>)
 8003cee:	f003 fcb4 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf6:	2208      	movs	r2, #8
 8003cf8:	497c      	ldr	r1, [pc, #496]	; (8003eec <realTimeData+0x814>)
 8003cfa:	487b      	ldr	r0, [pc, #492]	; (8003ee8 <realTimeData+0x810>)
 8003cfc:	f003 fcad 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (51 <= soc_value && soc_value <= 55) {
 8003d00:	4b77      	ldr	r3, [pc, #476]	; (8003ee0 <realTimeData+0x808>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b32      	cmp	r3, #50	; 0x32
 8003d06:	d911      	bls.n	8003d2c <realTimeData+0x654>
 8003d08:	4b75      	ldr	r3, [pc, #468]	; (8003ee0 <realTimeData+0x808>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b37      	cmp	r3, #55	; 0x37
 8003d0e:	d80d      	bhi.n	8003d2c <realTimeData+0x654>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat50, sizeof(bat50));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat50, sizeof(bat50), HAL_MAX_DELAY);
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	2208      	movs	r2, #8
 8003d16:	4977      	ldr	r1, [pc, #476]	; (8003ef4 <realTimeData+0x81c>)
 8003d18:	4873      	ldr	r0, [pc, #460]	; (8003ee8 <realTimeData+0x810>)
 8003d1a:	f003 fc9e 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d22:	2208      	movs	r2, #8
 8003d24:	4971      	ldr	r1, [pc, #452]	; (8003eec <realTimeData+0x814>)
 8003d26:	4870      	ldr	r0, [pc, #448]	; (8003ee8 <realTimeData+0x810>)
 8003d28:	f003 fc97 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (56 <= soc_value && soc_value <= 60) {
 8003d2c:	4b6c      	ldr	r3, [pc, #432]	; (8003ee0 <realTimeData+0x808>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b37      	cmp	r3, #55	; 0x37
 8003d32:	d911      	bls.n	8003d58 <realTimeData+0x680>
 8003d34:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <realTimeData+0x808>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b3c      	cmp	r3, #60	; 0x3c
 8003d3a:	d80d      	bhi.n	8003d58 <realTimeData+0x680>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat55, sizeof(bat55));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat55, sizeof(bat55), HAL_MAX_DELAY);
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	2208      	movs	r2, #8
 8003d42:	496d      	ldr	r1, [pc, #436]	; (8003ef8 <realTimeData+0x820>)
 8003d44:	4868      	ldr	r0, [pc, #416]	; (8003ee8 <realTimeData+0x810>)
 8003d46:	f003 fc88 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	2208      	movs	r2, #8
 8003d50:	4966      	ldr	r1, [pc, #408]	; (8003eec <realTimeData+0x814>)
 8003d52:	4865      	ldr	r0, [pc, #404]	; (8003ee8 <realTimeData+0x810>)
 8003d54:	f003 fc81 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (61 <= soc_value && soc_value <= 65) {
 8003d58:	4b61      	ldr	r3, [pc, #388]	; (8003ee0 <realTimeData+0x808>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b3c      	cmp	r3, #60	; 0x3c
 8003d5e:	d911      	bls.n	8003d84 <realTimeData+0x6ac>
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <realTimeData+0x808>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b41      	cmp	r3, #65	; 0x41
 8003d66:	d80d      	bhi.n	8003d84 <realTimeData+0x6ac>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat60, sizeof(bat60));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat60, sizeof(bat60), HAL_MAX_DELAY);
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4963      	ldr	r1, [pc, #396]	; (8003efc <realTimeData+0x824>)
 8003d70:	485d      	ldr	r0, [pc, #372]	; (8003ee8 <realTimeData+0x810>)
 8003d72:	f003 fc72 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	495b      	ldr	r1, [pc, #364]	; (8003eec <realTimeData+0x814>)
 8003d7e:	485a      	ldr	r0, [pc, #360]	; (8003ee8 <realTimeData+0x810>)
 8003d80:	f003 fc6b 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (66 <= soc_value && soc_value <= 70) {
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <realTimeData+0x808>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b41      	cmp	r3, #65	; 0x41
 8003d8a:	d911      	bls.n	8003db0 <realTimeData+0x6d8>
 8003d8c:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <realTimeData+0x808>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b46      	cmp	r3, #70	; 0x46
 8003d92:	d80d      	bhi.n	8003db0 <realTimeData+0x6d8>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat65, sizeof(bat65));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat65, sizeof(bat65), HAL_MAX_DELAY);
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4959      	ldr	r1, [pc, #356]	; (8003f00 <realTimeData+0x828>)
 8003d9c:	4852      	ldr	r0, [pc, #328]	; (8003ee8 <realTimeData+0x810>)
 8003d9e:	f003 fc5c 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	2208      	movs	r2, #8
 8003da8:	4950      	ldr	r1, [pc, #320]	; (8003eec <realTimeData+0x814>)
 8003daa:	484f      	ldr	r0, [pc, #316]	; (8003ee8 <realTimeData+0x810>)
 8003dac:	f003 fc55 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (71 <= soc_value && soc_value <= 75) {
 8003db0:	4b4b      	ldr	r3, [pc, #300]	; (8003ee0 <realTimeData+0x808>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b46      	cmp	r3, #70	; 0x46
 8003db6:	d911      	bls.n	8003ddc <realTimeData+0x704>
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <realTimeData+0x808>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b4b      	cmp	r3, #75	; 0x4b
 8003dbe:	d80d      	bhi.n	8003ddc <realTimeData+0x704>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat70, sizeof(bat70));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat70, sizeof(bat70), HAL_MAX_DELAY);
 8003dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	494f      	ldr	r1, [pc, #316]	; (8003f04 <realTimeData+0x82c>)
 8003dc8:	4847      	ldr	r0, [pc, #284]	; (8003ee8 <realTimeData+0x810>)
 8003dca:	f003 fc46 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	4945      	ldr	r1, [pc, #276]	; (8003eec <realTimeData+0x814>)
 8003dd6:	4844      	ldr	r0, [pc, #272]	; (8003ee8 <realTimeData+0x810>)
 8003dd8:	f003 fc3f 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (76 <= soc_value && soc_value <= 80) {
 8003ddc:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <realTimeData+0x808>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b4b      	cmp	r3, #75	; 0x4b
 8003de2:	d911      	bls.n	8003e08 <realTimeData+0x730>
 8003de4:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <realTimeData+0x808>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b50      	cmp	r3, #80	; 0x50
 8003dea:	d80d      	bhi.n	8003e08 <realTimeData+0x730>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat75, sizeof(bat75));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat75, sizeof(bat75), HAL_MAX_DELAY);
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	2208      	movs	r2, #8
 8003df2:	4945      	ldr	r1, [pc, #276]	; (8003f08 <realTimeData+0x830>)
 8003df4:	483c      	ldr	r0, [pc, #240]	; (8003ee8 <realTimeData+0x810>)
 8003df6:	f003 fc30 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfe:	2208      	movs	r2, #8
 8003e00:	493a      	ldr	r1, [pc, #232]	; (8003eec <realTimeData+0x814>)
 8003e02:	4839      	ldr	r0, [pc, #228]	; (8003ee8 <realTimeData+0x810>)
 8003e04:	f003 fc29 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (81 <= soc_value && soc_value <= 85) {
 8003e08:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <realTimeData+0x808>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b50      	cmp	r3, #80	; 0x50
 8003e0e:	d911      	bls.n	8003e34 <realTimeData+0x75c>
 8003e10:	4b33      	ldr	r3, [pc, #204]	; (8003ee0 <realTimeData+0x808>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b55      	cmp	r3, #85	; 0x55
 8003e16:	d80d      	bhi.n	8003e34 <realTimeData+0x75c>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat80, sizeof(bat80));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat80, sizeof(bat80), HAL_MAX_DELAY);
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
 8003e1c:	2208      	movs	r2, #8
 8003e1e:	493b      	ldr	r1, [pc, #236]	; (8003f0c <realTimeData+0x834>)
 8003e20:	4831      	ldr	r0, [pc, #196]	; (8003ee8 <realTimeData+0x810>)
 8003e22:	f003 fc1a 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	492f      	ldr	r1, [pc, #188]	; (8003eec <realTimeData+0x814>)
 8003e2e:	482e      	ldr	r0, [pc, #184]	; (8003ee8 <realTimeData+0x810>)
 8003e30:	f003 fc13 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (86 <= soc_value && soc_value <= 90) {
 8003e34:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <realTimeData+0x808>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b55      	cmp	r3, #85	; 0x55
 8003e3a:	d911      	bls.n	8003e60 <realTimeData+0x788>
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <realTimeData+0x808>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b5a      	cmp	r3, #90	; 0x5a
 8003e42:	d80d      	bhi.n	8003e60 <realTimeData+0x788>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat85, sizeof(bat85));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat85, sizeof(bat85), HAL_MAX_DELAY);
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	2208      	movs	r2, #8
 8003e4a:	4931      	ldr	r1, [pc, #196]	; (8003f10 <realTimeData+0x838>)
 8003e4c:	4826      	ldr	r0, [pc, #152]	; (8003ee8 <realTimeData+0x810>)
 8003e4e:	f003 fc04 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	2208      	movs	r2, #8
 8003e58:	4924      	ldr	r1, [pc, #144]	; (8003eec <realTimeData+0x814>)
 8003e5a:	4823      	ldr	r0, [pc, #140]	; (8003ee8 <realTimeData+0x810>)
 8003e5c:	f003 fbfd 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (91 <= soc_value && soc_value <= 95) {
 8003e60:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <realTimeData+0x808>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b5a      	cmp	r3, #90	; 0x5a
 8003e66:	d911      	bls.n	8003e8c <realTimeData+0x7b4>
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <realTimeData+0x808>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b5f      	cmp	r3, #95	; 0x5f
 8003e6e:	d80d      	bhi.n	8003e8c <realTimeData+0x7b4>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
 8003e74:	2208      	movs	r2, #8
 8003e76:	4927      	ldr	r1, [pc, #156]	; (8003f14 <realTimeData+0x83c>)
 8003e78:	481b      	ldr	r0, [pc, #108]	; (8003ee8 <realTimeData+0x810>)
 8003e7a:	f003 fbee 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	2208      	movs	r2, #8
 8003e84:	4919      	ldr	r1, [pc, #100]	; (8003eec <realTimeData+0x814>)
 8003e86:	4818      	ldr	r0, [pc, #96]	; (8003ee8 <realTimeData+0x810>)
 8003e88:	f003 fbe7 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (96 <= soc_value && soc_value <= 99) {
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <realTimeData+0x808>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b5f      	cmp	r3, #95	; 0x5f
 8003e92:	d911      	bls.n	8003eb8 <realTimeData+0x7e0>
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <realTimeData+0x808>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b63      	cmp	r3, #99	; 0x63
 8003e9a:	d80d      	bhi.n	8003eb8 <realTimeData+0x7e0>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	491c      	ldr	r1, [pc, #112]	; (8003f14 <realTimeData+0x83c>)
 8003ea4:	4810      	ldr	r0, [pc, #64]	; (8003ee8 <realTimeData+0x810>)
 8003ea6:	f003 fbd8 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	2208      	movs	r2, #8
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <realTimeData+0x814>)
 8003eb2:	480d      	ldr	r0, [pc, #52]	; (8003ee8 <realTimeData+0x810>)
 8003eb4:	f003 fbd1 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (100 == soc_value) {
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <realTimeData+0x808>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d10d      	bne.n	8003edc <realTimeData+0x804>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat100, sizeof(bat100));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat100, sizeof(bat100), HAL_MAX_DELAY);
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	4914      	ldr	r1, [pc, #80]	; (8003f18 <realTimeData+0x840>)
 8003ec8:	4807      	ldr	r0, [pc, #28]	; (8003ee8 <realTimeData+0x810>)
 8003eca:	f003 fbc6 	bl	800765a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	4905      	ldr	r1, [pc, #20]	; (8003eec <realTimeData+0x814>)
 8003ed6:	4804      	ldr	r0, [pc, #16]	; (8003ee8 <realTimeData+0x810>)
 8003ed8:	f003 fbbf 	bl	800765a <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}

}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000474 	.word	0x20000474
 8003ee4:	200002f0 	.word	0x200002f0
 8003ee8:	200005c4 	.word	0x200005c4
 8003eec:	20000200 	.word	0x20000200
 8003ef0:	200002f8 	.word	0x200002f8
 8003ef4:	20000300 	.word	0x20000300
 8003ef8:	20000308 	.word	0x20000308
 8003efc:	20000310 	.word	0x20000310
 8003f00:	20000318 	.word	0x20000318
 8003f04:	20000320 	.word	0x20000320
 8003f08:	20000328 	.word	0x20000328
 8003f0c:	20000330 	.word	0x20000330
 8003f10:	20000338 	.word	0x20000338
 8003f14:	20000340 	.word	0x20000340
 8003f18:	20000348 	.word	0x20000348

08003f1c <oneTimeData>:

void oneTimeData(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0

	oneTime_counter++;
 8003f20:	4ba9      	ldr	r3, [pc, #676]	; (80041c8 <oneTimeData+0x2ac>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	4ba7      	ldr	r3, [pc, #668]	; (80041c8 <oneTimeData+0x2ac>)
 8003f2a:	701a      	strb	r2, [r3, #0]

	if (readytodrive == 0) {
 8003f2c:	4ba7      	ldr	r3, [pc, #668]	; (80041cc <oneTimeData+0x2b0>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d107      	bne.n	8003f44 <oneTimeData+0x28>
		DriveUnit_OFF_Icon;
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	2208      	movs	r2, #8
 8003f3a:	49a5      	ldr	r1, [pc, #660]	; (80041d0 <oneTimeData+0x2b4>)
 8003f3c:	48a5      	ldr	r0, [pc, #660]	; (80041d4 <oneTimeData+0x2b8>)
 8003f3e:	f003 fb8c 	bl	800765a <HAL_UART_Transmit>
 8003f42:	e006      	b.n	8003f52 <oneTimeData+0x36>
	} else {
		DriveUnit_ON_Icon;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	2208      	movs	r2, #8
 8003f4a:	49a3      	ldr	r1, [pc, #652]	; (80041d8 <oneTimeData+0x2bc>)
 8003f4c:	48a1      	ldr	r0, [pc, #644]	; (80041d4 <oneTimeData+0x2b8>)
 8003f4e:	f003 fb84 	bl	800765a <HAL_UART_Transmit>
	}
//RPM
	if (oneTime_counter == 0) {
 8003f52:	4b9d      	ldr	r3, [pc, #628]	; (80041c8 <oneTimeData+0x2ac>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d118      	bne.n	8003f8c <oneTimeData+0x70>
		strDATA[4] = 0x12;
 8003f5a:	4ba0      	ldr	r3, [pc, #640]	; (80041dc <oneTimeData+0x2c0>)
 8003f5c:	2212      	movs	r2, #18
 8003f5e:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 8003f60:	4b9e      	ldr	r3, [pc, #632]	; (80041dc <oneTimeData+0x2c0>)
 8003f62:	2250      	movs	r2, #80	; 0x50
 8003f64:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (rpm_meter & 0xFF);
 8003f66:	4b9e      	ldr	r3, [pc, #632]	; (80041e0 <oneTimeData+0x2c4>)
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b9b      	ldr	r3, [pc, #620]	; (80041dc <oneTimeData+0x2c0>)
 8003f6e:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (rpm_meter >> 8);
 8003f70:	4b9b      	ldr	r3, [pc, #620]	; (80041e0 <oneTimeData+0x2c4>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	4b98      	ldr	r3, [pc, #608]	; (80041dc <oneTimeData+0x2c0>)
 8003f7c:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	2208      	movs	r2, #8
 8003f84:	4995      	ldr	r1, [pc, #596]	; (80041dc <oneTimeData+0x2c0>)
 8003f86:	4893      	ldr	r0, [pc, #588]	; (80041d4 <oneTimeData+0x2b8>)
 8003f88:	f003 fb67 	bl	800765a <HAL_UART_Transmit>
		;
	}

//AVG SPEED
	if (oneTime_counter == 1) {
 8003f8c:	4b8e      	ldr	r3, [pc, #568]	; (80041c8 <oneTimeData+0x2ac>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d118      	bne.n	8003fc6 <oneTimeData+0xaa>
		strDATA[4] = 0x11;
 8003f94:	4b91      	ldr	r3, [pc, #580]	; (80041dc <oneTimeData+0x2c0>)
 8003f96:	2211      	movs	r2, #17
 8003f98:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x52;
 8003f9a:	4b90      	ldr	r3, [pc, #576]	; (80041dc <oneTimeData+0x2c0>)
 8003f9c:	2252      	movs	r2, #82	; 0x52
 8003f9e:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.tripAvgSpeed & 0xFF);
 8003fa0:	4b90      	ldr	r3, [pc, #576]	; (80041e4 <oneTimeData+0x2c8>)
 8003fa2:	891b      	ldrh	r3, [r3, #8]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	4b8d      	ldr	r3, [pc, #564]	; (80041dc <oneTimeData+0x2c0>)
 8003fa8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.tripAvgSpeed >> 8);
 8003faa:	4b8e      	ldr	r3, [pc, #568]	; (80041e4 <oneTimeData+0x2c8>)
 8003fac:	891b      	ldrh	r3, [r3, #8]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4b89      	ldr	r3, [pc, #548]	; (80041dc <oneTimeData+0x2c0>)
 8003fb6:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4987      	ldr	r1, [pc, #540]	; (80041dc <oneTimeData+0x2c0>)
 8003fc0:	4884      	ldr	r0, [pc, #528]	; (80041d4 <oneTimeData+0x2b8>)
 8003fc2:	f003 fb4a 	bl	800765a <HAL_UART_Transmit>
		;
	}

//Power
	if (oneTime_counter == 2) {
 8003fc6:	4b80      	ldr	r3, [pc, #512]	; (80041c8 <oneTimeData+0x2ac>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d127      	bne.n	800401e <oneTimeData+0x102>
		strDATA[4] = 0x12;
 8003fce:	4b83      	ldr	r3, [pc, #524]	; (80041dc <oneTimeData+0x2c0>)
 8003fd0:	2212      	movs	r2, #18
 8003fd2:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 8003fd4:	4b81      	ldr	r3, [pc, #516]	; (80041dc <oneTimeData+0x2c0>)
 8003fd6:	2260      	movs	r2, #96	; 0x60
 8003fd8:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (power & 0xFF);
 8003fda:	4b83      	ldr	r3, [pc, #524]	; (80041e8 <oneTimeData+0x2cc>)
 8003fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	; (80041dc <oneTimeData+0x2c0>)
 8003fe4:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (power >> 8);
 8003fe6:	4b80      	ldr	r3, [pc, #512]	; (80041e8 <oneTimeData+0x2cc>)
 8003fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fec:	121b      	asrs	r3, r3, #8
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b7a      	ldr	r3, [pc, #488]	; (80041dc <oneTimeData+0x2c0>)
 8003ff4:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4977      	ldr	r1, [pc, #476]	; (80041dc <oneTimeData+0x2c0>)
 8003ffe:	4875      	ldr	r0, [pc, #468]	; (80041d4 <oneTimeData+0x2b8>)
 8004000:	f003 fb2b 	bl	800765a <HAL_UART_Transmit>
		;
		strDATA[4] = 0x11;
 8004004:	4b75      	ldr	r3, [pc, #468]	; (80041dc <oneTimeData+0x2c0>)
 8004006:	2211      	movs	r2, #17
 8004008:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 800400a:	4b74      	ldr	r3, [pc, #464]	; (80041dc <oneTimeData+0x2c0>)
 800400c:	2270      	movs	r2, #112	; 0x70
 800400e:	715a      	strb	r2, [r3, #5]
		Transmit_strDATA
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
 8004014:	2208      	movs	r2, #8
 8004016:	4971      	ldr	r1, [pc, #452]	; (80041dc <oneTimeData+0x2c0>)
 8004018:	486e      	ldr	r0, [pc, #440]	; (80041d4 <oneTimeData+0x2b8>)
 800401a:	f003 fb1e 	bl	800765a <HAL_UART_Transmit>
		;
	}
//Range
	if (oneTime_counter == 3) {
 800401e:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <oneTimeData+0x2ac>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d113      	bne.n	800404e <oneTimeData+0x132>
		strDATA[4] = 0x11;
 8004026:	4b6d      	ldr	r3, [pc, #436]	; (80041dc <oneTimeData+0x2c0>)
 8004028:	2211      	movs	r2, #17
 800402a:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 800402c:	4b6b      	ldr	r3, [pc, #428]	; (80041dc <oneTimeData+0x2c0>)
 800402e:	2230      	movs	r2, #48	; 0x30
 8004030:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.range);
 8004032:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <oneTimeData+0x2c8>)
 8004034:	799a      	ldrb	r2, [r3, #6]
 8004036:	4b69      	ldr	r3, [pc, #420]	; (80041dc <oneTimeData+0x2c0>)
 8004038:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 800403a:	4b68      	ldr	r3, [pc, #416]	; (80041dc <oneTimeData+0x2c0>)
 800403c:	2200      	movs	r2, #0
 800403e:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
 8004044:	2208      	movs	r2, #8
 8004046:	4965      	ldr	r1, [pc, #404]	; (80041dc <oneTimeData+0x2c0>)
 8004048:	4862      	ldr	r0, [pc, #392]	; (80041d4 <oneTimeData+0x2b8>)
 800404a:	f003 fb06 	bl	800765a <HAL_UART_Transmit>
		;
	}
	//Battery Data
	if (oneTime_counter == 4) {
 800404e:	4b5e      	ldr	r3, [pc, #376]	; (80041c8 <oneTimeData+0x2ac>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b04      	cmp	r3, #4
 8004054:	f040 8114 	bne.w	8004280 <oneTimeData+0x364>
		switch (transferCount) {
 8004058:	4b64      	ldr	r3, [pc, #400]	; (80041ec <oneTimeData+0x2d0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3b01      	subs	r3, #1
 800405e:	2b06      	cmp	r3, #6
 8004060:	f200 8101 	bhi.w	8004266 <oneTimeData+0x34a>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <oneTimeData+0x150>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004089 	.word	0x08004089
 8004070:	080040b3 	.word	0x080040b3
 8004074:	080040fd 	.word	0x080040fd
 8004078:	08004131 	.word	0x08004131
 800407c:	0800417f 	.word	0x0800417f
 8004080:	08004209 	.word	0x08004209
 8004084:	0800423d 	.word	0x0800423d
		case 1: //SOC - Battery Percentage
			strDATA[4] = 0x11;
 8004088:	4b54      	ldr	r3, [pc, #336]	; (80041dc <oneTimeData+0x2c0>)
 800408a:	2211      	movs	r2, #17
 800408c:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 800408e:	4b53      	ldr	r3, [pc, #332]	; (80041dc <oneTimeData+0x2c0>)
 8004090:	2210      	movs	r2, #16
 8004092:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (soc_value);
 8004094:	4b56      	ldr	r3, [pc, #344]	; (80041f0 <oneTimeData+0x2d4>)
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <oneTimeData+0x2c0>)
 800409a:	71da      	strb	r2, [r3, #7]
			strDATA[6] = 0;
 800409c:	4b4f      	ldr	r3, [pc, #316]	; (80041dc <oneTimeData+0x2c0>)
 800409e:	2200      	movs	r2, #0
 80040a0:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	2208      	movs	r2, #8
 80040a8:	494c      	ldr	r1, [pc, #304]	; (80041dc <oneTimeData+0x2c0>)
 80040aa:	484a      	ldr	r0, [pc, #296]	; (80041d4 <oneTimeData+0x2b8>)
 80040ac:	f003 fad5 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 80040b0:	e0da      	b.n	8004268 <oneTimeData+0x34c>
		case 2:  //Pack voltage
			if (currentstate == charging_state) {
 80040b2:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <oneTimeData+0x2d8>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d106      	bne.n	80040c8 <oneTimeData+0x1ac>
				strDATA[4] = 0x12;
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <oneTimeData+0x2c0>)
 80040bc:	2212      	movs	r2, #18
 80040be:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x10;
 80040c0:	4b46      	ldr	r3, [pc, #280]	; (80041dc <oneTimeData+0x2c0>)
 80040c2:	2210      	movs	r2, #16
 80040c4:	715a      	strb	r2, [r3, #5]
 80040c6:	e005      	b.n	80040d4 <oneTimeData+0x1b8>
			} else {
				strDATA[4] = 0x11;
 80040c8:	4b44      	ldr	r3, [pc, #272]	; (80041dc <oneTimeData+0x2c0>)
 80040ca:	2211      	movs	r2, #17
 80040cc:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x64;
 80040ce:	4b43      	ldr	r3, [pc, #268]	; (80041dc <oneTimeData+0x2c0>)
 80040d0:	2264      	movs	r2, #100	; 0x64
 80040d2:	715a      	strb	r2, [r3, #5]
			}
			strDATA[7] = (pack_voltage & 0xFF);
 80040d4:	4b48      	ldr	r3, [pc, #288]	; (80041f8 <oneTimeData+0x2dc>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b40      	ldr	r3, [pc, #256]	; (80041dc <oneTimeData+0x2c0>)
 80040dc:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (pack_voltage >> 8);
 80040de:	4b46      	ldr	r3, [pc, #280]	; (80041f8 <oneTimeData+0x2dc>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	4b3c      	ldr	r3, [pc, #240]	; (80041dc <oneTimeData+0x2c0>)
 80040ea:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 80040ec:	f04f 33ff 	mov.w	r3, #4294967295
 80040f0:	2208      	movs	r2, #8
 80040f2:	493a      	ldr	r1, [pc, #232]	; (80041dc <oneTimeData+0x2c0>)
 80040f4:	4837      	ldr	r0, [pc, #220]	; (80041d4 <oneTimeData+0x2b8>)
 80040f6:	f003 fab0 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 80040fa:	e0b5      	b.n	8004268 <oneTimeData+0x34c>
		case 3:  //Lowest Cell Voltage
			strDATA[4] = 0x12;
 80040fc:	4b37      	ldr	r3, [pc, #220]	; (80041dc <oneTimeData+0x2c0>)
 80040fe:	2212      	movs	r2, #18
 8004100:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x20;
 8004102:	4b36      	ldr	r3, [pc, #216]	; (80041dc <oneTimeData+0x2c0>)
 8004104:	2220      	movs	r2, #32
 8004106:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (lcell_voltage & 0xFF);
 8004108:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <oneTimeData+0x2e0>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	4b33      	ldr	r3, [pc, #204]	; (80041dc <oneTimeData+0x2c0>)
 8004110:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (lcell_voltage >> 8);
 8004112:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <oneTimeData+0x2e0>)
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	b2da      	uxtb	r2, r3
 800411c:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <oneTimeData+0x2c0>)
 800411e:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
 8004124:	2208      	movs	r2, #8
 8004126:	492d      	ldr	r1, [pc, #180]	; (80041dc <oneTimeData+0x2c0>)
 8004128:	482a      	ldr	r0, [pc, #168]	; (80041d4 <oneTimeData+0x2b8>)
 800412a:	f003 fa96 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 800412e:	e09b      	b.n	8004268 <oneTimeData+0x34c>
		case 4:  //DC Current
			if (currentstate == charging_state) {
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <oneTimeData+0x2d8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d106      	bne.n	8004146 <oneTimeData+0x22a>
				strDATA[4] = 0x12;
 8004138:	4b28      	ldr	r3, [pc, #160]	; (80041dc <oneTimeData+0x2c0>)
 800413a:	2212      	movs	r2, #18
 800413c:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x80;
 800413e:	4b27      	ldr	r3, [pc, #156]	; (80041dc <oneTimeData+0x2c0>)
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	715a      	strb	r2, [r3, #5]
 8004144:	e005      	b.n	8004152 <oneTimeData+0x236>
			} else {
				strDATA[4] = 0x12;
 8004146:	4b25      	ldr	r3, [pc, #148]	; (80041dc <oneTimeData+0x2c0>)
 8004148:	2212      	movs	r2, #18
 800414a:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x30;
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <oneTimeData+0x2c0>)
 800414e:	2230      	movs	r2, #48	; 0x30
 8004150:	715a      	strb	r2, [r3, #5]
			}
			strDATA[6] = (dc_current >> 8);
 8004152:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <oneTimeData+0x2e4>)
 8004154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004158:	121b      	asrs	r3, r3, #8
 800415a:	b21b      	sxth	r3, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <oneTimeData+0x2c0>)
 8004160:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (dc_current & 0xFF);
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <oneTimeData+0x2e4>)
 8004164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <oneTimeData+0x2c0>)
 800416c:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	2208      	movs	r2, #8
 8004174:	4919      	ldr	r1, [pc, #100]	; (80041dc <oneTimeData+0x2c0>)
 8004176:	4817      	ldr	r0, [pc, #92]	; (80041d4 <oneTimeData+0x2b8>)
 8004178:	f003 fa6f 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 800417c:	e074      	b.n	8004268 <oneTimeData+0x34c>
		case 5:  //Pack Temperature
			strDATA[4] = 0x12;
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <oneTimeData+0x2c0>)
 8004180:	2212      	movs	r2, #18
 8004182:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x40;
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <oneTimeData+0x2c0>)
 8004186:	2240      	movs	r2, #64	; 0x40
 8004188:	715a      	strb	r2, [r3, #5]
			strDATA[6] = (pack_temp >> 8);
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <oneTimeData+0x2e8>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	121b      	asrs	r3, r3, #8
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <oneTimeData+0x2c0>)
 8004194:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (pack_temp & 0xFF);
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <oneTimeData+0x2e8>)
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	4b10      	ldr	r3, [pc, #64]	; (80041dc <oneTimeData+0x2c0>)
 800419c:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	2208      	movs	r2, #8
 80041a4:	490d      	ldr	r1, [pc, #52]	; (80041dc <oneTimeData+0x2c0>)
 80041a6:	480b      	ldr	r0, [pc, #44]	; (80041d4 <oneTimeData+0x2b8>)
 80041a8:	f003 fa57 	bl	800765a <HAL_UART_Transmit>
			;
			strDATA[4] = 0x11;
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <oneTimeData+0x2c0>)
 80041ae:	2211      	movs	r2, #17
 80041b0:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x68;
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <oneTimeData+0x2c0>)
 80041b4:	2268      	movs	r2, #104	; 0x68
 80041b6:	715a      	strb	r2, [r3, #5]
			Transmit_strDATA
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295
 80041bc:	2208      	movs	r2, #8
 80041be:	4907      	ldr	r1, [pc, #28]	; (80041dc <oneTimeData+0x2c0>)
 80041c0:	4804      	ldr	r0, [pc, #16]	; (80041d4 <oneTimeData+0x2b8>)
 80041c2:	f003 fa4a 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 80041c6:	e04f      	b.n	8004268 <oneTimeData+0x34c>
 80041c8:	200005bd 	.word	0x200005bd
 80041cc:	20000487 	.word	0x20000487
 80041d0:	200001f0 	.word	0x200001f0
 80041d4:	200005c4 	.word	0x200005c4
 80041d8:	200001f8 	.word	0x200001f8
 80041dc:	20000434 	.word	0x20000434
 80041e0:	2000047c 	.word	0x2000047c
 80041e4:	20000448 	.word	0x20000448
 80041e8:	20000482 	.word	0x20000482
 80041ec:	20000008 	.word	0x20000008
 80041f0:	20000474 	.word	0x20000474
 80041f4:	20000484 	.word	0x20000484
 80041f8:	20000476 	.word	0x20000476
 80041fc:	2000047a 	.word	0x2000047a
 8004200:	20000480 	.word	0x20000480
 8004204:	2000047e 	.word	0x2000047e
		case 6:  //Highest Cell Voltage
			strDATA[4] = 0x12;
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <oneTimeData+0x368>)
 800420a:	2212      	movs	r2, #18
 800420c:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x70;
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <oneTimeData+0x368>)
 8004210:	2270      	movs	r2, #112	; 0x70
 8004212:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (hcell_voltage & 0xFF);
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <oneTimeData+0x36c>)
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <oneTimeData+0x368>)
 800421c:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (hcell_voltage >> 8);
 800421e:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <oneTimeData+0x36c>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b29b      	uxth	r3, r3
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <oneTimeData+0x368>)
 800422a:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
 8004230:	2208      	movs	r2, #8
 8004232:	4914      	ldr	r1, [pc, #80]	; (8004284 <oneTimeData+0x368>)
 8004234:	4815      	ldr	r0, [pc, #84]	; (800428c <oneTimeData+0x370>)
 8004236:	f003 fa10 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 800423a:	e015      	b.n	8004268 <oneTimeData+0x34c>
		case 7:  //SOH Battery Health
			strDATA[4] = 0x11;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <oneTimeData+0x368>)
 800423e:	2211      	movs	r2, #17
 8004240:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x66;
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <oneTimeData+0x368>)
 8004244:	2266      	movs	r2, #102	; 0x66
 8004246:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (soh_value);
 8004248:	4b11      	ldr	r3, [pc, #68]	; (8004290 <oneTimeData+0x374>)
 800424a:	781a      	ldrb	r2, [r3, #0]
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <oneTimeData+0x368>)
 800424e:	71da      	strb	r2, [r3, #7]
			strDATA[6] = 0;
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <oneTimeData+0x368>)
 8004252:	2200      	movs	r2, #0
 8004254:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	2208      	movs	r2, #8
 800425c:	4909      	ldr	r1, [pc, #36]	; (8004284 <oneTimeData+0x368>)
 800425e:	480b      	ldr	r0, [pc, #44]	; (800428c <oneTimeData+0x370>)
 8004260:	f003 f9fb 	bl	800765a <HAL_UART_Transmit>
			;
			break;
 8004264:	e000      	b.n	8004268 <oneTimeData+0x34c>

		default:
			break;
 8004266:	bf00      	nop
		}

		transferCount++;
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <oneTimeData+0x378>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3301      	adds	r3, #1
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <oneTimeData+0x378>)
 8004270:	6013      	str	r3, [r2, #0]
		if (transferCount >= 8) {
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <oneTimeData+0x378>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b07      	cmp	r3, #7
 8004278:	d902      	bls.n	8004280 <oneTimeData+0x364>
			transferCount = 1;
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <oneTimeData+0x378>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000434 	.word	0x20000434
 8004288:	20000478 	.word	0x20000478
 800428c:	200005c4 	.word	0x200005c4
 8004290:	20000475 	.word	0x20000475
 8004294:	20000008 	.word	0x20000008

08004298 <gearUpdate>:

void gearUpdate(void) {
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <gearUpdate+0x70>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d106      	bne.n	80042b2 <gearUpdate+0x1a>
		Gear_Neutral_Icon;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	2208      	movs	r2, #8
 80042aa:	4918      	ldr	r1, [pc, #96]	; (800430c <gearUpdate+0x74>)
 80042ac:	4818      	ldr	r0, [pc, #96]	; (8004310 <gearUpdate+0x78>)
 80042ae:	f003 f9d4 	bl	800765a <HAL_UART_Transmit>
	}

	if (currentstate == 2) {
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <gearUpdate+0x70>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d106      	bne.n	80042c8 <gearUpdate+0x30>
		Gear_Drive_Icon;
 80042ba:	f04f 33ff 	mov.w	r3, #4294967295
 80042be:	2208      	movs	r2, #8
 80042c0:	4914      	ldr	r1, [pc, #80]	; (8004314 <gearUpdate+0x7c>)
 80042c2:	4813      	ldr	r0, [pc, #76]	; (8004310 <gearUpdate+0x78>)
 80042c4:	f003 f9c9 	bl	800765a <HAL_UART_Transmit>
	}

	if (currentstate == 3) {
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <gearUpdate+0x70>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d106      	bne.n	80042de <gearUpdate+0x46>
		Gear_Reverse_Icon;
 80042d0:	f04f 33ff 	mov.w	r3, #4294967295
 80042d4:	2208      	movs	r2, #8
 80042d6:	4910      	ldr	r1, [pc, #64]	; (8004318 <gearUpdate+0x80>)
 80042d8:	480d      	ldr	r0, [pc, #52]	; (8004310 <gearUpdate+0x78>)
 80042da:	f003 f9be 	bl	800765a <HAL_UART_Transmit>
	}
	if (_gearCleared || currentstate == 0) {
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <gearUpdate+0x84>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <gearUpdate+0x56>
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <gearUpdate+0x70>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <gearUpdate+0x6a>
		Gear_Clear_Icon;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	2208      	movs	r2, #8
 80042f4:	490a      	ldr	r1, [pc, #40]	; (8004320 <gearUpdate+0x88>)
 80042f6:	4806      	ldr	r0, [pc, #24]	; (8004310 <gearUpdate+0x78>)
 80042f8:	f003 f9af 	bl	800765a <HAL_UART_Transmit>
		_gearCleared = false;
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <gearUpdate+0x84>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
	}

}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000484 	.word	0x20000484
 800430c:	200001b8 	.word	0x200001b8
 8004310:	200005c4 	.word	0x200005c4
 8004314:	200001c0 	.word	0x200001c0
 8004318:	200001b0 	.word	0x200001b0
 800431c:	200004c6 	.word	0x200004c6
 8004320:	200001c8 	.word	0x200001c8

08004324 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <MX_USART3_UART_Init+0x50>)
 800432c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 8004330:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 8004338:	2200      	movs	r2, #0
 800433a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 800433e:	2200      	movs	r2, #0
 8004340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 8004344:	2200      	movs	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 800434a:	220c      	movs	r2, #12
 800434c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 8004350:	2200      	movs	r2, #0
 8004352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 8004356:	2200      	movs	r2, #0
 8004358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800435a:	4805      	ldr	r0, [pc, #20]	; (8004370 <MX_USART3_UART_Init+0x4c>)
 800435c:	f003 f930 	bl	80075c0 <HAL_UART_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004366:	f7fd f8eb 	bl	8001540 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200005c4 	.word	0x200005c4
 8004374:	40004800 	.word	0x40004800

08004378 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a34      	ldr	r2, [pc, #208]	; (8004464 <HAL_UART_MspInit+0xec>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d160      	bne.n	800445a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004398:	4b33      	ldr	r3, [pc, #204]	; (8004468 <HAL_UART_MspInit+0xf0>)
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	4a32      	ldr	r2, [pc, #200]	; (8004468 <HAL_UART_MspInit+0xf0>)
 800439e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a2:	61d3      	str	r3, [r2, #28]
 80043a4:	4b30      	ldr	r3, [pc, #192]	; (8004468 <HAL_UART_MspInit+0xf0>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_UART_MspInit+0xf0>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <HAL_UART_MspInit+0xf0>)
 80043b6:	f043 0308 	orr.w	r3, r3, #8
 80043ba:	6193      	str	r3, [r2, #24]
 80043bc:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <HAL_UART_MspInit+0xf0>)
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043d2:	2303      	movs	r3, #3
 80043d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d6:	f107 0310 	add.w	r3, r7, #16
 80043da:	4619      	mov	r1, r3
 80043dc:	4823      	ldr	r0, [pc, #140]	; (800446c <HAL_UART_MspInit+0xf4>)
 80043de:	f001 fd95 	bl	8005f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f0:	f107 0310 	add.w	r3, r7, #16
 80043f4:	4619      	mov	r1, r3
 80043f6:	481d      	ldr	r0, [pc, #116]	; (800446c <HAL_UART_MspInit+0xf4>)
 80043f8:	f001 fd88 	bl	8005f0c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <HAL_UART_MspInit+0xf8>)
 80043fe:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <HAL_UART_MspInit+0xfc>)
 8004400:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004404:	2210      	movs	r2, #16
 8004406:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_UART_MspInit+0xf8>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800440e:	4b18      	ldr	r3, [pc, #96]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004414:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004416:	2200      	movs	r2, #0
 8004418:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <HAL_UART_MspInit+0xf8>)
 800441c:	2200      	movs	r2, #0
 800441e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004428:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800442c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800442e:	4810      	ldr	r0, [pc, #64]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004430:	f001 f8ea 	bl	8005608 <HAL_DMA_Init>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800443a:	f7fd f881 	bl	8001540 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004442:	635a      	str	r2, [r3, #52]	; 0x34
 8004444:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <HAL_UART_MspInit+0xf8>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	2027      	movs	r0, #39	; 0x27
 8004450:	f001 f8a3 	bl	800559a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004454:	2027      	movs	r0, #39	; 0x27
 8004456:	f001 f8bc 	bl	80055d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800445a:	bf00      	nop
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40004800 	.word	0x40004800
 8004468:	40021000 	.word	0x40021000
 800446c:	40010c00 	.word	0x40010c00
 8004470:	20000608 	.word	0x20000608
 8004474:	4002001c 	.word	0x4002001c

08004478 <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <check_ack+0x2c>)
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <check_ack+0x30>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	429a      	cmp	r2, r3
 8004488:	d103      	bne.n	8004492 <check_ack+0x1a>
		modeChangeOK = true;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <check_ack+0x34>)
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e002      	b.n	8004498 <check_ack+0x20>
	} else {
		modeChangeOK = false;
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <check_ack+0x34>)
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <check_ack+0x34>)
 800449a:	781b      	ldrb	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	2000048c 	.word	0x2000048c
 80044a8:	200004a3 	.word	0x200004a3
 80044ac:	200004b1 	.word	0x200004b1

080044b0 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 80044b4:	4b41      	ldr	r3, [pc, #260]	; (80045bc <evcuMode+0x10c>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d162      	bne.n	8004582 <evcuMode+0xd2>
 80044bc:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <evcuMode+0x110>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05e      	beq.n	8004582 <evcuMode+0xd2>
		if (currentMode == ecoMode) {
 80044c4:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <evcuMode+0x114>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d117      	bne.n	80044fe <evcuMode+0x4e>
			//Set Normal Mode
			targetMode = normalMode;
 80044ce:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <evcuMode+0x118>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 80044d4:	f7ff ffd0 	bl	8004478 <check_ack>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d051      	beq.n	8004582 <evcuMode+0xd2>
				currentMode = normalMode;
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <evcuMode+0x114>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
				mode = false;
 80044e4:	4b36      	ldr	r3, [pc, #216]	; (80045c0 <evcuMode+0x110>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
				modeMenu = true;
 80044ea:	4b38      	ldr	r3, [pc, #224]	; (80045cc <evcuMode+0x11c>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
				_modeSelection = true;
 80044f0:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <evcuMode+0x120>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80044f6:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <evcuMode+0x124>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	e041      	b.n	8004582 <evcuMode+0xd2>
			}
		} else if (currentMode == normalMode) {
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <evcuMode+0x114>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d11a      	bne.n	800453e <evcuMode+0x8e>
			//Set Sports Mode
			targetMode = sportMode;
 8004508:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <evcuMode+0x118>)
 800450a:	2203      	movs	r2, #3
 800450c:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 800450e:	f7ff ffb3 	bl	8004478 <check_ack>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d034      	beq.n	8004582 <evcuMode+0xd2>
				currentMode = sportMode;
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <evcuMode+0x114>)
 800451a:	2203      	movs	r2, #3
 800451c:	701a      	strb	r2, [r3, #0]
				modeMenu = true;
 800451e:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <evcuMode+0x11c>)
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]
				_modeSelection = true;
 8004524:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <evcuMode+0x120>)
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
				mode = false;
 800452a:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <evcuMode+0x110>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004530:	4b28      	ldr	r3, [pc, #160]	; (80045d4 <evcuMode+0x124>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <evcuMode+0x128>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	e021      	b.n	8004582 <evcuMode+0xd2>
			}
		} else if (currentMode == sportMode) {
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <evcuMode+0x114>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b03      	cmp	r3, #3
 8004546:	d11c      	bne.n	8004582 <evcuMode+0xd2>
			//Set Eco Mode
			targetMode = ecoMode;
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <evcuMode+0x118>)
 800454a:	2202      	movs	r2, #2
 800454c:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 800454e:	f7ff ff93 	bl	8004478 <check_ack>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d014      	beq.n	8004582 <evcuMode+0xd2>
				currentMode = ecoMode;
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <evcuMode+0x114>)
 800455a:	2202      	movs	r2, #2
 800455c:	701a      	strb	r2, [r3, #0]
				mode = false;
 800455e:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <evcuMode+0x110>)
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
				modeMenu = true;
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <evcuMode+0x11c>)
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
				_modeSelection = true;
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <evcuMode+0x120>)
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <evcuMode+0x124>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <evcuMode+0x128>)
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <evcuMode+0x114>)
 800457e:	2202      	movs	r2, #2
 8004580:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <evcuMode+0x10c>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d115      	bne.n	80045b6 <evcuMode+0x106>
		currentMode = ecoMode;
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <evcuMode+0x114>)
 800458c:	2202      	movs	r2, #2
 800458e:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <evcuMode+0x118>)
 8004592:	2202      	movs	r2, #2
 8004594:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <evcuMode+0x110>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <evcuMode+0x106>
			mode = false;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <evcuMode+0x110>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
			_modeSelection = true;
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <evcuMode+0x120>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
			modeMenu = true;
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <evcuMode+0x11c>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
			rtn = false;
 80045b0:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <evcuMode+0x124>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	2000048b 	.word	0x2000048b
 80045c0:	2000042d 	.word	0x2000042d
 80045c4:	200004a2 	.word	0x200004a2
 80045c8:	200004a3 	.word	0x200004a3
 80045cc:	200004b2 	.word	0x200004b2
 80045d0:	200004bc 	.word	0x200004bc
 80045d4:	20000499 	.word	0x20000499
 80045d8:	200004b1 	.word	0x200004b1

080045dc <trip_reset>:

void trip_reset(void){
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <trip_reset+0x1c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d102      	bne.n	80045ee <trip_reset+0x12>
		tripreset = false;
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <trip_reset+0x20>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	2000048a 	.word	0x2000048a
 80045fc:	2000042b 	.word	0x2000042b

08004600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004600:	480c      	ldr	r0, [pc, #48]	; (8004634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004602:	490d      	ldr	r1, [pc, #52]	; (8004638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004604:	4a0d      	ldr	r2, [pc, #52]	; (800463c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004608:	e002      	b.n	8004610 <LoopCopyDataInit>

0800460a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800460a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800460c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800460e:	3304      	adds	r3, #4

08004610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004614:	d3f9      	bcc.n	800460a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004618:	4c0a      	ldr	r4, [pc, #40]	; (8004644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800461a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800461c:	e001      	b.n	8004622 <LoopFillZerobss>

0800461e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800461e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004620:	3204      	adds	r2, #4

08004622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004624:	d3fb      	bcc.n	800461e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004626:	f7fe f937 	bl	8002898 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800462a:	f003 fd9b 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800462e:	f7fc fdcb 	bl	80011c8 <main>
  bx lr
 8004632:	4770      	bx	lr
  ldr r0, =_sdata
 8004634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004638:	200003d8 	.word	0x200003d8
  ldr r2, =_sidata
 800463c:	0800821c 	.word	0x0800821c
  ldr r2, =_sbss
 8004640:	200003d8 	.word	0x200003d8
  ldr r4, =_ebss
 8004644:	20000650 	.word	0x20000650

08004648 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004648:	e7fe      	b.n	8004648 <ADC1_2_IRQHandler>
	...

0800464c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <HAL_Init+0x28>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a07      	ldr	r2, [pc, #28]	; (8004674 <HAL_Init+0x28>)
 8004656:	f043 0310 	orr.w	r3, r3, #16
 800465a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800465c:	2003      	movs	r0, #3
 800465e:	f000 ff91 	bl	8005584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004662:	200f      	movs	r0, #15
 8004664:	f000 f808 	bl	8004678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004668:	f7fe f876 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40022000 	.word	0x40022000

08004678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004680:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_InitTick+0x54>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <HAL_InitTick+0x58>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800468e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004692:	fbb2 f3f3 	udiv	r3, r2, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f000 ffa9 	bl	80055ee <HAL_SYSTICK_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e00e      	b.n	80046c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b0f      	cmp	r3, #15
 80046aa:	d80a      	bhi.n	80046c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046ac:	2200      	movs	r2, #0
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	f000 ff71 	bl	800559a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046b8:	4a06      	ldr	r2, [pc, #24]	; (80046d4 <HAL_InitTick+0x5c>)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20000020 	.word	0x20000020
 80046d0:	200003d4 	.word	0x200003d4
 80046d4:	200003d0 	.word	0x200003d0

080046d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_IncTick+0x1c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_IncTick+0x20>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	4a03      	ldr	r2, [pc, #12]	; (80046f8 <HAL_IncTick+0x20>)
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	200003d4 	.word	0x200003d4
 80046f8:	2000064c 	.word	0x2000064c

080046fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <HAL_GetTick+0x10>)
 8004702:	681b      	ldr	r3, [r3, #0]
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	2000064c 	.word	0x2000064c

08004710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004718:	f7ff fff0 	bl	80046fc <HAL_GetTick>
 800471c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d005      	beq.n	8004736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800472a:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <HAL_Delay+0x44>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004736:	bf00      	nop
 8004738:	f7ff ffe0 	bl	80046fc <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d8f7      	bhi.n	8004738 <HAL_Delay+0x28>
  {
  }
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200003d4 	.word	0x200003d4

08004758 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0ed      	b.n	8004946 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d102      	bne.n	800477c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fb ff2a 	bl	80005d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800478c:	f7ff ffb6 	bl	80046fc <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004792:	e012      	b.n	80047ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004794:	f7ff ffb2 	bl	80046fc <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b0a      	cmp	r3, #10
 80047a0:	d90b      	bls.n	80047ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2205      	movs	r2, #5
 80047b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e0c5      	b.n	8004946 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0e5      	beq.n	8004794 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0202 	bic.w	r2, r2, #2
 80047d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d8:	f7ff ff90 	bl	80046fc <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047de:	e012      	b.n	8004806 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047e0:	f7ff ff8c 	bl	80046fc <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b0a      	cmp	r3, #10
 80047ec:	d90b      	bls.n	8004806 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2205      	movs	r2, #5
 80047fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e09f      	b.n	8004946 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7e1b      	ldrb	r3, [r3, #24]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d108      	bne.n	800482e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	e007      	b.n	800483e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	7e5b      	ldrb	r3, [r3, #25]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d108      	bne.n	8004858 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e007      	b.n	8004868 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	7e9b      	ldrb	r3, [r3, #26]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d108      	bne.n	8004882 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0220 	orr.w	r2, r2, #32
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e007      	b.n	8004892 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0220 	bic.w	r2, r2, #32
 8004890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	7edb      	ldrb	r3, [r3, #27]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d108      	bne.n	80048ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0210 	bic.w	r2, r2, #16
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e007      	b.n	80048bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0210 	orr.w	r2, r2, #16
 80048ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7f1b      	ldrb	r3, [r3, #28]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d108      	bne.n	80048d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	e007      	b.n	80048e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0208 	bic.w	r2, r2, #8
 80048e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7f5b      	ldrb	r3, [r3, #29]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d108      	bne.n	8004900 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0204 	orr.w	r2, r2, #4
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e007      	b.n	8004910 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0204 	bic.w	r2, r2, #4
 800490e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	ea42 0103 	orr.w	r1, r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004966:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d003      	beq.n	8004976 <HAL_CAN_ConfigFilter+0x26>
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b02      	cmp	r3, #2
 8004972:	f040 80be 	bne.w	8004af2 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004976:	4b65      	ldr	r3, [pc, #404]	; (8004b0c <HAL_CAN_ConfigFilter+0x1bc>)
 8004978:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004980:	f043 0201 	orr.w	r2, r3, #1
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004990:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	431a      	orrs	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2201      	movs	r2, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	43db      	mvns	r3, r3
 80049c8:	401a      	ands	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d123      	bne.n	8004a20 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80049fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	3248      	adds	r2, #72	; 0x48
 8004a00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	3348      	adds	r3, #72	; 0x48
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d122      	bne.n	8004a6e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3248      	adds	r2, #72	; 0x48
 8004a4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	3348      	adds	r3, #72	; 0x48
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	401a      	ands	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004a88:	e007      	b.n	8004a9a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	401a      	ands	r2, r3
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004ab4:	e007      	b.n	8004ac6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ae4:	f023 0201 	bic.w	r2, r3, #1
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e006      	b.n	8004b00 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40006400 	.word	0x40006400

08004b10 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d12e      	bne.n	8004b82 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b3c:	f7ff fdde 	bl	80046fc <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b42:	e012      	b.n	8004b6a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b44:	f7ff fdda 	bl	80046fc <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b0a      	cmp	r3, #10
 8004b50:	d90b      	bls.n	8004b6a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2205      	movs	r2, #5
 8004b62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e012      	b.n	8004b90 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e006      	b.n	8004b90 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b089      	sub	sp, #36	; 0x24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d003      	beq.n	8004bc4 <HAL_CAN_AddTxMessage+0x2c>
 8004bbc:	7ffb      	ldrb	r3, [r7, #31]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	f040 80b8 	bne.w	8004d34 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80a0 	beq.w	8004d24 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	0e1b      	lsrs	r3, r3, #24
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d907      	bls.n	8004c04 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e09e      	b.n	8004d42 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004c04:	2201      	movs	r2, #1
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c20:	68f9      	ldr	r1, [r7, #12]
 8004c22:	6809      	ldr	r1, [r1, #0]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3318      	adds	r3, #24
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	440b      	add	r3, r1
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e00f      	b.n	8004c52 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004c46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3318      	adds	r3, #24
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	440b      	add	r3, r1
 8004c50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6819      	ldr	r1, [r3, #0]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	440b      	add	r3, r1
 8004c62:	3304      	adds	r3, #4
 8004c64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	7d1b      	ldrb	r3, [r3, #20]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d111      	bne.n	8004c92 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3318      	adds	r3, #24
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	4413      	add	r3, r2
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	6811      	ldr	r1, [r2, #0]
 8004c82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3318      	adds	r3, #24
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3304      	adds	r3, #4
 8004c90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3307      	adds	r3, #7
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	061a      	lsls	r2, r3, #24
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3306      	adds	r3, #6
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	041b      	lsls	r3, r3, #16
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3305      	adds	r3, #5
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	021b      	lsls	r3, r3, #8
 8004cac:	4313      	orrs	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	3204      	adds	r2, #4
 8004cb2:	7812      	ldrb	r2, [r2, #0]
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6811      	ldr	r1, [r2, #0]
 8004cba:	ea43 0200 	orr.w	r2, r3, r0
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004cc8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3303      	adds	r3, #3
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	061a      	lsls	r2, r3, #24
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	4610      	mov	r0, r2
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	6811      	ldr	r1, [r2, #0]
 8004cf0:	ea43 0200 	orr.w	r2, r3, r0
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004cfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3318      	adds	r3, #24
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4413      	add	r3, r2
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6811      	ldr	r1, [r2, #0]
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	3318      	adds	r3, #24
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	440b      	add	r3, r1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e00e      	b.n	8004d42 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e006      	b.n	8004d42 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	; 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d003      	beq.n	8004d70 <HAL_CAN_GetRxMessage+0x24>
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	f040 80f3 	bne.w	8004f56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d116      	bne.n	8004db2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0e7      	b.n	8004f64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0d8      	b.n	8004f64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	331b      	adds	r3, #27
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4413      	add	r3, r2
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0204 	and.w	r2, r3, #4
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10c      	bne.n	8004dea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	331b      	adds	r3, #27
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	4413      	add	r3, r2
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	0d5b      	lsrs	r3, r3, #21
 8004de0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e00b      	b.n	8004e02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	331b      	adds	r3, #27
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	08db      	lsrs	r3, r3, #3
 8004dfa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	331b      	adds	r3, #27
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	4413      	add	r3, r2
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0202 	and.w	r2, r3, #2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	331b      	adds	r3, #27
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	4413      	add	r3, r2
 8004e24:	3304      	adds	r3, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 020f 	and.w	r2, r3, #15
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	331b      	adds	r3, #27
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	331b      	adds	r3, #27
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	4413      	add	r3, r2
 8004e54:	3304      	adds	r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0a1a      	lsrs	r2, r3, #8
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	0c1a      	lsrs	r2, r3, #16
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	0e1a      	lsrs	r2, r3, #24
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	3303      	adds	r3, #3
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	0a1a      	lsrs	r2, r3, #8
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	3305      	adds	r3, #5
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	0c1a      	lsrs	r2, r3, #16
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	3306      	adds	r3, #6
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0e1a      	lsrs	r2, r3, #24
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	3307      	adds	r3, #7
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0220 	orr.w	r2, r2, #32
 8004f3e:	60da      	str	r2, [r3, #12]
 8004f40:	e007      	b.n	8004f52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0220 	orr.w	r2, r2, #32
 8004f50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	e006      	b.n	8004f64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr

08004f6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b085      	sub	sp, #20
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d002      	beq.n	8004f8c <HAL_CAN_ActivateNotification+0x1e>
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d109      	bne.n	8004fa0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6959      	ldr	r1, [r3, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e006      	b.n	8004fae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	; 0x28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d07c      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f983 	bl	8005326 <HAL_CAN_TxMailbox0CompleteCallback>
 8005020:	e016      	b.n	8005050 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d004      	beq.n	8005036 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
 8005034:	e00c      	b.n	8005050 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
 8005048:	e002      	b.n	8005050 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f986 	bl	800535c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d024      	beq.n	80050a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005062:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f962 	bl	8005338 <HAL_CAN_TxMailbox1CompleteCallback>
 8005074:	e016      	b.n	80050a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
 8005088:	e00c      	b.n	80050a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
 800509c:	e002      	b.n	80050a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f965 	bl	800536e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d024      	beq.n	80050f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f941 	bl	800534a <HAL_CAN_TxMailbox2CompleteCallback>
 80050c8:	e016      	b.n	80050f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
 80050dc:	e00c      	b.n	80050f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
 80050f0:	e002      	b.n	80050f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f944 	bl	8005380 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005112:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2210      	movs	r2, #16
 800511a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d006      	beq.n	800513e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f92a 	bl	8005392 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d009      	beq.n	800515c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc f93a 	bl	80013d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00c      	beq.n	8005180 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d007      	beq.n	8005180 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005176:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2210      	movs	r2, #16
 800517e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2208      	movs	r2, #8
 800519a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f901 	bl	80053a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc f94a 	bl	8001454 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2210      	movs	r2, #16
 80051da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f8ea 	bl	80053b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2208      	movs	r2, #8
 80051fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f8e2 	bl	80053c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d07b      	beq.n	8005306 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d072      	beq.n	80052fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f043 0302 	orr.w	r3, r3, #2
 800524e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005272:	2b00      	cmp	r3, #0
 8005274:	d043      	beq.n	80052fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03e      	beq.n	80052fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005286:	2b60      	cmp	r3, #96	; 0x60
 8005288:	d02b      	beq.n	80052e2 <HAL_CAN_IRQHandler+0x32a>
 800528a:	2b60      	cmp	r3, #96	; 0x60
 800528c:	d82e      	bhi.n	80052ec <HAL_CAN_IRQHandler+0x334>
 800528e:	2b50      	cmp	r3, #80	; 0x50
 8005290:	d022      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x320>
 8005292:	2b50      	cmp	r3, #80	; 0x50
 8005294:	d82a      	bhi.n	80052ec <HAL_CAN_IRQHandler+0x334>
 8005296:	2b40      	cmp	r3, #64	; 0x40
 8005298:	d019      	beq.n	80052ce <HAL_CAN_IRQHandler+0x316>
 800529a:	2b40      	cmp	r3, #64	; 0x40
 800529c:	d826      	bhi.n	80052ec <HAL_CAN_IRQHandler+0x334>
 800529e:	2b30      	cmp	r3, #48	; 0x30
 80052a0:	d010      	beq.n	80052c4 <HAL_CAN_IRQHandler+0x30c>
 80052a2:	2b30      	cmp	r3, #48	; 0x30
 80052a4:	d822      	bhi.n	80052ec <HAL_CAN_IRQHandler+0x334>
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d002      	beq.n	80052b0 <HAL_CAN_IRQHandler+0x2f8>
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d005      	beq.n	80052ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80052ae:	e01d      	b.n	80052ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f043 0308 	orr.w	r3, r3, #8
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052b8:	e019      	b.n	80052ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f043 0310 	orr.w	r3, r3, #16
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052c2:	e014      	b.n	80052ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052cc:	e00f      	b.n	80052ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052d6:	e00a      	b.n	80052ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052e0:	e005      	b.n	80052ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052ea:	e000      	b.n	80052ee <HAL_CAN_IRQHandler+0x336>
            break;
 80052ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80052fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2204      	movs	r2, #4
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f85e 	bl	80053da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800531e:	bf00      	nop
 8005320:	3728      	adds	r7, #40	; 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr

08005392 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr

080053a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <__NVIC_SetPriorityGrouping+0x44>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005408:	4013      	ands	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800541e:	4a04      	ldr	r2, [pc, #16]	; (8005430 <__NVIC_SetPriorityGrouping+0x44>)
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	60d3      	str	r3, [r2, #12]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005438:	4b04      	ldr	r3, [pc, #16]	; (800544c <__NVIC_GetPriorityGrouping+0x18>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	0a1b      	lsrs	r3, r3, #8
 800543e:	f003 0307 	and.w	r3, r3, #7
}
 8005442:	4618      	mov	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000ed00 	.word	0xe000ed00

08005450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545e:	2b00      	cmp	r3, #0
 8005460:	db0b      	blt.n	800547a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	f003 021f 	and.w	r2, r3, #31
 8005468:	4906      	ldr	r1, [pc, #24]	; (8005484 <__NVIC_EnableIRQ+0x34>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2001      	movs	r0, #1
 8005472:	fa00 f202 	lsl.w	r2, r0, r2
 8005476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	e000e100 	.word	0xe000e100

08005488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	6039      	str	r1, [r7, #0]
 8005492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db0a      	blt.n	80054b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	490c      	ldr	r1, [pc, #48]	; (80054d4 <__NVIC_SetPriority+0x4c>)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	0112      	lsls	r2, r2, #4
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	440b      	add	r3, r1
 80054ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054b0:	e00a      	b.n	80054c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	4908      	ldr	r1, [pc, #32]	; (80054d8 <__NVIC_SetPriority+0x50>)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	3b04      	subs	r3, #4
 80054c0:	0112      	lsls	r2, r2, #4
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	440b      	add	r3, r1
 80054c6:	761a      	strb	r2, [r3, #24]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	e000e100 	.word	0xe000e100
 80054d8:	e000ed00 	.word	0xe000ed00

080054dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054dc:	b480      	push	{r7}
 80054de:	b089      	sub	sp, #36	; 0x24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f1c3 0307 	rsb	r3, r3, #7
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	bf28      	it	cs
 80054fa:	2304      	movcs	r3, #4
 80054fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3304      	adds	r3, #4
 8005502:	2b06      	cmp	r3, #6
 8005504:	d902      	bls.n	800550c <NVIC_EncodePriority+0x30>
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3b03      	subs	r3, #3
 800550a:	e000      	b.n	800550e <NVIC_EncodePriority+0x32>
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43da      	mvns	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	401a      	ands	r2, r3
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005524:	f04f 31ff 	mov.w	r1, #4294967295
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	43d9      	mvns	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005534:	4313      	orrs	r3, r2
         );
}
 8005536:	4618      	mov	r0, r3
 8005538:	3724      	adds	r7, #36	; 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3b01      	subs	r3, #1
 800554c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005550:	d301      	bcc.n	8005556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005552:	2301      	movs	r3, #1
 8005554:	e00f      	b.n	8005576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <SysTick_Config+0x40>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800555e:	210f      	movs	r1, #15
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	f7ff ff90 	bl	8005488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <SysTick_Config+0x40>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800556e:	4b04      	ldr	r3, [pc, #16]	; (8005580 <SysTick_Config+0x40>)
 8005570:	2207      	movs	r2, #7
 8005572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	e000e010 	.word	0xe000e010

08005584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff2d 	bl	80053ec <__NVIC_SetPriorityGrouping>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ac:	f7ff ff42 	bl	8005434 <__NVIC_GetPriorityGrouping>
 80055b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	6978      	ldr	r0, [r7, #20]
 80055b8:	f7ff ff90 	bl	80054dc <NVIC_EncodePriority>
 80055bc:	4602      	mov	r2, r0
 80055be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff5f 	bl	8005488 <__NVIC_SetPriority>
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	4603      	mov	r3, r0
 80055da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff ff35 	bl	8005450 <__NVIC_EnableIRQ>
}
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ffa2 	bl	8005540 <SysTick_Config>
 80055fc:	4603      	mov	r3, r0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e059      	b.n	80056d2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	4b2d      	ldr	r3, [pc, #180]	; (80056dc <HAL_DMA_Init+0xd4>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d80f      	bhi.n	800564a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_DMA_Init+0xd8>)
 8005632:	4413      	add	r3, r2
 8005634:	4a2b      	ldr	r2, [pc, #172]	; (80056e4 <HAL_DMA_Init+0xdc>)
 8005636:	fba2 2303 	umull	r2, r3, r2, r3
 800563a:	091b      	lsrs	r3, r3, #4
 800563c:	009a      	lsls	r2, r3, #2
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <HAL_DMA_Init+0xe0>)
 8005646:	63da      	str	r2, [r3, #60]	; 0x3c
 8005648:	e00e      	b.n	8005668 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	4b26      	ldr	r3, [pc, #152]	; (80056ec <HAL_DMA_Init+0xe4>)
 8005652:	4413      	add	r3, r2
 8005654:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <HAL_DMA_Init+0xdc>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	009a      	lsls	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <HAL_DMA_Init+0xe8>)
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800567e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005682:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr
 80056dc:	40020407 	.word	0x40020407
 80056e0:	bffdfff8 	.word	0xbffdfff8
 80056e4:	cccccccd 	.word	0xcccccccd
 80056e8:	40020000 	.word	0x40020000
 80056ec:	bffdfbf8 	.word	0xbffdfbf8
 80056f0:	40020400 	.word	0x40020400

080056f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_DMA_Start_IT+0x20>
 8005710:	2302      	movs	r3, #2
 8005712:	e04a      	b.n	80057aa <HAL_DMA_Start_IT+0xb6>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005722:	2b01      	cmp	r3, #1
 8005724:	d13a      	bne.n	800579c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0201 	bic.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fbb0 	bl	8005eb0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 020e 	orr.w	r2, r2, #14
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e00f      	b.n	800578a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0204 	bic.w	r2, r2, #4
 8005778:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 020a 	orr.w	r2, r2, #10
 8005788:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e005      	b.n	80057a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80057a4:	2302      	movs	r3, #2
 80057a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d008      	beq.n	80057da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2204      	movs	r2, #4
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e020      	b.n	800581c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 020e 	bic.w	r2, r2, #14
 80057e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0201 	bic.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	2101      	movs	r1, #1
 8005804:	fa01 f202 	lsl.w	r2, r1, r2
 8005808:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
	...

08005828 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800583a:	2b02      	cmp	r3, #2
 800583c:	d005      	beq.n	800584a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	e0d6      	b.n	80059f8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 020e 	bic.w	r2, r2, #14
 8005858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0201 	bic.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	4b64      	ldr	r3, [pc, #400]	; (8005a04 <HAL_DMA_Abort_IT+0x1dc>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d958      	bls.n	8005928 <HAL_DMA_Abort_IT+0x100>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a63      	ldr	r2, [pc, #396]	; (8005a08 <HAL_DMA_Abort_IT+0x1e0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d04f      	beq.n	8005920 <HAL_DMA_Abort_IT+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a61      	ldr	r2, [pc, #388]	; (8005a0c <HAL_DMA_Abort_IT+0x1e4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d048      	beq.n	800591c <HAL_DMA_Abort_IT+0xf4>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a60      	ldr	r2, [pc, #384]	; (8005a10 <HAL_DMA_Abort_IT+0x1e8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d040      	beq.n	8005916 <HAL_DMA_Abort_IT+0xee>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5e      	ldr	r2, [pc, #376]	; (8005a14 <HAL_DMA_Abort_IT+0x1ec>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d038      	beq.n	8005910 <HAL_DMA_Abort_IT+0xe8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5d      	ldr	r2, [pc, #372]	; (8005a18 <HAL_DMA_Abort_IT+0x1f0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d030      	beq.n	800590a <HAL_DMA_Abort_IT+0xe2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5b      	ldr	r2, [pc, #364]	; (8005a1c <HAL_DMA_Abort_IT+0x1f4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d028      	beq.n	8005904 <HAL_DMA_Abort_IT+0xdc>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a53      	ldr	r2, [pc, #332]	; (8005a04 <HAL_DMA_Abort_IT+0x1dc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d020      	beq.n	80058fe <HAL_DMA_Abort_IT+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a57      	ldr	r2, [pc, #348]	; (8005a20 <HAL_DMA_Abort_IT+0x1f8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d019      	beq.n	80058fa <HAL_DMA_Abort_IT+0xd2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a56      	ldr	r2, [pc, #344]	; (8005a24 <HAL_DMA_Abort_IT+0x1fc>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d012      	beq.n	80058f6 <HAL_DMA_Abort_IT+0xce>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a54      	ldr	r2, [pc, #336]	; (8005a28 <HAL_DMA_Abort_IT+0x200>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00a      	beq.n	80058f0 <HAL_DMA_Abort_IT+0xc8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a53      	ldr	r2, [pc, #332]	; (8005a2c <HAL_DMA_Abort_IT+0x204>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d102      	bne.n	80058ea <HAL_DMA_Abort_IT+0xc2>
 80058e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058e8:	e01b      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 80058ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058ee:	e018      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 80058f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f4:	e015      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 80058f6:	2310      	movs	r3, #16
 80058f8:	e013      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e011      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 80058fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005902:	e00e      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 8005904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005908:	e00b      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 800590a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800590e:	e008      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 8005910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005914:	e005      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 8005916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800591a:	e002      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 800591c:	2310      	movs	r3, #16
 800591e:	e000      	b.n	8005922 <HAL_DMA_Abort_IT+0xfa>
 8005920:	2301      	movs	r3, #1
 8005922:	4a43      	ldr	r2, [pc, #268]	; (8005a30 <HAL_DMA_Abort_IT+0x208>)
 8005924:	6053      	str	r3, [r2, #4]
 8005926:	e057      	b.n	80059d8 <HAL_DMA_Abort_IT+0x1b0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <HAL_DMA_Abort_IT+0x1e0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d04f      	beq.n	80059d2 <HAL_DMA_Abort_IT+0x1aa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a35      	ldr	r2, [pc, #212]	; (8005a0c <HAL_DMA_Abort_IT+0x1e4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d048      	beq.n	80059ce <HAL_DMA_Abort_IT+0x1a6>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a33      	ldr	r2, [pc, #204]	; (8005a10 <HAL_DMA_Abort_IT+0x1e8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d040      	beq.n	80059c8 <HAL_DMA_Abort_IT+0x1a0>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a32      	ldr	r2, [pc, #200]	; (8005a14 <HAL_DMA_Abort_IT+0x1ec>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d038      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x19a>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a30      	ldr	r2, [pc, #192]	; (8005a18 <HAL_DMA_Abort_IT+0x1f0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d030      	beq.n	80059bc <HAL_DMA_Abort_IT+0x194>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <HAL_DMA_Abort_IT+0x1f4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d028      	beq.n	80059b6 <HAL_DMA_Abort_IT+0x18e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a26      	ldr	r2, [pc, #152]	; (8005a04 <HAL_DMA_Abort_IT+0x1dc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d020      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x188>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2b      	ldr	r2, [pc, #172]	; (8005a20 <HAL_DMA_Abort_IT+0x1f8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d019      	beq.n	80059ac <HAL_DMA_Abort_IT+0x184>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <HAL_DMA_Abort_IT+0x1fc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d012      	beq.n	80059a8 <HAL_DMA_Abort_IT+0x180>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a28      	ldr	r2, [pc, #160]	; (8005a28 <HAL_DMA_Abort_IT+0x200>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d00a      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x17a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a26      	ldr	r2, [pc, #152]	; (8005a2c <HAL_DMA_Abort_IT+0x204>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d102      	bne.n	800599c <HAL_DMA_Abort_IT+0x174>
 8005996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599a:	e01b      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 800599c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059a0:	e018      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059a6:	e015      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059a8:	2310      	movs	r3, #16
 80059aa:	e013      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e011      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059b4:	e00e      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059ba:	e00b      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059c0:	e008      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059c6:	e005      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059cc:	e002      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059ce:	2310      	movs	r3, #16
 80059d0:	e000      	b.n	80059d4 <HAL_DMA_Abort_IT+0x1ac>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <HAL_DMA_Abort_IT+0x20c>)
 80059d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
    } 
  }
  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40020080 	.word	0x40020080
 8005a08:	40020008 	.word	0x40020008
 8005a0c:	4002001c 	.word	0x4002001c
 8005a10:	40020030 	.word	0x40020030
 8005a14:	40020044 	.word	0x40020044
 8005a18:	40020058 	.word	0x40020058
 8005a1c:	4002006c 	.word	0x4002006c
 8005a20:	40020408 	.word	0x40020408
 8005a24:	4002041c 	.word	0x4002041c
 8005a28:	40020430 	.word	0x40020430
 8005a2c:	40020444 	.word	0x40020444
 8005a30:	40020400 	.word	0x40020400
 8005a34:	40020000 	.word	0x40020000

08005a38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	2204      	movs	r2, #4
 8005a56:	409a      	lsls	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80f1 	beq.w	8005c44 <HAL_DMA_IRQHandler+0x20c>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80eb 	beq.w	8005c44 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0204 	bic.w	r2, r2, #4
 8005a8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b5f      	ldr	r3, [pc, #380]	; (8005c10 <HAL_DMA_IRQHandler+0x1d8>)
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d958      	bls.n	8005b4a <HAL_DMA_IRQHandler+0x112>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5d      	ldr	r2, [pc, #372]	; (8005c14 <HAL_DMA_IRQHandler+0x1dc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d04f      	beq.n	8005b42 <HAL_DMA_IRQHandler+0x10a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a5c      	ldr	r2, [pc, #368]	; (8005c18 <HAL_DMA_IRQHandler+0x1e0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d048      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x106>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a5a      	ldr	r2, [pc, #360]	; (8005c1c <HAL_DMA_IRQHandler+0x1e4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d040      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x100>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a59      	ldr	r2, [pc, #356]	; (8005c20 <HAL_DMA_IRQHandler+0x1e8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d038      	beq.n	8005b32 <HAL_DMA_IRQHandler+0xfa>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a57      	ldr	r2, [pc, #348]	; (8005c24 <HAL_DMA_IRQHandler+0x1ec>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d030      	beq.n	8005b2c <HAL_DMA_IRQHandler+0xf4>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a56      	ldr	r2, [pc, #344]	; (8005c28 <HAL_DMA_IRQHandler+0x1f0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d028      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xee>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a4d      	ldr	r2, [pc, #308]	; (8005c10 <HAL_DMA_IRQHandler+0x1d8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d020      	beq.n	8005b20 <HAL_DMA_IRQHandler+0xe8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a52      	ldr	r2, [pc, #328]	; (8005c2c <HAL_DMA_IRQHandler+0x1f4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d019      	beq.n	8005b1c <HAL_DMA_IRQHandler+0xe4>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a50      	ldr	r2, [pc, #320]	; (8005c30 <HAL_DMA_IRQHandler+0x1f8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d012      	beq.n	8005b18 <HAL_DMA_IRQHandler+0xe0>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4f      	ldr	r2, [pc, #316]	; (8005c34 <HAL_DMA_IRQHandler+0x1fc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00a      	beq.n	8005b12 <HAL_DMA_IRQHandler+0xda>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a4d      	ldr	r2, [pc, #308]	; (8005c38 <HAL_DMA_IRQHandler+0x200>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d102      	bne.n	8005b0c <HAL_DMA_IRQHandler+0xd4>
 8005b06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b0a:	e01b      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b10:	e018      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b16:	e015      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	e013      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e011      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b24:	e00e      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b2a:	e00b      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b30:	e008      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b36:	e005      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3c:	e002      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b3e:	2340      	movs	r3, #64	; 0x40
 8005b40:	e000      	b.n	8005b44 <HAL_DMA_IRQHandler+0x10c>
 8005b42:	2304      	movs	r3, #4
 8005b44:	4a3d      	ldr	r2, [pc, #244]	; (8005c3c <HAL_DMA_IRQHandler+0x204>)
 8005b46:	6053      	str	r3, [r2, #4]
 8005b48:	e057      	b.n	8005bfa <HAL_DMA_IRQHandler+0x1c2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a31      	ldr	r2, [pc, #196]	; (8005c14 <HAL_DMA_IRQHandler+0x1dc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d04f      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x1bc>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2f      	ldr	r2, [pc, #188]	; (8005c18 <HAL_DMA_IRQHandler+0x1e0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d048      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x1b8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2e      	ldr	r2, [pc, #184]	; (8005c1c <HAL_DMA_IRQHandler+0x1e4>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d040      	beq.n	8005bea <HAL_DMA_IRQHandler+0x1b2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a2c      	ldr	r2, [pc, #176]	; (8005c20 <HAL_DMA_IRQHandler+0x1e8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d038      	beq.n	8005be4 <HAL_DMA_IRQHandler+0x1ac>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a2b      	ldr	r2, [pc, #172]	; (8005c24 <HAL_DMA_IRQHandler+0x1ec>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d030      	beq.n	8005bde <HAL_DMA_IRQHandler+0x1a6>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a29      	ldr	r2, [pc, #164]	; (8005c28 <HAL_DMA_IRQHandler+0x1f0>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d028      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x1a0>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a21      	ldr	r2, [pc, #132]	; (8005c10 <HAL_DMA_IRQHandler+0x1d8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d020      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x19a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a25      	ldr	r2, [pc, #148]	; (8005c2c <HAL_DMA_IRQHandler+0x1f4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d019      	beq.n	8005bce <HAL_DMA_IRQHandler+0x196>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a24      	ldr	r2, [pc, #144]	; (8005c30 <HAL_DMA_IRQHandler+0x1f8>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d012      	beq.n	8005bca <HAL_DMA_IRQHandler+0x192>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a22      	ldr	r2, [pc, #136]	; (8005c34 <HAL_DMA_IRQHandler+0x1fc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00a      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x18c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a21      	ldr	r2, [pc, #132]	; (8005c38 <HAL_DMA_IRQHandler+0x200>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d102      	bne.n	8005bbe <HAL_DMA_IRQHandler+0x186>
 8005bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bbc:	e01b      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bc2:	e018      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bc8:	e015      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	e013      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bce:	2304      	movs	r3, #4
 8005bd0:	e011      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005bd6:	e00e      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bdc:	e00b      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bde:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005be2:	e008      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005be8:	e005      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bee:	e002      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	e000      	b.n	8005bf6 <HAL_DMA_IRQHandler+0x1be>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <HAL_DMA_IRQHandler+0x208>)
 8005bf8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8136 	beq.w	8005e70 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005c0c:	e130      	b.n	8005e70 <HAL_DMA_IRQHandler+0x438>
 8005c0e:	bf00      	nop
 8005c10:	40020080 	.word	0x40020080
 8005c14:	40020008 	.word	0x40020008
 8005c18:	4002001c 	.word	0x4002001c
 8005c1c:	40020030 	.word	0x40020030
 8005c20:	40020044 	.word	0x40020044
 8005c24:	40020058 	.word	0x40020058
 8005c28:	4002006c 	.word	0x4002006c
 8005c2c:	40020408 	.word	0x40020408
 8005c30:	4002041c 	.word	0x4002041c
 8005c34:	40020430 	.word	0x40020430
 8005c38:	40020444 	.word	0x40020444
 8005c3c:	40020400 	.word	0x40020400
 8005c40:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2202      	movs	r2, #2
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80dd 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x3d8>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80d7 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 020a 	bic.w	r2, r2, #10
 8005c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	; (8005e7c <HAL_DMA_IRQHandler+0x444>)
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d958      	bls.n	8005d46 <HAL_DMA_IRQHandler+0x30e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a79      	ldr	r2, [pc, #484]	; (8005e80 <HAL_DMA_IRQHandler+0x448>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d04f      	beq.n	8005d3e <HAL_DMA_IRQHandler+0x306>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a78      	ldr	r2, [pc, #480]	; (8005e84 <HAL_DMA_IRQHandler+0x44c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d048      	beq.n	8005d3a <HAL_DMA_IRQHandler+0x302>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a76      	ldr	r2, [pc, #472]	; (8005e88 <HAL_DMA_IRQHandler+0x450>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d040      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x2fc>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a75      	ldr	r2, [pc, #468]	; (8005e8c <HAL_DMA_IRQHandler+0x454>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d038      	beq.n	8005d2e <HAL_DMA_IRQHandler+0x2f6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a73      	ldr	r2, [pc, #460]	; (8005e90 <HAL_DMA_IRQHandler+0x458>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d030      	beq.n	8005d28 <HAL_DMA_IRQHandler+0x2f0>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a72      	ldr	r2, [pc, #456]	; (8005e94 <HAL_DMA_IRQHandler+0x45c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d028      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ea>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a69      	ldr	r2, [pc, #420]	; (8005e7c <HAL_DMA_IRQHandler+0x444>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d020      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x2e4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6e      	ldr	r2, [pc, #440]	; (8005e98 <HAL_DMA_IRQHandler+0x460>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d019      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x2e0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a6c      	ldr	r2, [pc, #432]	; (8005e9c <HAL_DMA_IRQHandler+0x464>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d012      	beq.n	8005d14 <HAL_DMA_IRQHandler+0x2dc>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6b      	ldr	r2, [pc, #428]	; (8005ea0 <HAL_DMA_IRQHandler+0x468>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00a      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x2d6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a69      	ldr	r2, [pc, #420]	; (8005ea4 <HAL_DMA_IRQHandler+0x46c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d102      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x2d0>
 8005d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d06:	e01b      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d0c:	e018      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d12:	e015      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d14:	2320      	movs	r3, #32
 8005d16:	e013      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e011      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d20:	e00e      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d26:	e00b      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d2c:	e008      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d32:	e005      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d38:	e002      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	e000      	b.n	8005d40 <HAL_DMA_IRQHandler+0x308>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	4a59      	ldr	r2, [pc, #356]	; (8005ea8 <HAL_DMA_IRQHandler+0x470>)
 8005d42:	6053      	str	r3, [r2, #4]
 8005d44:	e057      	b.n	8005df6 <HAL_DMA_IRQHandler+0x3be>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4d      	ldr	r2, [pc, #308]	; (8005e80 <HAL_DMA_IRQHandler+0x448>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04f      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x3b8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a4b      	ldr	r2, [pc, #300]	; (8005e84 <HAL_DMA_IRQHandler+0x44c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d048      	beq.n	8005dec <HAL_DMA_IRQHandler+0x3b4>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a4a      	ldr	r2, [pc, #296]	; (8005e88 <HAL_DMA_IRQHandler+0x450>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x3ae>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a48      	ldr	r2, [pc, #288]	; (8005e8c <HAL_DMA_IRQHandler+0x454>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d038      	beq.n	8005de0 <HAL_DMA_IRQHandler+0x3a8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a47      	ldr	r2, [pc, #284]	; (8005e90 <HAL_DMA_IRQHandler+0x458>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d030      	beq.n	8005dda <HAL_DMA_IRQHandler+0x3a2>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a45      	ldr	r2, [pc, #276]	; (8005e94 <HAL_DMA_IRQHandler+0x45c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d028      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x39c>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a3d      	ldr	r2, [pc, #244]	; (8005e7c <HAL_DMA_IRQHandler+0x444>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d020      	beq.n	8005dce <HAL_DMA_IRQHandler+0x396>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a41      	ldr	r2, [pc, #260]	; (8005e98 <HAL_DMA_IRQHandler+0x460>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d019      	beq.n	8005dca <HAL_DMA_IRQHandler+0x392>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a40      	ldr	r2, [pc, #256]	; (8005e9c <HAL_DMA_IRQHandler+0x464>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d012      	beq.n	8005dc6 <HAL_DMA_IRQHandler+0x38e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a3e      	ldr	r2, [pc, #248]	; (8005ea0 <HAL_DMA_IRQHandler+0x468>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00a      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x388>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <HAL_DMA_IRQHandler+0x46c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d102      	bne.n	8005dba <HAL_DMA_IRQHandler+0x382>
 8005db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005db8:	e01b      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dbe:	e018      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc4:	e015      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dc6:	2320      	movs	r3, #32
 8005dc8:	e013      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e011      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd2:	e00e      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005dd8:	e00b      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dde:	e008      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005de4:	e005      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dea:	e002      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005dec:	2320      	movs	r3, #32
 8005dee:	e000      	b.n	8005df2 <HAL_DMA_IRQHandler+0x3ba>
 8005df0:	2302      	movs	r3, #2
 8005df2:	4a2e      	ldr	r2, [pc, #184]	; (8005eac <HAL_DMA_IRQHandler+0x474>)
 8005df4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d034      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e0e:	e02f      	b.n	8005e70 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2208      	movs	r2, #8
 8005e16:	409a      	lsls	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d028      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x43a>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d023      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 020e 	bic.w	r2, r2, #14
 8005e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	2101      	movs	r1, #1
 8005e44:	fa01 f202 	lsl.w	r2, r1, r2
 8005e48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    }
  }
  return;
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
}
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40020080 	.word	0x40020080
 8005e80:	40020008 	.word	0x40020008
 8005e84:	4002001c 	.word	0x4002001c
 8005e88:	40020030 	.word	0x40020030
 8005e8c:	40020044 	.word	0x40020044
 8005e90:	40020058 	.word	0x40020058
 8005e94:	4002006c 	.word	0x4002006c
 8005e98:	40020408 	.word	0x40020408
 8005e9c:	4002041c 	.word	0x4002041c
 8005ea0:	40020430 	.word	0x40020430
 8005ea4:	40020444 	.word	0x40020444
 8005ea8:	40020400 	.word	0x40020400
 8005eac:	40020000 	.word	0x40020000

08005eb0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8005ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d108      	bne.n	8005ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005eee:	e007      	b.n	8005f00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	60da      	str	r2, [r3, #12]
}
 8005f00:	bf00      	nop
 8005f02:	3714      	adds	r7, #20
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr
	...

08005f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b08b      	sub	sp, #44	; 0x2c
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f1e:	e169      	b.n	80061f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005f20:	2201      	movs	r2, #1
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	f040 8158 	bne.w	80061ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	4a9a      	ldr	r2, [pc, #616]	; (80061ac <HAL_GPIO_Init+0x2a0>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d05e      	beq.n	8006006 <HAL_GPIO_Init+0xfa>
 8005f48:	4a98      	ldr	r2, [pc, #608]	; (80061ac <HAL_GPIO_Init+0x2a0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d875      	bhi.n	800603a <HAL_GPIO_Init+0x12e>
 8005f4e:	4a98      	ldr	r2, [pc, #608]	; (80061b0 <HAL_GPIO_Init+0x2a4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d058      	beq.n	8006006 <HAL_GPIO_Init+0xfa>
 8005f54:	4a96      	ldr	r2, [pc, #600]	; (80061b0 <HAL_GPIO_Init+0x2a4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d86f      	bhi.n	800603a <HAL_GPIO_Init+0x12e>
 8005f5a:	4a96      	ldr	r2, [pc, #600]	; (80061b4 <HAL_GPIO_Init+0x2a8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d052      	beq.n	8006006 <HAL_GPIO_Init+0xfa>
 8005f60:	4a94      	ldr	r2, [pc, #592]	; (80061b4 <HAL_GPIO_Init+0x2a8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d869      	bhi.n	800603a <HAL_GPIO_Init+0x12e>
 8005f66:	4a94      	ldr	r2, [pc, #592]	; (80061b8 <HAL_GPIO_Init+0x2ac>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d04c      	beq.n	8006006 <HAL_GPIO_Init+0xfa>
 8005f6c:	4a92      	ldr	r2, [pc, #584]	; (80061b8 <HAL_GPIO_Init+0x2ac>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d863      	bhi.n	800603a <HAL_GPIO_Init+0x12e>
 8005f72:	4a92      	ldr	r2, [pc, #584]	; (80061bc <HAL_GPIO_Init+0x2b0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d046      	beq.n	8006006 <HAL_GPIO_Init+0xfa>
 8005f78:	4a90      	ldr	r2, [pc, #576]	; (80061bc <HAL_GPIO_Init+0x2b0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d85d      	bhi.n	800603a <HAL_GPIO_Init+0x12e>
 8005f7e:	2b12      	cmp	r3, #18
 8005f80:	d82a      	bhi.n	8005fd8 <HAL_GPIO_Init+0xcc>
 8005f82:	2b12      	cmp	r3, #18
 8005f84:	d859      	bhi.n	800603a <HAL_GPIO_Init+0x12e>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <HAL_GPIO_Init+0x80>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005ff3 	.word	0x08005ff3
 8005f98:	08006035 	.word	0x08006035
 8005f9c:	0800603b 	.word	0x0800603b
 8005fa0:	0800603b 	.word	0x0800603b
 8005fa4:	0800603b 	.word	0x0800603b
 8005fa8:	0800603b 	.word	0x0800603b
 8005fac:	0800603b 	.word	0x0800603b
 8005fb0:	0800603b 	.word	0x0800603b
 8005fb4:	0800603b 	.word	0x0800603b
 8005fb8:	0800603b 	.word	0x0800603b
 8005fbc:	0800603b 	.word	0x0800603b
 8005fc0:	0800603b 	.word	0x0800603b
 8005fc4:	0800603b 	.word	0x0800603b
 8005fc8:	0800603b 	.word	0x0800603b
 8005fcc:	0800603b 	.word	0x0800603b
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	4a79      	ldr	r2, [pc, #484]	; (80061c0 <HAL_GPIO_Init+0x2b4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005fde:	e02c      	b.n	800603a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	623b      	str	r3, [r7, #32]
          break;
 8005fe6:	e029      	b.n	800603c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	623b      	str	r3, [r7, #32]
          break;
 8005ff0:	e024      	b.n	800603c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	623b      	str	r3, [r7, #32]
          break;
 8005ffa:	e01f      	b.n	800603c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	330c      	adds	r3, #12
 8006002:	623b      	str	r3, [r7, #32]
          break;
 8006004:	e01a      	b.n	800603c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d102      	bne.n	8006014 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800600e:	2304      	movs	r3, #4
 8006010:	623b      	str	r3, [r7, #32]
          break;
 8006012:	e013      	b.n	800603c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d105      	bne.n	8006028 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800601c:	2308      	movs	r3, #8
 800601e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	611a      	str	r2, [r3, #16]
          break;
 8006026:	e009      	b.n	800603c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006028:	2308      	movs	r3, #8
 800602a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69fa      	ldr	r2, [r7, #28]
 8006030:	615a      	str	r2, [r3, #20]
          break;
 8006032:	e003      	b.n	800603c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006034:	2300      	movs	r3, #0
 8006036:	623b      	str	r3, [r7, #32]
          break;
 8006038:	e000      	b.n	800603c <HAL_GPIO_Init+0x130>
          break;
 800603a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2bff      	cmp	r3, #255	; 0xff
 8006040:	d801      	bhi.n	8006046 <HAL_GPIO_Init+0x13a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	e001      	b.n	800604a <HAL_GPIO_Init+0x13e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3304      	adds	r3, #4
 800604a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2bff      	cmp	r3, #255	; 0xff
 8006050:	d802      	bhi.n	8006058 <HAL_GPIO_Init+0x14c>
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	e002      	b.n	800605e <HAL_GPIO_Init+0x152>
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3b08      	subs	r3, #8
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	210f      	movs	r1, #15
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	401a      	ands	r2, r3
 8006070:	6a39      	ldr	r1, [r7, #32]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	fa01 f303 	lsl.w	r3, r1, r3
 8006078:	431a      	orrs	r2, r3
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 80b1 	beq.w	80061ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800608c:	4b4d      	ldr	r3, [pc, #308]	; (80061c4 <HAL_GPIO_Init+0x2b8>)
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	4a4c      	ldr	r2, [pc, #304]	; (80061c4 <HAL_GPIO_Init+0x2b8>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	6193      	str	r3, [r2, #24]
 8006098:	4b4a      	ldr	r3, [pc, #296]	; (80061c4 <HAL_GPIO_Init+0x2b8>)
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80060a4:	4a48      	ldr	r2, [pc, #288]	; (80061c8 <HAL_GPIO_Init+0x2bc>)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	3302      	adds	r3, #2
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	220f      	movs	r2, #15
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a40      	ldr	r2, [pc, #256]	; (80061cc <HAL_GPIO_Init+0x2c0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <HAL_GPIO_Init+0x1ec>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a3f      	ldr	r2, [pc, #252]	; (80061d0 <HAL_GPIO_Init+0x2c4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00d      	beq.n	80060f4 <HAL_GPIO_Init+0x1e8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3e      	ldr	r2, [pc, #248]	; (80061d4 <HAL_GPIO_Init+0x2c8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <HAL_GPIO_Init+0x1e4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a3d      	ldr	r2, [pc, #244]	; (80061d8 <HAL_GPIO_Init+0x2cc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d101      	bne.n	80060ec <HAL_GPIO_Init+0x1e0>
 80060e8:	2303      	movs	r3, #3
 80060ea:	e006      	b.n	80060fa <HAL_GPIO_Init+0x1ee>
 80060ec:	2304      	movs	r3, #4
 80060ee:	e004      	b.n	80060fa <HAL_GPIO_Init+0x1ee>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e002      	b.n	80060fa <HAL_GPIO_Init+0x1ee>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_GPIO_Init+0x1ee>
 80060f8:	2300      	movs	r3, #0
 80060fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fc:	f002 0203 	and.w	r2, r2, #3
 8006100:	0092      	lsls	r2, r2, #2
 8006102:	4093      	lsls	r3, r2
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800610a:	492f      	ldr	r1, [pc, #188]	; (80061c8 <HAL_GPIO_Init+0x2bc>)
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	089b      	lsrs	r3, r3, #2
 8006110:	3302      	adds	r3, #2
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d006      	beq.n	8006132 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006124:	4b2d      	ldr	r3, [pc, #180]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	492c      	ldr	r1, [pc, #176]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4313      	orrs	r3, r2
 800612e:	600b      	str	r3, [r1, #0]
 8006130:	e006      	b.n	8006140 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	43db      	mvns	r3, r3
 800613a:	4928      	ldr	r1, [pc, #160]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800613c:	4013      	ands	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d006      	beq.n	800615a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4922      	ldr	r1, [pc, #136]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
 8006158:	e006      	b.n	8006168 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800615a:	4b20      	ldr	r3, [pc, #128]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	43db      	mvns	r3, r3
 8006162:	491e      	ldr	r1, [pc, #120]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 8006164:	4013      	ands	r3, r2
 8006166:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d006      	beq.n	8006182 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006174:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	4918      	ldr	r1, [pc, #96]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	4313      	orrs	r3, r2
 800617e:	608b      	str	r3, [r1, #8]
 8006180:	e006      	b.n	8006190 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006182:	4b16      	ldr	r3, [pc, #88]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	43db      	mvns	r3, r3
 800618a:	4914      	ldr	r1, [pc, #80]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800618c:	4013      	ands	r3, r2
 800618e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d021      	beq.n	80061e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	490e      	ldr	r1, [pc, #56]	; (80061dc <HAL_GPIO_Init+0x2d0>)
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60cb      	str	r3, [r1, #12]
 80061a8:	e021      	b.n	80061ee <HAL_GPIO_Init+0x2e2>
 80061aa:	bf00      	nop
 80061ac:	10320000 	.word	0x10320000
 80061b0:	10310000 	.word	0x10310000
 80061b4:	10220000 	.word	0x10220000
 80061b8:	10210000 	.word	0x10210000
 80061bc:	10120000 	.word	0x10120000
 80061c0:	10110000 	.word	0x10110000
 80061c4:	40021000 	.word	0x40021000
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40010800 	.word	0x40010800
 80061d0:	40010c00 	.word	0x40010c00
 80061d4:	40011000 	.word	0x40011000
 80061d8:	40011400 	.word	0x40011400
 80061dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_GPIO_Init+0x304>)
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	43db      	mvns	r3, r3
 80061e8:	4909      	ldr	r1, [pc, #36]	; (8006210 <HAL_GPIO_Init+0x304>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	3301      	adds	r3, #1
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	fa22 f303 	lsr.w	r3, r2, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f ae8e 	bne.w	8005f20 <HAL_GPIO_Init+0x14>
  }
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	372c      	adds	r7, #44	; 0x2c
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40010400 	.word	0x40010400

08006214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e001      	b.n	8006236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr

08006242 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	460b      	mov	r3, r1
 800624c:	807b      	strh	r3, [r7, #2]
 800624e:	4613      	mov	r3, r2
 8006250:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006252:	787b      	ldrb	r3, [r7, #1]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800625e:	e003      	b.n	8006268 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006260:	887b      	ldrh	r3, [r7, #2]
 8006262:	041a      	lsls	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	611a      	str	r2, [r3, #16]
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4013      	ands	r3, r2
 800628a:	041a      	lsls	r2, r3, #16
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	43d9      	mvns	r1, r3
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	400b      	ands	r3, r1
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	611a      	str	r2, [r3, #16]
}
 800629a:	bf00      	nop
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	88fb      	ldrh	r3, [r7, #6]
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062ba:	4a05      	ldr	r2, [pc, #20]	; (80062d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fb f8e8 	bl	8001498 <HAL_GPIO_EXTI_Callback>
  }
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40010400 	.word	0x40010400

080062d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e304      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8087 	beq.w	8006402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062f4:	4b92      	ldr	r3, [pc, #584]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 030c 	and.w	r3, r3, #12
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d00c      	beq.n	800631a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006300:	4b8f      	ldr	r3, [pc, #572]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	2b08      	cmp	r3, #8
 800630a:	d112      	bne.n	8006332 <HAL_RCC_OscConfig+0x5e>
 800630c:	4b8c      	ldr	r3, [pc, #560]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006318:	d10b      	bne.n	8006332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631a:	4b89      	ldr	r3, [pc, #548]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d06c      	beq.n	8006400 <HAL_RCC_OscConfig+0x12c>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d168      	bne.n	8006400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e2de      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633a:	d106      	bne.n	800634a <HAL_RCC_OscConfig+0x76>
 800633c:	4b80      	ldr	r3, [pc, #512]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a7f      	ldr	r2, [pc, #508]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e02e      	b.n	80063a8 <HAL_RCC_OscConfig+0xd4>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10c      	bne.n	800636c <HAL_RCC_OscConfig+0x98>
 8006352:	4b7b      	ldr	r3, [pc, #492]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a7a      	ldr	r2, [pc, #488]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	4b78      	ldr	r3, [pc, #480]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a77      	ldr	r2, [pc, #476]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e01d      	b.n	80063a8 <HAL_RCC_OscConfig+0xd4>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0xbc>
 8006376:	4b72      	ldr	r3, [pc, #456]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a71      	ldr	r2, [pc, #452]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800637c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	4b6f      	ldr	r3, [pc, #444]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a6e      	ldr	r2, [pc, #440]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e00b      	b.n	80063a8 <HAL_RCC_OscConfig+0xd4>
 8006390:	4b6b      	ldr	r3, [pc, #428]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a6a      	ldr	r2, [pc, #424]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	4b68      	ldr	r3, [pc, #416]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a67      	ldr	r2, [pc, #412]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 80063a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d013      	beq.n	80063d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b0:	f7fe f9a4 	bl	80046fc <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b8:	f7fe f9a0 	bl	80046fc <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b64      	cmp	r3, #100	; 0x64
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e292      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ca:	4b5d      	ldr	r3, [pc, #372]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f0      	beq.n	80063b8 <HAL_RCC_OscConfig+0xe4>
 80063d6:	e014      	b.n	8006402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d8:	f7fe f990 	bl	80046fc <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e0:	f7fe f98c 	bl	80046fc <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b64      	cmp	r3, #100	; 0x64
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e27e      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f2:	4b53      	ldr	r3, [pc, #332]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x10c>
 80063fe:	e000      	b.n	8006402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d063      	beq.n	80064d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800640e:	4b4c      	ldr	r3, [pc, #304]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800641a:	4b49      	ldr	r3, [pc, #292]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f003 030c 	and.w	r3, r3, #12
 8006422:	2b08      	cmp	r3, #8
 8006424:	d11c      	bne.n	8006460 <HAL_RCC_OscConfig+0x18c>
 8006426:	4b46      	ldr	r3, [pc, #280]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d116      	bne.n	8006460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006432:	4b43      	ldr	r3, [pc, #268]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_RCC_OscConfig+0x176>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d001      	beq.n	800644a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e252      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b3d      	ldr	r3, [pc, #244]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4939      	ldr	r1, [pc, #228]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645e:	e03a      	b.n	80064d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d020      	beq.n	80064aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006468:	4b36      	ldr	r3, [pc, #216]	; (8006544 <HAL_RCC_OscConfig+0x270>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646e:	f7fe f945 	bl	80046fc <HAL_GetTick>
 8006472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006474:	e008      	b.n	8006488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006476:	f7fe f941 	bl	80046fc <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	d901      	bls.n	8006488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e233      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006488:	4b2d      	ldr	r3, [pc, #180]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d0f0      	beq.n	8006476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006494:	4b2a      	ldr	r3, [pc, #168]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4927      	ldr	r1, [pc, #156]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	600b      	str	r3, [r1, #0]
 80064a8:	e015      	b.n	80064d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064aa:	4b26      	ldr	r3, [pc, #152]	; (8006544 <HAL_RCC_OscConfig+0x270>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b0:	f7fe f924 	bl	80046fc <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b8:	f7fe f920 	bl	80046fc <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e212      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1f0      	bne.n	80064b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d03a      	beq.n	8006558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d019      	beq.n	800651e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ea:	4b17      	ldr	r3, [pc, #92]	; (8006548 <HAL_RCC_OscConfig+0x274>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f0:	f7fe f904 	bl	80046fc <HAL_GetTick>
 80064f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f8:	f7fe f900 	bl	80046fc <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b02      	cmp	r3, #2
 8006504:	d901      	bls.n	800650a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e1f2      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650a:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <HAL_RCC_OscConfig+0x26c>)
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006516:	2001      	movs	r0, #1
 8006518:	f000 fc20 	bl	8006d5c <RCC_Delay>
 800651c:	e01c      	b.n	8006558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_RCC_OscConfig+0x274>)
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006524:	f7fe f8ea 	bl	80046fc <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800652a:	e00f      	b.n	800654c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800652c:	f7fe f8e6 	bl	80046fc <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d908      	bls.n	800654c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e1d8      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
 800653e:	bf00      	nop
 8006540:	40021000 	.word	0x40021000
 8006544:	42420000 	.word	0x42420000
 8006548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800654c:	4b9b      	ldr	r3, [pc, #620]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e9      	bne.n	800652c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80a6 	beq.w	80066b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800656a:	4b94      	ldr	r3, [pc, #592]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10d      	bne.n	8006592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006576:	4b91      	ldr	r3, [pc, #580]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	4a90      	ldr	r2, [pc, #576]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006580:	61d3      	str	r3, [r2, #28]
 8006582:	4b8e      	ldr	r3, [pc, #568]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800658e:	2301      	movs	r3, #1
 8006590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006592:	4b8b      	ldr	r3, [pc, #556]	; (80067c0 <HAL_RCC_OscConfig+0x4ec>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d118      	bne.n	80065d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800659e:	4b88      	ldr	r3, [pc, #544]	; (80067c0 <HAL_RCC_OscConfig+0x4ec>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a87      	ldr	r2, [pc, #540]	; (80067c0 <HAL_RCC_OscConfig+0x4ec>)
 80065a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065aa:	f7fe f8a7 	bl	80046fc <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b2:	f7fe f8a3 	bl	80046fc <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b64      	cmp	r3, #100	; 0x64
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e195      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065c4:	4b7e      	ldr	r3, [pc, #504]	; (80067c0 <HAL_RCC_OscConfig+0x4ec>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x312>
 80065d8:	4b78      	ldr	r3, [pc, #480]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	4a77      	ldr	r2, [pc, #476]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6213      	str	r3, [r2, #32]
 80065e4:	e02d      	b.n	8006642 <HAL_RCC_OscConfig+0x36e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0x334>
 80065ee:	4b73      	ldr	r3, [pc, #460]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	4a72      	ldr	r2, [pc, #456]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	6213      	str	r3, [r2, #32]
 80065fa:	4b70      	ldr	r3, [pc, #448]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	4a6f      	ldr	r2, [pc, #444]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006600:	f023 0304 	bic.w	r3, r3, #4
 8006604:	6213      	str	r3, [r2, #32]
 8006606:	e01c      	b.n	8006642 <HAL_RCC_OscConfig+0x36e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b05      	cmp	r3, #5
 800660e:	d10c      	bne.n	800662a <HAL_RCC_OscConfig+0x356>
 8006610:	4b6a      	ldr	r3, [pc, #424]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	4a69      	ldr	r2, [pc, #420]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006616:	f043 0304 	orr.w	r3, r3, #4
 800661a:	6213      	str	r3, [r2, #32]
 800661c:	4b67      	ldr	r3, [pc, #412]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	4a66      	ldr	r2, [pc, #408]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	6213      	str	r3, [r2, #32]
 8006628:	e00b      	b.n	8006642 <HAL_RCC_OscConfig+0x36e>
 800662a:	4b64      	ldr	r3, [pc, #400]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	4a63      	ldr	r2, [pc, #396]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006630:	f023 0301 	bic.w	r3, r3, #1
 8006634:	6213      	str	r3, [r2, #32]
 8006636:	4b61      	ldr	r3, [pc, #388]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	4a60      	ldr	r2, [pc, #384]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d015      	beq.n	8006676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800664a:	f7fe f857 	bl	80046fc <HAL_GetTick>
 800664e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006650:	e00a      	b.n	8006668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006652:	f7fe f853 	bl	80046fc <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006660:	4293      	cmp	r3, r2
 8006662:	d901      	bls.n	8006668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e143      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006668:	4b54      	ldr	r3, [pc, #336]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0ee      	beq.n	8006652 <HAL_RCC_OscConfig+0x37e>
 8006674:	e014      	b.n	80066a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006676:	f7fe f841 	bl	80046fc <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800667c:	e00a      	b.n	8006694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667e:	f7fe f83d 	bl	80046fc <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	f241 3288 	movw	r2, #5000	; 0x1388
 800668c:	4293      	cmp	r3, r2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e12d      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006694:	4b49      	ldr	r3, [pc, #292]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1ee      	bne.n	800667e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d105      	bne.n	80066b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a6:	4b45      	ldr	r3, [pc, #276]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4a44      	ldr	r2, [pc, #272]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 808c 	beq.w	80067d4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80066bc:	4b3f      	ldr	r3, [pc, #252]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d10e      	bne.n	80066e8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80066ca:	4b3c      	ldr	r3, [pc, #240]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d108      	bne.n	80066e8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80066d6:	4b39      	ldr	r3, [pc, #228]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e103      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d14e      	bne.n	800678e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80066fc:	4b2f      	ldr	r3, [pc, #188]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8006708:	429a      	cmp	r2, r3
 800670a:	d001      	beq.n	8006710 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0ef      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8006710:	4b2c      	ldr	r3, [pc, #176]	; (80067c4 <HAL_RCC_OscConfig+0x4f0>)
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006716:	f7fd fff1 	bl	80046fc <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800671e:	f7fd ffed 	bl	80046fc <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b64      	cmp	r3, #100	; 0x64
 800672a:	d901      	bls.n	8006730 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e0df      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f0      	bne.n	800671e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800673c:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006748:	491c      	ldr	r1, [pc, #112]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800674e:	4b1b      	ldr	r3, [pc, #108]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	4918      	ldr	r1, [pc, #96]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8006760:	4b18      	ldr	r3, [pc, #96]	; (80067c4 <HAL_RCC_OscConfig+0x4f0>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006766:	f7fd ffc9 	bl	80046fc <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800676e:	f7fd ffc5 	bl	80046fc <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b64      	cmp	r3, #100	; 0x64
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e0b7      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006780:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x49a>
 800678c:	e022      	b.n	80067d4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <HAL_RCC_OscConfig+0x4e8>)
 8006794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800679a:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <HAL_RCC_OscConfig+0x4f0>)
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a0:	f7fd ffac 	bl	80046fc <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80067a6:	e00f      	b.n	80067c8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067a8:	f7fd ffa8 	bl	80046fc <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b64      	cmp	r3, #100	; 0x64
 80067b4:	d908      	bls.n	80067c8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e09a      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40007000 	.word	0x40007000
 80067c4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80067c8:	4b4b      	ldr	r3, [pc, #300]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e9      	bne.n	80067a8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8088 	beq.w	80068ee <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067de:	4b46      	ldr	r3, [pc, #280]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d068      	beq.n	80068bc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d14d      	bne.n	800688e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f2:	4b42      	ldr	r3, [pc, #264]	; (80068fc <HAL_RCC_OscConfig+0x628>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f8:	f7fd ff80 	bl	80046fc <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006800:	f7fd ff7c 	bl	80046fc <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e06e      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006812:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f0      	bne.n	8006800 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006826:	d10f      	bne.n	8006848 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8006828:	4b33      	ldr	r3, [pc, #204]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 800682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4931      	ldr	r1, [pc, #196]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 8006832:	4313      	orrs	r3, r2
 8006834:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	f023 020f 	bic.w	r2, r3, #15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	492d      	ldr	r1, [pc, #180]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 8006844:	4313      	orrs	r3, r2
 8006846:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006848:	4b2b      	ldr	r3, [pc, #172]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	430b      	orrs	r3, r1
 800685a:	4927      	ldr	r1, [pc, #156]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 800685c:	4313      	orrs	r3, r2
 800685e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006860:	4b26      	ldr	r3, [pc, #152]	; (80068fc <HAL_RCC_OscConfig+0x628>)
 8006862:	2201      	movs	r2, #1
 8006864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006866:	f7fd ff49 	bl	80046fc <HAL_GetTick>
 800686a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800686c:	e008      	b.n	8006880 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800686e:	f7fd ff45 	bl	80046fc <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e037      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f0      	beq.n	800686e <HAL_RCC_OscConfig+0x59a>
 800688c:	e02f      	b.n	80068ee <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800688e:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <HAL_RCC_OscConfig+0x628>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006894:	f7fd ff32 	bl	80046fc <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800689c:	f7fd ff2e 	bl	80046fc <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e020      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ae:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x5c8>
 80068ba:	e018      	b.n	80068ee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e013      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80068c8:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <HAL_RCC_OscConfig+0x624>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	429a      	cmp	r2, r3
 80068da:	d106      	bne.n	80068ea <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d001      	beq.n	80068ee <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40021000 	.word	0x40021000
 80068fc:	42420060 	.word	0x42420060

08006900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e0d0      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006914:	4b6a      	ldr	r3, [pc, #424]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d910      	bls.n	8006944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006922:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f023 0207 	bic.w	r2, r3, #7
 800692a:	4965      	ldr	r1, [pc, #404]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	4313      	orrs	r3, r2
 8006930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b63      	ldr	r3, [pc, #396]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0b8      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800695c:	4b59      	ldr	r3, [pc, #356]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a58      	ldr	r2, [pc, #352]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006974:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a52      	ldr	r2, [pc, #328]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800697a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800697e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006980:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	494d      	ldr	r1, [pc, #308]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800698e:	4313      	orrs	r3, r2
 8006990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d040      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d107      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d115      	bne.n	80069de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e07f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d107      	bne.n	80069ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d109      	bne.n	80069de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e073      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ce:	4b3d      	ldr	r3, [pc, #244]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e06b      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069de:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f023 0203 	bic.w	r2, r3, #3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	4936      	ldr	r1, [pc, #216]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069f0:	f7fd fe84 	bl	80046fc <HAL_GetTick>
 80069f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069f6:	e00a      	b.n	8006a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f8:	f7fd fe80 	bl	80046fc <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d901      	bls.n	8006a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e053      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a0e:	4b2d      	ldr	r3, [pc, #180]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 020c 	and.w	r2, r3, #12
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d1eb      	bne.n	80069f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a20:	4b27      	ldr	r3, [pc, #156]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d210      	bcs.n	8006a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2e:	4b24      	ldr	r3, [pc, #144]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 0207 	bic.w	r2, r3, #7
 8006a36:	4922      	ldr	r1, [pc, #136]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d001      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e032      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4916      	ldr	r1, [pc, #88]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a7a:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	490e      	ldr	r1, [pc, #56]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a8e:	f000 f821 	bl	8006ad4 <HAL_RCC_GetSysClockFreq>
 8006a92:	4602      	mov	r2, r0
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	490a      	ldr	r1, [pc, #40]	; (8006ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8006aa0:	5ccb      	ldrb	r3, [r1, r3]
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	4a09      	ldr	r2, [pc, #36]	; (8006acc <HAL_RCC_ClockConfig+0x1cc>)
 8006aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd fde2 	bl	8004678 <HAL_InitTick>

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40022000 	.word	0x40022000
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	080081f4 	.word	0x080081f4
 8006acc:	20000020 	.word	0x20000020
 8006ad0:	200003d0 	.word	0x200003d0

08006ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	b09d      	sub	sp, #116	; 0x74
 8006ada:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006adc:	4b81      	ldr	r3, [pc, #516]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0x210>)
 8006ade:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8006ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ae4:	c407      	stmia	r4!, {r0, r1, r2}
 8006ae6:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006ae8:	4b7f      	ldr	r3, [pc, #508]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x214>)
 8006aea:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8006aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	667b      	str	r3, [r7, #100]	; 0x64
 8006af8:	2300      	movs	r3, #0
 8006afa:	663b      	str	r3, [r7, #96]	; 0x60
 8006afc:	2300      	movs	r3, #0
 8006afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b00:	2300      	movs	r3, #0
 8006b02:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b10:	4b76      	ldr	r3, [pc, #472]	; (8006cec <HAL_RCC_GetSysClockFreq+0x218>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b18:	f003 030c 	and.w	r3, r3, #12
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d002      	beq.n	8006b26 <HAL_RCC_GetSysClockFreq+0x52>
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d003      	beq.n	8006b2c <HAL_RCC_GetSysClockFreq+0x58>
 8006b24:	e0d4      	b.n	8006cd0 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b26:	4b72      	ldr	r3, [pc, #456]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006b28:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006b2a:	e0d4      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b2e:	0c9b      	lsrs	r3, r3, #18
 8006b30:	f003 030f 	and.w	r3, r3, #15
 8006b34:	3340      	adds	r3, #64	; 0x40
 8006b36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006b40:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80b9 	beq.w	8006cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006b4e:	4b67      	ldr	r3, [pc, #412]	; (8006cec <HAL_RCC_GetSysClockFreq+0x218>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	3340      	adds	r3, #64	; 0x40
 8006b58:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8006b62:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8006b64:	4b61      	ldr	r3, [pc, #388]	; (8006cec <HAL_RCC_GetSysClockFreq+0x218>)
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 8095 	beq.w	8006c9c <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006b72:	4b5e      	ldr	r3, [pc, #376]	; (8006cec <HAL_RCC_GetSysClockFreq+0x218>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	091b      	lsrs	r3, r3, #4
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006b80:	4b5a      	ldr	r3, [pc, #360]	; (8006cec <HAL_RCC_GetSysClockFreq+0x218>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b90:	2200      	movs	r2, #0
 8006b92:	61bb      	str	r3, [r7, #24]
 8006b94:	61fa      	str	r2, [r7, #28]
 8006b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b98:	2200      	movs	r2, #0
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b9e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ba8:	4684      	mov	ip, r0
 8006baa:	fb0c f202 	mul.w	r2, ip, r2
 8006bae:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8006bb2:	468c      	mov	ip, r1
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4603      	mov	r3, r0
 8006bba:	fb03 f30c 	mul.w	r3, r3, ip
 8006bbe:	4413      	add	r3, r2
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	fba2 8901 	umull	r8, r9, r2, r1
 8006bc8:	444b      	add	r3, r9
 8006bca:	4699      	mov	r9, r3
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	f04f 0000 	mov.w	r0, #0
 8006bd4:	f04f 0100 	mov.w	r1, #0
 8006bd8:	0159      	lsls	r1, r3, #5
 8006bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bde:	0150      	lsls	r0, r2, #5
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	ebb2 0508 	subs.w	r5, r2, r8
 8006be8:	eb63 0609 	sbc.w	r6, r3, r9
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	01b3      	lsls	r3, r6, #6
 8006bf6:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8006bfa:	01aa      	lsls	r2, r5, #6
 8006bfc:	ebb2 0a05 	subs.w	sl, r2, r5
 8006c00:	eb63 0b06 	sbc.w	fp, r3, r6
 8006c04:	f04f 0200 	mov.w	r2, #0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c18:	4692      	mov	sl, r2
 8006c1a:	469b      	mov	fp, r3
 8006c1c:	eb1a 0308 	adds.w	r3, sl, r8
 8006c20:	603b      	str	r3, [r7, #0]
 8006c22:	eb4b 0309 	adc.w	r3, fp, r9
 8006c26:	607b      	str	r3, [r7, #4]
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c34:	4629      	mov	r1, r5
 8006c36:	024b      	lsls	r3, r1, #9
 8006c38:	4620      	mov	r0, r4
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006c42:	4601      	mov	r1, r0
 8006c44:	024a      	lsls	r2, r1, #9
 8006c46:	4610      	mov	r0, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	617a      	str	r2, [r7, #20]
 8006c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c54:	2200      	movs	r2, #0
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	60fa      	str	r2, [r7, #12]
 8006c5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006c5e:	4622      	mov	r2, r4
 8006c60:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006c64:	4645      	mov	r5, r8
 8006c66:	fb05 f202 	mul.w	r2, r5, r2
 8006c6a:	464e      	mov	r6, r9
 8006c6c:	4625      	mov	r5, r4
 8006c6e:	461c      	mov	r4, r3
 8006c70:	4623      	mov	r3, r4
 8006c72:	fb03 f306 	mul.w	r3, r3, r6
 8006c76:	4413      	add	r3, r2
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4644      	mov	r4, r8
 8006c7c:	fba2 2404 	umull	r2, r4, r2, r4
 8006c80:	627c      	str	r4, [r7, #36]	; 0x24
 8006c82:	623a      	str	r2, [r7, #32]
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	4413      	add	r3, r2
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c8e:	f7f9 fac9 	bl	8000224 <__aeabi_uldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4613      	mov	r3, r2
 8006c98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c9a:	e007      	b.n	8006cac <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8006c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9e:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006ca0:	fb03 f202 	mul.w	r2, r3, r2
 8006ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006cac:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8006cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cbe:	e004      	b.n	8006cca <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc2:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <HAL_RCC_GetSysClockFreq+0x220>)
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
 8006cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006cce:	e002      	b.n	8006cd6 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006cd2:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3774      	adds	r7, #116	; 0x74
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	bf00      	nop
 8006ce4:	080081d4 	.word	0x080081d4
 8006ce8:	080081e4 	.word	0x080081e4
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	007a1200 	.word	0x007a1200
 8006cf4:	003d0900 	.word	0x003d0900

08006cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cfc:	4b02      	ldr	r3, [pc, #8]	; (8006d08 <HAL_RCC_GetHCLKFreq+0x10>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr
 8006d08:	20000020 	.word	0x20000020

08006d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d10:	f7ff fff2 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4903      	ldr	r1, [pc, #12]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	08008204 	.word	0x08008204

08006d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d38:	f7ff ffde 	bl	8006cf8 <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	0adb      	lsrs	r3, r3, #11
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4903      	ldr	r1, [pc, #12]	; (8006d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40021000 	.word	0x40021000
 8006d58:	08008204 	.word	0x08008204

08006d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d64:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <RCC_Delay+0x34>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a0a      	ldr	r2, [pc, #40]	; (8006d94 <RCC_Delay+0x38>)
 8006d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6e:	0a5b      	lsrs	r3, r3, #9
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	fb02 f303 	mul.w	r3, r2, r3
 8006d76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d78:	bf00      	nop
  }
  while (Delay --);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	60fa      	str	r2, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f9      	bne.n	8006d78 <RCC_Delay+0x1c>
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	20000020 	.word	0x20000020
 8006d94:	10624dd3 	.word	0x10624dd3

08006d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e041      	b.n	8006e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fb fdbc 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f000 fa78 	bl	80072cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d001      	beq.n	8006e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e03f      	b.n	8006ed0 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <HAL_TIM_Base_Start_IT+0xa4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d013      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0x62>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7a:	d00e      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0x62>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <HAL_TIM_Base_Start_IT+0xa8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d009      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0x62>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a16      	ldr	r2, [pc, #88]	; (8006ee4 <HAL_TIM_Base_Start_IT+0xac>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d004      	beq.n	8006e9a <HAL_TIM_Base_Start_IT+0x62>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a14      	ldr	r2, [pc, #80]	; (8006ee8 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d111      	bne.n	8006ebe <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b06      	cmp	r3, #6
 8006eaa:	d010      	beq.n	8006ece <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0201 	orr.w	r2, r2, #1
 8006eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebc:	e007      	b.n	8006ece <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f042 0201 	orr.w	r2, r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00

08006eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d122      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d11b      	bne.n	8006f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0202 	mvn.w	r2, #2
 8006f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9b1 	bl	8007296 <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f9a4 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9b3 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d122      	bne.n	8006f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d11b      	bne.n	8006f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0204 	mvn.w	r2, #4
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2202      	movs	r2, #2
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f987 	bl	8007296 <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f97a 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f989 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d122      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0208 	mvn.w	r2, #8
 8006fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f95d 	bl	8007296 <HAL_TIM_IC_CaptureCallback>
 8006fdc:	e005      	b.n	8006fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f950 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f95f 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d122      	bne.n	8007044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	2b10      	cmp	r3, #16
 800700a:	d11b      	bne.n	8007044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0210 	mvn.w	r2, #16
 8007014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2208      	movs	r2, #8
 800701a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f933 	bl	8007296 <HAL_TIM_IC_CaptureCallback>
 8007030:	e005      	b.n	800703e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f926 	bl	8007284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f935 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b01      	cmp	r3, #1
 8007050:	d10e      	bne.n	8007070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	d107      	bne.n	8007070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0201 	mvn.w	r2, #1
 8007068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa fa28 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707a:	2b80      	cmp	r3, #128	; 0x80
 800707c:	d10e      	bne.n	800709c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007088:	2b80      	cmp	r3, #128	; 0x80
 800708a:	d107      	bne.n	800709c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fa89 	bl	80075ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b4:	2b40      	cmp	r3, #64	; 0x40
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8f9 	bl	80072ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b20      	cmp	r3, #32
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0220 	mvn.w	r2, #32
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa54 	bl	800759c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIM_ConfigClockSource+0x18>
 8007110:	2302      	movs	r3, #2
 8007112:	e0b3      	b.n	800727c <HAL_TIM_ConfigClockSource+0x180>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714c:	d03e      	beq.n	80071cc <HAL_TIM_ConfigClockSource+0xd0>
 800714e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007152:	f200 8087 	bhi.w	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	f000 8085 	beq.w	8007268 <HAL_TIM_ConfigClockSource+0x16c>
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007162:	d87f      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007164:	2b70      	cmp	r3, #112	; 0x70
 8007166:	d01a      	beq.n	800719e <HAL_TIM_ConfigClockSource+0xa2>
 8007168:	2b70      	cmp	r3, #112	; 0x70
 800716a:	d87b      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 800716c:	2b60      	cmp	r3, #96	; 0x60
 800716e:	d050      	beq.n	8007212 <HAL_TIM_ConfigClockSource+0x116>
 8007170:	2b60      	cmp	r3, #96	; 0x60
 8007172:	d877      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007174:	2b50      	cmp	r3, #80	; 0x50
 8007176:	d03c      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0xf6>
 8007178:	2b50      	cmp	r3, #80	; 0x50
 800717a:	d873      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d058      	beq.n	8007232 <HAL_TIM_ConfigClockSource+0x136>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d86f      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d064      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d86b      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d060      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d867      	bhi.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d05c      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
 8007198:	2b10      	cmp	r3, #16
 800719a:	d05a      	beq.n	8007252 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800719c:	e062      	b.n	8007264 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6899      	ldr	r1, [r3, #8]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f000 f970 	bl	8007492 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	609a      	str	r2, [r3, #8]
      break;
 80071ca:	e04e      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	6899      	ldr	r1, [r3, #8]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f000 f959 	bl	8007492 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ee:	609a      	str	r2, [r3, #8]
      break;
 80071f0:	e03b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 f8d0 	bl	80073a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2150      	movs	r1, #80	; 0x50
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f927 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8007210:	e02b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6818      	ldr	r0, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	461a      	mov	r2, r3
 8007220:	f000 f8ee 	bl	8007400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2160      	movs	r1, #96	; 0x60
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f917 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8007230:	e01b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6818      	ldr	r0, [r3, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	461a      	mov	r2, r3
 8007240:	f000 f8b0 	bl	80073a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2140      	movs	r1, #64	; 0x40
 800724a:	4618      	mov	r0, r3
 800724c:	f000 f907 	bl	800745e <TIM_ITRx_SetConfig>
      break;
 8007250:	e00b      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f000 f8fe 	bl	800745e <TIM_ITRx_SetConfig>
        break;
 8007262:	e002      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr

08007296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr

080072ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <TIM_Base_SetConfig+0xc8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00f      	beq.n	8007304 <TIM_Base_SetConfig+0x38>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ea:	d00b      	beq.n	8007304 <TIM_Base_SetConfig+0x38>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a2a      	ldr	r2, [pc, #168]	; (8007398 <TIM_Base_SetConfig+0xcc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d007      	beq.n	8007304 <TIM_Base_SetConfig+0x38>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a29      	ldr	r2, [pc, #164]	; (800739c <TIM_Base_SetConfig+0xd0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_Base_SetConfig+0x38>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a28      	ldr	r2, [pc, #160]	; (80073a0 <TIM_Base_SetConfig+0xd4>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d108      	bne.n	8007316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <TIM_Base_SetConfig+0xc8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00f      	beq.n	800733e <TIM_Base_SetConfig+0x72>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007324:	d00b      	beq.n	800733e <TIM_Base_SetConfig+0x72>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a1b      	ldr	r2, [pc, #108]	; (8007398 <TIM_Base_SetConfig+0xcc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d007      	beq.n	800733e <TIM_Base_SetConfig+0x72>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a1a      	ldr	r2, [pc, #104]	; (800739c <TIM_Base_SetConfig+0xd0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_Base_SetConfig+0x72>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a19      	ldr	r2, [pc, #100]	; (80073a0 <TIM_Base_SetConfig+0xd4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d108      	bne.n	8007350 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a07      	ldr	r2, [pc, #28]	; (8007394 <TIM_Base_SetConfig+0xc8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	615a      	str	r2, [r3, #20]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00

080073a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	f023 0201 	bic.w	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 030a 	bic.w	r3, r3, #10
 80073e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f023 0210 	bic.w	r2, r3, #16
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800742a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	031b      	lsls	r3, r3, #12
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800743c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4313      	orrs	r3, r2
 800747c:	f043 0307 	orr.w	r3, r3, #7
 8007480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007492:	b480      	push	{r7}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	021a      	lsls	r2, r3, #8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	609a      	str	r2, [r3, #8]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e04b      	b.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a19      	ldr	r2, [pc, #100]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d013      	beq.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007534:	d00e      	beq.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a13      	ldr	r2, [pc, #76]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a12      	ldr	r2, [pc, #72]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d10c      	bne.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800755a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	bc80      	pop	{r7}
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40012c00 	.word	0x40012c00
 8007590:	40000400 	.word	0x40000400
 8007594:	40000800 	.word	0x40000800
 8007598:	40000c00 	.word	0x40000c00

0800759c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr

080075c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e03f      	b.n	8007652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fc fec6 	bl	8004378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2224      	movs	r2, #36	; 0x24
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fd1f 	bl	8008048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	695a      	ldr	r2, [r3, #20]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b08a      	sub	sp, #40	; 0x28
 800765e:	af02      	add	r7, sp, #8
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b20      	cmp	r3, #32
 8007678:	d17c      	bne.n	8007774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <HAL_UART_Transmit+0x2c>
 8007680:	88fb      	ldrh	r3, [r7, #6]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e075      	b.n	8007776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_UART_Transmit+0x3e>
 8007694:	2302      	movs	r3, #2
 8007696:	e06e      	b.n	8007776 <HAL_UART_Transmit+0x11c>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2221      	movs	r2, #33	; 0x21
 80076aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ae:	f7fd f825 	bl	80046fc <HAL_GetTick>
 80076b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c8:	d108      	bne.n	80076dc <HAL_UART_Transmit+0x82>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d104      	bne.n	80076dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	61bb      	str	r3, [r7, #24]
 80076da:	e003      	b.n	80076e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80076ec:	e02a      	b.n	8007744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 faf5 	bl	8007ce8 <UART_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e036      	b.n	8007776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10b      	bne.n	8007726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800771c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	3302      	adds	r3, #2
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	e007      	b.n	8007736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	3301      	adds	r3, #1
 8007734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1cf      	bne.n	80076ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	2140      	movs	r1, #64	; 0x40
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fac5 	bl	8007ce8 <UART_WaitOnFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e006      	b.n	8007776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e000      	b.n	8007776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007774:	2302      	movs	r3, #2
  }
}
 8007776:	4618      	mov	r0, r3
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	4613      	mov	r3, r2
 800778c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b20      	cmp	r3, #32
 8007798:	d153      	bne.n	8007842 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_UART_Transmit_DMA+0x26>
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e04c      	b.n	8007844 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_UART_Transmit_DMA+0x38>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e045      	b.n	8007844 <HAL_UART_Transmit_DMA+0xc4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	88fa      	ldrh	r2, [r7, #6]
 80077ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	88fa      	ldrh	r2, [r7, #6]
 80077d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2221      	movs	r2, #33	; 0x21
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	4a19      	ldr	r2, [pc, #100]	; (800784c <HAL_UART_Transmit_DMA+0xcc>)
 80077e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ec:	4a18      	ldr	r2, [pc, #96]	; (8007850 <HAL_UART_Transmit_DMA+0xd0>)
 80077ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f4:	4a17      	ldr	r2, [pc, #92]	; (8007854 <HAL_UART_Transmit_DMA+0xd4>)
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	2200      	movs	r2, #0
 80077fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8007800:	f107 0308 	add.w	r3, r7, #8
 8007804:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	6819      	ldr	r1, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3304      	adds	r3, #4
 8007814:	461a      	mov	r2, r3
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	f7fd ff6c 	bl	80056f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007824:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695a      	ldr	r2, [r3, #20]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800783c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e000      	b.n	8007844 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007842:	2302      	movs	r3, #2
  }
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	08007be7 	.word	0x08007be7
 8007850:	08007c39 	.word	0x08007c39
 8007854:	08007c55 	.word	0x08007c55

08007858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007878:	2300      	movs	r3, #0
 800787a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10d      	bne.n	80078aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <HAL_UART_IRQHandler+0x52>
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb26 	bl	8007ef4 <UART_Receive_IT>
      return;
 80078a8:	e17b      	b.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 80b1 	beq.w	8007a14 <HAL_UART_IRQHandler+0x1bc>
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d105      	bne.n	80078c8 <HAL_UART_IRQHandler+0x70>
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80a6 	beq.w	8007a14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_UART_IRQHandler+0x90>
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	f043 0201 	orr.w	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00a      	beq.n	8007908 <HAL_UART_IRQHandler+0xb0>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f043 0202 	orr.w	r2, r3, #2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_UART_IRQHandler+0xd0>
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007920:	f043 0204 	orr.w	r2, r3, #4
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00f      	beq.n	8007952 <HAL_UART_IRQHandler+0xfa>
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d104      	bne.n	8007946 <HAL_UART_IRQHandler+0xee>
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	f043 0208 	orr.w	r2, r3, #8
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 811e 	beq.w	8007b98 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_UART_IRQHandler+0x11e>
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	f003 0320 	and.w	r3, r3, #32
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fabf 	bl	8007ef4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	bf14      	ite	ne
 8007984:	2301      	movne	r3, #1
 8007986:	2300      	moveq	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <HAL_UART_IRQHandler+0x146>
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d031      	beq.n	8007a02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa01 	bl	8007da6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d023      	beq.n	80079fa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695a      	ldr	r2, [r3, #20]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d013      	beq.n	80079f2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ce:	4a76      	ldr	r2, [pc, #472]	; (8007ba8 <HAL_UART_IRQHandler+0x350>)
 80079d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fd ff26 	bl	8005828 <HAL_DMA_Abort_IT>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d016      	beq.n	8007a10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e00e      	b.n	8007a10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f8e3 	bl	8007bbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	e00a      	b.n	8007a10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f8df 	bl	8007bbe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a00:	e006      	b.n	8007a10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f8db 	bl	8007bbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a0e:	e0c3      	b.n	8007b98 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	bf00      	nop
    return;
 8007a12:	e0c1      	b.n	8007b98 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	f040 80a1 	bne.w	8007b60 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 809b 	beq.w	8007b60 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f003 0310 	and.w	r3, r3, #16
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8095 	beq.w	8007b60 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a36:	2300      	movs	r3, #0
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d04e      	beq.n	8007af8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007a64:	8a3b      	ldrh	r3, [r7, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8098 	beq.w	8007b9c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a70:	8a3a      	ldrh	r2, [r7, #16]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f080 8092 	bcs.w	8007b9c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8a3a      	ldrh	r2, [r7, #16]
 8007a7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d02b      	beq.n	8007ae0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0201 	bic.w	r2, r2, #1
 8007aa6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ab6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0210 	bic.w	r2, r2, #16
 8007ad4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fe69 	bl	80057b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f86d 	bl	8007bd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007af6:	e051      	b.n	8007b9c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d047      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007b10:	8a7b      	ldrh	r3, [r7, #18]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d044      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b24:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0201 	bic.w	r2, r2, #1
 8007b34:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0210 	bic.w	r2, r2, #16
 8007b52:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b54:	8a7b      	ldrh	r3, [r7, #18]
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f839 	bl	8007bd0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007b5e:	e01f      	b.n	8007ba0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_UART_IRQHandler+0x324>
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f956 	bl	8007e26 <UART_Transmit_IT>
    return;
 8007b7a:	e012      	b.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00d      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f997 	bl	8007ec4 <UART_EndTransmit_IT>
    return;
 8007b96:	e004      	b.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
    return;
 8007b98:	bf00      	nop
 8007b9a:	e002      	b.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
      return;
 8007b9c:	bf00      	nop
 8007b9e:	e000      	b.n	8007ba2 <HAL_UART_IRQHandler+0x34a>
      return;
 8007ba0:	bf00      	nop
  }
}
 8007ba2:	3728      	adds	r7, #40	; 0x28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	08007dff 	.word	0x08007dff

08007bac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr

08007bbe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr

08007be6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d113      	bne.n	8007c2a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c16:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c26:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c28:	e002      	b.n	8007c30 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f7f9 fc76 	bl	800151c <HAL_UART_TxCpltCallback>
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7f9 fc71 	bl	800152e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b21      	cmp	r3, #33	; 0x21
 8007c86:	d108      	bne.n	8007c9a <UART_DMAError+0x46>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2200      	movs	r2, #0
 8007c92:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c94:	68b8      	ldr	r0, [r7, #8]
 8007c96:	f000 f871 	bl	8007d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf14      	ite	ne
 8007ca8:	2301      	movne	r3, #1
 8007caa:	2300      	moveq	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b22      	cmp	r3, #34	; 0x22
 8007cba:	d108      	bne.n	8007cce <UART_DMAError+0x7a>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f000 f86c 	bl	8007da6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f043 0210 	orr.w	r2, r3, #16
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cda:	68b8      	ldr	r0, [r7, #8]
 8007cdc:	f7ff ff6f 	bl	8007bbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf8:	e02c      	b.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d00:	d028      	beq.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d007      	beq.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d08:	f7fc fcf8 	bl	80046fc <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d21d      	bcs.n	8007d54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695a      	ldr	r2, [r3, #20]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0201 	bic.w	r2, r2, #1
 8007d36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e00f      	b.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	bf0c      	ite	eq
 8007d64:	2301      	moveq	r3, #1
 8007d66:	2300      	movne	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	79fb      	ldrb	r3, [r7, #7]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d0c3      	beq.n	8007cfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007d92:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr

08007da6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68da      	ldr	r2, [r3, #12]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007dbc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	695a      	ldr	r2, [r3, #20]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0201 	bic.w	r2, r2, #1
 8007dcc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d107      	bne.n	8007de6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0210 	bic.w	r2, r2, #16
 8007de4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff fed0 	bl	8007bbe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b21      	cmp	r3, #33	; 0x21
 8007e38:	d13e      	bne.n	8007eb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e42:	d114      	bne.n	8007e6e <UART_Transmit_IT+0x48>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d110      	bne.n	8007e6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	1c9a      	adds	r2, r3, #2
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	621a      	str	r2, [r3, #32]
 8007e6c:	e008      	b.n	8007e80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	1c59      	adds	r1, r3, #1
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6211      	str	r1, [r2, #32]
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10f      	bne.n	8007eb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ea2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e000      	b.n	8007eba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
  }
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7f9 fb19 	bl	800151c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b22      	cmp	r3, #34	; 0x22
 8007f06:	f040 8099 	bne.w	800803c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f12:	d117      	bne.n	8007f44 <UART_Receive_IT+0x50>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d113      	bne.n	8007f44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	1c9a      	adds	r2, r3, #2
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28
 8007f42:	e026      	b.n	8007f92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f56:	d007      	beq.n	8007f68 <UART_Receive_IT+0x74>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <UART_Receive_IT+0x82>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	e008      	b.n	8007f88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d148      	bne.n	8008038 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0220 	bic.w	r2, r2, #32
 8007fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d123      	bne.n	800802e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68da      	ldr	r2, [r3, #12]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0210 	bic.w	r2, r2, #16
 8007ffa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0310 	and.w	r3, r3, #16
 8008006:	2b10      	cmp	r3, #16
 8008008:	d10a      	bne.n	8008020 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff fdd2 	bl	8007bd0 <HAL_UARTEx_RxEventCallback>
 800802c:	e002      	b.n	8008034 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fdbc 	bl	8007bac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	e002      	b.n	800803e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	e000      	b.n	800803e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
  }
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008082:	f023 030c 	bic.w	r3, r3, #12
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	430b      	orrs	r3, r1
 800808e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a2c      	ldr	r2, [pc, #176]	; (800815c <UART_SetConfig+0x114>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d103      	bne.n	80080b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80080b0:	f7fe fe40 	bl	8006d34 <HAL_RCC_GetPCLK2Freq>
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	e002      	b.n	80080be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80080b8:	f7fe fe28 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 80080bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009a      	lsls	r2, r3, #2
 80080c8:	441a      	add	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d4:	4a22      	ldr	r2, [pc, #136]	; (8008160 <UART_SetConfig+0x118>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	0119      	lsls	r1, r3, #4
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009a      	lsls	r2, r3, #2
 80080e8:	441a      	add	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80080f4:	4b1a      	ldr	r3, [pc, #104]	; (8008160 <UART_SetConfig+0x118>)
 80080f6:	fba3 0302 	umull	r0, r3, r3, r2
 80080fa:	095b      	lsrs	r3, r3, #5
 80080fc:	2064      	movs	r0, #100	; 0x64
 80080fe:	fb00 f303 	mul.w	r3, r0, r3
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	011b      	lsls	r3, r3, #4
 8008106:	3332      	adds	r3, #50	; 0x32
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <UART_SetConfig+0x118>)
 800810a:	fba2 2303 	umull	r2, r3, r2, r3
 800810e:	095b      	lsrs	r3, r3, #5
 8008110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008114:	4419      	add	r1, r3
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009a      	lsls	r2, r3, #2
 8008120:	441a      	add	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	fbb2 f2f3 	udiv	r2, r2, r3
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <UART_SetConfig+0x118>)
 800812e:	fba3 0302 	umull	r0, r3, r3, r2
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	2064      	movs	r0, #100	; 0x64
 8008136:	fb00 f303 	mul.w	r3, r0, r3
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	3332      	adds	r3, #50	; 0x32
 8008140:	4a07      	ldr	r2, [pc, #28]	; (8008160 <UART_SetConfig+0x118>)
 8008142:	fba2 2303 	umull	r2, r3, r2, r3
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	440a      	add	r2, r1
 8008152:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40013800 	.word	0x40013800
 8008160:	51eb851f 	.word	0x51eb851f

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	2600      	movs	r6, #0
 8008168:	4d0c      	ldr	r5, [pc, #48]	; (800819c <__libc_init_array+0x38>)
 800816a:	4c0d      	ldr	r4, [pc, #52]	; (80081a0 <__libc_init_array+0x3c>)
 800816c:	1b64      	subs	r4, r4, r5
 800816e:	10a4      	asrs	r4, r4, #2
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	f000 f822 	bl	80081bc <_init>
 8008178:	2600      	movs	r6, #0
 800817a:	4d0a      	ldr	r5, [pc, #40]	; (80081a4 <__libc_init_array+0x40>)
 800817c:	4c0a      	ldr	r4, [pc, #40]	; (80081a8 <__libc_init_array+0x44>)
 800817e:	1b64      	subs	r4, r4, r5
 8008180:	10a4      	asrs	r4, r4, #2
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	08008214 	.word	0x08008214
 80081a0:	08008214 	.word	0x08008214
 80081a4:	08008214 	.word	0x08008214
 80081a8:	08008218 	.word	0x08008218

080081ac <memset>:
 80081ac:	4603      	mov	r3, r0
 80081ae:	4402      	add	r2, r0
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d100      	bne.n	80081b6 <memset+0xa>
 80081b4:	4770      	bx	lr
 80081b6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ba:	e7f9      	b.n	80081b0 <memset+0x4>

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
