
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008804  08008804  000203b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800880c  0800880c  000203b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800880c  0800880c  0001880c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b4  20000000  08008814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200003b4  08008bc8  000203b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08008bc8  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e3e  00000000  00000000  000203dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f44  00000000  00000000  0003321b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  000371c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a00  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172a0  00000000  00000000  0005aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba55f  00000000  00000000  00071d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c2af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  0012c300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200003b4 	.word	0x200003b4
 8000200:	00000000 	.word	0x00000000
 8000204:	080087b4 	.word	0x080087b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200003b8 	.word	0x200003b8
 8000220:	080087b4 	.word	0x080087b4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <MX_CAN1_Init+0xa0>)
 8000536:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800053a:	2209      	movs	r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800054c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000550:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000554:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000558:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000580:	f004 fbe6 	bl	8004d50 <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058a:	f001 f811 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_CAN1_Init+0x9c>)
 80005bc:	f004 fcc4 	bl	8004f48 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200003d0 	.word	0x200003d0
 80005cc:	40006400 	.word	0x40006400

080005d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <HAL_CAN_MspInit+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d149      	bne.n	8000684 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000636:	f005 ff65 	bl	8006504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000650:	f005 ff58 	bl	8006504 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f005 fa9a 	bl	8005b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f005 fab3 	bl	8005bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2015      	movs	r0, #21
 800066a:	f005 fa92 	bl	8005b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800066e:	2015      	movs	r0, #21
 8000670:	f005 faab 	bl	8005bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2016      	movs	r0, #22
 800067a:	f005 fa8a 	bl	8005b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800067e:	2016      	movs	r0, #22
 8000680:	f005 faa3 	bl	8005bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40006400 	.word	0x40006400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	//timeStampSend();6
//	testFlag_1 = true;
	EVCU_setData_i.dataID = 0;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <EVCU_setData_write+0x70>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
	EVCU_setData_i.fixSetS.bit.mode = targetMode;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <EVCU_setData_write+0x74>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	b2d9      	uxtb	r1, r3
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <EVCU_setData_write+0x70>)
 80006b4:	7893      	ldrb	r3, [r2, #2]
 80006b6:	f361 0301 	bfi	r3, r1, #0, #2
 80006ba:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <EVCU_setData_write+0x78>)
 80006be:	7819      	ldrb	r1, [r3, #0]
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <EVCU_setData_write+0x70>)
 80006c2:	7893      	ldrb	r3, [r2, #2]
 80006c4:	f361 0382 	bfi	r3, r1, #2, #1
 80006c8:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <EVCU_setData_write+0x7c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	b2d9      	uxtb	r1, r3
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <EVCU_setData_write+0x70>)
 80006d8:	7893      	ldrb	r3, [r2, #2]
 80006da:	f361 03c5 	bfi	r3, r1, #3, #3
 80006de:	7093      	strb	r3, [r2, #2]
	//EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <EVCU_setData_write+0x70>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <EVCU_setData_write+0x70>)
 80006f0:	7892      	ldrb	r2, [r2, #2]
 80006f2:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <EVCU_setData_write+0x80>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <EVCU_setData_write+0x84>)
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <EVCU_setData_write+0x88>)
 80006fc:	f004 fd48 	bl	8005190 <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200003f8 	.word	0x200003f8
 800070c:	2000047f 	.word	0x2000047f
 8000710:	20000407 	.word	0x20000407
 8000714:	2000000f 	.word	0x2000000f
 8000718:	20000524 	.word	0x20000524
 800071c:	200004bc 	.word	0x200004bc
 8000720:	200003d0 	.word	0x200003d0

08000724 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	091b      	lsrs	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <EVCU_getData_read_40+0x124>)
 8000738:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	10db      	asrs	r3, r3, #3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <EVCU_getData_read_40+0x128>)
 800074c:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	109b      	asrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <EVCU_getData_read_40+0x12c>)
 8000760:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <EVCU_getData_read_40+0x130>)
 8000774:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <EVCU_getData_read_40+0x134>)
 8000784:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3302      	adds	r3, #2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	09db      	lsrs	r3, r3, #7
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <EVCU_getData_read_40+0x138>)
 8000792:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3302      	adds	r3, #2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	119b      	asrs	r3, r3, #6
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <EVCU_getData_read_40+0x13c>)
 80007a6:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3302      	adds	r3, #2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	111b      	asrs	r3, r3, #4
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <EVCU_getData_read_40+0x140>)
 80007ba:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3302      	adds	r3, #2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	10db      	asrs	r3, r3, #3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <EVCU_getData_read_40+0x144>)
 80007ce:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3302      	adds	r3, #2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	109b      	asrs	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <EVCU_getData_read_40+0x148>)
 80007e2:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3304      	adds	r3, #4
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3303      	adds	r3, #3
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <EVCU_getData_read_40+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3305      	adds	r3, #5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <EVCU_getData_read_40+0x150>)
 8000808:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3307      	adds	r3, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3306      	adds	r3, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <EVCU_getData_read_40+0x154>)
 8000824:	801a      	strh	r2, [r3, #0]
	if (starupMode) {
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <EVCU_getData_read_40+0x158>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <EVCU_getData_read_40+0x118>
		starupMode = false;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <EVCU_getData_read_40+0x158>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <EVCU_getData_read_40+0x140>)
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <EVCU_getData_read_40+0x15c>)
 800083a:	701a      	strb	r2, [r3, #0]
	}


}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000460 	.word	0x20000460
 800084c:	20000462 	.word	0x20000462
 8000850:	20000463 	.word	0x20000463
 8000854:	20000464 	.word	0x20000464
 8000858:	20000465 	.word	0x20000465
 800085c:	20000466 	.word	0x20000466
 8000860:	20000467 	.word	0x20000467
 8000864:	20000468 	.word	0x20000468
 8000868:	20000495 	.word	0x20000495
 800086c:	2000046a 	.word	0x2000046a
 8000870:	2000045e 	.word	0x2000045e
 8000874:	2000044c 	.word	0x2000044c
 8000878:	20000458 	.word	0x20000458
 800087c:	20000012 	.word	0x20000012
 8000880:	2000047e 	.word	0x2000047e

08000884 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <EVCU_getData_read_41+0x21c>)
 80008a2:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	111b      	asrs	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b7b      	ldr	r3, [pc, #492]	; (8000aa4 <EVCU_getData_read_41+0x220>)
 80008b6:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	119b      	asrs	r3, r3, #6
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b77      	ldr	r3, [pc, #476]	; (8000aa8 <EVCU_getData_read_41+0x224>)
 80008ca:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	09db      	lsrs	r3, r3, #7
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b75      	ldr	r3, [pc, #468]	; (8000aac <EVCU_getData_read_41+0x228>)
 80008d8:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3302      	adds	r3, #2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	099b      	lsrs	r3, r3, #6
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <EVCU_getData_read_41+0x22c>)
 80008e6:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d119      	bne.n	8000924 <EVCU_getData_read_41+0xa0>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3304      	adds	r3, #4
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3303      	adds	r3, #3
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	431a      	orrs	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3302      	adds	r3, #2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	061b      	lsls	r3, r3, #24
 8000914:	4313      	orrs	r3, r2
 8000916:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000918:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 800091a:	601a      	str	r2, [r3, #0]
		distance.range = canRX[5];
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	795a      	ldrb	r2, [r3, #5]
 8000920:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 8000922:	719a      	strb	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b02      	cmp	r3, #2
 800092a:	d127      	bne.n	800097c <EVCU_getData_read_41+0xf8>

		soc_value = canRX[1];
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	785a      	ldrb	r2, [r3, #1]
 8000930:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <EVCU_getData_read_41+0x234>)
 8000932:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	789a      	ldrb	r2, [r3, #2]
 8000938:	4b60      	ldr	r3, [pc, #384]	; (8000abc <EVCU_getData_read_41+0x238>)
 800093a:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	78da      	ldrb	r2, [r3, #3]
 8000940:	4b5f      	ldr	r3, [pc, #380]	; (8000ac0 <EVCU_getData_read_41+0x23c>)
 8000942:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3305      	adds	r3, #5
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b21a      	sxth	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3304      	adds	r3, #4
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21b      	sxth	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b21b      	sxth	r3, r3
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b59      	ldr	r3, [pc, #356]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 800095e:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3307      	adds	r3, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b21a      	sxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3306      	adds	r3, #6
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b53      	ldr	r3, [pc, #332]	; (8000ac8 <EVCU_getData_read_41+0x244>)
 800097a:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b03      	cmp	r3, #3
 8000982:	d11a      	bne.n	80009ba <EVCU_getData_read_41+0x136>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3302      	adds	r3, #2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b21a      	sxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3301      	adds	r3, #1
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	b21b      	sxth	r3, r3
 8000996:	4313      	orrs	r3, r2
 8000998:	b21b      	sxth	r3, r3
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b4b      	ldr	r3, [pc, #300]	; (8000acc <EVCU_getData_read_41+0x248>)
 800099e:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3304      	adds	r3, #4
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3303      	adds	r3, #3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <EVCU_getData_read_41+0x24c>)
 80009b8:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d11b      	bne.n	80009fa <EVCU_getData_read_41+0x176>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3302      	adds	r3, #2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 80009dc:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3306      	adds	r3, #6
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3305      	adds	r3, #5
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 80009f8:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b05      	cmp	r3, #5
 8000a00:	d129      	bne.n	8000a56 <EVCU_getData_read_41+0x1d2>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3302      	adds	r3, #2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b21b      	sxth	r3, r3
 8000a14:	4313      	orrs	r3, r2
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <EVCU_getData_read_41+0x250>)
 8000a1c:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3304      	adds	r3, #4
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3303      	adds	r3, #3
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	b21b      	sxth	r3, r3
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <EVCU_getData_read_41+0x250>)
 8000a38:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3306      	adds	r3, #6
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3305      	adds	r3, #5
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <EVCU_getData_read_41+0x250>)
 8000a54:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d11b      	bne.n	8000a96 <EVCU_getData_read_41+0x212>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3302      	adds	r3, #2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 8000a78:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3303      	adds	r3, #3
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <EVCU_getData_read_41+0x250>)
 8000a94:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	2000046b 	.word	0x2000046b
 8000aa4:	2000046c 	.word	0x2000046c
 8000aa8:	2000046d 	.word	0x2000046d
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	20000469 	.word	0x20000469
 8000ab4:	20000424 	.word	0x20000424
 8000ab8:	20000450 	.word	0x20000450
 8000abc:	20000451 	.word	0x20000451
 8000ac0:	2000045a 	.word	0x2000045a
 8000ac4:	20000456 	.word	0x20000456
 8000ac8:	20000454 	.word	0x20000454
 8000acc:	20000452 	.word	0x20000452
 8000ad0:	2000045c 	.word	0x2000045c
 8000ad4:	20000434 	.word	0x20000434

08000ad8 <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d12d      	bne.n	8000b44 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	785a      	ldrb	r2, [r3, #1]
 8000aec:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000aee:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3303      	adds	r3, #3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3304      	adds	r3, #4
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b0a:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3305      	adds	r3, #5
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3306      	adds	r3, #6
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b26:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3307      	adds	r3, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3306      	adds	r3, #6
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b42:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d121      	bne.n	8000b90 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	785a      	ldrb	r2, [r3, #1]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b52:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3303      	adds	r3, #3
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b21b      	sxth	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b6e:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791a      	ldrb	r2, [r3, #4]
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b76:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	795a      	ldrb	r2, [r3, #5]
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b7e:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	799a      	ldrb	r2, [r3, #6]
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b86:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	79da      	ldrb	r2, [r3, #7]
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <EVCU_getData_read_43+0xc4>)
 8000b8e:	73da      	strb	r2, [r3, #15]
	}
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000043c 	.word	0x2000043c

08000ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_DMA_Init+0x38>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <MX_DMA_Init+0x38>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6153      	str	r3, [r2, #20]
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_DMA_Init+0x38>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200c      	movs	r0, #12
 8000bc4:	f004 ffe5 	bl	8005b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bc8:	200c      	movs	r0, #12
 8000bca:	f004 fffe 	bl	8005bca <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000be0:	4b83      	ldr	r3, [pc, #524]	; (8000df0 <setError+0x214>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d13a      	bne.n	8000c5e <setError+0x82>
		switch (err_error) {
 8000be8:	4b82      	ldr	r3, [pc, #520]	; (8000df4 <setError+0x218>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d026      	beq.n	8000c3e <setError+0x62>
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	dc36      	bgt.n	8000c62 <setError+0x86>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <setError+0x22>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d010      	beq.n	8000c1e <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000bfc:	e031      	b.n	8000c62 <setError+0x86>
			error_on = true;
 8000bfe:	4b7e      	ldr	r3, [pc, #504]	; (8000df8 <setError+0x21c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c04:	4b7d      	ldr	r3, [pc, #500]	; (8000dfc <setError+0x220>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c0a:	4b7d      	ldr	r3, [pc, #500]	; (8000e00 <setError+0x224>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c10:	4b7c      	ldr	r3, [pc, #496]	; (8000e04 <setError+0x228>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c16:	4b7c      	ldr	r3, [pc, #496]	; (8000e08 <setError+0x22c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
			break;
 8000c1c:	e022      	b.n	8000c64 <setError+0x88>
			error_on = true;
 8000c1e:	4b76      	ldr	r3, [pc, #472]	; (8000df8 <setError+0x21c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c24:	4b75      	ldr	r3, [pc, #468]	; (8000dfc <setError+0x220>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c2a:	4b75      	ldr	r3, [pc, #468]	; (8000e00 <setError+0x224>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c30:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <setError+0x228>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c36:	4b74      	ldr	r3, [pc, #464]	; (8000e08 <setError+0x22c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
			break;
 8000c3c:	e012      	b.n	8000c64 <setError+0x88>
			error_on = false;
 8000c3e:	4b6e      	ldr	r3, [pc, #440]	; (8000df8 <setError+0x21c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c44:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <setError+0x220>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <setError+0x224>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c50:	4b6c      	ldr	r3, [pc, #432]	; (8000e04 <setError+0x228>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000c56:	4b6c      	ldr	r3, [pc, #432]	; (8000e08 <setError+0x22c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
			break;
 8000c5c:	e002      	b.n	8000c64 <setError+0x88>
		}
	}
 8000c5e:	bf00      	nop
 8000c60:	e000      	b.n	8000c64 <setError+0x88>
			break;
 8000c62:	bf00      	nop
	if (err_device == 1) { //BMS
 8000c64:	4b62      	ldr	r3, [pc, #392]	; (8000df0 <setError+0x214>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	f040 80bb 	bne.w	8000de4 <setError+0x208>
		switch (err_error) {
 8000c6e:	4b61      	ldr	r3, [pc, #388]	; (8000df4 <setError+0x218>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	f200 80a6 	bhi.w	8000dc4 <setError+0x1e8>
 8000c78:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <setError+0xa4>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000cc5 	.word	0x08000cc5
 8000c88:	08000ce5 	.word	0x08000ce5
 8000c8c:	08000d05 	.word	0x08000d05
 8000c90:	08000d25 	.word	0x08000d25
 8000c94:	08000d45 	.word	0x08000d45
 8000c98:	08000d65 	.word	0x08000d65
 8000c9c:	08000d85 	.word	0x08000d85
 8000ca0:	08000da5 	.word	0x08000da5
		case 0: //Over_Discharge_Current
			error_on = true;
 8000ca4:	4b54      	ldr	r3, [pc, #336]	; (8000df8 <setError+0x21c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000caa:	4b54      	ldr	r3, [pc, #336]	; (8000dfc <setError+0x220>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cb0:	4b53      	ldr	r3, [pc, #332]	; (8000e00 <setError+0x224>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cb6:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <setError+0x228>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cbc:	4b52      	ldr	r3, [pc, #328]	; (8000e08 <setError+0x22c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cc2:	e090      	b.n	8000de6 <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000cc4:	4b4c      	ldr	r3, [pc, #304]	; (8000df8 <setError+0x21c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <setError+0x220>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <setError+0x224>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cd6:	4b4b      	ldr	r3, [pc, #300]	; (8000e04 <setError+0x228>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <setError+0x22c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000ce2:	e080      	b.n	8000de6 <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000ce4:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <setError+0x21c>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <setError+0x220>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cf0:	4b43      	ldr	r3, [pc, #268]	; (8000e00 <setError+0x224>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <setError+0x228>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cfc:	4b42      	ldr	r3, [pc, #264]	; (8000e08 <setError+0x22c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d02:	e070      	b.n	8000de6 <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <setError+0x21c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <setError+0x220>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d10:	4b3b      	ldr	r3, [pc, #236]	; (8000e00 <setError+0x224>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d16:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <setError+0x228>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d1c:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <setError+0x22c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d22:	e060      	b.n	8000de6 <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000d24:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <setError+0x21c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <setError+0x220>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <setError+0x224>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d36:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <setError+0x228>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <setError+0x22c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d42:	e050      	b.n	8000de6 <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <setError+0x21c>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	; (8000dfc <setError+0x220>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d50:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <setError+0x224>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <setError+0x228>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <setError+0x22c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d62:	e040      	b.n	8000de6 <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <setError+0x21c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d6a:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <setError+0x220>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <setError+0x224>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d76:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <setError+0x228>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <setError+0x22c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d82:	e030      	b.n	8000de6 <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <setError+0x21c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <setError+0x220>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <setError+0x224>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <setError+0x228>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <setError+0x22c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000da2:	e020      	b.n	8000de6 <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <setError+0x21c>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <setError+0x220>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <setError+0x224>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <setError+0x228>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <setError+0x22c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000dc2:	e010      	b.n	8000de6 <setError+0x20a>
		default:
			error_on = false;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <setError+0x21c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <setError+0x220>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <setError+0x224>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <setError+0x228>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <setError+0x22c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
			break;
 8000de2:	e000      	b.n	8000de6 <setError+0x20a>
		}
	}
 8000de4:	bf00      	nop
	//_errorSelection = true;
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2000046c 	.word	0x2000046c
 8000df4:	2000046b 	.word	0x2000046b
 8000df8:	2000048a 	.word	0x2000048a
 8000dfc:	2000048b 	.word	0x2000048b
 8000e00:	2000048c 	.word	0x2000048c
 8000e04:	2000048d 	.word	0x2000048d
 8000e08:	2000048e 	.word	0x2000048e

08000e0c <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a39      	ldr	r2, [pc, #228]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b37      	ldr	r3, [pc, #220]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0320 	and.w	r3, r3, #32
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b34      	ldr	r3, [pc, #208]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e56:	f043 0304 	orr.w	r3, r3, #4
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a2d      	ldr	r2, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e6e:	f043 0308 	orr.w	r3, r3, #8
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <MX_GPIO_Init+0x118>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin | LED_2_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2103      	movs	r1, #3
 8000e84:	4828      	ldr	r0, [pc, #160]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000e86:	f005 fcd8 	bl	800683a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PCPin PCPin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4821      	ldr	r0, [pc, #132]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000ea2:	f005 fb2f 	bl	8006504 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = IN4_Pin | IN3_Pin | IN2_Pin;
 8000ea6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000eaa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	4619      	mov	r1, r3
 8000eba:	481c      	ldr	r0, [pc, #112]	; (8000f2c <MX_GPIO_Init+0x120>)
 8000ebc:	f005 fb22 	bl	8006504 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin PCPin
	 PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = IN7_Pin | IN6_Pin | IN9_Pin | IN10_Pin | IN11_Pin
 8000ec0:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000ec4:	613b      	str	r3, [r7, #16]
			| IN12_Pin | IN5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4814      	ldr	r0, [pc, #80]	; (8000f28 <MX_GPIO_Init+0x11c>)
 8000ed6:	f005 fb15 	bl	8006504 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = IN8_Pin | IN1_Pin;
 8000eda:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ede:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000ef0:	f005 fb08 	bl	8006504 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = Btn_Int_1_Pin | Btn_Int_2_Pin;
 8000ef4:	23c0      	movs	r3, #192	; 0xc0
 8000ef6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_GPIO_Init+0x128>)
 8000efa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	480a      	ldr	r0, [pc, #40]	; (8000f30 <MX_GPIO_Init+0x124>)
 8000f08:	f005 fafc 	bl	8006504 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2017      	movs	r0, #23
 8000f12:	f004 fe3e 	bl	8005b92 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f16:	2017      	movs	r0, #23
 8000f18:	f004 fe57 	bl	8005bca <HAL_NVIC_EnableIRQ>

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40010800 	.word	0x40010800
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	10110000 	.word	0x10110000

08000f38 <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 8000f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f40:	4851      	ldr	r0, [pc, #324]	; (8001088 <getInputs+0x150>)
 8000f42:	f005 fc63 	bl	800680c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4a4f      	ldr	r2, [pc, #316]	; (800108c <getInputs+0x154>)
 8000f50:	7813      	ldrb	r3, [r2, #0]
 8000f52:	f361 0300 	bfi	r3, r1, #0, #1
 8000f56:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	484c      	ldr	r0, [pc, #304]	; (8001090 <getInputs+0x158>)
 8000f5e:	f005 fc55 	bl	800680c <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	4a48      	ldr	r2, [pc, #288]	; (800108c <getInputs+0x154>)
 8000f6c:	7813      	ldrb	r3, [r2, #0]
 8000f6e:	f361 0341 	bfi	r3, r1, #1, #1
 8000f72:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 8000f74:	2108      	movs	r1, #8
 8000f76:	4846      	ldr	r0, [pc, #280]	; (8001090 <getInputs+0x158>)
 8000f78:	f005 fc48 	bl	800680c <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2d9      	uxtb	r1, r3
 8000f84:	4a41      	ldr	r2, [pc, #260]	; (800108c <getInputs+0x154>)
 8000f86:	7813      	ldrb	r3, [r2, #0]
 8000f88:	f361 0382 	bfi	r3, r1, #2, #1
 8000f8c:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8000f8e:	2104      	movs	r1, #4
 8000f90:	483f      	ldr	r0, [pc, #252]	; (8001090 <getInputs+0x158>)
 8000f92:	f005 fc3b 	bl	800680c <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2d9      	uxtb	r1, r3
 8000f9e:	4a3b      	ldr	r2, [pc, #236]	; (800108c <getInputs+0x154>)
 8000fa0:	7813      	ldrb	r3, [r2, #0]
 8000fa2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fa6:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	4839      	ldr	r0, [pc, #228]	; (8001094 <getInputs+0x15c>)
 8000fae:	f005 fc2d 	bl	800680c <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	b2d9      	uxtb	r1, r3
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <getInputs+0x154>)
 8000fbc:	7813      	ldrb	r3, [r2, #0]
 8000fbe:	f361 1304 	bfi	r3, r1, #4, #1
 8000fc2:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4833      	ldr	r0, [pc, #204]	; (8001094 <getInputs+0x15c>)
 8000fc8:	f005 fc20 	bl	800680c <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2d9      	uxtb	r1, r3
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <getInputs+0x154>)
 8000fd6:	7813      	ldrb	r3, [r2, #0]
 8000fd8:	f361 1345 	bfi	r3, r1, #5, #1
 8000fdc:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8000fde:	2110      	movs	r1, #16
 8000fe0:	482c      	ldr	r0, [pc, #176]	; (8001094 <getInputs+0x15c>)
 8000fe2:	f005 fc13 	bl	800680c <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	4a27      	ldr	r2, [pc, #156]	; (800108c <getInputs+0x154>)
 8000ff0:	7813      	ldrb	r3, [r2, #0]
 8000ff2:	f361 1386 	bfi	r3, r1, #6, #1
 8000ff6:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8000ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffc:	4822      	ldr	r0, [pc, #136]	; (8001088 <getInputs+0x150>)
 8000ffe:	f005 fc05 	bl	800680c <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	b2d9      	uxtb	r1, r3
 800100a:	4a20      	ldr	r2, [pc, #128]	; (800108c <getInputs+0x154>)
 800100c:	7813      	ldrb	r3, [r2, #0]
 800100e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001012:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	481f      	ldr	r0, [pc, #124]	; (8001094 <getInputs+0x15c>)
 8001018:	f005 fbf8 	bl	800680c <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	b2d9      	uxtb	r1, r3
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <getInputs+0x154>)
 8001026:	7853      	ldrb	r3, [r2, #1]
 8001028:	f361 0300 	bfi	r3, r1, #0, #1
 800102c:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	4818      	ldr	r0, [pc, #96]	; (8001094 <getInputs+0x15c>)
 8001032:	f005 fbeb 	bl	800680c <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2d9      	uxtb	r1, r3
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <getInputs+0x154>)
 8001040:	7853      	ldrb	r3, [r2, #1]
 8001042:	f361 0341 	bfi	r3, r1, #1, #1
 8001046:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 8001048:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <getInputs+0x15c>)
 800104e:	f005 fbdd 	bl	800680c <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2d9      	uxtb	r1, r3
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <getInputs+0x154>)
 800105c:	7853      	ldrb	r3, [r2, #1]
 800105e:	f361 0382 	bfi	r3, r1, #2, #1
 8001062:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <getInputs+0x15c>)
 800106a:	f005 fbcf 	bl	800680c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2d9      	uxtb	r1, r3
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <getInputs+0x154>)
 8001078:	7853      	ldrb	r3, [r2, #1]
 800107a:	f361 03c3 	bfi	r3, r1, #3, #1
 800107e:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001080:	f000 f8ae 	bl	80011e0 <buttonOkay>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010c00 	.word	0x40010c00
 800108c:	20000400 	.word	0x20000400
 8001090:	40010800 	.word	0x40010800
 8001094:	40011000 	.word	0x40011000

08001098 <setInputs>:

void setInputs() {
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	//  3 - Okay
	//	4 - Back
	//	5 - Forward
	//	6 - Backward
	//	7 - Mode
	if (gpio.buttonInputs.bit.in5) //pageUp
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <setInputs+0x11c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d011      	beq.n	80010ce <setInputs+0x36>
	{
		buttonCounterForward++;
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <setInputs+0x120>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <setInputs+0x120>)
 80010b4:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <setInputs+0x120>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d803      	bhi.n	80010c6 <setInputs+0x2e>
			forward = true;
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <setInputs+0x124>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e006      	b.n	80010d4 <setInputs+0x3c>
		}
		else {
			forward = false;
 80010c6:	4b3d      	ldr	r3, [pc, #244]	; (80011bc <setInputs+0x124>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	e002      	b.n	80010d4 <setInputs+0x3c>
		}
	} else {
		buttonCounterForward = 0;
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <setInputs+0x120>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6) //pageDown
 80010d4:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <setInputs+0x11c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	f003 0320 	and.w	r3, r3, #32
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d011      	beq.n	8001106 <setInputs+0x6e>
	{
		buttonCounterBackward++;
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <setInputs+0x128>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <setInputs+0x128>)
 80010ec:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <setInputs+0x128>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d803      	bhi.n	80010fe <setInputs+0x66>
			backward = true;
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <setInputs+0x12c>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	e006      	b.n	800110c <setInputs+0x74>
		}
		else {
			backward = false;
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <setInputs+0x12c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e002      	b.n	800110c <setInputs+0x74>
		}
	} else {
		buttonCounterBackward = 0;
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <setInputs+0x128>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //back
 800110c:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <setInputs+0x11c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d011      	beq.n	800113e <setInputs+0xa6>
	{
		buttonCounterBack++;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <setInputs+0x130>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <setInputs+0x130>)
 8001124:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <setInputs+0x130>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d803      	bhi.n	8001136 <setInputs+0x9e>
			back = true;
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <setInputs+0x134>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e006      	b.n	8001144 <setInputs+0xac>
		}
		else {
			back = false;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <setInputs+0x134>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e002      	b.n	8001144 <setInputs+0xac>
		}
	}
	else
	{
		buttonCounterBack = 0;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <setInputs+0x130>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in7) //mode //After fixing the okay button change mode to okay
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <setInputs+0x11c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00d      	beq.n	800116e <setInputs+0xd6>
	{
		buttonCounterMode++;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <setInputs+0x138>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <setInputs+0x138>)
 800115c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <setInputs+0x138>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d806      	bhi.n	8001174 <setInputs+0xdc>
			mode = true;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <setInputs+0x13c>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e002      	b.n	8001174 <setInputs+0xdc>
			//mode = false;
		//}
	}
	else
	{
		buttonCounterMode = 0;
 800116e:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <setInputs+0x138>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in3 == 1) //okay
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <setInputs+0x11c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d011      	beq.n	80011a6 <setInputs+0x10e>
	{
		buttonCounterOkay++;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <setInputs+0x140>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <setInputs+0x140>)
 800118c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <setInputs+0x140>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d803      	bhi.n	800119e <setInputs+0x106>
			okay = true;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <setInputs+0x144>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 800119c:	e006      	b.n	80011ac <setInputs+0x114>
			okay = false;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <setInputs+0x144>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	e002      	b.n	80011ac <setInputs+0x114>
		buttonCounterOkay = 0;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <setInputs+0x140>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	20000400 	.word	0x20000400
 80011b8:	200004b6 	.word	0x200004b6
 80011bc:	20000404 	.word	0x20000404
 80011c0:	200004b7 	.word	0x200004b7
 80011c4:	20000405 	.word	0x20000405
 80011c8:	200004b8 	.word	0x200004b8
 80011cc:	2000040a 	.word	0x2000040a
 80011d0:	200004ba 	.word	0x200004ba
 80011d4:	20000409 	.word	0x20000409
 80011d8:	200004b9 	.word	0x200004b9
 80011dc:	20000406 	.word	0x20000406

080011e0 <buttonOkay>:

void buttonOkay(void) {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in3 == 1) {
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <buttonOkay+0x54>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <buttonOkay+0x20>
		buttonCounterLongPress++;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <buttonOkay+0x58>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <buttonOkay+0x58>)
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e005      	b.n	800120c <buttonOkay+0x2c>
	} else {
		buttonCounterLongPress = 0;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <buttonOkay+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
		okay = false;
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <buttonOkay+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <buttonOkay+0x58>)
 800120e:	781a      	ldrb	r2, [r3, #0]
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <buttonOkay+0x60>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d308      	bcc.n	800122a <buttonOkay+0x4a>
		longpress = true;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <buttonOkay+0x64>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
		okay = false;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <buttonOkay+0x5c>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <buttonOkay+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
	}

}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000400 	.word	0x20000400
 8001238:	200004b5 	.word	0x200004b5
 800123c:	20000406 	.word	0x20000406
 8001240:	20000016 	.word	0x20000016
 8001244:	20000408 	.word	0x20000408

08001248 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800124c:	f003 fcfa 	bl	8004c44 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001254:	f003 fd58 	bl	8004d08 <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001258:	f000 f8a4 	bl	80013a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800125c:	f7ff fdd6 	bl	8000e0c <MX_GPIO_Init>
	MX_DMA_Init();
 8001260:	f7ff fc9e 	bl	8000ba0 <MX_DMA_Init>
	MX_CAN1_Init();
 8001264:	f7ff f962 	bl	800052c <MX_CAN1_Init>
	MX_TIM2_Init();
 8001268:	f001 fcd0 	bl	8002c0c <MX_TIM2_Init>
	MX_USART3_UART_Init();
 800126c:	f003 fb4c 	bl	8004908 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 8001270:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <main+0x128>)
 8001272:	2208      	movs	r2, #8
 8001274:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <main+0x128>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <main+0x128>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <main+0x128>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 8001288:	4b39      	ldr	r3, [pc, #228]	; (8001370 <main+0x128>)
 800128a:	2242      	movs	r2, #66	; 0x42
 800128c:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <main+0x128>)
 8001290:	2200      	movs	r2, #0
 8001292:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <main+0x12c>)
 8001296:	22f3      	movs	r2, #243	; 0xf3
 8001298:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 800129a:	4b37      	ldr	r3, [pc, #220]	; (8001378 <main+0x130>)
 800129c:	2208      	movs	r2, #8
 800129e:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <main+0x130>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <main+0x130>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <main+0x130>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <main+0x130>)
 80012b4:	2252      	movs	r2, #82	; 0x52
 80012b6:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <main+0x130>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <main+0x134>)
 80012c0:	22f3      	movs	r2, #243	; 0xf3
 80012c2:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 80012c4:	2208      	movs	r2, #8
 80012c6:	2100      	movs	r1, #0
 80012c8:	482d      	ldr	r0, [pc, #180]	; (8001380 <main+0x138>)
 80012ca:	f007 fa6b 	bl	80087a4 <memset>
	memset(strDATA2, 0, 10);
 80012ce:	220a      	movs	r2, #10
 80012d0:	2100      	movs	r1, #0
 80012d2:	482c      	ldr	r0, [pc, #176]	; (8001384 <main+0x13c>)
 80012d4:	f007 fa66 	bl	80087a4 <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <main+0x138>)
 80012da:	225a      	movs	r2, #90	; 0x5a
 80012dc:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <main+0x138>)
 80012e0:	22a5      	movs	r2, #165	; 0xa5
 80012e2:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <main+0x138>)
 80012e6:	2205      	movs	r2, #5
 80012e8:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <main+0x138>)
 80012ec:	2282      	movs	r2, #130	; 0x82
 80012ee:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <main+0x13c>)
 80012f2:	225a      	movs	r2, #90	; 0x5a
 80012f4:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <main+0x13c>)
 80012f8:	22a5      	movs	r2, #165	; 0xa5
 80012fa:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <main+0x13c>)
 80012fe:	2207      	movs	r2, #7
 8001300:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <main+0x13c>)
 8001304:	2282      	movs	r2, #130	; 0x82
 8001306:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 8001308:	481f      	ldr	r0, [pc, #124]	; (8001388 <main+0x140>)
 800130a:	f003 fefd 	bl	8005108 <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800130e:	2102      	movs	r1, #2
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <main+0x140>)
 8001312:	f004 f928 	bl	8005566 <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <main+0x144>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 800131c:	481c      	ldr	r0, [pc, #112]	; (8001390 <main+0x148>)
 800131e:	f006 f887 	bl	8007430 <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <main+0x14c>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <main+0x14c>)
 800132c:	701a      	strb	r2, [r3, #0]
		counter2++;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <main+0x150>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <main+0x150>)
 8001338:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(10);

		if (gpioSetFlag) {
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <main+0x154>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <main+0x10e>
			getInputs();
 8001342:	f7ff fdf9 	bl	8000f38 <getInputs>
			setInputs();
 8001346:	f7ff fea7 	bl	8001098 <setInputs>
			gpioSetFlag = false;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <main+0x154>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
			//mainStateMachine();
			counter = 0;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <main+0x14c>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]

		}
		if (timeout.timeout_0_5s == true) {
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <main+0x158>)
 8001358:	795b      	ldrb	r3, [r3, #5]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0e0      	beq.n	8001322 <main+0xda>
			if (counter2 >= 10) {
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <main+0x150>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b09      	cmp	r3, #9
 8001366:	d9dc      	bls.n	8001322 <main+0xda>
				//transmit();
				counter2 = 0;
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <main+0x150>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
		counter++;
 800136e:	e7d8      	b.n	8001322 <main+0xda>
 8001370:	200004bc 	.word	0x200004bc
 8001374:	20000530 	.word	0x20000530
 8001378:	200004f0 	.word	0x200004f0
 800137c:	20000018 	.word	0x20000018
 8001380:	20000410 	.word	0x20000410
 8001384:	20000418 	.word	0x20000418
 8001388:	200003d0 	.word	0x200003d0
 800138c:	200004b2 	.word	0x200004b2
 8001390:	20000548 	.word	0x20000548
 8001394:	20000540 	.word	0x20000540
 8001398:	20000541 	.word	0x20000541
 800139c:	20000544 	.word	0x20000544
 80013a0:	20000590 	.word	0x20000590

080013a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	2238      	movs	r2, #56	; 0x38
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f007 f9f6 	bl	80087a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013dc:	2302      	movs	r3, #2
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fa69 	bl	80068cc <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x60>
		Error_Handler();
 8001400:	f000 f8d6 	bl	80015b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001414:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2102      	movs	r1, #2
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fd6a 	bl	8006ef8 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x8a>
		Error_Handler();
 800142a:	f000 f8c1 	bl	80015b0 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <SystemClock_Config+0x98>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3750      	adds	r7, #80	; 0x50
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	42420070 	.word	0x42420070

08001440 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	can_Counter++;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001452:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2101      	movs	r1, #1
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800145a:	f005 f9ee 	bl	800683a <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001462:	2100      	movs	r1, #0
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f003 ff6d 	bl	8005344 <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b40      	cmp	r3, #64	; 0x40
 8001470:	d106      	bne.n	8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 800147a:	4810      	ldr	r0, [pc, #64]	; (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800147c:	f7ff f952 	bl	8000724 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b41      	cmp	r3, #65	; 0x41
 8001486:	d106      	bne.n	8001496 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001492:	f7ff f9f7 	bl	8000884 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b43      	cmp	r3, #67	; 0x43
 800149c:	d106      	bne.n	80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80014a8:	f7ff fb16 	bl	8000ad8 <EVCU_getData_read_43>
	}
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000542 	.word	0x20000542
 80014b8:	40011000 	.word	0x40011000
 80014bc:	20000528 	.word	0x20000528
 80014c0:	200004d4 	.word	0x200004d4

080014c4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	counter2++;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80014d6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2102      	movs	r1, #2
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80014de:	f005 f9ac 	bl	800683a <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f003 ff2b 	bl	8005344 <HAL_CAN_GetRxMessage>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000541 	.word	0x20000541
 80014fc:	40011000 	.word	0x40011000
 8001500:	20000538 	.word	0x20000538
 8001504:	20000508 	.word	0x20000508

08001508 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_GPIO_EXTI_Callback+0x20>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_GPIO_EXTI_Callback+0x24>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
	}
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	20000402 	.word	0x20000402
 800152c:	20000403 	.word	0x20000403

08001530 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800153a:	f001 fbd7 	bl	8002cec <tick_count>
	gpioSetFlag = true;//50ms
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
	mainStateMachine();
 8001544:	f000 ffb2 	bl	80024ac <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 8001548:	2101      	movs	r1, #1
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800154c:	f005 f98d 	bl	800686a <HAL_GPIO_TogglePin>
	timCounter++;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800155a:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 800155c:	f001 fc34 	bl	8002dc8 <transmit>

	//gpioSetFlag = true;

	if (timeout.timeout_1s == true) {
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001562:	799b      	ldrb	r3, [r3, #6]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_TIM_PeriodElapsedCallback+0x40>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800156c:	f7ff f894 	bl	8000698 <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000590 	.word	0x20000590
 800157c:	20000544 	.word	0x20000544
 8001580:	40011000 	.word	0x40011000
 8001584:	20000543 	.word	0x20000543
 8001588:	20000530 	.word	0x20000530

0800158c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]

}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <navigation>:
#include <menu.h>


void navigation(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 80015c0:	4b9b      	ldr	r3, [pc, #620]	; (8001830 <navigation+0x274>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d103      	bne.n	80015d0 <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 80015c8:	4b9a      	ldr	r3, [pc, #616]	; (8001834 <navigation+0x278>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e002      	b.n	80015d6 <navigation+0x1a>
	} else {
		_navigation = false;
 80015d0:	4b98      	ldr	r3, [pc, #608]	; (8001834 <navigation+0x278>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
	}

	if (currentStateSM == driving_state) {
 80015d6:	4b98      	ldr	r3, [pc, #608]	; (8001838 <navigation+0x27c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d102      	bne.n	80015e6 <navigation+0x2a>
		_testPage = true;
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <navigation+0x280>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
	}

	switch (currentPage) {
 80015e6:	4b96      	ldr	r3, [pc, #600]	; (8001840 <navigation+0x284>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	f200 8112 	bhi.w	8001816 <navigation+0x25a>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <navigation+0x3c>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001619 	.word	0x08001619
 80015fc:	08001681 	.word	0x08001681
 8001600:	080016e9 	.word	0x080016e9
 8001604:	0800174f 	.word	0x0800174f
 8001608:	08001817 	.word	0x08001817
 800160c:	08001817 	.word	0x08001817
 8001610:	08001817 	.word	0x08001817
 8001614:	080017b3 	.word	0x080017b3
	case front:
		front_mainPage();
 8001618:	f000 f91e 	bl	8001858 <front_mainPage>
		if (currentStateSM == driving_state) {
 800161c:	4b86      	ldr	r3, [pc, #536]	; (8001838 <navigation+0x27c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <navigation+0x76>
			_realTimeData = true;
 8001626:	4b87      	ldr	r3, [pc, #540]	; (8001844 <navigation+0x288>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800162c:	4b86      	ldr	r3, [pc, #536]	; (8001848 <navigation+0x28c>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001632:	4b83      	ldr	r3, [pc, #524]	; (8001840 <navigation+0x284>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b84      	ldr	r3, [pc, #528]	; (800184c <navigation+0x290>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	429a      	cmp	r2, r3
 8001640:	f000 80eb 	beq.w	800181a <navigation+0x25e>
			previousPage = front;
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <navigation+0x290>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <navigation+0x294>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001650:	4b7c      	ldr	r3, [pc, #496]	; (8001844 <navigation+0x288>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001656:	4b7c      	ldr	r3, [pc, #496]	; (8001848 <navigation+0x28c>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800165c:	4b76      	ldr	r3, [pc, #472]	; (8001838 <navigation+0x27c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <navigation+0xb0>
				_transmit_Function = 5;
 8001666:	4b7b      	ldr	r3, [pc, #492]	; (8001854 <navigation+0x298>)
 8001668:	2205      	movs	r2, #5
 800166a:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800166c:	4b72      	ldr	r3, [pc, #456]	; (8001838 <navigation+0x27c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 80d1 	bne.w	800181a <navigation+0x25e>
				_transmit_Function = 2;
 8001678:	4b76      	ldr	r3, [pc, #472]	; (8001854 <navigation+0x298>)
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 800167e:	e0cc      	b.n	800181a <navigation+0x25e>
	case trip:
		trip_mainPage();
 8001680:	f000 f944 	bl	800190c <trip_mainPage>
		if (currentStateSM == driving_state) {
 8001684:	4b6c      	ldr	r3, [pc, #432]	; (8001838 <navigation+0x27c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <navigation+0xde>
			_realTimeData = true;
 800168e:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <navigation+0x288>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001694:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <navigation+0x28c>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 800169a:	4b69      	ldr	r3, [pc, #420]	; (8001840 <navigation+0x284>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b6a      	ldr	r3, [pc, #424]	; (800184c <navigation+0x290>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	429a      	cmp	r2, r3
 80016a8:	f000 80b9 	beq.w	800181e <navigation+0x262>
			previousPage = trip;
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <navigation+0x290>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80016b2:	4b67      	ldr	r3, [pc, #412]	; (8001850 <navigation+0x294>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80016b8:	4b62      	ldr	r3, [pc, #392]	; (8001844 <navigation+0x288>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80016be:	4b62      	ldr	r3, [pc, #392]	; (8001848 <navigation+0x28c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80016c4:	4b5c      	ldr	r3, [pc, #368]	; (8001838 <navigation+0x27c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <navigation+0x118>
				_transmit_Function = 5;
 80016ce:	4b61      	ldr	r3, [pc, #388]	; (8001854 <navigation+0x298>)
 80016d0:	2205      	movs	r2, #5
 80016d2:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <navigation+0x27c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 809f 	bne.w	800181e <navigation+0x262>
				_transmit_Function = 2;
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <navigation+0x298>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80016e6:	e09a      	b.n	800181e <navigation+0x262>
	case after_charge:
		after_charge_mainPage();
 80016e8:	f000 f966 	bl	80019b8 <after_charge_mainPage>
		if (currentStateSM == driving_state) {
 80016ec:	4b52      	ldr	r3, [pc, #328]	; (8001838 <navigation+0x27c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <navigation+0x146>
			_realTimeData = true;
 80016f6:	4b53      	ldr	r3, [pc, #332]	; (8001844 <navigation+0x288>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <navigation+0x28c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001702:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <navigation+0x284>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b50      	ldr	r3, [pc, #320]	; (800184c <navigation+0x290>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	429a      	cmp	r2, r3
 8001710:	f000 8087 	beq.w	8001822 <navigation+0x266>
			previousPage = after_charge;
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <navigation+0x290>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <navigation+0x294>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001720:	4b48      	ldr	r3, [pc, #288]	; (8001844 <navigation+0x288>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001726:	4b48      	ldr	r3, [pc, #288]	; (8001848 <navigation+0x28c>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800172c:	4b42      	ldr	r3, [pc, #264]	; (8001838 <navigation+0x27c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d102      	bne.n	800173c <navigation+0x180>
				_transmit_Function = 5;
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <navigation+0x298>)
 8001738:	2205      	movs	r2, #5
 800173a:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800173c:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <navigation+0x27c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d16d      	bne.n	8001822 <navigation+0x266>
				_transmit_Function = 2;
 8001746:	4b43      	ldr	r3, [pc, #268]	; (8001854 <navigation+0x298>)
 8001748:	2202      	movs	r2, #2
 800174a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800174c:	e069      	b.n	8001822 <navigation+0x266>
	case info:
		info_mainPage();
 800174e:	f000 f97b 	bl	8001a48 <info_mainPage>
		if (currentStateSM == driving_state) {
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <navigation+0x27c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <navigation+0x1ac>
			_realTimeData = true;
 800175c:	4b39      	ldr	r3, [pc, #228]	; (8001844 <navigation+0x288>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <navigation+0x28c>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001768:	4b35      	ldr	r3, [pc, #212]	; (8001840 <navigation+0x284>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b37      	ldr	r3, [pc, #220]	; (800184c <navigation+0x290>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	429a      	cmp	r2, r3
 8001776:	d056      	beq.n	8001826 <navigation+0x26a>
			previousPage = info;
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <navigation+0x290>)
 800177a:	2203      	movs	r2, #3
 800177c:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <navigation+0x294>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <navigation+0x288>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <navigation+0x28c>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <navigation+0x27c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <navigation+0x1e4>
				_transmit_Function = 5;
 800179a:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <navigation+0x298>)
 800179c:	2205      	movs	r2, #5
 800179e:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <navigation+0x27c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d13d      	bne.n	8001826 <navigation+0x26a>
				_transmit_Function = 2;
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <navigation+0x298>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80017b0:	e039      	b.n	8001826 <navigation+0x26a>
	case settings:
		settings_mainPage();
 80017b2:	f000 fa65 	bl	8001c80 <settings_mainPage>
		if (currentStateSM == driving_state) {
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <navigation+0x27c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <navigation+0x210>
			_realTimeData = true;
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <navigation+0x288>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <navigation+0x28c>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <navigation+0x284>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <navigation+0x290>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	429a      	cmp	r2, r3
 80017da:	d026      	beq.n	800182a <navigation+0x26e>
			previousPage = settings;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <navigation+0x290>)
 80017de:	2207      	movs	r2, #7
 80017e0:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <navigation+0x294>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <navigation+0x288>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <navigation+0x28c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <navigation+0x27c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d102      	bne.n	8001804 <navigation+0x248>
				_transmit_Function = 5;
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <navigation+0x298>)
 8001800:	2205      	movs	r2, #5
 8001802:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <navigation+0x27c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10d      	bne.n	800182a <navigation+0x26e>
				_transmit_Function = 2;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <navigation+0x298>)
 8001810:	2202      	movs	r2, #2
 8001812:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001814:	e009      	b.n	800182a <navigation+0x26e>
	default:
		break;
 8001816:	bf00      	nop
 8001818:	e008      	b.n	800182c <navigation+0x270>
		break;
 800181a:	bf00      	nop
 800181c:	e006      	b.n	800182c <navigation+0x270>
		break;
 800181e:	bf00      	nop
 8001820:	e004      	b.n	800182c <navigation+0x270>
		break;
 8001822:	bf00      	nop
 8001824:	e002      	b.n	800182c <navigation+0x270>
		break;
 8001826:	bf00      	nop
 8001828:	e000      	b.n	800182c <navigation+0x270>
		break;
 800182a:	bf00      	nop
	}

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000462 	.word	0x20000462
 8001834:	20000498 	.word	0x20000498
 8001838:	20000478 	.word	0x20000478
 800183c:	200004ab 	.word	0x200004ab
 8001840:	20000476 	.word	0x20000476
 8001844:	20000499 	.word	0x20000499
 8001848:	2000049b 	.word	0x2000049b
 800184c:	20000477 	.word	0x20000477
 8001850:	2000049a 	.word	0x2000049a
 8001854:	200004af 	.word	0x200004af

08001858 <front_mainPage>:

void front_mainPage(void) {
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
	if (page_entry) {
 800185c:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <front_mainPage+0x8c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <front_mainPage+0x24>
		page_entry = false;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <front_mainPage+0x8c>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <front_mainPage+0x90>)
 800186c:	2201      	movs	r2, #1
 800186e:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <front_mainPage+0x94>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <front_mainPage+0x98>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <front_mainPage+0x9c>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <front_mainPage+0xa0>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]

	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <front_mainPage+0xa4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00f      	beq.n	80018b0 <front_mainPage+0x58>
		currentPage = trip;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <front_mainPage+0xa8>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <front_mainPage+0x8c>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
		forward = false;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <front_mainPage+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
		backward = false;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <front_mainPage+0xac>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <front_mainPage+0xb0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
		return;
 80018ae:	e016      	b.n	80018de <front_mainPage+0x86>
	}

	if (backward == true) {
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <front_mainPage+0xac>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d012      	beq.n	80018de <front_mainPage+0x86>
		backward = false;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <front_mainPage+0xac>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
		currentPage = settings;
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <front_mainPage+0xa8>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <front_mainPage+0x8c>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
		forward = false;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <front_mainPage+0xa4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <front_mainPage+0xb0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <front_mainPage+0xa0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
		return;
 80018dc:	bf00      	nop
	}
}
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	20000014 	.word	0x20000014
 80018e8:	2000049c 	.word	0x2000049c
 80018ec:	200004a6 	.word	0x200004a6
 80018f0:	200004a7 	.word	0x200004a7
 80018f4:	200004b3 	.word	0x200004b3
 80018f8:	200004b4 	.word	0x200004b4
 80018fc:	20000404 	.word	0x20000404
 8001900:	20000476 	.word	0x20000476
 8001904:	20000405 	.word	0x20000405
 8001908:	2000047d 	.word	0x2000047d

0800190c <trip_mainPage>:

void trip_mainPage(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <trip_mainPage+0x88>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <trip_mainPage+0x12>
		page_entry = false;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <trip_mainPage+0x88>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <trip_mainPage+0x8c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <trip_mainPage+0x26>
		tripreset = true;
 8001926:	4b1d      	ldr	r3, [pc, #116]	; (800199c <trip_mainPage+0x90>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
		longpress = false;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <trip_mainPage+0x8c>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 8001932:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <trip_mainPage+0x94>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <trip_mainPage+0x98>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
	trip_reset();
 800193e:	f003 f949 	bl	8004bd4 <trip_reset>

	if (forward == true) {
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <trip_mainPage+0x9c>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00f      	beq.n	800196a <trip_mainPage+0x5e>

		currentPage = after_charge;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <trip_mainPage+0xa0>)
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <trip_mainPage+0x88>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <trip_mainPage+0x9c>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
		backward = false;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <trip_mainPage+0xa4>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <trip_mainPage+0xa8>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
		return;
 8001968:	e013      	b.n	8001992 <trip_mainPage+0x86>
	}

	if (backward == true) {
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <trip_mainPage+0xa4>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00f      	beq.n	8001992 <trip_mainPage+0x86>

		currentPage = front;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <trip_mainPage+0xa0>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <trip_mainPage+0x88>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
		forward = false;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <trip_mainPage+0x9c>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <trip_mainPage+0xa4>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <trip_mainPage+0xa8>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
		return;
 8001990:	bf00      	nop
	}
}
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000014 	.word	0x20000014
 8001998:	20000408 	.word	0x20000408
 800199c:	20000407 	.word	0x20000407
 80019a0:	200004b3 	.word	0x200004b3
 80019a4:	200004b4 	.word	0x200004b4
 80019a8:	20000404 	.word	0x20000404
 80019ac:	20000476 	.word	0x20000476
 80019b0:	20000405 	.word	0x20000405
 80019b4:	2000047d 	.word	0x2000047d

080019b8 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <after_charge_mainPage+0x74>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <after_charge_mainPage+0x12>
		page_entry = false;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <after_charge_mainPage+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <after_charge_mainPage+0x78>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <after_charge_mainPage+0x7c>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <after_charge_mainPage+0x80>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00f      	beq.n	80019fe <after_charge_mainPage+0x46>

		currentPage = info;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <after_charge_mainPage+0x84>)
 80019e0:	2203      	movs	r2, #3
 80019e2:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <after_charge_mainPage+0x74>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
		forward = false;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <after_charge_mainPage+0x80>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
		backward = false;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <after_charge_mainPage+0x88>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <after_charge_mainPage+0x8c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
		return;
 80019fc:	e013      	b.n	8001a26 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <after_charge_mainPage+0x88>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00f      	beq.n	8001a26 <after_charge_mainPage+0x6e>
		currentPage = trip;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <after_charge_mainPage+0x84>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <after_charge_mainPage+0x74>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <after_charge_mainPage+0x80>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <after_charge_mainPage+0x88>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <after_charge_mainPage+0x8c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
		return;
 8001a24:	bf00      	nop
	}
}
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000014 	.word	0x20000014
 8001a30:	200004b3 	.word	0x200004b3
 8001a34:	200004b4 	.word	0x200004b4
 8001a38:	20000404 	.word	0x20000404
 8001a3c:	20000476 	.word	0x20000476
 8001a40:	20000405 	.word	0x20000405
 8001a44:	2000047d 	.word	0x2000047d

08001a48 <info_mainPage>:

void info_mainPage(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001a4c:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <info_mainPage+0x204>)
 8001a4e:	2203      	movs	r2, #3
 8001a50:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001a52:	4b7f      	ldr	r3, [pc, #508]	; (8001c50 <info_mainPage+0x208>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001a58:	4b7e      	ldr	r3, [pc, #504]	; (8001c54 <info_mainPage+0x20c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <info_mainPage+0x36>
		if (okay == true) {
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <info_mainPage+0x210>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80c4 	beq.w	8001bf8 <info_mainPage+0x1b0>
			inInfoBat = true;
 8001a70:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <info_mainPage+0x20c>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001a76:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <info_mainPage+0x210>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e0bc      	b.n	8001bf8 <info_mainPage+0x1b0>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 8001a7e:	4b77      	ldr	r3, [pc, #476]	; (8001c5c <info_mainPage+0x214>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00f      	beq.n	8001aa6 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <info_mainPage+0x218>)
 8001a88:	2204      	movs	r2, #4
 8001a8a:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001a8c:	4b75      	ldr	r3, [pc, #468]	; (8001c64 <info_mainPage+0x21c>)
 8001a8e:	2206      	movs	r2, #6
 8001a90:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 8001a92:	4b75      	ldr	r3, [pc, #468]	; (8001c68 <info_mainPage+0x220>)
 8001a94:	2205      	movs	r2, #5
 8001a96:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001a98:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <info_mainPage+0x214>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 8001a9e:	2004      	movs	r0, #4
 8001aa0:	f001 fbe0 	bl	8003264 <vehicleInfo_UI>
 8001aa4:	e005      	b.n	8001ab2 <info_mainPage+0x6a>
		} else {
			vehicleInfo_UI(currentMenu);
 8001aa6:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <info_mainPage+0x218>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fbd9 	bl	8003264 <vehicleInfo_UI>
		}
		if (forward == true) {
 8001ab2:	4b6e      	ldr	r3, [pc, #440]	; (8001c6c <info_mainPage+0x224>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d044      	beq.n	8001b44 <info_mainPage+0xfc>

			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001aba:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <info_mainPage+0x218>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d111      	bne.n	8001ae8 <info_mainPage+0xa0>
 8001ac4:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <info_mainPage+0x21c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <info_mainPage+0xa0>
				currentMenu = infobat;
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <info_mainPage+0x218>)
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001ad4:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <info_mainPage+0x21c>)
 8001ad6:	2206      	movs	r2, #6
 8001ad8:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <info_mainPage+0x220>)
 8001adc:	2205      	movs	r2, #5
 8001ade:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001ae0:	4b62      	ldr	r3, [pc, #392]	; (8001c6c <info_mainPage+0x224>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
				return;
 8001ae6:	e0b0      	b.n	8001c4a <info_mainPage+0x202>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 8001ae8:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <info_mainPage+0x218>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d111      	bne.n	8001b16 <info_mainPage+0xce>
 8001af2:	4b5c      	ldr	r3, [pc, #368]	; (8001c64 <info_mainPage+0x21c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d10c      	bne.n	8001b16 <info_mainPage+0xce>
				currentMenu = infomot;
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <info_mainPage+0x218>)
 8001afe:	2205      	movs	r2, #5
 8001b00:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001b02:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <info_mainPage+0x21c>)
 8001b04:	2204      	movs	r2, #4
 8001b06:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <info_mainPage+0x220>)
 8001b0a:	2206      	movs	r2, #6
 8001b0c:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001b0e:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <info_mainPage+0x224>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
				return;
 8001b14:	e099      	b.n	8001c4a <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 8001b16:	4b52      	ldr	r3, [pc, #328]	; (8001c60 <info_mainPage+0x218>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d111      	bne.n	8001b44 <info_mainPage+0xfc>
 8001b20:	4b50      	ldr	r3, [pc, #320]	; (8001c64 <info_mainPage+0x21c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d10c      	bne.n	8001b44 <info_mainPage+0xfc>
				currentMenu = infoinv;
 8001b2a:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <info_mainPage+0x218>)
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <info_mainPage+0x21c>)
 8001b32:	2205      	movs	r2, #5
 8001b34:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001b36:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <info_mainPage+0x220>)
 8001b38:	2204      	movs	r2, #4
 8001b3a:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <info_mainPage+0x224>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
				return;
 8001b42:	e082      	b.n	8001c4a <info_mainPage+0x202>
			}

		}

		if (backward == true) {
 8001b44:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <info_mainPage+0x228>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d044      	beq.n	8001bd6 <info_mainPage+0x18e>
			//currentMenu--;
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001b4c:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <info_mainPage+0x218>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d111      	bne.n	8001b7a <info_mainPage+0x132>
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <info_mainPage+0x220>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <info_mainPage+0x132>
				currentMenu = infoinv;
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <info_mainPage+0x218>)
 8001b62:	2206      	movs	r2, #6
 8001b64:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <info_mainPage+0x220>)
 8001b68:	2204      	movs	r2, #4
 8001b6a:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <info_mainPage+0x21c>)
 8001b6e:	2205      	movs	r2, #5
 8001b70:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001b72:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <info_mainPage+0x228>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
				return;
 8001b78:	e067      	b.n	8001c4a <info_mainPage+0x202>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <info_mainPage+0x218>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d111      	bne.n	8001ba8 <info_mainPage+0x160>
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <info_mainPage+0x220>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d10c      	bne.n	8001ba8 <info_mainPage+0x160>
				currentMenu = infomot;
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <info_mainPage+0x218>)
 8001b90:	2205      	movs	r2, #5
 8001b92:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001b94:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <info_mainPage+0x220>)
 8001b96:	2206      	movs	r2, #6
 8001b98:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001b9a:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <info_mainPage+0x21c>)
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001ba0:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <info_mainPage+0x228>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
				return;
 8001ba6:	e050      	b.n	8001c4a <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <info_mainPage+0x218>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b05      	cmp	r3, #5
 8001bb0:	d111      	bne.n	8001bd6 <info_mainPage+0x18e>
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <info_mainPage+0x220>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d10c      	bne.n	8001bd6 <info_mainPage+0x18e>
				currentMenu = infobat;
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <info_mainPage+0x218>)
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <info_mainPage+0x220>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <info_mainPage+0x21c>)
 8001bca:	2206      	movs	r2, #6
 8001bcc:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <info_mainPage+0x228>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
				return;
 8001bd4:	e039      	b.n	8001c4a <info_mainPage+0x202>
			}

		}

		if (back == true) {
 8001bd6:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <info_mainPage+0x22c>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d034      	beq.n	8001c48 <info_mainPage+0x200>
			page_entry = true;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <info_mainPage+0x214>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <info_mainPage+0x20c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
			back = false;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <info_mainPage+0x22c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <info_mainPage+0x230>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001bf6:	e027      	b.n	8001c48 <info_mainPage+0x200>
	}

	if (forward == true) {
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <info_mainPage+0x224>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00f      	beq.n	8001c20 <info_mainPage+0x1d8>
		currentPage = settings;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <info_mainPage+0x234>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <info_mainPage+0x214>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <info_mainPage+0x224>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <info_mainPage+0x228>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <info_mainPage+0x230>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
		return;
 8001c1e:	e014      	b.n	8001c4a <info_mainPage+0x202>
	}

	if (backward == true) {
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <info_mainPage+0x228>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <info_mainPage+0x202>
		currentPage = after_charge;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <info_mainPage+0x234>)
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <info_mainPage+0x214>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001c34:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <info_mainPage+0x224>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <info_mainPage+0x228>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <info_mainPage+0x230>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
		return;
 8001c46:	e000      	b.n	8001c4a <info_mainPage+0x202>
		return;
 8001c48:	bf00      	nop
	}
}
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200004b3 	.word	0x200004b3
 8001c50:	200004b4 	.word	0x200004b4
 8001c54:	2000040c 	.word	0x2000040c
 8001c58:	20000406 	.word	0x20000406
 8001c5c:	20000014 	.word	0x20000014
 8001c60:	2000000f 	.word	0x2000000f
 8001c64:	20000010 	.word	0x20000010
 8001c68:	20000011 	.word	0x20000011
 8001c6c:	20000404 	.word	0x20000404
 8001c70:	20000405 	.word	0x20000405
 8001c74:	2000040a 	.word	0x2000040a
 8001c78:	2000047d 	.word	0x2000047d
 8001c7c:	20000476 	.word	0x20000476

08001c80 <settings_mainPage>:

void settings_mainPage(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

	//selection_UI(front);
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001c84:	4b94      	ldr	r3, [pc, #592]	; (8001ed8 <settings_mainPage+0x258>)
 8001c86:	2207      	movs	r2, #7
 8001c88:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001c8a:	4b94      	ldr	r3, [pc, #592]	; (8001edc <settings_mainPage+0x25c>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]

	if (!(inSettings)) {
 8001c90:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <settings_mainPage+0x260>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00e      	beq.n	8001cbc <settings_mainPage+0x3c>
		selection_UI(front);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f001 fc24 	bl	80034ec <selection_UI>
		if (okay == true) {
 8001ca4:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <settings_mainPage+0x264>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 8161 	beq.w	8001f70 <settings_mainPage+0x2f0>
			inSettings = true;
 8001cae:	4b8c      	ldr	r3, [pc, #560]	; (8001ee0 <settings_mainPage+0x260>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001cb4:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <settings_mainPage+0x264>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	e159      	b.n	8001f70 <settings_mainPage+0x2f0>
		}
	} else {
		if (page_entry == true) {
 8001cbc:	4b8a      	ldr	r3, [pc, #552]	; (8001ee8 <settings_mainPage+0x268>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <settings_mainPage+0x62>
			currentMenu = vehicleMenu;
 8001cc4:	4b89      	ldr	r3, [pc, #548]	; (8001eec <settings_mainPage+0x26c>)
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	701a      	strb	r2, [r3, #0]
			previousMenuForward = errorsMenu;
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <settings_mainPage+0x270>)
 8001ccc:	220b      	movs	r2, #11
 8001cce:	701a      	strb	r2, [r3, #0]
			previousMenuBack = systemMenu;
 8001cd0:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <settings_mainPage+0x274>)
 8001cd2:	2209      	movs	r2, #9
 8001cd4:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001cd6:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <settings_mainPage+0x278>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001cdc:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <settings_mainPage+0x268>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
		}
		if(menuCounter>2)
 8001ce2:	4b86      	ldr	r3, [pc, #536]	; (8001efc <settings_mainPage+0x27c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d90f      	bls.n	8001d0a <settings_mainPage+0x8a>
		{
			if (_menuChanged) {
 8001cea:	4b83      	ldr	r3, [pc, #524]	; (8001ef8 <settings_mainPage+0x278>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <settings_mainPage+0x84>
				_menuChanged = false;
 8001cf2:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <settings_mainPage+0x278>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
				selection_UI(currentMenu);
 8001cf8:	4b7c      	ldr	r3, [pc, #496]	; (8001eec <settings_mainPage+0x26c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fbf4 	bl	80034ec <selection_UI>
			}
			menuCounter = 0;
 8001d04:	4b7d      	ldr	r3, [pc, #500]	; (8001efc <settings_mainPage+0x27c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
		}


		if (!(menuAccess)) {
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <settings_mainPage+0x280>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 810c 	beq.w	8001f32 <settings_mainPage+0x2b2>
			menuCounter++;
 8001d1a:	4b78      	ldr	r3, [pc, #480]	; (8001efc <settings_mainPage+0x27c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <settings_mainPage+0x27c>)
 8001d24:	701a      	strb	r2, [r3, #0]
			if (forward == true) {
 8001d26:	4b77      	ldr	r3, [pc, #476]	; (8001f04 <settings_mainPage+0x284>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d067      	beq.n	8001dfe <settings_mainPage+0x17e>
//				currentMenu--;
//				if (currentMenu <= 7) {
//					currentMenu = errorsMenu;
//				}
				if (currentMenu == errorsMenu && previousMenuBack == vehicleMenu) {
 8001d2e:	4b6f      	ldr	r3, [pc, #444]	; (8001eec <settings_mainPage+0x26c>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b0b      	cmp	r3, #11
 8001d36:	d114      	bne.n	8001d62 <settings_mainPage+0xe2>
 8001d38:	4b6e      	ldr	r3, [pc, #440]	; (8001ef4 <settings_mainPage+0x274>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d10f      	bne.n	8001d62 <settings_mainPage+0xe2>
					currentMenu = bluetoothMenu;
 8001d42:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <settings_mainPage+0x26c>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001d48:	4b69      	ldr	r3, [pc, #420]	; (8001ef0 <settings_mainPage+0x270>)
 8001d4a:	2209      	movs	r2, #9
 8001d4c:	701a      	strb	r2, [r3, #0]
					previousMenuBack = errorsMenu;
 8001d4e:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <settings_mainPage+0x274>)
 8001d50:	220b      	movs	r2, #11
 8001d52:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001d54:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <settings_mainPage+0x278>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001d5a:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <settings_mainPage+0x284>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
					return;
 8001d60:	e12f      	b.n	8001fc2 <settings_mainPage+0x342>
				}
				if (currentMenu == vehicleMenu && previousMenuBack == systemMenu) {
 8001d62:	4b62      	ldr	r3, [pc, #392]	; (8001eec <settings_mainPage+0x26c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d114      	bne.n	8001d96 <settings_mainPage+0x116>
 8001d6c:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <settings_mainPage+0x274>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	d10f      	bne.n	8001d96 <settings_mainPage+0x116>
					currentMenu = errorsMenu;
 8001d76:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <settings_mainPage+0x26c>)
 8001d78:	220b      	movs	r2, #11
 8001d7a:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001d7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <settings_mainPage+0x270>)
 8001d7e:	220a      	movs	r2, #10
 8001d80:	701a      	strb	r2, [r3, #0]
					previousMenuBack = vehicleMenu;
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <settings_mainPage+0x274>)
 8001d84:	2208      	movs	r2, #8
 8001d86:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <settings_mainPage+0x278>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <settings_mainPage+0x284>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
					return;
 8001d94:	e115      	b.n	8001fc2 <settings_mainPage+0x342>
				}
				if (currentMenu == systemMenu && previousMenuBack == bluetoothMenu) {
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <settings_mainPage+0x26c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d114      	bne.n	8001dca <settings_mainPage+0x14a>
 8001da0:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <settings_mainPage+0x274>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b0a      	cmp	r3, #10
 8001da8:	d10f      	bne.n	8001dca <settings_mainPage+0x14a>
					currentMenu = vehicleMenu;
 8001daa:	4b50      	ldr	r3, [pc, #320]	; (8001eec <settings_mainPage+0x26c>)
 8001dac:	2208      	movs	r2, #8
 8001dae:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <settings_mainPage+0x270>)
 8001db2:	220b      	movs	r2, #11
 8001db4:	701a      	strb	r2, [r3, #0]
					previousMenuBack = systemMenu;
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <settings_mainPage+0x274>)
 8001db8:	2209      	movs	r2, #9
 8001dba:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001dbc:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <settings_mainPage+0x278>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <settings_mainPage+0x284>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
					return;
 8001dc8:	e0fb      	b.n	8001fc2 <settings_mainPage+0x342>
				}
				if (currentMenu == bluetoothMenu && previousMenuBack == errorsMenu) {
 8001dca:	4b48      	ldr	r3, [pc, #288]	; (8001eec <settings_mainPage+0x26c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b0a      	cmp	r3, #10
 8001dd2:	d114      	bne.n	8001dfe <settings_mainPage+0x17e>
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <settings_mainPage+0x274>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b0b      	cmp	r3, #11
 8001ddc:	d10f      	bne.n	8001dfe <settings_mainPage+0x17e>
					currentMenu = systemMenu;
 8001dde:	4b43      	ldr	r3, [pc, #268]	; (8001eec <settings_mainPage+0x26c>)
 8001de0:	2209      	movs	r2, #9
 8001de2:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <settings_mainPage+0x270>)
 8001de6:	2208      	movs	r2, #8
 8001de8:	701a      	strb	r2, [r3, #0]
					previousMenuBack = bluetoothMenu;
 8001dea:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <settings_mainPage+0x274>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <settings_mainPage+0x278>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <settings_mainPage+0x284>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
					return;
 8001dfc:	e0e1      	b.n	8001fc2 <settings_mainPage+0x342>
				}
			}

			if (backward == true) {
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <settings_mainPage+0x288>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8082 	beq.w	8001f0c <settings_mainPage+0x28c>
//				currentMenu++;
//				if (currentMenu >= 12) {
//					currentMenu = vehicleMenu;
//				}
				if (currentMenu == vehicleMenu && previousMenuForward == errorsMenu) {
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <settings_mainPage+0x26c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d114      	bne.n	8001e3c <settings_mainPage+0x1bc>
 8001e12:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <settings_mainPage+0x270>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b0b      	cmp	r3, #11
 8001e1a:	d10f      	bne.n	8001e3c <settings_mainPage+0x1bc>
					currentMenu = systemMenu;
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <settings_mainPage+0x26c>)
 8001e1e:	2209      	movs	r2, #9
 8001e20:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <settings_mainPage+0x270>)
 8001e24:	2208      	movs	r2, #8
 8001e26:	701a      	strb	r2, [r3, #0]

					previousMenuBack = bluetoothMenu;
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <settings_mainPage+0x274>)
 8001e2a:	220a      	movs	r2, #10
 8001e2c:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <settings_mainPage+0x278>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001e34:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <settings_mainPage+0x288>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
					return;
 8001e3a:	e0c2      	b.n	8001fc2 <settings_mainPage+0x342>
				}
				if (currentMenu == errorsMenu && previousMenuForward == bluetoothMenu) {
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <settings_mainPage+0x26c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b0b      	cmp	r3, #11
 8001e44:	d114      	bne.n	8001e70 <settings_mainPage+0x1f0>
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <settings_mainPage+0x270>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b0a      	cmp	r3, #10
 8001e4e:	d10f      	bne.n	8001e70 <settings_mainPage+0x1f0>
					currentMenu = vehicleMenu;
 8001e50:	4b26      	ldr	r3, [pc, #152]	; (8001eec <settings_mainPage+0x26c>)
 8001e52:	2208      	movs	r2, #8
 8001e54:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <settings_mainPage+0x270>)
 8001e58:	220b      	movs	r2, #11
 8001e5a:	701a      	strb	r2, [r3, #0]

					previousMenuBack = systemMenu;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	; (8001ef4 <settings_mainPage+0x274>)
 8001e5e:	2209      	movs	r2, #9
 8001e60:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e62:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <settings_mainPage+0x278>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <settings_mainPage+0x288>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
					return;
 8001e6e:	e0a8      	b.n	8001fc2 <settings_mainPage+0x342>
				}
				if (currentMenu == bluetoothMenu && previousMenuForward == systemMenu) {
 8001e70:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <settings_mainPage+0x26c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d114      	bne.n	8001ea4 <settings_mainPage+0x224>
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <settings_mainPage+0x270>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d10f      	bne.n	8001ea4 <settings_mainPage+0x224>
					currentMenu = errorsMenu;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <settings_mainPage+0x26c>)
 8001e86:	220b      	movs	r2, #11
 8001e88:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <settings_mainPage+0x270>)
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	701a      	strb	r2, [r3, #0]

					previousMenuBack = vehicleMenu;
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <settings_mainPage+0x274>)
 8001e92:	2208      	movs	r2, #8
 8001e94:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <settings_mainPage+0x278>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <settings_mainPage+0x288>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
					return;
 8001ea2:	e08e      	b.n	8001fc2 <settings_mainPage+0x342>
				}
				if (currentMenu == systemMenu && previousMenuForward == vehicleMenu) {
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <settings_mainPage+0x26c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d12e      	bne.n	8001f0c <settings_mainPage+0x28c>
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <settings_mainPage+0x270>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d129      	bne.n	8001f0c <settings_mainPage+0x28c>
					currentMenu = bluetoothMenu;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <settings_mainPage+0x26c>)
 8001eba:	220a      	movs	r2, #10
 8001ebc:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <settings_mainPage+0x270>)
 8001ec0:	2209      	movs	r2, #9
 8001ec2:	701a      	strb	r2, [r3, #0]

					previousMenuBack = errorsMenu;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <settings_mainPage+0x274>)
 8001ec6:	220b      	movs	r2, #11
 8001ec8:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <settings_mainPage+0x278>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <settings_mainPage+0x288>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
					return;
 8001ed6:	e074      	b.n	8001fc2 <settings_mainPage+0x342>
 8001ed8:	200004b3 	.word	0x200004b3
 8001edc:	200004b4 	.word	0x200004b4
 8001ee0:	2000040b 	.word	0x2000040b
 8001ee4:	20000406 	.word	0x20000406
 8001ee8:	20000014 	.word	0x20000014
 8001eec:	2000000f 	.word	0x2000000f
 8001ef0:	20000011 	.word	0x20000011
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	200004a8 	.word	0x200004a8
 8001efc:	200004a9 	.word	0x200004a9
 8001f00:	20000480 	.word	0x20000480
 8001f04:	20000404 	.word	0x20000404
 8001f08:	20000405 	.word	0x20000405
				}

			}
			if (back == true) {
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <settings_mainPage+0x344>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <settings_mainPage+0x2b2>
				page_entry = true;
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <settings_mainPage+0x348>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
				inSettings = false;
 8001f1a:	4b2c      	ldr	r3, [pc, #176]	; (8001fcc <settings_mainPage+0x34c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
				selection_UI(front);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f001 fae3 	bl	80034ec <selection_UI>
				_menupage = 0;
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <settings_mainPage+0x350>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
				back = false;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <settings_mainPage+0x344>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
			}


		}
		switch (currentMenu) {
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <settings_mainPage+0x354>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3b08      	subs	r3, #8
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d816      	bhi.n	8001f6c <settings_mainPage+0x2ec>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <settings_mainPage+0x2c4>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5b 	.word	0x08001f5b
 8001f4c:	08001f61 	.word	0x08001f61
 8001f50:	08001f67 	.word	0x08001f67
		case vehicleMenu:
			vehicle_page();
 8001f54:	f000 f848 	bl	8001fe8 <vehicle_page>
			break;
 8001f58:	e009      	b.n	8001f6e <settings_mainPage+0x2ee>
		case systemMenu:
			system_page();
 8001f5a:	f000 f891 	bl	8002080 <system_page>
			break;
 8001f5e:	e006      	b.n	8001f6e <settings_mainPage+0x2ee>
		case bluetoothMenu:
			bluetooth_page();
 8001f60:	f000 fa0c 	bl	800237c <bluetooth_page>
			break;
 8001f64:	e003      	b.n	8001f6e <settings_mainPage+0x2ee>
		case errorsMenu:
			errors_page();
 8001f66:	f000 fa55 	bl	8002414 <errors_page>
			break;
 8001f6a:	e000      	b.n	8001f6e <settings_mainPage+0x2ee>
		default:
			break;
 8001f6c:	bf00      	nop
		}


		return;
 8001f6e:	e028      	b.n	8001fc2 <settings_mainPage+0x342>
	}

	if (forward == true) {
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <settings_mainPage+0x358>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d011      	beq.n	8001f9c <settings_mainPage+0x31c>
		currentPage = front;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <settings_mainPage+0x35c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <settings_mainPage+0x348>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <settings_mainPage+0x358>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <settings_mainPage+0x350>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <settings_mainPage+0x360>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <settings_mainPage+0x364>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
	}

	if (backward == true) {
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <settings_mainPage+0x364>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00e      	beq.n	8001fc2 <settings_mainPage+0x342>
		currentPage = info;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <settings_mainPage+0x35c>)
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <settings_mainPage+0x348>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <settings_mainPage+0x358>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <settings_mainPage+0x350>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <settings_mainPage+0x364>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
	}

}
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000040a 	.word	0x2000040a
 8001fc8:	20000014 	.word	0x20000014
 8001fcc:	2000040b 	.word	0x2000040b
 8001fd0:	2000047d 	.word	0x2000047d
 8001fd4:	2000000f 	.word	0x2000000f
 8001fd8:	20000404 	.word	0x20000404
 8001fdc:	20000476 	.word	0x20000476
 8001fe0:	200004b4 	.word	0x200004b4
 8001fe4:	20000405 	.word	0x20000405

08001fe8 <vehicle_page>:

void vehicle_page(void) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <vehicle_page+0x7c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f083 0301 	eor.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <vehicle_page+0x34>
		if (okay == true) {
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <vehicle_page+0x80>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d02e      	beq.n	8002060 <vehicle_page+0x78>
			menuAccess = true;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <vehicle_page+0x84>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 8002008:	4b16      	ldr	r3, [pc, #88]	; (8002064 <vehicle_page+0x7c>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <vehicle_page+0x88>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002014:	4b14      	ldr	r3, [pc, #80]	; (8002068 <vehicle_page+0x80>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 800201a:	e021      	b.n	8002060 <vehicle_page+0x78>
		if (subMenuCounter>2) {
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <vehicle_page+0x8c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d909      	bls.n	8002038 <vehicle_page+0x50>
			if (inTheMenu) {
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <vehicle_page+0x88>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <vehicle_page+0x4a>
				inTheMenu = false;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <vehicle_page+0x88>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <vehicle_page+0x8c>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
		settings_UI(vehicleMenu,10);
 8002038:	210a      	movs	r1, #10
 800203a:	2008      	movs	r0, #8
 800203c:	f001 f98c 	bl	8003358 <settings_UI>
		if (back == true) {
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <vehicle_page+0x90>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <vehicle_page+0x78>
			menuAccess = false;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <vehicle_page+0x84>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <vehicle_page+0x7c>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <vehicle_page+0x94>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
			back = false;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <vehicle_page+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000481 	.word	0x20000481
 8002068:	20000406 	.word	0x20000406
 800206c:	20000480 	.word	0x20000480
 8002070:	20000489 	.word	0x20000489
 8002074:	200004aa 	.word	0x200004aa
 8002078:	2000040a 	.word	0x2000040a
 800207c:	200004a8 	.word	0x200004a8

08002080 <system_page>:
void system_page(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 8002084:	4b66      	ldr	r3, [pc, #408]	; (8002220 <system_page+0x1a0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	f083 0301 	eor.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01a      	beq.n	80020c8 <system_page+0x48>
		if (okay == true) {
 8002092:	4b64      	ldr	r3, [pc, #400]	; (8002224 <system_page+0x1a4>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8142 	beq.w	8002320 <system_page+0x2a0>
			menuAccess = true;
 800209c:	4b62      	ldr	r3, [pc, #392]	; (8002228 <system_page+0x1a8>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 80020a2:	4b5f      	ldr	r3, [pc, #380]	; (8002220 <system_page+0x1a0>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80020a8:	4b60      	ldr	r3, [pc, #384]	; (800222c <system_page+0x1ac>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
			okay = false;
 80020ae:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <system_page+0x1a4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			currentSubMenu = 0;
 80020b4:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <system_page+0x1b0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
			previousSubMenuBack = 1;
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <system_page+0x1b4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
			previousSubMenuForward = 1;
 80020c0:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <system_page+0x1b8>)
 80020c2:	2201      	movs	r2, #1
 80020c4:	701a      	strb	r2, [r3, #0]
 80020c6:	e12b      	b.n	8002320 <system_page+0x2a0>
		}
	} else {
		if (subMenuCounter>2) {
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <system_page+0x1bc>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d909      	bls.n	80020e4 <system_page+0x64>
			if (inTheMenu) {
 80020d0:	4b56      	ldr	r3, [pc, #344]	; (800222c <system_page+0x1ac>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <system_page+0x5e>
				inTheMenu = false;
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <system_page+0x1ac>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
				//settings_UI(systemMenu);
			}
			subMenuCounter = 0;
 80020de:	4b57      	ldr	r3, [pc, #348]	; (800223c <system_page+0x1bc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(systemMenu,currentSubMenu);
 80020e4:	4b52      	ldr	r3, [pc, #328]	; (8002230 <system_page+0x1b0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	2009      	movs	r0, #9
 80020ee:	f001 f933 	bl	8003358 <settings_UI>
		//Time Settings Menu
		if (!inTimeSettings) {
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <system_page+0x1c0>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d06f      	beq.n	80021e0 <system_page+0x160>
			if (forward == true) {
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <system_page+0x1c4>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02d      	beq.n	8002164 <system_page+0xe4>

				if (currentSubMenu == 0 && previousSubMenuBack == 1) {
 8002108:	4b49      	ldr	r3, [pc, #292]	; (8002230 <system_page+0x1b0>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d111      	bne.n	8002136 <system_page+0xb6>
 8002112:	4b48      	ldr	r3, [pc, #288]	; (8002234 <system_page+0x1b4>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10c      	bne.n	8002136 <system_page+0xb6>
					currentSubMenu = 1;
 800211c:	4b44      	ldr	r3, [pc, #272]	; (8002230 <system_page+0x1b0>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8002122:	4b45      	ldr	r3, [pc, #276]	; (8002238 <system_page+0x1b8>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 0;
 8002128:	4b42      	ldr	r3, [pc, #264]	; (8002234 <system_page+0x1b4>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 800212e:	4b45      	ldr	r3, [pc, #276]	; (8002244 <system_page+0x1c4>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
					return;
 8002134:	e104      	b.n	8002340 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuBack == 0) {
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <system_page+0x1b0>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d111      	bne.n	8002164 <system_page+0xe4>
 8002140:	4b3c      	ldr	r3, [pc, #240]	; (8002234 <system_page+0x1b4>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <system_page+0xe4>
					currentSubMenu = 0;
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <system_page+0x1b0>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 8002150:	4b39      	ldr	r3, [pc, #228]	; (8002238 <system_page+0x1b8>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 1;
 8002156:	4b37      	ldr	r3, [pc, #220]	; (8002234 <system_page+0x1b4>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <system_page+0x1c4>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
					return;
 8002162:	e0ed      	b.n	8002340 <system_page+0x2c0>
				}
			}
			if (backward == true) {
 8002164:	4b38      	ldr	r3, [pc, #224]	; (8002248 <system_page+0x1c8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02d      	beq.n	80021c8 <system_page+0x148>
				if (currentSubMenu == 0 && previousSubMenuForward == 1) {
 800216c:	4b30      	ldr	r3, [pc, #192]	; (8002230 <system_page+0x1b0>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d111      	bne.n	800219a <system_page+0x11a>
 8002176:	4b30      	ldr	r3, [pc, #192]	; (8002238 <system_page+0x1b8>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10c      	bne.n	800219a <system_page+0x11a>
					currentSubMenu = 1;
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <system_page+0x1b0>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <system_page+0x1b8>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 0;
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <system_page+0x1b4>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <system_page+0x1c8>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
					return;
 8002198:	e0d2      	b.n	8002340 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuForward == 0) {
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <system_page+0x1b0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d111      	bne.n	80021c8 <system_page+0x148>
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <system_page+0x1b8>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <system_page+0x148>
					currentSubMenu = 0;
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <system_page+0x1b0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <system_page+0x1b8>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 1;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <system_page+0x1b4>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <system_page+0x1c8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
					return;
 80021c6:	e0bb      	b.n	8002340 <system_page+0x2c0>
				}

			}
			if (okay) {
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <system_page+0x1a4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a7 	beq.w	8002320 <system_page+0x2a0>
				inTimeSettings = true;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <system_page+0x1c0>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
				okay = false;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <system_page+0x1a4>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e09f      	b.n	8002320 <system_page+0x2a0>
			}

		}
		else
		{
			if (okay) {
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <system_page+0x1a4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d033      	beq.n	8002250 <system_page+0x1d0>
				okay = false;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <system_page+0x1a4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <system_page+0x1cc>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <system_page+0x186>
					currentSubMenu = vpCounter;
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <system_page+0x1cc>)
 80021f8:	781a      	ldrb	r2, [r3, #0]
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <system_page+0x1b0>)
 80021fc:	701a      	strb	r2, [r3, #0]
					vpCounter = 4;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <system_page+0x1cc>)
 8002200:	2204      	movs	r2, #4
 8002202:	701a      	strb	r2, [r3, #0]
					return;
 8002204:	e09c      	b.n	8002340 <system_page+0x2c0>
				}
				if (vpCounter == 4) {
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <system_page+0x1cc>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b04      	cmp	r3, #4
 800220c:	d120      	bne.n	8002250 <system_page+0x1d0>
					currentSubMenu = vpCounter;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <system_page+0x1cc>)
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <system_page+0x1b0>)
 8002214:	701a      	strb	r2, [r3, #0]
					vpCounter = 3;
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <system_page+0x1cc>)
 8002218:	2203      	movs	r2, #3
 800221a:	701a      	strb	r2, [r3, #0]
					return;
 800221c:	e090      	b.n	8002340 <system_page+0x2c0>
 800221e:	bf00      	nop
 8002220:	20000482 	.word	0x20000482
 8002224:	20000406 	.word	0x20000406
 8002228:	20000480 	.word	0x20000480
 800222c:	20000489 	.word	0x20000489
 8002230:	2000047a 	.word	0x2000047a
 8002234:	2000047b 	.word	0x2000047b
 8002238:	2000047c 	.word	0x2000047c
 800223c:	200004aa 	.word	0x200004aa
 8002240:	20000483 	.word	0x20000483
 8002244:	20000404 	.word	0x20000404
 8002248:	20000405 	.word	0x20000405
 800224c:	20000015 	.word	0x20000015
				}
			}
			if (forward) {
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <system_page+0x2c4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d016      	beq.n	8002286 <system_page+0x206>
			forward = false;
 8002258:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <system_page+0x2c4>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <system_page+0x2c8>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d105      	bne.n	8002272 <system_page+0x1f2>
					timerSetValueH++;
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <system_page+0x2cc>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <system_page+0x2cc>)
 8002270:	701a      	strb	r2, [r3, #0]
				}
				if (vpCounter == 4) {
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <system_page+0x2c8>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d105      	bne.n	8002286 <system_page+0x206>
					timerSetValueMin++;
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <system_page+0x2d0>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <system_page+0x2d0>)
 8002284:	701a      	strb	r2, [r3, #0]
				}
			}

			if (backward) {
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <system_page+0x2d4>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d024      	beq.n	80022d8 <system_page+0x258>
			backward = false;
 800228e:	4b31      	ldr	r3, [pc, #196]	; (8002354 <system_page+0x2d4>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
			if (vpCounter == 3) {
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <system_page+0x2c8>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d105      	bne.n	80022a8 <system_page+0x228>
				timerSetValueH--;
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <system_page+0x2cc>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b29      	ldr	r3, [pc, #164]	; (800234c <system_page+0x2cc>)
 80022a6:	701a      	strb	r2, [r3, #0]
			}
			if (vpCounter == 4) {
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <system_page+0x2c8>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d105      	bne.n	80022bc <system_page+0x23c>
				timerSetValueMin--;
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <system_page+0x2d0>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <system_page+0x2d0>)
 80022ba:	701a      	strb	r2, [r3, #0]
			}

				if (timerSetValueH == 0) {
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <system_page+0x2cc>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d102      	bne.n	80022ca <system_page+0x24a>
					timerSetValueH = 23;
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <system_page+0x2cc>)
 80022c6:	2217      	movs	r2, #23
 80022c8:	701a      	strb	r2, [r3, #0]
				}
				if (timerSetValueMin == 0) {
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <system_page+0x2d0>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <system_page+0x258>
					timerSetValueMin = 59;
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <system_page+0x2d0>)
 80022d4:	223b      	movs	r2, #59	; 0x3b
 80022d6:	701a      	strb	r2, [r3, #0]
				}
			}

			if (timerSetValueH > 24) {
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <system_page+0x2cc>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b18      	cmp	r3, #24
 80022de:	d902      	bls.n	80022e6 <system_page+0x266>
				timerSetValueH = 0;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <system_page+0x2cc>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
			}

			if (timerSetValueMin > 60) {
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <system_page+0x2d0>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b3c      	cmp	r3, #60	; 0x3c
 80022ec:	d902      	bls.n	80022f4 <system_page+0x274>
				timerSetValueMin = 0;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <system_page+0x2d0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
			}


			if (back) {
 80022f4:	4b18      	ldr	r3, [pc, #96]	; (8002358 <system_page+0x2d8>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d011      	beq.n	8002320 <system_page+0x2a0>
				inTimeSettings = false;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <system_page+0x2dc>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
				//Trasmit time
				currentSubMenu = 0;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <system_page+0x2e0>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
				previousSubMenuForward = 1;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <system_page+0x2e4>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
				previousSubMenuBack = 1;
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <system_page+0x2e8>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
				timeChanged = true;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <system_page+0x2ec>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
				back = false;
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <system_page+0x2d8>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
//		} else {
//
//		}
	}

	if (back == true) {
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <system_page+0x2d8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00b      	beq.n	8002340 <system_page+0x2c0>
		menuAccess = false;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <system_page+0x2f0>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <system_page+0x2f4>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
		_menuChanged = true;
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <system_page+0x2f8>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
		back = false;
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <system_page+0x2d8>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]

	}
}
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000404 	.word	0x20000404
 8002348:	20000015 	.word	0x20000015
 800234c:	20000484 	.word	0x20000484
 8002350:	20000485 	.word	0x20000485
 8002354:	20000405 	.word	0x20000405
 8002358:	2000040a 	.word	0x2000040a
 800235c:	20000483 	.word	0x20000483
 8002360:	2000047a 	.word	0x2000047a
 8002364:	2000047c 	.word	0x2000047c
 8002368:	2000047b 	.word	0x2000047b
 800236c:	20000486 	.word	0x20000486
 8002370:	20000480 	.word	0x20000480
 8002374:	20000482 	.word	0x20000482
 8002378:	200004a8 	.word	0x200004a8

0800237c <bluetooth_page>:

void bluetooth_page(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <bluetooth_page+0x7c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f083 0301 	eor.w	r3, r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <bluetooth_page+0x34>
		if (okay == true) {
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <bluetooth_page+0x80>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d02e      	beq.n	80023f4 <bluetooth_page+0x78>
			menuAccess = true;
 8002396:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <bluetooth_page+0x84>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <bluetooth_page+0x7c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <bluetooth_page+0x88>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
			okay = false;
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <bluetooth_page+0x80>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 80023ae:	e021      	b.n	80023f4 <bluetooth_page+0x78>
		if (subMenuCounter>2) {
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <bluetooth_page+0x8c>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d909      	bls.n	80023cc <bluetooth_page+0x50>
			if (inTheMenu) {
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <bluetooth_page+0x88>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <bluetooth_page+0x4a>
				inTheMenu = false;
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <bluetooth_page+0x88>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <bluetooth_page+0x8c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
		settings_UI(bluetoothMenu,10);
 80023cc:	210a      	movs	r1, #10
 80023ce:	200a      	movs	r0, #10
 80023d0:	f000 ffc2 	bl	8003358 <settings_UI>
		if (back == true) {
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <bluetooth_page+0x90>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <bluetooth_page+0x78>
			menuAccess = false;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <bluetooth_page+0x84>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <bluetooth_page+0x7c>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <bluetooth_page+0x94>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
			back = false;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <bluetooth_page+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000487 	.word	0x20000487
 80023fc:	20000406 	.word	0x20000406
 8002400:	20000480 	.word	0x20000480
 8002404:	20000489 	.word	0x20000489
 8002408:	200004aa 	.word	0x200004aa
 800240c:	2000040a 	.word	0x2000040a
 8002410:	200004a8 	.word	0x200004a8

08002414 <errors_page>:
void errors_page(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <errors_page+0x7c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	f083 0301 	eor.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <errors_page+0x34>
		if (okay == true) {
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <errors_page+0x80>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02e      	beq.n	800248c <errors_page+0x78>
			menuAccess = true;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <errors_page+0x84>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 8002434:	4b16      	ldr	r3, [pc, #88]	; (8002490 <errors_page+0x7c>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <errors_page+0x88>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <errors_page+0x80>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8002446:	e021      	b.n	800248c <errors_page+0x78>
		if (subMenuCounter>2) {
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <errors_page+0x8c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d909      	bls.n	8002464 <errors_page+0x50>
			if (inTheMenu) {
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <errors_page+0x88>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <errors_page+0x4a>
				inTheMenu = false;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <errors_page+0x88>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <errors_page+0x8c>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
		settings_UI(errorsMenu,10);
 8002464:	210a      	movs	r1, #10
 8002466:	200b      	movs	r0, #11
 8002468:	f000 ff76 	bl	8003358 <settings_UI>
		if (back == true) {
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <errors_page+0x90>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <errors_page+0x78>
			menuAccess = false;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <errors_page+0x84>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <errors_page+0x7c>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <errors_page+0x94>)
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
			back = false;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <errors_page+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000488 	.word	0x20000488
 8002494:	20000406 	.word	0x20000406
 8002498:	20000480 	.word	0x20000480
 800249c:	20000489 	.word	0x20000489
 80024a0:	200004aa 	.word	0x200004aa
 80024a4:	2000040a 	.word	0x2000040a
 80024a8:	200004a8 	.word	0x200004a8

080024ac <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <mainStateMachine+0x44>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d816      	bhi.n	80024e8 <mainStateMachine+0x3c>
 80024ba:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <mainStateMachine+0x14>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024d7 	.word	0x080024d7
 80024c8:	080024dd 	.word	0x080024dd
 80024cc:	080024e3 	.word	0x080024e3
	case startingup_state:
		startUpState();
 80024d0:	f000 f810 	bl	80024f4 <startUpState>
		break;
 80024d4:	e009      	b.n	80024ea <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 80024d6:	f000 f8e3 	bl	80026a0 <driveState>
		break;
 80024da:	e006      	b.n	80024ea <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 80024dc:	f000 f97c 	bl	80027d8 <chargeState>
		break;
 80024e0:	e003      	b.n	80024ea <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 80024e2:	f000 f9f7 	bl	80028d4 <errorState>
		break;
 80024e6:	e000      	b.n	80024ea <mainStateMachine+0x3e>
	default:
		break;
 80024e8:	bf00      	nop
	}
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000478 	.word	0x20000478

080024f4 <startUpState>:

void startUpState(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0

	dataCounter++;
 80024f8:	4b4c      	ldr	r3, [pc, #304]	; (800262c <startUpState+0x138>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b4a      	ldr	r3, [pc, #296]	; (800262c <startUpState+0x138>)
 8002502:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 8002504:	4b4a      	ldr	r3, [pc, #296]	; (8002630 <startUpState+0x13c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d018      	beq.n	800253e <startUpState+0x4a>
		state_entry = false;
 800250c:	4b48      	ldr	r3, [pc, #288]	; (8002630 <startUpState+0x13c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 8002512:	4b48      	ldr	r3, [pc, #288]	; (8002634 <startUpState+0x140>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 8002518:	4b47      	ldr	r3, [pc, #284]	; (8002638 <startUpState+0x144>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <startUpState+0x148>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
		_modeSelection = 2;//Clear Mode
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <startUpState+0x14c>)
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
		_setDriverPage = false;
 800252a:	4b46      	ldr	r3, [pc, #280]	; (8002644 <startUpState+0x150>)
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002530:	4b45      	ldr	r3, [pc, #276]	; (8002648 <startUpState+0x154>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <startUpState+0x4a>
			_errorSetIcon = false;
 8002538:	4b44      	ldr	r3, [pc, #272]	; (800264c <startUpState+0x158>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
		}
	}

	//	fillandTransmit();
	if (dataCounter > 3) {
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <startUpState+0x138>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d908      	bls.n	8002558 <startUpState+0x64>
		_oneTimeData = true;
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <startUpState+0x15c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
		_realTimeData = true;
 800254c:	4b41      	ldr	r3, [pc, #260]	; (8002654 <startUpState+0x160>)
 800254e:	2201      	movs	r2, #1
 8002550:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 8002552:	4b36      	ldr	r3, [pc, #216]	; (800262c <startUpState+0x138>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
	}

	//	fillandTransmitCommon();


	if (err_error != 0) {
 8002558:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <startUpState+0x164>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <startUpState+0x9a>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <startUpState+0x154>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d15d      	bne.n	8002624 <startUpState+0x130>
 8002568:	4b3c      	ldr	r3, [pc, #240]	; (800265c <startUpState+0x168>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <startUpState+0x16c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d057      	beq.n	8002624 <startUpState+0x130>
			currentStateSM = Error_state;
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <startUpState+0x170>)
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <startUpState+0x174>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <startUpState+0x13c>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <startUpState+0x178>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 800258c:	e04a      	b.n	8002624 <startUpState+0x130>
	}

	if (currentstate == 4) {
 800258e:	4b38      	ldr	r3, [pc, #224]	; (8002670 <startUpState+0x17c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d109      	bne.n	80025aa <startUpState+0xb6>
		currentStateSM = charging_state;
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <startUpState+0x170>)
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <startUpState+0x174>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <startUpState+0x13c>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
		return;
 80025a8:	e03f      	b.n	800262a <startUpState+0x136>
	}
	if (accessory == 1) {
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <startUpState+0x180>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d112      	bne.n	80025d8 <startUpState+0xe4>
		navigation(); //enable navigation in Accessory Mode
 80025b2:	f7ff f803 	bl	80015bc <navigation>
		//_modeSelection = 2;//Clear Mode
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <startUpState+0x154>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d021      	beq.n	8002602 <startUpState+0x10e>
			entry = true;
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <startUpState+0x184>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
			startup = true;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <startUpState+0x188>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
			checklit = true;
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <startUpState+0x18c>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 80025d0:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <startUpState+0x190>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e014      	b.n	8002602 <startUpState+0x10e>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <startUpState+0x194>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
		backward = false;
 80025de:	4b2b      	ldr	r3, [pc, #172]	; (800268c <startUpState+0x198>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <startUpState+0x19c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
		//currentMode = mode_evcu;
		currentPage = front;
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <startUpState+0x140>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]

		inInfoBat = false;
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <startUpState+0x1a0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		inSettings = false;
 80025f6:	4b28      	ldr	r3, [pc, #160]	; (8002698 <startUpState+0x1a4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]

		_trasmitGlobal = Disengage_Page;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <startUpState+0x148>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
	}

	//StartingUp Transmit flag
	//Fill and Transmit
	//startingUp();
	_startingUp = true;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <startUpState+0x190>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]

	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <startUpState+0x1a8>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10b      	bne.n	8002628 <startUpState+0x134>
		return;
	}

	currentStateSM = driving_state;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <startUpState+0x170>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <startUpState+0x174>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
	//_modeSelection = true;
	if (readytodrive == 1) {

	}
	state_entry = true;
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <startUpState+0x13c>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	e002      	b.n	800262a <startUpState+0x136>
		return; //Will exit from the function
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <startUpState+0x136>
		return;
 8002628:	bf00      	nop
}
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000545 	.word	0x20000545
 8002630:	20000013 	.word	0x20000013
 8002634:	20000476 	.word	0x20000476
 8002638:	20000406 	.word	0x20000406
 800263c:	200004b4 	.word	0x200004b4
 8002640:	2000049c 	.word	0x2000049c
 8002644:	2000049a 	.word	0x2000049a
 8002648:	20000000 	.word	0x20000000
 800264c:	200004a0 	.word	0x200004a0
 8002650:	2000049b 	.word	0x2000049b
 8002654:	20000499 	.word	0x20000499
 8002658:	2000046b 	.word	0x2000046b
 800265c:	20000004 	.word	0x20000004
 8002660:	20000470 	.word	0x20000470
 8002664:	20000478 	.word	0x20000478
 8002668:	20000479 	.word	0x20000479
 800266c:	200004a1 	.word	0x200004a1
 8002670:	20000460 	.word	0x20000460
 8002674:	20000462 	.word	0x20000462
 8002678:	2000000d 	.word	0x2000000d
 800267c:	2000000c 	.word	0x2000000c
 8002680:	2000000e 	.word	0x2000000e
 8002684:	20000497 	.word	0x20000497
 8002688:	20000404 	.word	0x20000404
 800268c:	20000405 	.word	0x20000405
 8002690:	20000498 	.word	0x20000498
 8002694:	2000040c 	.word	0x2000040c
 8002698:	2000040b 	.word	0x2000040b
 800269c:	20000463 	.word	0x20000463

080026a0 <driveState>:

void driveState(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	if (state_entry) {
 80026a4:	4b37      	ldr	r3, [pc, #220]	; (8002784 <driveState+0xe4>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01e      	beq.n	80026ea <driveState+0x4a>
		state_entry = false;
 80026ac:	4b35      	ldr	r3, [pc, #212]	; (8002784 <driveState+0xe4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 80026b2:	4b35      	ldr	r3, [pc, #212]	; (8002788 <driveState+0xe8>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 80026b8:	4b34      	ldr	r3, [pc, #208]	; (800278c <driveState+0xec>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <driveState+0xf0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <driveState+0xf4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		_drivePageSet = front;
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <driveState+0xf8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
		///////////////////////
		//_oneTimeData = true;
		_gearChanged = true;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <driveState+0xfc>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
		_modeSelection = 1;
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <driveState+0x100>)
 80026d8:	2201      	movs	r2, #1
 80026da:	701a      	strb	r2, [r3, #0]
		//_realTimeData = true;
		//////////////////////
		if (err_or_not != 0) {
 80026dc:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <driveState+0x104>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <driveState+0x4a>
			_errorSetIcon = false;
 80026e4:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <driveState+0x108>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
		}
	}
	dataCounter++;
 80026ea:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <driveState+0xf4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <driveState+0xf4>)
 80026f4:	701a      	strb	r2, [r3, #0]
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 80026f6:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <driveState+0x104>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d112      	bne.n	8002724 <driveState+0x84>
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <driveState+0x10c>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <driveState+0x110>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d00c      	beq.n	8002724 <driveState+0x84>
		currentStateSM = Error_state;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <driveState+0x114>)
 800270c:	2203      	movs	r2, #3
 800270e:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <driveState+0x118>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <driveState+0xe4>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <driveState+0x11c>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
		return;
 8002722:	e02e      	b.n	8002782 <driveState+0xe2>
	}

	if (accessory == 1) {
 8002724:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <driveState+0x120>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d109      	bne.n	8002740 <driveState+0xa0>
		currentStateSM = startingup_state;
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <driveState+0x114>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <driveState+0x118>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <driveState+0xe4>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
		return;
 800273e:	e020      	b.n	8002782 <driveState+0xe2>
	}

	if (currentstate == 2) {
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <driveState+0x124>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d102      	bne.n	800274e <driveState+0xae>
		evcuMode();
 8002748:	f002 f9a4 	bl	8004a94 <evcuMode>
 800274c:	e002      	b.n	8002754 <driveState+0xb4>
	}
	else
	{
		mode = false;
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <driveState+0x128>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <driveState+0x12c>)
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <driveState+0x124>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d006      	beq.n	800276e <driveState+0xce>
		_gearChanged = true;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <driveState+0xfc>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <driveState+0x124>)
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <driveState+0x12c>)
 800276c:	701a      	strb	r2, [r3, #0]
	}

	//fillandTransmitCommon();
	navigation();
 800276e:	f7fe ff25 	bl	80015bc <navigation>

//	if (_modeChanged) {
//		//modeSelection(currentMode);	//This should be called using a flag _modeSelection
//		_modeSelection = true;
//	}
	if (rtn) { //rtn True when there is a error
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <driveState+0x130>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <driveState+0xe2>
		_allowNavigation = true;
 800277a:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <driveState+0x134>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
		return;
 8002780:	bf00      	nop
	}
}
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000013 	.word	0x20000013
 8002788:	20000476 	.word	0x20000476
 800278c:	2000044e 	.word	0x2000044e
 8002790:	200004b4 	.word	0x200004b4
 8002794:	20000545 	.word	0x20000545
 8002798:	200004b3 	.word	0x200004b3
 800279c:	200004a7 	.word	0x200004a7
 80027a0:	2000049c 	.word	0x2000049c
 80027a4:	20000000 	.word	0x20000000
 80027a8:	200004a0 	.word	0x200004a0
 80027ac:	20000004 	.word	0x20000004
 80027b0:	20000470 	.word	0x20000470
 80027b4:	20000478 	.word	0x20000478
 80027b8:	20000479 	.word	0x20000479
 80027bc:	200004a1 	.word	0x200004a1
 80027c0:	20000462 	.word	0x20000462
 80027c4:	20000460 	.word	0x20000460
 80027c8:	20000409 	.word	0x20000409
 80027cc:	20000461 	.word	0x20000461
 80027d0:	20000475 	.word	0x20000475
 80027d4:	2000049d 	.word	0x2000049d

080027d8 <chargeState>:

void chargeState(void) {
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	if (state_entry) {
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <chargeState+0xc0>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00f      	beq.n	8002804 <chargeState+0x2c>
		state_entry = false;
 80027e4:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <chargeState+0xc0>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <chargeState+0xc4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <chargeState+0xc8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <chargeState+0xcc>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <chargeState+0x2c>
			_errorSetIcon = false;
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <chargeState+0xd0>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 8002804:	4b29      	ldr	r3, [pc, #164]	; (80028ac <chargeState+0xd4>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <chargeState+0xd8>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <chargeState+0xdc>)
 8002812:	2201      	movs	r2, #1
 8002814:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <chargeState+0xe0>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d009      	beq.n	8002832 <chargeState+0x5a>
		currentStateSM = startingup_state;
 800281e:	4b27      	ldr	r3, [pc, #156]	; (80028bc <chargeState+0xe4>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <chargeState+0xe8>)
 8002826:	2202      	movs	r2, #2
 8002828:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <chargeState+0xc0>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
		return;
 8002830:	e02e      	b.n	8002890 <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <chargeState+0xcc>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d113      	bne.n	8002862 <chargeState+0x8a>
		currentStateSM = Error_state;
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <chargeState+0xe4>)
 800283c:	2203      	movs	r2, #3
 800283e:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <chargeState+0xe8>)
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <chargeState+0xc0>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <chargeState+0xec>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <chargeState+0xcc>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <chargeState+0xb6>
			_errorSetIcon = false;
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <chargeState+0xd0>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
		}
		return;
 8002860:	e015      	b.n	800288e <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <chargeState+0xf0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d106      	bne.n	8002878 <chargeState+0xa0>
		_chargeComplete = true;
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <chargeState+0xf4>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <chargeState+0xf8>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
		return;
 8002876:	e00b      	b.n	8002890 <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <chargeState+0xf8>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	f083 0301 	eor.w	r3, r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <chargeState+0xf8>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e000      	b.n	8002890 <chargeState+0xb8>
		return;
 800288e:	bf00      	nop
	}

}
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000013 	.word	0x20000013
 800289c:	200004b4 	.word	0x200004b4
 80028a0:	20000497 	.word	0x20000497
 80028a4:	20000000 	.word	0x20000000
 80028a8:	200004a0 	.word	0x200004a0
 80028ac:	200004a2 	.word	0x200004a2
 80028b0:	20000499 	.word	0x20000499
 80028b4:	2000049b 	.word	0x2000049b
 80028b8:	20000460 	.word	0x20000460
 80028bc:	20000478 	.word	0x20000478
 80028c0:	20000479 	.word	0x20000479
 80028c4:	200004a1 	.word	0x200004a1
 80028c8:	20000494 	.word	0x20000494
 80028cc:	200004a4 	.word	0x200004a4
 80028d0:	200004a3 	.word	0x200004a3

080028d4 <errorState>:

void errorState(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

	if (state_entry) {
 80028d8:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <errorState+0x194>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01b      	beq.n	8002918 <errorState+0x44>
		state_entry = false;
 80028e0:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <errorState+0x194>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 80028e6:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <errorState+0x198>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
		error_check = true;
 80028ec:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <errorState+0x19c>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 80028f2:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <errorState+0x1a0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
		rtn = true;
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <errorState+0x1a4>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <errorState+0x1a8>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 8002904:	4b5e      	ldr	r3, [pc, #376]	; (8002a80 <errorState+0x1ac>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 800290a:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <errorState+0x1b0>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <errorState+0x44>
			_errorSetIcon = false;
 8002912:	4b5d      	ldr	r3, [pc, #372]	; (8002a88 <errorState+0x1b4>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 8002918:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <errorState+0x1b8>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]

	setError();
 800291e:	f7fe f95d 	bl	8000bdc <setError>

	_errorSetPopup = true; //Transmit pop-up
 8002922:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <errorState+0x1bc>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 8002928:	4b57      	ldr	r3, [pc, #348]	; (8002a88 <errorState+0x1b4>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 800292e:	4b59      	ldr	r3, [pc, #356]	; (8002a94 <errorState+0x1c0>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 8002934:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <errorState+0x1c4>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <errorState+0x74>
		_errorSetPopup = false;
 800293c:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <errorState+0x1bc>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002942:	4b54      	ldr	r3, [pc, #336]	; (8002a94 <errorState+0x1c0>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 8002948:	f002 f8a4 	bl	8004a94 <evcuMode>

	if (previousStateSM == driving_state) {
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <errorState+0x1c8>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d123      	bne.n	800299e <errorState+0xca>
		modeSelection(currentMode);
 8002956:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <errorState+0x1cc>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	f000 ff31 	bl	80037c4 <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <errorState+0x1d0>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <errorState+0xca>
			err_previous = err_fullerror;
 800296a:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <errorState+0x1d4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <errorState+0x1d8>)
 8002970:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 8002972:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <errorState+0x1dc>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002978:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <errorState+0x1c8>)
 800297a:	2203      	movs	r2, #3
 800297c:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <errorState+0x194>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002984:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <errorState+0x1d0>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <errorState+0x1bc>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002990:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <errorState+0x1c0>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 8002996:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <errorState+0x1c4>)
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
			return;
 800299c:	e063      	b.n	8002a66 <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <errorState+0x1c8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d10d      	bne.n	80029c4 <errorState+0xf0>
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <errorState+0x19c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <errorState+0xf0>
		charge_error = true;
 80029b0:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <errorState+0x1e0>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <errorState+0x194>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 80029bc:	200f      	movs	r0, #15
 80029be:	f000 fc85 	bl	80032cc <charging_UI>
		return;
 80029c2:	e050      	b.n	8002a66 <errorState+0x192>
	}

	if (accessory == 1) {
 80029c4:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <errorState+0x1e4>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d110      	bne.n	80029ee <errorState+0x11a>
		err_previous = err_fullerror;
 80029cc:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <errorState+0x1d4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a36      	ldr	r2, [pc, #216]	; (8002aac <errorState+0x1d8>)
 80029d2:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 80029d4:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <errorState+0x1dc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <errorState+0x1c8>)
 80029dc:	2203      	movs	r2, #3
 80029de:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <errorState+0x194>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 80029e6:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <errorState+0x1bc>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 80029ec:	e03b      	b.n	8002a66 <errorState+0x192>
	}

	if (okay) {
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <errorState+0x1d0>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00e      	beq.n	8002a14 <errorState+0x140>
		okay = false;
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <errorState+0x1d0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <errorState+0x1a0>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <errorState+0x1bc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <errorState+0x1c0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <errorState+0x1c4>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <errorState+0x1a4>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d024      	beq.n	8002a66 <errorState+0x192>
		if (err_State_Navigation) {
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <errorState+0x1a0>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 8002a24:	f7fe fdca 	bl	80015bc <navigation>
			_errorSetPopup = false;
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <errorState+0x1bc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <errorState+0x1c0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 8002a34:	e016      	b.n	8002a64 <errorState+0x190>
			if (mode) {
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <errorState+0x1e8>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00f      	beq.n	8002a5e <errorState+0x18a>
				mode = false;
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <errorState+0x1e8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <errorState+0x1bc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <errorState+0x1c0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <errorState+0x1cc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 feb4 	bl	80037c4 <modeSelection>
		return;
 8002a5c:	e002      	b.n	8002a64 <errorState+0x190>
				_errorSetCode = true;
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <errorState+0x1c0>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
		return;
 8002a64:	bf00      	nop
	}
}
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000013 	.word	0x20000013
 8002a6c:	20000476 	.word	0x20000476
 8002a70:	20000490 	.word	0x20000490
 8002a74:	20000474 	.word	0x20000474
 8002a78:	20000475 	.word	0x20000475
 8002a7c:	200004a3 	.word	0x200004a3
 8002a80:	200004b4 	.word	0x200004b4
 8002a84:	20000000 	.word	0x20000000
 8002a88:	200004a0 	.word	0x200004a0
 8002a8c:	20000499 	.word	0x20000499
 8002a90:	2000049e 	.word	0x2000049e
 8002a94:	2000049f 	.word	0x2000049f
 8002a98:	200004a1 	.word	0x200004a1
 8002a9c:	20000479 	.word	0x20000479
 8002aa0:	2000047e 	.word	0x2000047e
 8002aa4:	20000406 	.word	0x20000406
 8002aa8:	20000004 	.word	0x20000004
 8002aac:	20000470 	.word	0x20000470
 8002ab0:	20000478 	.word	0x20000478
 8002ab4:	20000493 	.word	0x20000493
 8002ab8:	20000462 	.word	0x20000462
 8002abc:	20000409 	.word	0x20000409

08002ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_MspInit+0x5c>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_MspInit+0x5c>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6193      	str	r3, [r2, #24]
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_MspInit+0x5c>)
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_MspInit+0x5c>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_MspInit+0x5c>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_MspInit+0x5c>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_MspInit+0x60>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_MspInit+0x60>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40010000 	.word	0x40010000

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <NMI_Handler+0x4>

08002b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <MemManage_Handler+0x4>

08002b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6a:	f002 f8b1 	bl	8004cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <DMA1_Channel2_IRQHandler+0x10>)
 8002b7a:	f003 fa59 	bl	8006030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200005e8 	.word	0x200005e8

08002b88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <CAN1_RX0_IRQHandler+0x10>)
 8002b8e:	f002 fd0f 	bl	80055b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200003d0 	.word	0x200003d0

08002b9c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <CAN1_RX1_IRQHandler+0x10>)
 8002ba2:	f002 fd05 	bl	80055b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200003d0 	.word	0x200003d0

08002bb0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <CAN1_SCE_IRQHandler+0x10>)
 8002bb6:	f002 fcfb 	bl	80055b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200003d0 	.word	0x200003d0

08002bc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 8002bc8:	2040      	movs	r0, #64	; 0x40
 8002bca:	f003 fe67 	bl	800689c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 8002bce:	2080      	movs	r0, #128	; 0x80
 8002bd0:	f003 fe64 	bl	800689c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bdc:	4802      	ldr	r0, [pc, #8]	; (8002be8 <TIM2_IRQHandler+0x10>)
 8002bde:	f004 fc81 	bl	80074e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000548 	.word	0x20000548

08002bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <USART3_IRQHandler+0x10>)
 8002bf2:	f005 f92d 	bl	8007e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200005a4 	.word	0x200005a4

08002c00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c20:	463b      	mov	r3, r7
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c32:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002c36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c40:	2264      	movs	r2, #100	; 0x64
 8002c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c52:	f004 fb9d 	bl	8007390 <HAL_TIM_Base_Init>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c5c:	f7fe fca8 	bl	80015b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c6e:	f004 fd41 	bl	80076f4 <HAL_TIM_ConfigClockSource>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c78:	f7fe fc9a 	bl	80015b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c84:	463b      	mov	r3, r7
 8002c86:	4619      	mov	r1, r3
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_TIM2_Init+0x94>)
 8002c8a:	f004 ff1d 	bl	8007ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c94:	f7fe fc8c 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000548 	.word	0x20000548

08002ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d113      	bne.n	8002cde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <HAL_TIM_Base_MspInit+0x44>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_TIM_Base_MspInit+0x44>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_TIM_Base_MspInit+0x44>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	201c      	movs	r0, #28
 8002cd4:	f002 ff5d 	bl	8005b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cd8:	201c      	movs	r0, #28
 8002cda:	f002 ff76 	bl	8005bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000

08002cec <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d054      	beq.n	8002db4 <tick_count+0xc8>
 8002d0a:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d854      	bhi.n	8002dbc <tick_count+0xd0>
 8002d12:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d16:	d049      	beq.n	8002dac <tick_count+0xc0>
 8002d18:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d1c:	d84e      	bhi.n	8002dbc <tick_count+0xd0>
 8002d1e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d22:	d03f      	beq.n	8002da4 <tick_count+0xb8>
 8002d24:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d28:	d848      	bhi.n	8002dbc <tick_count+0xd0>
 8002d2a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d2c:	d036      	beq.n	8002d9c <tick_count+0xb0>
 8002d2e:	2bc8      	cmp	r3, #200	; 0xc8
 8002d30:	d844      	bhi.n	8002dbc <tick_count+0xd0>
 8002d32:	2ba0      	cmp	r3, #160	; 0xa0
 8002d34:	d02e      	beq.n	8002d94 <tick_count+0xa8>
 8002d36:	2ba0      	cmp	r3, #160	; 0xa0
 8002d38:	d840      	bhi.n	8002dbc <tick_count+0xd0>
 8002d3a:	2b78      	cmp	r3, #120	; 0x78
 8002d3c:	d026      	beq.n	8002d8c <tick_count+0xa0>
 8002d3e:	2b78      	cmp	r3, #120	; 0x78
 8002d40:	d83c      	bhi.n	8002dbc <tick_count+0xd0>
 8002d42:	2b50      	cmp	r3, #80	; 0x50
 8002d44:	d01e      	beq.n	8002d84 <tick_count+0x98>
 8002d46:	2b50      	cmp	r3, #80	; 0x50
 8002d48:	d838      	bhi.n	8002dbc <tick_count+0xd0>
 8002d4a:	2b28      	cmp	r3, #40	; 0x28
 8002d4c:	d016      	beq.n	8002d7c <tick_count+0x90>
 8002d4e:	2b28      	cmp	r3, #40	; 0x28
 8002d50:	d834      	bhi.n	8002dbc <tick_count+0xd0>
 8002d52:	2b14      	cmp	r3, #20
 8002d54:	d00e      	beq.n	8002d74 <tick_count+0x88>
 8002d56:	2b14      	cmp	r3, #20
 8002d58:	d830      	bhi.n	8002dbc <tick_count+0xd0>
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d002      	beq.n	8002d64 <tick_count+0x78>
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d004      	beq.n	8002d6c <tick_count+0x80>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 8002d62:	e02b      	b.n	8002dbc <tick_count+0xd0>
			timer_ptr->timeout_50ms = true;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	711a      	strb	r2, [r3, #4]
			break;
 8002d6a:	e028      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_0_5s = true;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	715a      	strb	r2, [r3, #5]
			break;
 8002d72:	e024      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_1s = true;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	719a      	strb	r2, [r3, #6]
			break;
 8002d7a:	e020      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_2s = true;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	71da      	strb	r2, [r3, #7]
			break;
 8002d82:	e01c      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_4s = true;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	721a      	strb	r2, [r3, #8]
			break;
 8002d8a:	e018      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_6s = true;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	725a      	strb	r2, [r3, #9]
			break;
 8002d92:	e014      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_8s = true;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	729a      	strb	r2, [r3, #10]
			break;
 8002d9a:	e010      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_10s = true;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	72da      	strb	r2, [r3, #11]
			break;
 8002da2:	e00c      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_15s = true;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	731a      	strb	r2, [r3, #12]
			break;
 8002daa:	e008      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_30s = true;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	735a      	strb	r2, [r3, #13]
			break;
 8002db2:	e004      	b.n	8002dbe <tick_count+0xd2>
			timer_ptr->timeout_5m = true;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	739a      	strb	r2, [r3, #14]
			break;
 8002dba:	e000      	b.n	8002dbe <tick_count+0xd2>
			break;
 8002dbc:	bf00      	nop
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	_transmit_Function++;
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <transmit+0x1ac>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <transmit+0x1ac>)
 8002dd6:	701a      	strb	r2, [r3, #0]
	if (_transmit_Function == 1) {
 8002dd8:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <transmit+0x1ac>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d108      	bne.n	8002df2 <transmit+0x2a>
		if (_realTimeData) {
 8002de0:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <transmit+0x1b0>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <transmit+0x2a>
			realTimeData();
 8002de8:	f000 fe9a 	bl	8003b20 <realTimeData>
			_realTimeData = false;
 8002dec:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <transmit+0x1b0>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 2) {
 8002df2:	4b60      	ldr	r3, [pc, #384]	; (8002f74 <transmit+0x1ac>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d108      	bne.n	8002e0c <transmit+0x44>
		if (_oneTimeData) {
 8002dfa:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <transmit+0x1b4>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <transmit+0x44>
			oneTimeData();
 8002e02:	f001 faaf 	bl	8004364 <oneTimeData>
			_oneTimeData = false;
 8002e06:	4b5d      	ldr	r3, [pc, #372]	; (8002f7c <transmit+0x1b4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 3) {
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <transmit+0x1ac>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d109      	bne.n	8002e28 <transmit+0x60>
		if (_startingUp) {
 8002e14:	4b5a      	ldr	r3, [pc, #360]	; (8002f80 <transmit+0x1b8>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <transmit+0x60>
			_startingUp = false;
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <transmit+0x1b8>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
			startingUp();
 8002e22:	f000 fdab 	bl	800397c <startingUp>
			return;
 8002e26:	e0a4      	b.n	8002f72 <transmit+0x1aa>
		}
	}

	if (_transmit_Function == 4) {
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <transmit+0x1ac>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d109      	bne.n	8002e44 <transmit+0x7c>
		if (_gearChanged) {
 8002e30:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <transmit+0x1bc>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <transmit+0x7c>
			_gearChanged = false;
 8002e38:	4b52      	ldr	r3, [pc, #328]	; (8002f84 <transmit+0x1bc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 8002e3e:	f001 fd1d 	bl	800487c <gearUpdate>
			return;
 8002e42:	e096      	b.n	8002f72 <transmit+0x1aa>
		}
	}

	if (_transmit_Function == 5) {
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <transmit+0x1ac>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d11b      	bne.n	8002e84 <transmit+0xbc>
		//_transmit_Function = 0;
		if (_modeSelection == 1 && currentstate == 2) {
 8002e4c:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <transmit+0x1c0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10d      	bne.n	8002e70 <transmit+0xa8>
 8002e54:	4b4d      	ldr	r3, [pc, #308]	; (8002f8c <transmit+0x1c4>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d109      	bne.n	8002e70 <transmit+0xa8>
			modeSelection(currentMode);
 8002e5c:	4b4c      	ldr	r3, [pc, #304]	; (8002f90 <transmit+0x1c8>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fcae 	bl	80037c4 <modeSelection>
			_modeSelection = 0;
 8002e68:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <transmit+0x1c0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
			return;
 8002e6e:	e080      	b.n	8002f72 <transmit+0x1aa>
		}
		if (_modeSelection == 2) {
 8002e70:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <transmit+0x1c0>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d105      	bne.n	8002e84 <transmit+0xbc>
			_modeSelection = 0;
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <transmit+0x1c0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
			modeSelection(modeCleared);
 8002e7e:	2004      	movs	r0, #4
 8002e80:	f000 fca0 	bl	80037c4 <modeSelection>

		}
	}

	if (_transmit_Function == 6) {
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <transmit+0x1ac>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d119      	bne.n	8002ec0 <transmit+0xf8>
		if (currentStateSM == driving_state && _setDriverPage == true && !_setPoup) {
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <transmit+0x1cc>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d114      	bne.n	8002ec0 <transmit+0xf8>
 8002e96:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <transmit+0x1d0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <transmit+0xf8>
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <transmit+0x1d4>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <transmit+0xf8>
			_setDriverPage = false;
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <transmit+0x1d0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
			drivePageSetter(_drivePageSet);
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <transmit+0x1d8>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 f885 	bl	8002fc8 <drivePageSetter>
			return;
 8002ebe:	e058      	b.n	8002f72 <transmit+0x1aa>
		}

	}

	if (_transmit_Function == 9) {
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <transmit+0x1ac>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	d122      	bne.n	8002f0e <transmit+0x146>
		_transmit_Function = 0;
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <transmit+0x1ac>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
		popUpCounter++;
 8002ece:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <transmit+0x1dc>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <transmit+0x1dc>)
 8002ed8:	701a      	strb	r2, [r3, #0]
		if (popUpCounter > 3) {
 8002eda:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <transmit+0x1dc>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d90c      	bls.n	8002efc <transmit+0x134>
			popUpCounter = 0;
 8002ee2:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <transmit+0x1dc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
			popUpNumber = 0;
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <transmit+0x1e0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
			if (inPopup) {
 8002eee:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <transmit+0x1e4>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <transmit+0x134>
				_setPoup = true;
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <transmit+0x1d4>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
		else
		{

		}
		//_setPoup and Popup Number should be set from else where
		if (_setPoup) {
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <transmit+0x1d4>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <transmit+0x146>
			_setPoup = false;
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <transmit+0x1d4>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
			//HAL_UART_AbortTransmit(&huart3);
			popUpHandler();
 8002f0a:	f000 fcdb 	bl	80038c4 <popUpHandler>
		}

	}

	if (_errorSetIcon) {
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <transmit+0x1e8>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <transmit+0x152>
		errorIcon();
 8002f16:	f000 fb3f 	bl	8003598 <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <transmit+0x1ec>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <transmit+0x170>
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <transmit+0x1f0>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f083 0301 	eor.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <transmit+0x170>
		errorCode();
 8002f30:	f000 fbd6 	bl	80036e0 <errorCode>
		errorPopup();
 8002f34:	f000 fbb4 	bl	80036a0 <errorPopup>
	}

	if (_charingState) {
 8002f38:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <transmit+0x1f4>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d018      	beq.n	8002f72 <transmit+0x1aa>
		_charingState = false;
 8002f40:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <transmit+0x1f4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
		if (_chargingUI) {
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <transmit+0x1f8>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d006      	beq.n	8002f5c <transmit+0x194>
			charging_UI(charging_ui);
 8002f4e:	200d      	movs	r0, #13
 8002f50:	f000 f9bc 	bl	80032cc <charging_UI>
			_chargingUI = false;
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <transmit+0x1f8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 2;
			return;
 8002f5a:	e00a      	b.n	8002f72 <transmit+0x1aa>
		}
		if (_chargeComplete) {
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <transmit+0x1fc>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <transmit+0x1aa>
			charging_UI(chargingcomp_ui);
 8002f64:	200e      	movs	r0, #14
 8002f66:	f000 f9b1 	bl	80032cc <charging_UI>
			_chargeComplete = false;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <transmit+0x1fc>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 3;
			return;
 8002f70:	bf00      	nop
		}
	}
}
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	200004af 	.word	0x200004af
 8002f78:	20000499 	.word	0x20000499
 8002f7c:	2000049b 	.word	0x2000049b
 8002f80:	20000497 	.word	0x20000497
 8002f84:	200004a7 	.word	0x200004a7
 8002f88:	2000049c 	.word	0x2000049c
 8002f8c:	20000460 	.word	0x20000460
 8002f90:	2000047e 	.word	0x2000047e
 8002f94:	20000478 	.word	0x20000478
 8002f98:	2000049a 	.word	0x2000049a
 8002f9c:	200004ac 	.word	0x200004ac
 8002fa0:	200004b3 	.word	0x200004b3
 8002fa4:	200004b0 	.word	0x200004b0
 8002fa8:	200004b1 	.word	0x200004b1
 8002fac:	20000017 	.word	0x20000017
 8002fb0:	200004a0 	.word	0x200004a0
 8002fb4:	2000049e 	.word	0x2000049e
 8002fb8:	200004a1 	.word	0x200004a1
 8002fbc:	200004a2 	.word	0x200004a2
 8002fc0:	200004a3 	.word	0x200004a3
 8002fc4:	200004a4 	.word	0x200004a4

08002fc8 <drivePageSetter>:

uint8_t drivePageTransmit = 0;

void drivePageSetter(uitype_t page) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 8002fd2:	4b8e      	ldr	r3, [pc, #568]	; (800320c <drivePageSetter+0x244>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b8c      	ldr	r3, [pc, #560]	; (800320c <drivePageSetter+0x244>)
 8002fdc:	701a      	strb	r2, [r3, #0]
	switch (page) {
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	f200 8104 	bhi.w	80031ee <drivePageSetter+0x226>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <drivePageSetter+0x24>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	0800300d 	.word	0x0800300d
 8002ff0:	08003177 	.word	0x08003177
 8002ff4:	08003195 	.word	0x08003195
 8002ff8:	080031b3 	.word	0x080031b3
 8002ffc:	080031ef 	.word	0x080031ef
 8003000:	080031ef 	.word	0x080031ef
 8003004:	080031ef 	.word	0x080031ef
 8003008:	080031d1 	.word	0x080031d1
	case front:
		//Checking for Errors
		if (error_check) {
 800300c:	4b80      	ldr	r3, [pc, #512]	; (8003210 <drivePageSetter+0x248>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d07b      	beq.n	800310c <drivePageSetter+0x144>
			if (accessory == 1) {
 8003014:	4b7f      	ldr	r3, [pc, #508]	; (8003214 <drivePageSetter+0x24c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d123      	bne.n	8003064 <drivePageSetter+0x9c>
				if (drivePageTransmit == 1) {
 800301c:	4b7b      	ldr	r3, [pc, #492]	; (800320c <drivePageSetter+0x244>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <drivePageSetter+0x6a>
					ReadytoDrive_OFF_Icon;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
 8003028:	2208      	movs	r2, #8
 800302a:	497b      	ldr	r1, [pc, #492]	; (8003218 <drivePageSetter+0x250>)
 800302c:	487b      	ldr	r0, [pc, #492]	; (800321c <drivePageSetter+0x254>)
 800302e:	f004 fe10 	bl	8007c52 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 2) {
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <drivePageSetter+0x244>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d106      	bne.n	8003048 <drivePageSetter+0x80>
					ModeClear_Icon;
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	2208      	movs	r2, #8
 8003040:	4977      	ldr	r1, [pc, #476]	; (8003220 <drivePageSetter+0x258>)
 8003042:	4876      	ldr	r0, [pc, #472]	; (800321c <drivePageSetter+0x254>)
 8003044:	f004 fe05 	bl	8007c52 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 3) {
 8003048:	4b70      	ldr	r3, [pc, #448]	; (800320c <drivePageSetter+0x244>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d109      	bne.n	8003064 <drivePageSetter+0x9c>
					PowerLimitON_Icon;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	2208      	movs	r2, #8
 8003056:	4973      	ldr	r1, [pc, #460]	; (8003224 <drivePageSetter+0x25c>)
 8003058:	4870      	ldr	r0, [pc, #448]	; (800321c <drivePageSetter+0x254>)
 800305a:	f004 fdfa 	bl	8007c52 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 800305e:	4b6b      	ldr	r3, [pc, #428]	; (800320c <drivePageSetter+0x244>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 8003064:	4b70      	ldr	r3, [pc, #448]	; (8003228 <drivePageSetter+0x260>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <drivePageSetter+0xc0>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 800306c:	4b67      	ldr	r3, [pc, #412]	; (800320c <drivePageSetter+0x244>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d109      	bne.n	8003088 <drivePageSetter+0xc0>
					SysError_Shutdown_Page;
 8003074:	f04f 33ff 	mov.w	r3, #4294967295
 8003078:	220a      	movs	r2, #10
 800307a:	496c      	ldr	r1, [pc, #432]	; (800322c <drivePageSetter+0x264>)
 800307c:	4867      	ldr	r0, [pc, #412]	; (800321c <drivePageSetter+0x254>)
 800307e:	f004 fde8 	bl	8007c52 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8003082:	4b62      	ldr	r3, [pc, #392]	; (800320c <drivePageSetter+0x244>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 8003088:	4b69      	ldr	r3, [pc, #420]	; (8003230 <drivePageSetter+0x268>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	f040 80af 	bne.w	80031f2 <drivePageSetter+0x22a>
				if (shutdown == 1) {
 8003094:	4b67      	ldr	r3, [pc, #412]	; (8003234 <drivePageSetter+0x26c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10d      	bne.n	80030b8 <drivePageSetter+0xf0>
					if (drivePageTransmit == 1) {
 800309c:	4b5b      	ldr	r3, [pc, #364]	; (800320c <drivePageSetter+0x244>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d109      	bne.n	80030b8 <drivePageSetter+0xf0>
						SysError_StopDrive_Page;
 80030a4:	f04f 33ff 	mov.w	r3, #4294967295
 80030a8:	220a      	movs	r2, #10
 80030aa:	4963      	ldr	r1, [pc, #396]	; (8003238 <drivePageSetter+0x270>)
 80030ac:	485b      	ldr	r0, [pc, #364]	; (800321c <drivePageSetter+0x254>)
 80030ae:	f004 fdd0 	bl	8007c52 <HAL_UART_Transmit>
						drivePageTransmit = 0;
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <drivePageSetter+0x244>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 80030b8:	4b5e      	ldr	r3, [pc, #376]	; (8003234 <drivePageSetter+0x26c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 8098 	bne.w	80031f2 <drivePageSetter+0x22a>
					if (mode) {
 80030c2:	4b5e      	ldr	r3, [pc, #376]	; (800323c <drivePageSetter+0x274>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d011      	beq.n	80030ee <drivePageSetter+0x126>
						if (drivePageTransmit == 1) {
 80030ca:	4b50      	ldr	r3, [pc, #320]	; (800320c <drivePageSetter+0x244>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d109      	bne.n	80030e6 <drivePageSetter+0x11e>
							ModeChangeOFF_Page;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	2208      	movs	r2, #8
 80030d8:	4959      	ldr	r1, [pc, #356]	; (8003240 <drivePageSetter+0x278>)
 80030da:	4850      	ldr	r0, [pc, #320]	; (800321c <drivePageSetter+0x254>)
 80030dc:	f004 fdb9 	bl	8007c52 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 80030e0:	4b4a      	ldr	r3, [pc, #296]	; (800320c <drivePageSetter+0x244>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <drivePageSetter+0x274>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
				//drivePageTransmit = 0;
				//}
			}
		}
		break;
 80030ec:	e081      	b.n	80031f2 <drivePageSetter+0x22a>
						if (drivePageTransmit == 1) {
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <drivePageSetter+0x244>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d17d      	bne.n	80031f2 <drivePageSetter+0x22a>
							SysError_StopDrive_Page;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	220a      	movs	r2, #10
 80030fc:	494e      	ldr	r1, [pc, #312]	; (8003238 <drivePageSetter+0x270>)
 80030fe:	4847      	ldr	r0, [pc, #284]	; (800321c <drivePageSetter+0x254>)
 8003100:	f004 fda7 	bl	8007c52 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <drivePageSetter+0x244>)
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
		break;
 800310a:	e072      	b.n	80031f2 <drivePageSetter+0x22a>
			if (accessory == 1) {
 800310c:	4b41      	ldr	r3, [pc, #260]	; (8003214 <drivePageSetter+0x24c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d123      	bne.n	800315c <drivePageSetter+0x194>
				if (drivePageTransmit == 1) {
 8003114:	4b3d      	ldr	r3, [pc, #244]	; (800320c <drivePageSetter+0x244>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <drivePageSetter+0x162>
					ReadytoDrive_OFF_Icon;
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	2208      	movs	r2, #8
 8003122:	493d      	ldr	r1, [pc, #244]	; (8003218 <drivePageSetter+0x250>)
 8003124:	483d      	ldr	r0, [pc, #244]	; (800321c <drivePageSetter+0x254>)
 8003126:	f004 fd94 	bl	8007c52 <HAL_UART_Transmit>
				if (drivePageTransmit == 2) {
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <drivePageSetter+0x244>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d106      	bne.n	8003140 <drivePageSetter+0x178>
					ModeClear_Icon;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	2208      	movs	r2, #8
 8003138:	4939      	ldr	r1, [pc, #228]	; (8003220 <drivePageSetter+0x258>)
 800313a:	4838      	ldr	r0, [pc, #224]	; (800321c <drivePageSetter+0x254>)
 800313c:	f004 fd89 	bl	8007c52 <HAL_UART_Transmit>
				if (drivePageTransmit == 3) {
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <drivePageSetter+0x244>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d109      	bne.n	800315c <drivePageSetter+0x194>
					Disengage_KillSwitch_Page;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	220a      	movs	r2, #10
 800314e:	493d      	ldr	r1, [pc, #244]	; (8003244 <drivePageSetter+0x27c>)
 8003150:	4832      	ldr	r0, [pc, #200]	; (800321c <drivePageSetter+0x254>)
 8003152:	f004 fd7e 	bl	8007c52 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8003156:	4b2d      	ldr	r3, [pc, #180]	; (800320c <drivePageSetter+0x244>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
			if (_testPage) {
 800315c:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <drivePageSetter+0x280>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d046      	beq.n	80031f2 <drivePageSetter+0x22a>
				_testPage = false;
 8003164:	4b38      	ldr	r3, [pc, #224]	; (8003248 <drivePageSetter+0x280>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
 800316a:	220a      	movs	r2, #10
 800316c:	4937      	ldr	r1, [pc, #220]	; (800324c <drivePageSetter+0x284>)
 800316e:	482b      	ldr	r0, [pc, #172]	; (800321c <drivePageSetter+0x254>)
 8003170:	f004 fe02 	bl	8007d78 <HAL_UART_Transmit_DMA>
		break;
 8003174:	e03d      	b.n	80031f2 <drivePageSetter+0x22a>
	case trip:
		if (_menupage == 1) {
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <drivePageSetter+0x288>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d03b      	beq.n	80031f6 <drivePageSetter+0x22e>
			return;
		}
		_menupage = 1;
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <drivePageSetter+0x288>)
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	220a      	movs	r2, #10
 800318a:	4932      	ldr	r1, [pc, #200]	; (8003254 <drivePageSetter+0x28c>)
 800318c:	4823      	ldr	r0, [pc, #140]	; (800321c <drivePageSetter+0x254>)
 800318e:	f004 fd60 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003192:	e037      	b.n	8003204 <drivePageSetter+0x23c>
	case after_charge:
		if (_menupage == 2) {
 8003194:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <drivePageSetter+0x288>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d02e      	beq.n	80031fa <drivePageSetter+0x232>
			return;
		}
		_menupage = 2;
 800319c:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <drivePageSetter+0x288>)
 800319e:	2202      	movs	r2, #2
 80031a0:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	220a      	movs	r2, #10
 80031a8:	492b      	ldr	r1, [pc, #172]	; (8003258 <drivePageSetter+0x290>)
 80031aa:	481c      	ldr	r0, [pc, #112]	; (800321c <drivePageSetter+0x254>)
 80031ac:	f004 fd51 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80031b0:	e028      	b.n	8003204 <drivePageSetter+0x23c>
	case info:
		if (_menupage == 3) {
 80031b2:	4b27      	ldr	r3, [pc, #156]	; (8003250 <drivePageSetter+0x288>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d021      	beq.n	80031fe <drivePageSetter+0x236>
			return;
		}
		_menupage = 3;
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <drivePageSetter+0x288>)
 80031bc:	2203      	movs	r2, #3
 80031be:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	220a      	movs	r2, #10
 80031c6:	4925      	ldr	r1, [pc, #148]	; (800325c <drivePageSetter+0x294>)
 80031c8:	4814      	ldr	r0, [pc, #80]	; (800321c <drivePageSetter+0x254>)
 80031ca:	f004 fd42 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80031ce:	e019      	b.n	8003204 <drivePageSetter+0x23c>
	case settings:
		if (_menupage == 4) {
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <drivePageSetter+0x288>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d014      	beq.n	8003202 <drivePageSetter+0x23a>
			return;
		}
		_menupage = 4;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <drivePageSetter+0x288>)
 80031da:	2204      	movs	r2, #4
 80031dc:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 80031de:	f04f 33ff 	mov.w	r3, #4294967295
 80031e2:	220a      	movs	r2, #10
 80031e4:	491e      	ldr	r1, [pc, #120]	; (8003260 <drivePageSetter+0x298>)
 80031e6:	480d      	ldr	r0, [pc, #52]	; (800321c <drivePageSetter+0x254>)
 80031e8:	f004 fd33 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80031ec:	e00a      	b.n	8003204 <drivePageSetter+0x23c>
	default:
		break;
 80031ee:	bf00      	nop
 80031f0:	e008      	b.n	8003204 <drivePageSetter+0x23c>
		break;
 80031f2:	bf00      	nop
 80031f4:	e006      	b.n	8003204 <drivePageSetter+0x23c>
			return;
 80031f6:	bf00      	nop
 80031f8:	e004      	b.n	8003204 <drivePageSetter+0x23c>
			return;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <drivePageSetter+0x23c>
			return;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <drivePageSetter+0x23c>
			return;
 8003202:	bf00      	nop

	}

}
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200005a0 	.word	0x200005a0
 8003210:	20000490 	.word	0x20000490
 8003214:	20000462 	.word	0x20000462
 8003218:	200001ac 	.word	0x200001ac
 800321c:	200005a4 	.word	0x200005a4
 8003220:	200001ec 	.word	0x200001ec
 8003224:	20000194 	.word	0x20000194
 8003228:	20000474 	.word	0x20000474
 800322c:	200000f4 	.word	0x200000f4
 8003230:	20000478 	.word	0x20000478
 8003234:	2000046a 	.word	0x2000046a
 8003238:	20000100 	.word	0x20000100
 800323c:	20000409 	.word	0x20000409
 8003240:	20000274 	.word	0x20000274
 8003244:	20000034 	.word	0x20000034
 8003248:	200004ab 	.word	0x200004ab
 800324c:	20000148 	.word	0x20000148
 8003250:	2000047d 	.word	0x2000047d
 8003254:	20000070 	.word	0x20000070
 8003258:	2000007c 	.word	0x2000007c
 800325c:	20000088 	.word	0x20000088
 8003260:	200000b8 	.word	0x200000b8

08003264 <vehicleInfo_UI>:

void vehicleInfo_UI(uitype_t InfoUI) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b06      	cmp	r3, #6
 8003272:	d016      	beq.n	80032a2 <vehicleInfo_UI+0x3e>
 8003274:	2b06      	cmp	r3, #6
 8003276:	dc1c      	bgt.n	80032b2 <vehicleInfo_UI+0x4e>
 8003278:	2b04      	cmp	r3, #4
 800327a:	d002      	beq.n	8003282 <vehicleInfo_UI+0x1e>
 800327c:	2b05      	cmp	r3, #5
 800327e:	d008      	beq.n	8003292 <vehicleInfo_UI+0x2e>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 8003280:	e017      	b.n	80032b2 <vehicleInfo_UI+0x4e>
		Battery_Info_Page;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	220a      	movs	r2, #10
 8003288:	490c      	ldr	r1, [pc, #48]	; (80032bc <vehicleInfo_UI+0x58>)
 800328a:	480d      	ldr	r0, [pc, #52]	; (80032c0 <vehicleInfo_UI+0x5c>)
 800328c:	f004 fce1 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003290:	e010      	b.n	80032b4 <vehicleInfo_UI+0x50>
		Motor_Info_Page;
 8003292:	f04f 33ff 	mov.w	r3, #4294967295
 8003296:	220a      	movs	r2, #10
 8003298:	490a      	ldr	r1, [pc, #40]	; (80032c4 <vehicleInfo_UI+0x60>)
 800329a:	4809      	ldr	r0, [pc, #36]	; (80032c0 <vehicleInfo_UI+0x5c>)
 800329c:	f004 fcd9 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80032a0:	e008      	b.n	80032b4 <vehicleInfo_UI+0x50>
		Inverter_Info_Page;
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	220a      	movs	r2, #10
 80032a8:	4907      	ldr	r1, [pc, #28]	; (80032c8 <vehicleInfo_UI+0x64>)
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <vehicleInfo_UI+0x5c>)
 80032ac:	f004 fcd1 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80032b0:	e000      	b.n	80032b4 <vehicleInfo_UI+0x50>
		break;
 80032b2:	bf00      	nop
	}
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000094 	.word	0x20000094
 80032c0:	200005a4 	.word	0x200005a4
 80032c4:	200000a0 	.word	0x200000a0
 80032c8:	200000ac 	.word	0x200000ac

080032cc <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d016      	beq.n	800330a <charging_UI+0x3e>
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	dc27      	bgt.n	8003330 <charging_UI+0x64>
 80032e0:	2b0d      	cmp	r3, #13
 80032e2:	d002      	beq.n	80032ea <charging_UI+0x1e>
 80032e4:	2b0e      	cmp	r3, #14
 80032e6:	d008      	beq.n	80032fa <charging_UI+0x2e>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 80032e8:	e022      	b.n	8003330 <charging_UI+0x64>
		Charging_Page;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	220a      	movs	r2, #10
 80032f0:	4913      	ldr	r1, [pc, #76]	; (8003340 <charging_UI+0x74>)
 80032f2:	4814      	ldr	r0, [pc, #80]	; (8003344 <charging_UI+0x78>)
 80032f4:	f004 fcad 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80032f8:	e01d      	b.n	8003336 <charging_UI+0x6a>
		ChargeComplete_Page;
 80032fa:	f04f 33ff 	mov.w	r3, #4294967295
 80032fe:	220a      	movs	r2, #10
 8003300:	4911      	ldr	r1, [pc, #68]	; (8003348 <charging_UI+0x7c>)
 8003302:	4810      	ldr	r0, [pc, #64]	; (8003344 <charging_UI+0x78>)
 8003304:	f004 fca5 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003308:	e015      	b.n	8003336 <charging_UI+0x6a>
		Charge_Error_Page;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
 800330e:	220a      	movs	r2, #10
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <charging_UI+0x80>)
 8003312:	480c      	ldr	r0, [pc, #48]	; (8003344 <charging_UI+0x78>)
 8003314:	f004 fc9d 	bl	8007c52 <HAL_UART_Transmit>
		if (charge_error) {
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <charging_UI+0x84>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <charging_UI+0x68>
			Charge_Connection_Error_Popup_ON;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	2208      	movs	r2, #8
 8003326:	490b      	ldr	r1, [pc, #44]	; (8003354 <charging_UI+0x88>)
 8003328:	4806      	ldr	r0, [pc, #24]	; (8003344 <charging_UI+0x78>)
 800332a:	f004 fc92 	bl	8007c52 <HAL_UART_Transmit>
		break;
 800332e:	e001      	b.n	8003334 <charging_UI+0x68>
		break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <charging_UI+0x6a>
		break;
 8003334:	bf00      	nop
	}
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2000010c 	.word	0x2000010c
 8003344:	200005a4 	.word	0x200005a4
 8003348:	20000118 	.word	0x20000118
 800334c:	20000124 	.word	0x20000124
 8003350:	20000493 	.word	0x20000493
 8003354:	2000027c 	.word	0x2000027c

08003358 <settings_UI>:

void settings_UI(uitype_t SettingsMenu, uint8_t selectedOption) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	460a      	mov	r2, r1
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	4613      	mov	r3, r2
 8003366:	71bb      	strb	r3, [r7, #6]
	switch (SettingsMenu) {
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	3b08      	subs	r3, #8
 800336c:	2b03      	cmp	r3, #3
 800336e:	f200 8098 	bhi.w	80034a2 <settings_UI+0x14a>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <settings_UI+0x20>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003389 	.word	0x08003389
 800337c:	08003399 	.word	0x08003399
 8003380:	0800347d 	.word	0x0800347d
 8003384:	0800348d 	.word	0x0800348d
	case vehicleMenu:
		General_Menu_Page;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	220a      	movs	r2, #10
 800338e:	4948      	ldr	r1, [pc, #288]	; (80034b0 <settings_UI+0x158>)
 8003390:	4848      	ldr	r0, [pc, #288]	; (80034b4 <settings_UI+0x15c>)
 8003392:	f004 fc5e 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003396:	e087      	b.n	80034a8 <settings_UI+0x150>
	case systemMenu:
		System_Menu_Page;
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
 800339c:	220a      	movs	r2, #10
 800339e:	4946      	ldr	r1, [pc, #280]	; (80034b8 <settings_UI+0x160>)
 80033a0:	4844      	ldr	r0, [pc, #272]	; (80034b4 <settings_UI+0x15c>)
 80033a2:	f004 fc56 	bl	8007c52 <HAL_UART_Transmit>
		if(timeChanged)
 80033a6:	4b45      	ldr	r3, [pc, #276]	; (80034bc <settings_UI+0x164>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d011      	beq.n	80033d2 <settings_UI+0x7a>
		{
			timeChanged = false;
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <settings_UI+0x164>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
			timeSet[11] = timerSetValueH;
 80033b4:	4b42      	ldr	r3, [pc, #264]	; (80034c0 <settings_UI+0x168>)
 80033b6:	781a      	ldrb	r2, [r3, #0]
 80033b8:	4b42      	ldr	r3, [pc, #264]	; (80034c4 <settings_UI+0x16c>)
 80033ba:	72da      	strb	r2, [r3, #11]
			timeSet[12] = timerSetValueMin;
 80033bc:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <settings_UI+0x170>)
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <settings_UI+0x16c>)
 80033c2:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart3, timeSet, sizeof(timeSet), HAL_MAX_DELAY);
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
 80033c8:	220e      	movs	r2, #14
 80033ca:	493e      	ldr	r1, [pc, #248]	; (80034c4 <settings_UI+0x16c>)
 80033cc:	4839      	ldr	r0, [pc, #228]	; (80034b4 <settings_UI+0x15c>)
 80033ce:	f004 fc40 	bl	8007c52 <HAL_UART_Transmit>
		}
		if(selectedOption == 0) {
 80033d2:	79bb      	ldrb	r3, [r7, #6]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <settings_UI+0xa0>
			TimeSetting_Button;
 80033d8:	f04f 33ff 	mov.w	r3, #4294967295
 80033dc:	2208      	movs	r2, #8
 80033de:	493b      	ldr	r1, [pc, #236]	; (80034cc <settings_UI+0x174>)
 80033e0:	4834      	ldr	r0, [pc, #208]	; (80034b4 <settings_UI+0x15c>)
 80033e2:	f004 fc36 	bl	8007c52 <HAL_UART_Transmit>
			BrightnessSetting_Button_OFF;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	2208      	movs	r2, #8
 80033ec:	4938      	ldr	r1, [pc, #224]	; (80034d0 <settings_UI+0x178>)
 80033ee:	4831      	ldr	r0, [pc, #196]	; (80034b4 <settings_UI+0x15c>)
 80033f0:	f004 fc2f 	bl	8007c52 <HAL_UART_Transmit>

			selectedOption = 10;
 80033f4:	230a      	movs	r3, #10
 80033f6:	71bb      	strb	r3, [r7, #6]
		}
		if(selectedOption == 1)
 80033f8:	79bb      	ldrb	r3, [r7, #6]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10f      	bne.n	800341e <settings_UI+0xc6>
		{
			BrightnessSetting_Button;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	2208      	movs	r2, #8
 8003404:	4933      	ldr	r1, [pc, #204]	; (80034d4 <settings_UI+0x17c>)
 8003406:	482b      	ldr	r0, [pc, #172]	; (80034b4 <settings_UI+0x15c>)
 8003408:	f004 fc23 	bl	8007c52 <HAL_UART_Transmit>
			TimeSetting_Button_OFF;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	2208      	movs	r2, #8
 8003412:	4931      	ldr	r1, [pc, #196]	; (80034d8 <settings_UI+0x180>)
 8003414:	4827      	ldr	r0, [pc, #156]	; (80034b4 <settings_UI+0x15c>)
 8003416:	f004 fc1c 	bl	8007c52 <HAL_UART_Transmit>
			selectedOption = 10;
 800341a:	230a      	movs	r3, #10
 800341c:	71bb      	strb	r3, [r7, #6]
		}
		if (selectedOption == 4) {
 800341e:	79bb      	ldrb	r3, [r7, #6]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d113      	bne.n	800344c <settings_UI+0xf4>
			strDATA[4] = 0x13;
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <settings_UI+0x184>)
 8003426:	2213      	movs	r2, #19
 8003428:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x22;
 800342a:	4b2c      	ldr	r3, [pc, #176]	; (80034dc <settings_UI+0x184>)
 800342c:	2222      	movs	r2, #34	; 0x22
 800342e:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 8003430:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <settings_UI+0x184>)
 8003432:	2200      	movs	r2, #0
 8003434:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueH);
 8003436:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <settings_UI+0x168>)
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <settings_UI+0x184>)
 800343c:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
 8003442:	2208      	movs	r2, #8
 8003444:	4925      	ldr	r1, [pc, #148]	; (80034dc <settings_UI+0x184>)
 8003446:	481b      	ldr	r0, [pc, #108]	; (80034b4 <settings_UI+0x15c>)
 8003448:	f004 fc03 	bl	8007c52 <HAL_UART_Transmit>
		}
		if (selectedOption == 3) {
 800344c:	79bb      	ldrb	r3, [r7, #6]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d129      	bne.n	80034a6 <settings_UI+0x14e>
			strDATA[4] = 0x13;
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <settings_UI+0x184>)
 8003454:	2213      	movs	r2, #19
 8003456:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x21;
 8003458:	4b20      	ldr	r3, [pc, #128]	; (80034dc <settings_UI+0x184>)
 800345a:	2221      	movs	r2, #33	; 0x21
 800345c:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 800345e:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <settings_UI+0x184>)
 8003460:	2200      	movs	r2, #0
 8003462:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueMin);
 8003464:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <settings_UI+0x170>)
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <settings_UI+0x184>)
 800346a:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 800346c:	f04f 33ff 	mov.w	r3, #4294967295
 8003470:	2208      	movs	r2, #8
 8003472:	491a      	ldr	r1, [pc, #104]	; (80034dc <settings_UI+0x184>)
 8003474:	480f      	ldr	r0, [pc, #60]	; (80034b4 <settings_UI+0x15c>)
 8003476:	f004 fbec 	bl	8007c52 <HAL_UART_Transmit>
		}

		break;
 800347a:	e014      	b.n	80034a6 <settings_UI+0x14e>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	220a      	movs	r2, #10
 8003482:	4917      	ldr	r1, [pc, #92]	; (80034e0 <settings_UI+0x188>)
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <settings_UI+0x15c>)
 8003486:	f004 fbe4 	bl	8007c52 <HAL_UART_Transmit>
		break;
 800348a:	e00d      	b.n	80034a8 <settings_UI+0x150>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 800348c:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <settings_UI+0x18c>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	220a      	movs	r2, #10
 8003498:	4913      	ldr	r1, [pc, #76]	; (80034e8 <settings_UI+0x190>)
 800349a:	4806      	ldr	r0, [pc, #24]	; (80034b4 <settings_UI+0x15c>)
 800349c:	f004 fbd9 	bl	8007c52 <HAL_UART_Transmit>
		break;
 80034a0:	e002      	b.n	80034a8 <settings_UI+0x150>
	default:
		break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <settings_UI+0x150>
		break;
 80034a6:	bf00      	nop
	}
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	200000c4 	.word	0x200000c4
 80034b4:	200005a4 	.word	0x200005a4
 80034b8:	200000d0 	.word	0x200000d0
 80034bc:	20000486 	.word	0x20000486
 80034c0:	20000484 	.word	0x20000484
 80034c4:	20000024 	.word	0x20000024
 80034c8:	20000485 	.word	0x20000485
 80034cc:	20000244 	.word	0x20000244
 80034d0:	2000025c 	.word	0x2000025c
 80034d4:	20000254 	.word	0x20000254
 80034d8:	2000024c 	.word	0x2000024c
 80034dc:	20000410 	.word	0x20000410
 80034e0:	200000dc 	.word	0x200000dc
 80034e4:	2000048f 	.word	0x2000048f
 80034e8:	200000e8 	.word	0x200000e8

080034ec <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	220a      	movs	r2, #10
 80034fc:	491f      	ldr	r1, [pc, #124]	; (800357c <selection_UI+0x90>)
 80034fe:	4820      	ldr	r0, [pc, #128]	; (8003580 <selection_UI+0x94>)
 8003500:	f004 fba7 	bl	8007c52 <HAL_UART_Transmit>
	switch (SettingsMenu) {
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	3b08      	subs	r3, #8
 8003508:	2b03      	cmp	r3, #3
 800350a:	d82b      	bhi.n	8003564 <selection_UI+0x78>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <selection_UI+0x28>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003525 	.word	0x08003525
 8003518:	08003535 	.word	0x08003535
 800351c:	08003545 	.word	0x08003545
 8003520:	08003555 	.word	0x08003555
	case vehicleMenu:
		Vehicle_Button;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	2208      	movs	r2, #8
 800352a:	4916      	ldr	r1, [pc, #88]	; (8003584 <selection_UI+0x98>)
 800352c:	4814      	ldr	r0, [pc, #80]	; (8003580 <selection_UI+0x94>)
 800352e:	f004 fb90 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003532:	e01f      	b.n	8003574 <selection_UI+0x88>
	case systemMenu:
		System_Button;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
 8003538:	2208      	movs	r2, #8
 800353a:	4913      	ldr	r1, [pc, #76]	; (8003588 <selection_UI+0x9c>)
 800353c:	4810      	ldr	r0, [pc, #64]	; (8003580 <selection_UI+0x94>)
 800353e:	f004 fb88 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003542:	e017      	b.n	8003574 <selection_UI+0x88>
	case bluetoothMenu:
		Bluetooth_Button;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	2208      	movs	r2, #8
 800354a:	4910      	ldr	r1, [pc, #64]	; (800358c <selection_UI+0xa0>)
 800354c:	480c      	ldr	r0, [pc, #48]	; (8003580 <selection_UI+0x94>)
 800354e:	f004 fb80 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003552:	e00f      	b.n	8003574 <selection_UI+0x88>
	case errorsMenu:
		Error_Button;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	2208      	movs	r2, #8
 800355a:	490d      	ldr	r1, [pc, #52]	; (8003590 <selection_UI+0xa4>)
 800355c:	4808      	ldr	r0, [pc, #32]	; (8003580 <selection_UI+0x94>)
 800355e:	f004 fb78 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003562:	e007      	b.n	8003574 <selection_UI+0x88>
	default:
		NO_Button;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	2208      	movs	r2, #8
 800356a:	490a      	ldr	r1, [pc, #40]	; (8003594 <selection_UI+0xa8>)
 800356c:	4804      	ldr	r0, [pc, #16]	; (8003580 <selection_UI+0x94>)
 800356e:	f004 fb70 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003572:	bf00      	nop
	}
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	200000b8 	.word	0x200000b8
 8003580:	200005a4 	.word	0x200005a4
 8003584:	2000021c 	.word	0x2000021c
 8003588:	20000224 	.word	0x20000224
 800358c:	2000022c 	.word	0x2000022c
 8003590:	20000234 	.word	0x20000234
 8003594:	2000023c 	.word	0x2000023c

08003598 <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0

	if (error_on == true) {
 800359c:	4b30      	ldr	r3, [pc, #192]	; (8003660 <errorIcon+0xc8>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <errorIcon+0x1c>
		Error_ON_Icon;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	2208      	movs	r2, #8
 80035aa:	492e      	ldr	r1, [pc, #184]	; (8003664 <errorIcon+0xcc>)
 80035ac:	482e      	ldr	r0, [pc, #184]	; (8003668 <errorIcon+0xd0>)
 80035ae:	f004 fb50 	bl	8007c52 <HAL_UART_Transmit>
 80035b2:	e006      	b.n	80035c2 <errorIcon+0x2a>
	} else {
		Error_OFF_Icon;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	2208      	movs	r2, #8
 80035ba:	492c      	ldr	r1, [pc, #176]	; (800366c <errorIcon+0xd4>)
 80035bc:	482a      	ldr	r0, [pc, #168]	; (8003668 <errorIcon+0xd0>)
 80035be:	f004 fb48 	bl	8007c52 <HAL_UART_Transmit>
	}
	if (milderror_on == true) {
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <errorIcon+0xd8>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <errorIcon+0x42>
		Mild_Error_ON_Icon;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	2208      	movs	r2, #8
 80035d0:	4928      	ldr	r1, [pc, #160]	; (8003674 <errorIcon+0xdc>)
 80035d2:	4825      	ldr	r0, [pc, #148]	; (8003668 <errorIcon+0xd0>)
 80035d4:	f004 fb3d 	bl	8007c52 <HAL_UART_Transmit>
 80035d8:	e006      	b.n	80035e8 <errorIcon+0x50>
	} else {
		Mild_Error_OFF_Icon;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	2208      	movs	r2, #8
 80035e0:	4925      	ldr	r1, [pc, #148]	; (8003678 <errorIcon+0xe0>)
 80035e2:	4821      	ldr	r0, [pc, #132]	; (8003668 <errorIcon+0xd0>)
 80035e4:	f004 fb35 	bl	8007c52 <HAL_UART_Transmit>
	}
	if (service_on == true) {
 80035e8:	4b24      	ldr	r3, [pc, #144]	; (800367c <errorIcon+0xe4>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <errorIcon+0x68>
		Service_Error_ON_Icon;
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295
 80035f4:	2208      	movs	r2, #8
 80035f6:	4922      	ldr	r1, [pc, #136]	; (8003680 <errorIcon+0xe8>)
 80035f8:	481b      	ldr	r0, [pc, #108]	; (8003668 <errorIcon+0xd0>)
 80035fa:	f004 fb2a 	bl	8007c52 <HAL_UART_Transmit>
 80035fe:	e006      	b.n	800360e <errorIcon+0x76>
	} else {
		Service_Error_OFF_Icon;
 8003600:	f04f 33ff 	mov.w	r3, #4294967295
 8003604:	2208      	movs	r2, #8
 8003606:	491f      	ldr	r1, [pc, #124]	; (8003684 <errorIcon+0xec>)
 8003608:	4817      	ldr	r0, [pc, #92]	; (8003668 <errorIcon+0xd0>)
 800360a:	f004 fb22 	bl	8007c52 <HAL_UART_Transmit>
	}
	if (bat_temp_high == true) {
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <errorIcon+0xf0>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <errorIcon+0x8e>
		Battery_High_Temp_Popup_ON;
 8003616:	f04f 33ff 	mov.w	r3, #4294967295
 800361a:	2208      	movs	r2, #8
 800361c:	491b      	ldr	r1, [pc, #108]	; (800368c <errorIcon+0xf4>)
 800361e:	4812      	ldr	r0, [pc, #72]	; (8003668 <errorIcon+0xd0>)
 8003620:	f004 fb17 	bl	8007c52 <HAL_UART_Transmit>
 8003624:	e006      	b.n	8003634 <errorIcon+0x9c>
	} else {
		Battery_High_Temp_Popup_OFF;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	2208      	movs	r2, #8
 800362c:	4918      	ldr	r1, [pc, #96]	; (8003690 <errorIcon+0xf8>)
 800362e:	480e      	ldr	r0, [pc, #56]	; (8003668 <errorIcon+0xd0>)
 8003630:	f004 fb0f 	bl	8007c52 <HAL_UART_Transmit>
	}
	if (aux_low_on == true) {
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <errorIcon+0xfc>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <errorIcon+0xb4>
		Battery_ON_Icon;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	2208      	movs	r2, #8
 8003642:	4915      	ldr	r1, [pc, #84]	; (8003698 <errorIcon+0x100>)
 8003644:	4808      	ldr	r0, [pc, #32]	; (8003668 <errorIcon+0xd0>)
 8003646:	f004 fb04 	bl	8007c52 <HAL_UART_Transmit>
	} else {
		Battery_OFF_Icon;
	}
}
 800364a:	e006      	b.n	800365a <errorIcon+0xc2>
		Battery_OFF_Icon;
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
 8003650:	2208      	movs	r2, #8
 8003652:	4912      	ldr	r1, [pc, #72]	; (800369c <errorIcon+0x104>)
 8003654:	4804      	ldr	r0, [pc, #16]	; (8003668 <errorIcon+0xd0>)
 8003656:	f004 fafc 	bl	8007c52 <HAL_UART_Transmit>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2000048a 	.word	0x2000048a
 8003664:	20000164 	.word	0x20000164
 8003668:	200005a4 	.word	0x200005a4
 800366c:	2000016c 	.word	0x2000016c
 8003670:	2000048b 	.word	0x2000048b
 8003674:	20000184 	.word	0x20000184
 8003678:	2000018c 	.word	0x2000018c
 800367c:	2000048c 	.word	0x2000048c
 8003680:	20000174 	.word	0x20000174
 8003684:	2000017c 	.word	0x2000017c
 8003688:	2000048d 	.word	0x2000048d
 800368c:	20000264 	.word	0x20000264
 8003690:	2000026c 	.word	0x2000026c
 8003694:	2000048e 	.word	0x2000048e
 8003698:	20000154 	.word	0x20000154
 800369c:	2000015c 	.word	0x2000015c

080036a0 <errorPopup>:

void errorPopup(void) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <errorPopup+0x30>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <errorPopup+0x1c>
		SystemError_Critical_Popup;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	220a      	movs	r2, #10
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <errorPopup+0x34>)
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <errorPopup+0x38>)
 80036b6:	f004 facc 	bl	8007c52 <HAL_UART_Transmit>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 80036ba:	e006      	b.n	80036ca <errorPopup+0x2a>
		SystemError_Mild_Popup_Page;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	220a      	movs	r2, #10
 80036c2:	4906      	ldr	r1, [pc, #24]	; (80036dc <errorPopup+0x3c>)
 80036c4:	4804      	ldr	r0, [pc, #16]	; (80036d8 <errorPopup+0x38>)
 80036c6:	f004 fac4 	bl	8007c52 <HAL_UART_Transmit>
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000046d 	.word	0x2000046d
 80036d4:	2000013c 	.word	0x2000013c
 80036d8:	200005a4 	.word	0x200005a4
 80036dc:	20000130 	.word	0x20000130

080036e0 <errorCode>:

void errorCode(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 80036e4:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <errorCode+0xd0>)
 80036e6:	2211      	movs	r2, #17
 80036e8:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 80036ea:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <errorCode+0xd0>)
 80036ec:	2294      	movs	r2, #148	; 0x94
 80036ee:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <errorCode+0xd0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 80036f6:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <errorCode+0xd4>)
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <errorCode+0xd0>)
 80036fc:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	2208      	movs	r2, #8
 8003704:	492a      	ldr	r1, [pc, #168]	; (80037b0 <errorCode+0xd0>)
 8003706:	482c      	ldr	r0, [pc, #176]	; (80037b8 <errorCode+0xd8>)
 8003708:	f004 faa3 	bl	8007c52 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 800370c:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <errorCode+0xd0>)
 800370e:	2211      	movs	r2, #17
 8003710:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 8003712:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <errorCode+0xd0>)
 8003714:	2297      	movs	r2, #151	; 0x97
 8003716:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	2208      	movs	r2, #8
 800371e:	4924      	ldr	r1, [pc, #144]	; (80037b0 <errorCode+0xd0>)
 8003720:	4825      	ldr	r0, [pc, #148]	; (80037b8 <errorCode+0xd8>)
 8003722:	f004 fa96 	bl	8007c52 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 8003726:	4b22      	ldr	r3, [pc, #136]	; (80037b0 <errorCode+0xd0>)
 8003728:	2211      	movs	r2, #17
 800372a:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 800372c:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <errorCode+0xd0>)
 800372e:	2295      	movs	r2, #149	; 0x95
 8003730:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <errorCode+0xd0>)
 8003734:	2200      	movs	r2, #0
 8003736:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 8003738:	4b20      	ldr	r3, [pc, #128]	; (80037bc <errorCode+0xdc>)
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <errorCode+0xd0>)
 800373e:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	2208      	movs	r2, #8
 8003746:	491a      	ldr	r1, [pc, #104]	; (80037b0 <errorCode+0xd0>)
 8003748:	481b      	ldr	r0, [pc, #108]	; (80037b8 <errorCode+0xd8>)
 800374a:	f004 fa82 	bl	8007c52 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <errorCode+0xd0>)
 8003750:	2211      	movs	r2, #17
 8003752:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <errorCode+0xd0>)
 8003756:	2298      	movs	r2, #152	; 0x98
 8003758:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	2208      	movs	r2, #8
 8003760:	4913      	ldr	r1, [pc, #76]	; (80037b0 <errorCode+0xd0>)
 8003762:	4815      	ldr	r0, [pc, #84]	; (80037b8 <errorCode+0xd8>)
 8003764:	f004 fa75 	bl	8007c52 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 8003768:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <errorCode+0xd0>)
 800376a:	2211      	movs	r2, #17
 800376c:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <errorCode+0xd0>)
 8003770:	2296      	movs	r2, #150	; 0x96
 8003772:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <errorCode+0xd0>)
 8003776:	2200      	movs	r2, #0
 8003778:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <errorCode+0xe0>)
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <errorCode+0xd0>)
 8003780:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	2208      	movs	r2, #8
 8003788:	4909      	ldr	r1, [pc, #36]	; (80037b0 <errorCode+0xd0>)
 800378a:	480b      	ldr	r0, [pc, #44]	; (80037b8 <errorCode+0xd8>)
 800378c:	f004 fa61 	bl	8007c52 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 8003790:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <errorCode+0xd0>)
 8003792:	2211      	movs	r2, #17
 8003794:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <errorCode+0xd0>)
 8003798:	2299      	movs	r2, #153	; 0x99
 800379a:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	2208      	movs	r2, #8
 80037a2:	4903      	ldr	r1, [pc, #12]	; (80037b0 <errorCode+0xd0>)
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <errorCode+0xd8>)
 80037a6:	f004 fa54 	bl	8007c52 <HAL_UART_Transmit>
	;

}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000410 	.word	0x20000410
 80037b4:	2000046b 	.word	0x2000046b
 80037b8:	200005a4 	.word	0x200005a4
 80037bc:	2000046c 	.word	0x2000046c
 80037c0:	2000046d 	.word	0x2000046d

080037c4 <modeSelection>:

void modeSelection(uimode_t currentMode) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
//	if (!_modeChanged) {
//		drivePageSetter(currentPage);
//	}
	if (currentMode == modeCleared) {
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d107      	bne.n	80037e4 <modeSelection+0x20>
		ModeClear_Icon;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	2208      	movs	r2, #8
 80037da:	4930      	ldr	r1, [pc, #192]	; (800389c <modeSelection+0xd8>)
 80037dc:	4830      	ldr	r0, [pc, #192]	; (80038a0 <modeSelection+0xdc>)
 80037de:	f004 fa38 	bl	8007c52 <HAL_UART_Transmit>
		return;
 80037e2:	e057      	b.n	8003894 <modeSelection+0xd0>
//	if (mode_count > 15) {
//		rtn = true;
//		mode_count = 0;
//	}

	switch (currentMode) {
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d037      	beq.n	800385a <modeSelection+0x96>
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	dc4b      	bgt.n	8003886 <modeSelection+0xc2>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <modeSelection+0x34>
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d00f      	beq.n	8003816 <modeSelection+0x52>
			//SportMode_Popup;
			_modeChanged = false;
		}
		break;
	default:
		break;
 80037f6:	e046      	b.n	8003886 <modeSelection+0xc2>
		if (modeIcon) {
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <modeSelection+0xe0>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d044      	beq.n	800388a <modeSelection+0xc6>
			NormalMode_Icon;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	2208      	movs	r2, #8
 8003806:	4928      	ldr	r1, [pc, #160]	; (80038a8 <modeSelection+0xe4>)
 8003808:	4825      	ldr	r0, [pc, #148]	; (80038a0 <modeSelection+0xdc>)
 800380a:	f004 fa22 	bl	8007c52 <HAL_UART_Transmit>
			modeIcon = false;
 800380e:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <modeSelection+0xe0>)
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
		break;
 8003814:	e039      	b.n	800388a <modeSelection+0xc6>
		if (mode_evcu == 1) {
 8003816:	4b25      	ldr	r3, [pc, #148]	; (80038ac <modeSelection+0xe8>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <modeSelection+0x6a>
			PowerLimitON_Icon;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	2208      	movs	r2, #8
 8003824:	4922      	ldr	r1, [pc, #136]	; (80038b0 <modeSelection+0xec>)
 8003826:	481e      	ldr	r0, [pc, #120]	; (80038a0 <modeSelection+0xdc>)
 8003828:	f004 fa13 	bl	8007c52 <HAL_UART_Transmit>
 800382c:	e006      	b.n	800383c <modeSelection+0x78>
			PowerLimitOFF_Icon;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	2208      	movs	r2, #8
 8003834:	491f      	ldr	r1, [pc, #124]	; (80038b4 <modeSelection+0xf0>)
 8003836:	481a      	ldr	r0, [pc, #104]	; (80038a0 <modeSelection+0xdc>)
 8003838:	f004 fa0b 	bl	8007c52 <HAL_UART_Transmit>
		if (modeIcon) {
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <modeSelection+0xe0>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d024      	beq.n	800388e <modeSelection+0xca>
			modeIcon = false;
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <modeSelection+0xe0>)
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
			EcoMode_Icon;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	2208      	movs	r2, #8
 8003850:	4919      	ldr	r1, [pc, #100]	; (80038b8 <modeSelection+0xf4>)
 8003852:	4813      	ldr	r0, [pc, #76]	; (80038a0 <modeSelection+0xdc>)
 8003854:	f004 f9fd 	bl	8007c52 <HAL_UART_Transmit>
		break;
 8003858:	e019      	b.n	800388e <modeSelection+0xca>
		if (modeIcon) {
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <modeSelection+0xe0>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <modeSelection+0xb2>
			modeIcon = false;
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <modeSelection+0xe0>)
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	2208      	movs	r2, #8
 800386e:	4913      	ldr	r1, [pc, #76]	; (80038bc <modeSelection+0xf8>)
 8003870:	480b      	ldr	r0, [pc, #44]	; (80038a0 <modeSelection+0xdc>)
 8003872:	f004 f9ee 	bl	8007c52 <HAL_UART_Transmit>
		if (_modeChanged) {
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <modeSelection+0xfc>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <modeSelection+0xce>
			_modeChanged = false;
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <modeSelection+0xfc>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
		break;
 8003884:	e005      	b.n	8003892 <modeSelection+0xce>
		break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <modeSelection+0xd0>
		break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <modeSelection+0xd0>
		break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <modeSelection+0xd0>
		break;
 8003892:	bf00      	nop
	}
}
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200001ec 	.word	0x200001ec
 80038a0:	200005a4 	.word	0x200005a4
 80038a4:	20000492 	.word	0x20000492
 80038a8:	200001dc 	.word	0x200001dc
 80038ac:	20000468 	.word	0x20000468
 80038b0:	20000194 	.word	0x20000194
 80038b4:	2000019c 	.word	0x2000019c
 80038b8:	200001d4 	.word	0x200001d4
 80038bc:	200001e4 	.word	0x200001e4
 80038c0:	200004a5 	.word	0x200004a5

080038c4 <popUpHandler>:

void popUpHandler(void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	//Set popup priority Here

	switch (popUpNumber) {
 80038c8:	4b26      	ldr	r3, [pc, #152]	; (8003964 <popUpHandler+0xa0>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d846      	bhi.n	800395e <popUpHandler+0x9a>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <popUpHandler+0x14>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	080038f1 	.word	0x080038f1
 80038dc:	08003907 	.word	0x08003907
 80038e0:	0800391d 	.word	0x0800391d
 80038e4:	08003933 	.word	0x08003933
 80038e8:	08003949 	.word	0x08003949
 80038ec:	0800395f 	.word	0x0800395f
	case 0:
		//popUp_OFF;
		Battery_High_Temp_Popup_OFF;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	2208      	movs	r2, #8
 80038f6:	491c      	ldr	r1, [pc, #112]	; (8003968 <popUpHandler+0xa4>)
 80038f8:	481c      	ldr	r0, [pc, #112]	; (800396c <popUpHandler+0xa8>)
 80038fa:	f004 f9aa 	bl	8007c52 <HAL_UART_Transmit>
		inPopup = false;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <popUpHandler+0xac>)
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
		break;
 8003904:	e02c      	b.n	8003960 <popUpHandler+0x9c>
	case 1:
		//NormalMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	2208      	movs	r2, #8
 800390c:	4919      	ldr	r1, [pc, #100]	; (8003974 <popUpHandler+0xb0>)
 800390e:	4817      	ldr	r0, [pc, #92]	; (800396c <popUpHandler+0xa8>)
 8003910:	f004 f99f 	bl	8007c52 <HAL_UART_Transmit>
		inPopup = true;
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <popUpHandler+0xac>)
 8003916:	2201      	movs	r2, #1
 8003918:	701a      	strb	r2, [r3, #0]
		break;
 800391a:	e021      	b.n	8003960 <popUpHandler+0x9c>
	case 2:
		//EcoMode_Popup;
		Battery_High_Temp_Popup_ON;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	2208      	movs	r2, #8
 8003922:	4914      	ldr	r1, [pc, #80]	; (8003974 <popUpHandler+0xb0>)
 8003924:	4811      	ldr	r0, [pc, #68]	; (800396c <popUpHandler+0xa8>)
 8003926:	f004 f994 	bl	8007c52 <HAL_UART_Transmit>
		inPopup = true;
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <popUpHandler+0xac>)
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
		break;
 8003930:	e016      	b.n	8003960 <popUpHandler+0x9c>
	case 3:
		//SportMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	2208      	movs	r2, #8
 8003938:	490e      	ldr	r1, [pc, #56]	; (8003974 <popUpHandler+0xb0>)
 800393a:	480c      	ldr	r0, [pc, #48]	; (800396c <popUpHandler+0xa8>)
 800393c:	f004 f989 	bl	8007c52 <HAL_UART_Transmit>
		inPopup = true;
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <popUpHandler+0xac>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
		break;
 8003946:	e00b      	b.n	8003960 <popUpHandler+0x9c>
	case 4:
		ModeChangeOFF_Page;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	2208      	movs	r2, #8
 800394e:	490a      	ldr	r1, [pc, #40]	; (8003978 <popUpHandler+0xb4>)
 8003950:	4806      	ldr	r0, [pc, #24]	; (800396c <popUpHandler+0xa8>)
 8003952:	f004 f97e 	bl	8007c52 <HAL_UART_Transmit>
		inPopup = true;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <popUpHandler+0xac>)
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
		break;
 800395c:	e000      	b.n	8003960 <popUpHandler+0x9c>
	case 5:
		//ModeChangeOFF_Page;
		break;

	default:
		break;
 800395e:	bf00      	nop
	}

}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	200004b1 	.word	0x200004b1
 8003968:	2000026c 	.word	0x2000026c
 800396c:	200005a4 	.word	0x200005a4
 8003970:	20000017 	.word	0x20000017
 8003974:	20000264 	.word	0x20000264
 8003978:	20000274 	.word	0x20000274

0800397c <startingUp>:

	}
}
uint8_t delayCounter = 0;

void startingUp(void) {
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0

//	if (accessory == 0) {
//		modeSelection(currentMode);
//	}

	if (error_check) {
 8003980:	4b4f      	ldr	r3, [pc, #316]	; (8003ac0 <startingUp+0x144>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <startingUp+0x22>
		if (err_State_Navigation == true) {
 8003988:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <startingUp+0x148>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <startingUp+0x22>
			SysError_Shutdown_Page;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	220a      	movs	r2, #10
 8003996:	494c      	ldr	r1, [pc, #304]	; (8003ac8 <startingUp+0x14c>)
 8003998:	484c      	ldr	r0, [pc, #304]	; (8003acc <startingUp+0x150>)
 800399a:	f004 f95a 	bl	8007c52 <HAL_UART_Transmit>
		}
	}

	if (entry == true) {
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <startingUp+0x154>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d024      	beq.n	80039f0 <startingUp+0x74>
		if (_navigation) {
 80039a6:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <startingUp+0x158>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d019      	beq.n	80039e2 <startingUp+0x66>
			if (_trasmitGlobal == MainMenuPages) {
 80039ae:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <startingUp+0x15c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d106      	bne.n	80039c6 <startingUp+0x4a>
				drivePageSetter(_drivePageSet);
 80039b8:	4b48      	ldr	r3, [pc, #288]	; (8003adc <startingUp+0x160>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fb02 	bl	8002fc8 <drivePageSetter>
				return;
 80039c4:	e07b      	b.n	8003abe <startingUp+0x142>
			}
			_trasmitGlobal = MainMenuPages;
 80039c6:	4b44      	ldr	r3, [pc, #272]	; (8003ad8 <startingUp+0x15c>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	220a      	movs	r2, #10
 80039d2:	4943      	ldr	r1, [pc, #268]	; (8003ae0 <startingUp+0x164>)
 80039d4:	483d      	ldr	r0, [pc, #244]	; (8003acc <startingUp+0x150>)
 80039d6:	f004 f93c 	bl	8007c52 <HAL_UART_Transmit>
			_navigation = false;
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <startingUp+0x158>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
			return;
 80039e0:	e06d      	b.n	8003abe <startingUp+0x142>
		}
		Press_Brake_Page;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	220a      	movs	r2, #10
 80039e8:	493e      	ldr	r1, [pc, #248]	; (8003ae4 <startingUp+0x168>)
 80039ea:	4838      	ldr	r0, [pc, #224]	; (8003acc <startingUp+0x150>)
 80039ec:	f004 f931 	bl	8007c52 <HAL_UART_Transmit>
	}

	if (start == 1) {
 80039f0:	4b3d      	ldr	r3, [pc, #244]	; (8003ae8 <startingUp+0x16c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d141      	bne.n	8003a7c <startingUp+0x100>
		entry = false;
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <startingUp+0x154>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <startingUp+0x170>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <startingUp+0x90>
			//bootAnimation();
			checklit = false;
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <startingUp+0x170>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 8003a0c:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <startingUp+0x174>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d118      	bne.n	8003a46 <startingUp+0xca>
			ReadytoDrive_ON_Icon;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	2208      	movs	r2, #8
 8003a1a:	4936      	ldr	r1, [pc, #216]	; (8003af4 <startingUp+0x178>)
 8003a1c:	482b      	ldr	r0, [pc, #172]	; (8003acc <startingUp+0x150>)
 8003a1e:	f004 f918 	bl	8007c52 <HAL_UART_Transmit>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 8003a22:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <startingUp+0x17c>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d014      	beq.n	8003a54 <startingUp+0xd8>
				ReadytoDrive_Page;
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	220a      	movs	r2, #10
 8003a30:	4932      	ldr	r1, [pc, #200]	; (8003afc <startingUp+0x180>)
 8003a32:	4826      	ldr	r0, [pc, #152]	; (8003acc <startingUp+0x150>)
 8003a34:	f004 f90d 	bl	8007c52 <HAL_UART_Transmit>
				_testPage = true;
 8003a38:	4b31      	ldr	r3, [pc, #196]	; (8003b00 <startingUp+0x184>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
				startup = false;
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <startingUp+0x17c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e006      	b.n	8003a54 <startingUp+0xd8>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	220a      	movs	r2, #10
 8003a4c:	492d      	ldr	r1, [pc, #180]	; (8003b04 <startingUp+0x188>)
 8003a4e:	481f      	ldr	r0, [pc, #124]	; (8003acc <startingUp+0x150>)
 8003a50:	f004 f8ff 	bl	8007c52 <HAL_UART_Transmit>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <startingUp+0x18c>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d107      	bne.n	8003a6c <startingUp+0xf0>
			Charge_Connection_Error_Popup_ON;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	2208      	movs	r2, #8
 8003a62:	492a      	ldr	r1, [pc, #168]	; (8003b0c <startingUp+0x190>)
 8003a64:	4819      	ldr	r0, [pc, #100]	; (8003acc <startingUp+0x150>)
 8003a66:	f004 f8f4 	bl	8007c52 <HAL_UART_Transmit>
 8003a6a:	e028      	b.n	8003abe <startingUp+0x142>
		} else {
			Charge_Connection_Error_Popup_OFF;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	2208      	movs	r2, #8
 8003a72:	4927      	ldr	r1, [pc, #156]	; (8003b10 <startingUp+0x194>)
 8003a74:	4815      	ldr	r0, [pc, #84]	; (8003acc <startingUp+0x150>)
 8003a76:	f004 f8ec 	bl	8007c52 <HAL_UART_Transmit>
 8003a7a:	e020      	b.n	8003abe <startingUp+0x142>
//		if (mode) {
//			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
//			//Final: Mode Change unavailable before ignition
//			mode = false;
//		}
		if (warning == 1) {
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <startingUp+0x198>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <startingUp+0x116>
			Press_Brake_Page;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
 8003a88:	220a      	movs	r2, #10
 8003a8a:	4916      	ldr	r1, [pc, #88]	; (8003ae4 <startingUp+0x168>)
 8003a8c:	480f      	ldr	r0, [pc, #60]	; (8003acc <startingUp+0x150>)
 8003a8e:	f004 f8e0 	bl	8007c52 <HAL_UART_Transmit>
		}
		if (warning == 2) {
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <startingUp+0x198>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d106      	bne.n	8003aa8 <startingUp+0x12c>
			Mild_Error_ON_Icon;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	491d      	ldr	r1, [pc, #116]	; (8003b18 <startingUp+0x19c>)
 8003aa2:	480a      	ldr	r0, [pc, #40]	; (8003acc <startingUp+0x150>)
 8003aa4:	f004 f8d5 	bl	8007c52 <HAL_UART_Transmit>
		}
		if (warning == 3) {
 8003aa8:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <startingUp+0x198>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d106      	bne.n	8003abe <startingUp+0x142>
			Gear_Error_Page;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	4919      	ldr	r1, [pc, #100]	; (8003b1c <startingUp+0x1a0>)
 8003ab8:	4804      	ldr	r0, [pc, #16]	; (8003acc <startingUp+0x150>)
 8003aba:	f004 f8ca 	bl	8007c52 <HAL_UART_Transmit>

		}
	}

}
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000490 	.word	0x20000490
 8003ac4:	20000474 	.word	0x20000474
 8003ac8:	200000f4 	.word	0x200000f4
 8003acc:	200005a4 	.word	0x200005a4
 8003ad0:	2000000d 	.word	0x2000000d
 8003ad4:	20000498 	.word	0x20000498
 8003ad8:	200004b4 	.word	0x200004b4
 8003adc:	200004b3 	.word	0x200004b3
 8003ae0:	20000034 	.word	0x20000034
 8003ae4:	20000040 	.word	0x20000040
 8003ae8:	20000464 	.word	0x20000464
 8003aec:	2000000e 	.word	0x2000000e
 8003af0:	20000463 	.word	0x20000463
 8003af4:	200001a4 	.word	0x200001a4
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	20000064 	.word	0x20000064
 8003b00:	200004ab 	.word	0x200004ab
 8003b04:	20000058 	.word	0x20000058
 8003b08:	20000495 	.word	0x20000495
 8003b0c:	2000027c 	.word	0x2000027c
 8003b10:	20000284 	.word	0x20000284
 8003b14:	20000469 	.word	0x20000469
 8003b18:	20000184 	.word	0x20000184
 8003b1c:	2000004c 	.word	0x2000004c

08003b20 <realTimeData>:

uint8_t powerBarTransmit = 0;

void realTimeData(void) { //Realtime updatable data sending
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
//Speed
	realTime_counter++;
 8003b24:	4ba3      	ldr	r3, [pc, #652]	; (8003db4 <realTimeData+0x294>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4ba1      	ldr	r3, [pc, #644]	; (8003db4 <realTimeData+0x294>)
 8003b2e:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 1) {
 8003b30:	4ba0      	ldr	r3, [pc, #640]	; (8003db4 <realTimeData+0x294>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d11b      	bne.n	8003b70 <realTimeData+0x50>
		strDATA[4] = 0x11; //
 8003b38:	4b9f      	ldr	r3, [pc, #636]	; (8003db8 <realTimeData+0x298>)
 8003b3a:	2211      	movs	r2, #17
 8003b3c:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x00; //
 8003b3e:	4b9e      	ldr	r3, [pc, #632]	; (8003db8 <realTimeData+0x298>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (test_speed & 0xFF);
 8003b44:	4b9d      	ldr	r3, [pc, #628]	; (8003dbc <realTimeData+0x29c>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4b9b      	ldr	r3, [pc, #620]	; (8003db8 <realTimeData+0x298>)
 8003b4c:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (test_speed >> 8);
 8003b4e:	4b9b      	ldr	r3, [pc, #620]	; (8003dbc <realTimeData+0x29c>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b97      	ldr	r3, [pc, #604]	; (8003db8 <realTimeData+0x298>)
 8003b5a:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b60:	2208      	movs	r2, #8
 8003b62:	4995      	ldr	r1, [pc, #596]	; (8003db8 <realTimeData+0x298>)
 8003b64:	4896      	ldr	r0, [pc, #600]	; (8003dc0 <realTimeData+0x2a0>)
 8003b66:	f004 f874 	bl	8007c52 <HAL_UART_Transmit>
		;
		testFlag_2 = true;
 8003b6a:	4b96      	ldr	r3, [pc, #600]	; (8003dc4 <realTimeData+0x2a4>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
	}
//ODO
	if (realTime_counter == 2) {
 8003b70:	4b90      	ldr	r3, [pc, #576]	; (8003db4 <realTimeData+0x294>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d123      	bne.n	8003bc0 <realTimeData+0xa0>
		strDATA2[4] = 0x11;
 8003b78:	4b93      	ldr	r3, [pc, #588]	; (8003dc8 <realTimeData+0x2a8>)
 8003b7a:	2211      	movs	r2, #17
 8003b7c:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x20;
 8003b7e:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <realTimeData+0x2a8>)
 8003b80:	2220      	movs	r2, #32
 8003b82:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.ODO & 0xFF);
 8003b84:	4b91      	ldr	r3, [pc, #580]	; (8003dcc <realTimeData+0x2ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <realTimeData+0x2a8>)
 8003b8c:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.ODO >> 8);
 8003b8e:	4b8f      	ldr	r3, [pc, #572]	; (8003dcc <realTimeData+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <realTimeData+0x2a8>)
 8003b98:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.ODO >> 16);
 8003b9a:	4b8c      	ldr	r3, [pc, #560]	; (8003dcc <realTimeData+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <realTimeData+0x2a8>)
 8003ba4:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.ODO >> 24);
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <realTimeData+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	0e1b      	lsrs	r3, r3, #24
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b86      	ldr	r3, [pc, #536]	; (8003dc8 <realTimeData+0x2a8>)
 8003bb0:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA2
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	220a      	movs	r2, #10
 8003bb8:	4983      	ldr	r1, [pc, #524]	; (8003dc8 <realTimeData+0x2a8>)
 8003bba:	4881      	ldr	r0, [pc, #516]	; (8003dc0 <realTimeData+0x2a0>)
 8003bbc:	f004 f849 	bl	8007c52 <HAL_UART_Transmit>
		;
	}
////Trip
	if (realTime_counter == 3) {
 8003bc0:	4b7c      	ldr	r3, [pc, #496]	; (8003db4 <realTimeData+0x294>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d124      	bne.n	8003c12 <realTimeData+0xf2>
		strDATA2[4] = 0x11;
 8003bc8:	4b7f      	ldr	r3, [pc, #508]	; (8003dc8 <realTimeData+0x2a8>)
 8003bca:	2211      	movs	r2, #17
 8003bcc:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x40;
 8003bce:	4b7e      	ldr	r3, [pc, #504]	; (8003dc8 <realTimeData+0x2a8>)
 8003bd0:	2240      	movs	r2, #64	; 0x40
 8003bd2:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.trip & 0xFF);
 8003bd4:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <realTimeData+0x2ac>)
 8003bd6:	889b      	ldrh	r3, [r3, #4]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <realTimeData+0x2a8>)
 8003bdc:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.trip >> 8);
 8003bde:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <realTimeData+0x2ac>)
 8003be0:	889b      	ldrh	r3, [r3, #4]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <realTimeData+0x2a8>)
 8003bea:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.trip >> 16);
 8003bec:	4b77      	ldr	r3, [pc, #476]	; (8003dcc <realTimeData+0x2ac>)
 8003bee:	889b      	ldrh	r3, [r3, #4]
 8003bf0:	141b      	asrs	r3, r3, #16
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <realTimeData+0x2a8>)
 8003bf6:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.trip >> 24);
 8003bf8:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <realTimeData+0x2ac>)
 8003bfa:	889b      	ldrh	r3, [r3, #4]
 8003bfc:	161b      	asrs	r3, r3, #24
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b71      	ldr	r3, [pc, #452]	; (8003dc8 <realTimeData+0x2a8>)
 8003c02:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA2
 8003c04:	f04f 33ff 	mov.w	r3, #4294967295
 8003c08:	220a      	movs	r2, #10
 8003c0a:	496f      	ldr	r1, [pc, #444]	; (8003dc8 <realTimeData+0x2a8>)
 8003c0c:	486c      	ldr	r0, [pc, #432]	; (8003dc0 <realTimeData+0x2a0>)
 8003c0e:	f004 f820 	bl	8007c52 <HAL_UART_Transmit>
		;
	}
//Power Bar
	powerBarTransmit++;
 8003c12:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <realTimeData+0x2b0>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <realTimeData+0x2b0>)
 8003c1c:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 4) {
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <realTimeData+0x294>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	f040 817b 	bne.w	8003f1e <realTimeData+0x3fe>

		if (rpm_meter >= 1) {
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <realTimeData+0x2b4>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8173 	beq.w	8003f18 <realTimeData+0x3f8>
			if (powerBarTransmit == 9) {
 8003c32:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <realTimeData+0x2b0>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b09      	cmp	r3, #9
 8003c38:	d10f      	bne.n	8003c5a <realTimeData+0x13a>
				if (power_90 <= power) {
 8003c3a:	4b67      	ldr	r3, [pc, #412]	; (8003dd8 <realTimeData+0x2b8>)
 8003c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c40:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003c44:	dd06      	ble.n	8003c54 <realTimeData+0x134>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power5, sizeof(power5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power5, sizeof(power5),
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	4963      	ldr	r1, [pc, #396]	; (8003ddc <realTimeData+0x2bc>)
 8003c4e:	485c      	ldr	r0, [pc, #368]	; (8003dc0 <realTimeData+0x2a0>)
 8003c50:	f003 ffff 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
				powerBarTransmit = 0;
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <realTimeData+0x2b0>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
			}
			if (powerBarTransmit == 8) {
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <realTimeData+0x2b0>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d113      	bne.n	8003c8a <realTimeData+0x16a>
				if (power_80 <= power && power < power_90) {
 8003c62:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <realTimeData+0x2b8>)
 8003c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c68:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	dd0c      	ble.n	8003c8a <realTimeData+0x16a>
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <realTimeData+0x2b8>)
 8003c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c76:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003c7a:	dc06      	bgt.n	8003c8a <realTimeData+0x16a>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power4, sizeof(power4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power4, sizeof(power4),
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	2208      	movs	r2, #8
 8003c82:	4957      	ldr	r1, [pc, #348]	; (8003de0 <realTimeData+0x2c0>)
 8003c84:	484e      	ldr	r0, [pc, #312]	; (8003dc0 <realTimeData+0x2a0>)
 8003c86:	f003 ffe4 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 7) {
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <realTimeData+0x2b0>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	d114      	bne.n	8003cbc <realTimeData+0x19c>
				if (power_70 <= power && power < power_80) {
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <realTimeData+0x2b8>)
 8003c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c98:	f240 2295 	movw	r2, #661	; 0x295
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	dd0d      	ble.n	8003cbc <realTimeData+0x19c>
 8003ca0:	4b4d      	ldr	r3, [pc, #308]	; (8003dd8 <realTimeData+0x2b8>)
 8003ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ca6:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003caa:	4293      	cmp	r3, r2
 8003cac:	dc06      	bgt.n	8003cbc <realTimeData+0x19c>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power3, sizeof(power3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power3, sizeof(power3),
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	494b      	ldr	r1, [pc, #300]	; (8003de4 <realTimeData+0x2c4>)
 8003cb6:	4842      	ldr	r0, [pc, #264]	; (8003dc0 <realTimeData+0x2a0>)
 8003cb8:	f003 ffcb 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 6) {
 8003cbc:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <realTimeData+0x2b0>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b06      	cmp	r3, #6
 8003cc2:	d113      	bne.n	8003cec <realTimeData+0x1cc>
				if (power_60 <= power && power < power_70) {
 8003cc4:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <realTimeData+0x2b8>)
 8003cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cca:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8003cce:	dd0d      	ble.n	8003cec <realTimeData+0x1cc>
 8003cd0:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <realTimeData+0x2b8>)
 8003cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd6:	f240 2295 	movw	r2, #661	; 0x295
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	dc06      	bgt.n	8003cec <realTimeData+0x1cc>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power2, sizeof(power2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power2, sizeof(power2),
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	4940      	ldr	r1, [pc, #256]	; (8003de8 <realTimeData+0x2c8>)
 8003ce6:	4836      	ldr	r0, [pc, #216]	; (8003dc0 <realTimeData+0x2a0>)
 8003ce8:	f003 ffb3 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 5) {
 8003cec:	4b38      	ldr	r3, [pc, #224]	; (8003dd0 <realTimeData+0x2b0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d112      	bne.n	8003d1a <realTimeData+0x1fa>
				if (eco_50 <= power && power < power_60) {
 8003cf4:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <realTimeData+0x2b8>)
 8003cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cfa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cfe:	dd0c      	ble.n	8003d1a <realTimeData+0x1fa>
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <realTimeData+0x2b8>)
 8003d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d06:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8003d0a:	dc06      	bgt.n	8003d1a <realTimeData+0x1fa>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power1, sizeof(power1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power1, sizeof(power1),
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d10:	2208      	movs	r2, #8
 8003d12:	4936      	ldr	r1, [pc, #216]	; (8003dec <realTimeData+0x2cc>)
 8003d14:	482a      	ldr	r0, [pc, #168]	; (8003dc0 <realTimeData+0x2a0>)
 8003d16:	f003 ff9c 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 4) {
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <realTimeData+0x2b0>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d112      	bne.n	8003d48 <realTimeData+0x228>
				if (eco_40 <= power && power < eco_50) {
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <realTimeData+0x2b8>)
 8003d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d2c:	dd0c      	ble.n	8003d48 <realTimeData+0x228>
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <realTimeData+0x2b8>)
 8003d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d38:	dc06      	bgt.n	8003d48 <realTimeData+0x228>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco5, sizeof(eco5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco5, sizeof(eco5),
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	2208      	movs	r2, #8
 8003d40:	492b      	ldr	r1, [pc, #172]	; (8003df0 <realTimeData+0x2d0>)
 8003d42:	481f      	ldr	r0, [pc, #124]	; (8003dc0 <realTimeData+0x2a0>)
 8003d44:	f003 ff85 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 3) {
 8003d48:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <realTimeData+0x2b0>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d112      	bne.n	8003d76 <realTimeData+0x256>
				if (eco_30 <= power && power < eco_40) {
 8003d50:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <realTimeData+0x2b8>)
 8003d52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d56:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003d5a:	dd0c      	ble.n	8003d76 <realTimeData+0x256>
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <realTimeData+0x2b8>)
 8003d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d62:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003d66:	dc06      	bgt.n	8003d76 <realTimeData+0x256>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco4, sizeof(eco4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco4, sizeof(eco4),
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4921      	ldr	r1, [pc, #132]	; (8003df4 <realTimeData+0x2d4>)
 8003d70:	4813      	ldr	r0, [pc, #76]	; (8003dc0 <realTimeData+0x2a0>)
 8003d72:	f003 ff6e 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 2) {
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <realTimeData+0x2b0>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d111      	bne.n	8003da2 <realTimeData+0x282>
				if (eco_20 <= power && power < eco_30) {
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <realTimeData+0x2b8>)
 8003d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d84:	2bc8      	cmp	r3, #200	; 0xc8
 8003d86:	dd0c      	ble.n	8003da2 <realTimeData+0x282>
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <realTimeData+0x2b8>)
 8003d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d8e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003d92:	dc06      	bgt.n	8003da2 <realTimeData+0x282>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco3, sizeof(eco3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco3, sizeof(eco3),
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	2208      	movs	r2, #8
 8003d9a:	4917      	ldr	r1, [pc, #92]	; (8003df8 <realTimeData+0x2d8>)
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <realTimeData+0x2a0>)
 8003d9e:	f003 ff58 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 1) {
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <realTimeData+0x2b0>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d135      	bne.n	8003e16 <realTimeData+0x2f6>
				if (eco_10 <= power && power < eco_20) {
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <realTimeData+0x2b8>)
 8003dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db0:	2b64      	cmp	r3, #100	; 0x64
 8003db2:	e023      	b.n	8003dfc <realTimeData+0x2dc>
 8003db4:	200004ad 	.word	0x200004ad
 8003db8:	20000410 	.word	0x20000410
 8003dbc:	2000044c 	.word	0x2000044c
 8003dc0:	200005a4 	.word	0x200005a4
 8003dc4:	20000496 	.word	0x20000496
 8003dc8:	20000418 	.word	0x20000418
 8003dcc:	20000424 	.word	0x20000424
 8003dd0:	200005a1 	.word	0x200005a1
 8003dd4:	20000458 	.word	0x20000458
 8003dd8:	2000045e 	.word	0x2000045e
 8003ddc:	2000037c 	.word	0x2000037c
 8003de0:	20000374 	.word	0x20000374
 8003de4:	2000036c 	.word	0x2000036c
 8003de8:	20000364 	.word	0x20000364
 8003dec:	2000035c 	.word	0x2000035c
 8003df0:	20000354 	.word	0x20000354
 8003df4:	2000034c 	.word	0x2000034c
 8003df8:	20000344 	.word	0x20000344
 8003dfc:	dd0b      	ble.n	8003e16 <realTimeData+0x2f6>
 8003dfe:	4ba6      	ldr	r3, [pc, #664]	; (8004098 <realTimeData+0x578>)
 8003e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e04:	2bc8      	cmp	r3, #200	; 0xc8
 8003e06:	dc06      	bgt.n	8003e16 <realTimeData+0x2f6>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco2, sizeof(eco2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco2, sizeof(eco2),
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	49a3      	ldr	r1, [pc, #652]	; (800409c <realTimeData+0x57c>)
 8003e10:	48a3      	ldr	r0, [pc, #652]	; (80040a0 <realTimeData+0x580>)
 8003e12:	f003 ff1e 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 0) {
 8003e16:	4ba3      	ldr	r3, [pc, #652]	; (80040a4 <realTimeData+0x584>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d110      	bne.n	8003e40 <realTimeData+0x320>
				if (0 <= power && power < eco_10) {
 8003e1e:	4b9e      	ldr	r3, [pc, #632]	; (8004098 <realTimeData+0x578>)
 8003e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	db0b      	blt.n	8003e40 <realTimeData+0x320>
 8003e28:	4b9b      	ldr	r3, [pc, #620]	; (8004098 <realTimeData+0x578>)
 8003e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	dc06      	bgt.n	8003e40 <realTimeData+0x320>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco1, sizeof(eco1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco1, sizeof(eco1),
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	2208      	movs	r2, #8
 8003e38:	499b      	ldr	r1, [pc, #620]	; (80040a8 <realTimeData+0x588>)
 8003e3a:	4899      	ldr	r0, [pc, #612]	; (80040a0 <realTimeData+0x580>)
 8003e3c:	f003 ff09 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 10) {
 8003e40:	4b98      	ldr	r3, [pc, #608]	; (80040a4 <realTimeData+0x584>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b0a      	cmp	r3, #10
 8003e46:	d111      	bne.n	8003e6c <realTimeData+0x34c>
				if (-1 >= power && power >= -50) {
 8003e48:	4b93      	ldr	r3, [pc, #588]	; (8004098 <realTimeData+0x578>)
 8003e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0c      	bge.n	8003e6c <realTimeData+0x34c>
 8003e52:	4b91      	ldr	r3, [pc, #580]	; (8004098 <realTimeData+0x578>)
 8003e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e58:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8003e5c:	db06      	blt.n	8003e6c <realTimeData+0x34c>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge1, sizeof(charge1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge1, sizeof(charge1),
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	2208      	movs	r2, #8
 8003e64:	4991      	ldr	r1, [pc, #580]	; (80040ac <realTimeData+0x58c>)
 8003e66:	488e      	ldr	r0, [pc, #568]	; (80040a0 <realTimeData+0x580>)
 8003e68:	f003 fef3 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 11) {
 8003e6c:	4b8d      	ldr	r3, [pc, #564]	; (80040a4 <realTimeData+0x584>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b0b      	cmp	r3, #11
 8003e72:	d112      	bne.n	8003e9a <realTimeData+0x37a>
				if (-51 >= power && power >= -101) {
 8003e74:	4b88      	ldr	r3, [pc, #544]	; (8004098 <realTimeData+0x578>)
 8003e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7a:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8003e7e:	da0c      	bge.n	8003e9a <realTimeData+0x37a>
 8003e80:	4b85      	ldr	r3, [pc, #532]	; (8004098 <realTimeData+0x578>)
 8003e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e86:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8003e8a:	db06      	blt.n	8003e9a <realTimeData+0x37a>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge2, sizeof(charge2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge2, sizeof(charge2),
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	2208      	movs	r2, #8
 8003e92:	4987      	ldr	r1, [pc, #540]	; (80040b0 <realTimeData+0x590>)
 8003e94:	4882      	ldr	r0, [pc, #520]	; (80040a0 <realTimeData+0x580>)
 8003e96:	f003 fedc 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 12) {
 8003e9a:	4b82      	ldr	r3, [pc, #520]	; (80040a4 <realTimeData+0x584>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d112      	bne.n	8003ec8 <realTimeData+0x3a8>
				if (-102 >= power && power >= -152) {
 8003ea2:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <realTimeData+0x578>)
 8003ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ea8:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8003eac:	da0c      	bge.n	8003ec8 <realTimeData+0x3a8>
 8003eae:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <realTimeData+0x578>)
 8003eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb4:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003eb8:	db06      	blt.n	8003ec8 <realTimeData+0x3a8>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge3, sizeof(charge3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge3, sizeof(charge3),
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	497c      	ldr	r1, [pc, #496]	; (80040b4 <realTimeData+0x594>)
 8003ec2:	4877      	ldr	r0, [pc, #476]	; (80040a0 <realTimeData+0x580>)
 8003ec4:	f003 fec5 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 13) {
 8003ec8:	4b76      	ldr	r3, [pc, #472]	; (80040a4 <realTimeData+0x584>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b0d      	cmp	r3, #13
 8003ece:	d112      	bne.n	8003ef6 <realTimeData+0x3d6>
				if (-153 >= power && power >= -203) {
 8003ed0:	4b71      	ldr	r3, [pc, #452]	; (8004098 <realTimeData+0x578>)
 8003ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed6:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003eda:	da0c      	bge.n	8003ef6 <realTimeData+0x3d6>
 8003edc:	4b6e      	ldr	r3, [pc, #440]	; (8004098 <realTimeData+0x578>)
 8003ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee2:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003ee6:	db06      	blt.n	8003ef6 <realTimeData+0x3d6>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge4, sizeof(charge4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge4, sizeof(charge4),
 8003ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8003eec:	2208      	movs	r2, #8
 8003eee:	4972      	ldr	r1, [pc, #456]	; (80040b8 <realTimeData+0x598>)
 8003ef0:	486b      	ldr	r0, [pc, #428]	; (80040a0 <realTimeData+0x580>)
 8003ef2:	f003 feae 	bl	8007c52 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 14) {
 8003ef6:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <realTimeData+0x584>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b0e      	cmp	r3, #14
 8003efc:	d10c      	bne.n	8003f18 <realTimeData+0x3f8>
				if (-204 >= power) {
 8003efe:	4b66      	ldr	r3, [pc, #408]	; (8004098 <realTimeData+0x578>)
 8003f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f04:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003f08:	da06      	bge.n	8003f18 <realTimeData+0x3f8>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge5, sizeof(charge5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge5, sizeof(charge5),
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	2208      	movs	r2, #8
 8003f10:	496a      	ldr	r1, [pc, #424]	; (80040bc <realTimeData+0x59c>)
 8003f12:	4863      	ldr	r0, [pc, #396]	; (80040a0 <realTimeData+0x580>)
 8003f14:	f003 fe9d 	bl	8007c52 <HAL_UART_Transmit>
#endif
				}
			}

		}
		realTime_counter = 0;
 8003f18:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <realTimeData+0x5a0>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
	}
	if (rpm_meter == 0) {
 8003f1e:	4b69      	ldr	r3, [pc, #420]	; (80040c4 <realTimeData+0x5a4>)
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <realTimeData+0x414>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, eco0, sizeof(eco0));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, eco0, sizeof(eco0), HAL_MAX_DELAY);
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	4966      	ldr	r1, [pc, #408]	; (80040c8 <realTimeData+0x5a8>)
 8003f2e:	485c      	ldr	r0, [pc, #368]	; (80040a0 <realTimeData+0x580>)
 8003f30:	f003 fe8f 	bl	8007c52 <HAL_UART_Transmit>
//		}

	///}

//Battery Bar
	if (soc_value <= 5) {
 8003f34:	4b65      	ldr	r3, [pc, #404]	; (80040cc <realTimeData+0x5ac>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d80d      	bhi.n	8003f58 <realTimeData+0x438>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat0, sizeof(bat0));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat0, sizeof(bat0), HAL_MAX_DELAY);
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f40:	2208      	movs	r2, #8
 8003f42:	4963      	ldr	r1, [pc, #396]	; (80040d0 <realTimeData+0x5b0>)
 8003f44:	4856      	ldr	r0, [pc, #344]	; (80040a0 <realTimeData+0x580>)
 8003f46:	f003 fe84 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	2208      	movs	r2, #8
 8003f50:	4960      	ldr	r1, [pc, #384]	; (80040d4 <realTimeData+0x5b4>)
 8003f52:	4853      	ldr	r0, [pc, #332]	; (80040a0 <realTimeData+0x580>)
 8003f54:	f003 fe7d 	bl	8007c52 <HAL_UART_Transmit>
#endif
	}
	if (6 <= soc_value && soc_value <= 10) {
 8003f58:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <realTimeData+0x5ac>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d911      	bls.n	8003f84 <realTimeData+0x464>
 8003f60:	4b5a      	ldr	r3, [pc, #360]	; (80040cc <realTimeData+0x5ac>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b0a      	cmp	r3, #10
 8003f66:	d80d      	bhi.n	8003f84 <realTimeData+0x464>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat5, sizeof(bat5));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat5, sizeof(bat5), HAL_MAX_DELAY);
 8003f68:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	495a      	ldr	r1, [pc, #360]	; (80040d8 <realTimeData+0x5b8>)
 8003f70:	484b      	ldr	r0, [pc, #300]	; (80040a0 <realTimeData+0x580>)
 8003f72:	f003 fe6e 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	4955      	ldr	r1, [pc, #340]	; (80040d4 <realTimeData+0x5b4>)
 8003f7e:	4848      	ldr	r0, [pc, #288]	; (80040a0 <realTimeData+0x580>)
 8003f80:	f003 fe67 	bl	8007c52 <HAL_UART_Transmit>
#endif
	}
	if (11 <= soc_value && soc_value <= 15) {
 8003f84:	4b51      	ldr	r3, [pc, #324]	; (80040cc <realTimeData+0x5ac>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	d911      	bls.n	8003fb0 <realTimeData+0x490>
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <realTimeData+0x5ac>)
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b0f      	cmp	r3, #15
 8003f92:	d80d      	bhi.n	8003fb0 <realTimeData+0x490>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat10, sizeof(bat10));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat10, sizeof(bat10), HAL_MAX_DELAY);
 8003f94:	f04f 33ff 	mov.w	r3, #4294967295
 8003f98:	2208      	movs	r2, #8
 8003f9a:	4950      	ldr	r1, [pc, #320]	; (80040dc <realTimeData+0x5bc>)
 8003f9c:	4840      	ldr	r0, [pc, #256]	; (80040a0 <realTimeData+0x580>)
 8003f9e:	f003 fe58 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	494a      	ldr	r1, [pc, #296]	; (80040d4 <realTimeData+0x5b4>)
 8003faa:	483d      	ldr	r0, [pc, #244]	; (80040a0 <realTimeData+0x580>)
 8003fac:	f003 fe51 	bl	8007c52 <HAL_UART_Transmit>
#endif
	}
	if (16 <= soc_value && soc_value <= 20) {
 8003fb0:	4b46      	ldr	r3, [pc, #280]	; (80040cc <realTimeData+0x5ac>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b0f      	cmp	r3, #15
 8003fb6:	d911      	bls.n	8003fdc <realTimeData+0x4bc>
 8003fb8:	4b44      	ldr	r3, [pc, #272]	; (80040cc <realTimeData+0x5ac>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b14      	cmp	r3, #20
 8003fbe:	d80d      	bhi.n	8003fdc <realTimeData+0x4bc>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat15, sizeof(bat15));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat15, sizeof(bat15), HAL_MAX_DELAY);
 8003fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	4946      	ldr	r1, [pc, #280]	; (80040e0 <realTimeData+0x5c0>)
 8003fc8:	4835      	ldr	r0, [pc, #212]	; (80040a0 <realTimeData+0x580>)
 8003fca:	f003 fe42 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	493f      	ldr	r1, [pc, #252]	; (80040d4 <realTimeData+0x5b4>)
 8003fd6:	4832      	ldr	r0, [pc, #200]	; (80040a0 <realTimeData+0x580>)
 8003fd8:	f003 fe3b 	bl	8007c52 <HAL_UART_Transmit>
#endif
	}
	if (21 <= soc_value && soc_value <= 25) {
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <realTimeData+0x5ac>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b14      	cmp	r3, #20
 8003fe2:	d911      	bls.n	8004008 <realTimeData+0x4e8>
 8003fe4:	4b39      	ldr	r3, [pc, #228]	; (80040cc <realTimeData+0x5ac>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b19      	cmp	r3, #25
 8003fea:	d80d      	bhi.n	8004008 <realTimeData+0x4e8>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat20, sizeof(bat20));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat20, sizeof(bat20), HAL_MAX_DELAY);
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	493c      	ldr	r1, [pc, #240]	; (80040e4 <realTimeData+0x5c4>)
 8003ff4:	482a      	ldr	r0, [pc, #168]	; (80040a0 <realTimeData+0x580>)
 8003ff6:	f003 fe2c 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	2208      	movs	r2, #8
 8004000:	4939      	ldr	r1, [pc, #228]	; (80040e8 <realTimeData+0x5c8>)
 8004002:	4827      	ldr	r0, [pc, #156]	; (80040a0 <realTimeData+0x580>)
 8004004:	f003 fe25 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (26 <= soc_value && soc_value <= 30) {
 8004008:	4b30      	ldr	r3, [pc, #192]	; (80040cc <realTimeData+0x5ac>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b19      	cmp	r3, #25
 800400e:	d911      	bls.n	8004034 <realTimeData+0x514>
 8004010:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <realTimeData+0x5ac>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b1e      	cmp	r3, #30
 8004016:	d80d      	bhi.n	8004034 <realTimeData+0x514>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat25, sizeof(bat25));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat25, sizeof(bat25), HAL_MAX_DELAY);
 8004018:	f04f 33ff 	mov.w	r3, #4294967295
 800401c:	2208      	movs	r2, #8
 800401e:	4933      	ldr	r1, [pc, #204]	; (80040ec <realTimeData+0x5cc>)
 8004020:	481f      	ldr	r0, [pc, #124]	; (80040a0 <realTimeData+0x580>)
 8004022:	f003 fe16 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	2208      	movs	r2, #8
 800402c:	492e      	ldr	r1, [pc, #184]	; (80040e8 <realTimeData+0x5c8>)
 800402e:	481c      	ldr	r0, [pc, #112]	; (80040a0 <realTimeData+0x580>)
 8004030:	f003 fe0f 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (31 <= soc_value && soc_value <= 35) {
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <realTimeData+0x5ac>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b1e      	cmp	r3, #30
 800403a:	d911      	bls.n	8004060 <realTimeData+0x540>
 800403c:	4b23      	ldr	r3, [pc, #140]	; (80040cc <realTimeData+0x5ac>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b23      	cmp	r3, #35	; 0x23
 8004042:	d80d      	bhi.n	8004060 <realTimeData+0x540>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat30, sizeof(bat30));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat30, sizeof(bat30), HAL_MAX_DELAY);
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
 8004048:	2208      	movs	r2, #8
 800404a:	4929      	ldr	r1, [pc, #164]	; (80040f0 <realTimeData+0x5d0>)
 800404c:	4814      	ldr	r0, [pc, #80]	; (80040a0 <realTimeData+0x580>)
 800404e:	f003 fe00 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	2208      	movs	r2, #8
 8004058:	4923      	ldr	r1, [pc, #140]	; (80040e8 <realTimeData+0x5c8>)
 800405a:	4811      	ldr	r0, [pc, #68]	; (80040a0 <realTimeData+0x580>)
 800405c:	f003 fdf9 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (36 <= soc_value && soc_value <= 40) {
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <realTimeData+0x5ac>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b23      	cmp	r3, #35	; 0x23
 8004066:	d911      	bls.n	800408c <realTimeData+0x56c>
 8004068:	4b18      	ldr	r3, [pc, #96]	; (80040cc <realTimeData+0x5ac>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b28      	cmp	r3, #40	; 0x28
 800406e:	d80d      	bhi.n	800408c <realTimeData+0x56c>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat35, sizeof(bat35));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat35, sizeof(bat35), HAL_MAX_DELAY);
 8004070:	f04f 33ff 	mov.w	r3, #4294967295
 8004074:	2208      	movs	r2, #8
 8004076:	491f      	ldr	r1, [pc, #124]	; (80040f4 <realTimeData+0x5d4>)
 8004078:	4809      	ldr	r0, [pc, #36]	; (80040a0 <realTimeData+0x580>)
 800407a:	f003 fdea 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	2208      	movs	r2, #8
 8004084:	4918      	ldr	r1, [pc, #96]	; (80040e8 <realTimeData+0x5c8>)
 8004086:	4806      	ldr	r0, [pc, #24]	; (80040a0 <realTimeData+0x580>)
 8004088:	f003 fde3 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (41 <= soc_value && soc_value <= 45) {
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <realTimeData+0x5ac>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b28      	cmp	r3, #40	; 0x28
 8004092:	d943      	bls.n	800411c <realTimeData+0x5fc>
 8004094:	e030      	b.n	80040f8 <realTimeData+0x5d8>
 8004096:	bf00      	nop
 8004098:	2000045e 	.word	0x2000045e
 800409c:	2000033c 	.word	0x2000033c
 80040a0:	200005a4 	.word	0x200005a4
 80040a4:	200005a1 	.word	0x200005a1
 80040a8:	20000334 	.word	0x20000334
 80040ac:	20000384 	.word	0x20000384
 80040b0:	2000038c 	.word	0x2000038c
 80040b4:	20000394 	.word	0x20000394
 80040b8:	2000039c 	.word	0x2000039c
 80040bc:	200003a4 	.word	0x200003a4
 80040c0:	200004ad 	.word	0x200004ad
 80040c4:	20000458 	.word	0x20000458
 80040c8:	2000032c 	.word	0x2000032c
 80040cc:	20000450 	.word	0x20000450
 80040d0:	2000028c 	.word	0x2000028c
 80040d4:	20000214 	.word	0x20000214
 80040d8:	20000294 	.word	0x20000294
 80040dc:	2000029c 	.word	0x2000029c
 80040e0:	200002a4 	.word	0x200002a4
 80040e4:	200002ac 	.word	0x200002ac
 80040e8:	2000020c 	.word	0x2000020c
 80040ec:	200002b4 	.word	0x200002b4
 80040f0:	200002bc 	.word	0x200002bc
 80040f4:	200002c4 	.word	0x200002c4
 80040f8:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <realTimeData+0x808>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b2d      	cmp	r3, #45	; 0x2d
 80040fe:	d80d      	bhi.n	800411c <realTimeData+0x5fc>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat40, sizeof(bat40));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat40, sizeof(bat40), HAL_MAX_DELAY);
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
 8004104:	2208      	movs	r2, #8
 8004106:	4989      	ldr	r1, [pc, #548]	; (800432c <realTimeData+0x80c>)
 8004108:	4889      	ldr	r0, [pc, #548]	; (8004330 <realTimeData+0x810>)
 800410a:	f003 fda2 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	2208      	movs	r2, #8
 8004114:	4987      	ldr	r1, [pc, #540]	; (8004334 <realTimeData+0x814>)
 8004116:	4886      	ldr	r0, [pc, #536]	; (8004330 <realTimeData+0x810>)
 8004118:	f003 fd9b 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (46 <= soc_value && soc_value <= 50) {
 800411c:	4b82      	ldr	r3, [pc, #520]	; (8004328 <realTimeData+0x808>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b2d      	cmp	r3, #45	; 0x2d
 8004122:	d911      	bls.n	8004148 <realTimeData+0x628>
 8004124:	4b80      	ldr	r3, [pc, #512]	; (8004328 <realTimeData+0x808>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b32      	cmp	r3, #50	; 0x32
 800412a:	d80d      	bhi.n	8004148 <realTimeData+0x628>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat45, sizeof(bat45));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat45, sizeof(bat45), HAL_MAX_DELAY);
 800412c:	f04f 33ff 	mov.w	r3, #4294967295
 8004130:	2208      	movs	r2, #8
 8004132:	4981      	ldr	r1, [pc, #516]	; (8004338 <realTimeData+0x818>)
 8004134:	487e      	ldr	r0, [pc, #504]	; (8004330 <realTimeData+0x810>)
 8004136:	f003 fd8c 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	2208      	movs	r2, #8
 8004140:	497c      	ldr	r1, [pc, #496]	; (8004334 <realTimeData+0x814>)
 8004142:	487b      	ldr	r0, [pc, #492]	; (8004330 <realTimeData+0x810>)
 8004144:	f003 fd85 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (51 <= soc_value && soc_value <= 55) {
 8004148:	4b77      	ldr	r3, [pc, #476]	; (8004328 <realTimeData+0x808>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b32      	cmp	r3, #50	; 0x32
 800414e:	d911      	bls.n	8004174 <realTimeData+0x654>
 8004150:	4b75      	ldr	r3, [pc, #468]	; (8004328 <realTimeData+0x808>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b37      	cmp	r3, #55	; 0x37
 8004156:	d80d      	bhi.n	8004174 <realTimeData+0x654>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat50, sizeof(bat50));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat50, sizeof(bat50), HAL_MAX_DELAY);
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
 800415c:	2208      	movs	r2, #8
 800415e:	4977      	ldr	r1, [pc, #476]	; (800433c <realTimeData+0x81c>)
 8004160:	4873      	ldr	r0, [pc, #460]	; (8004330 <realTimeData+0x810>)
 8004162:	f003 fd76 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	2208      	movs	r2, #8
 800416c:	4971      	ldr	r1, [pc, #452]	; (8004334 <realTimeData+0x814>)
 800416e:	4870      	ldr	r0, [pc, #448]	; (8004330 <realTimeData+0x810>)
 8004170:	f003 fd6f 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (56 <= soc_value && soc_value <= 60) {
 8004174:	4b6c      	ldr	r3, [pc, #432]	; (8004328 <realTimeData+0x808>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b37      	cmp	r3, #55	; 0x37
 800417a:	d911      	bls.n	80041a0 <realTimeData+0x680>
 800417c:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <realTimeData+0x808>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b3c      	cmp	r3, #60	; 0x3c
 8004182:	d80d      	bhi.n	80041a0 <realTimeData+0x680>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat55, sizeof(bat55));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat55, sizeof(bat55), HAL_MAX_DELAY);
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
 8004188:	2208      	movs	r2, #8
 800418a:	496d      	ldr	r1, [pc, #436]	; (8004340 <realTimeData+0x820>)
 800418c:	4868      	ldr	r0, [pc, #416]	; (8004330 <realTimeData+0x810>)
 800418e:	f003 fd60 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	2208      	movs	r2, #8
 8004198:	4966      	ldr	r1, [pc, #408]	; (8004334 <realTimeData+0x814>)
 800419a:	4865      	ldr	r0, [pc, #404]	; (8004330 <realTimeData+0x810>)
 800419c:	f003 fd59 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (61 <= soc_value && soc_value <= 65) {
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <realTimeData+0x808>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b3c      	cmp	r3, #60	; 0x3c
 80041a6:	d911      	bls.n	80041cc <realTimeData+0x6ac>
 80041a8:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <realTimeData+0x808>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b41      	cmp	r3, #65	; 0x41
 80041ae:	d80d      	bhi.n	80041cc <realTimeData+0x6ac>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat60, sizeof(bat60));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat60, sizeof(bat60), HAL_MAX_DELAY);
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	2208      	movs	r2, #8
 80041b6:	4963      	ldr	r1, [pc, #396]	; (8004344 <realTimeData+0x824>)
 80041b8:	485d      	ldr	r0, [pc, #372]	; (8004330 <realTimeData+0x810>)
 80041ba:	f003 fd4a 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	2208      	movs	r2, #8
 80041c4:	495b      	ldr	r1, [pc, #364]	; (8004334 <realTimeData+0x814>)
 80041c6:	485a      	ldr	r0, [pc, #360]	; (8004330 <realTimeData+0x810>)
 80041c8:	f003 fd43 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (66 <= soc_value && soc_value <= 70) {
 80041cc:	4b56      	ldr	r3, [pc, #344]	; (8004328 <realTimeData+0x808>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b41      	cmp	r3, #65	; 0x41
 80041d2:	d911      	bls.n	80041f8 <realTimeData+0x6d8>
 80041d4:	4b54      	ldr	r3, [pc, #336]	; (8004328 <realTimeData+0x808>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b46      	cmp	r3, #70	; 0x46
 80041da:	d80d      	bhi.n	80041f8 <realTimeData+0x6d8>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat65, sizeof(bat65));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat65, sizeof(bat65), HAL_MAX_DELAY);
 80041dc:	f04f 33ff 	mov.w	r3, #4294967295
 80041e0:	2208      	movs	r2, #8
 80041e2:	4959      	ldr	r1, [pc, #356]	; (8004348 <realTimeData+0x828>)
 80041e4:	4852      	ldr	r0, [pc, #328]	; (8004330 <realTimeData+0x810>)
 80041e6:	f003 fd34 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	2208      	movs	r2, #8
 80041f0:	4950      	ldr	r1, [pc, #320]	; (8004334 <realTimeData+0x814>)
 80041f2:	484f      	ldr	r0, [pc, #316]	; (8004330 <realTimeData+0x810>)
 80041f4:	f003 fd2d 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (71 <= soc_value && soc_value <= 75) {
 80041f8:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <realTimeData+0x808>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b46      	cmp	r3, #70	; 0x46
 80041fe:	d911      	bls.n	8004224 <realTimeData+0x704>
 8004200:	4b49      	ldr	r3, [pc, #292]	; (8004328 <realTimeData+0x808>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b4b      	cmp	r3, #75	; 0x4b
 8004206:	d80d      	bhi.n	8004224 <realTimeData+0x704>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat70, sizeof(bat70));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat70, sizeof(bat70), HAL_MAX_DELAY);
 8004208:	f04f 33ff 	mov.w	r3, #4294967295
 800420c:	2208      	movs	r2, #8
 800420e:	494f      	ldr	r1, [pc, #316]	; (800434c <realTimeData+0x82c>)
 8004210:	4847      	ldr	r0, [pc, #284]	; (8004330 <realTimeData+0x810>)
 8004212:	f003 fd1e 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	2208      	movs	r2, #8
 800421c:	4945      	ldr	r1, [pc, #276]	; (8004334 <realTimeData+0x814>)
 800421e:	4844      	ldr	r0, [pc, #272]	; (8004330 <realTimeData+0x810>)
 8004220:	f003 fd17 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (76 <= soc_value && soc_value <= 80) {
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <realTimeData+0x808>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b4b      	cmp	r3, #75	; 0x4b
 800422a:	d911      	bls.n	8004250 <realTimeData+0x730>
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <realTimeData+0x808>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d80d      	bhi.n	8004250 <realTimeData+0x730>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat75, sizeof(bat75));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat75, sizeof(bat75), HAL_MAX_DELAY);
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	2208      	movs	r2, #8
 800423a:	4945      	ldr	r1, [pc, #276]	; (8004350 <realTimeData+0x830>)
 800423c:	483c      	ldr	r0, [pc, #240]	; (8004330 <realTimeData+0x810>)
 800423e:	f003 fd08 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8004242:	f04f 33ff 	mov.w	r3, #4294967295
 8004246:	2208      	movs	r2, #8
 8004248:	493a      	ldr	r1, [pc, #232]	; (8004334 <realTimeData+0x814>)
 800424a:	4839      	ldr	r0, [pc, #228]	; (8004330 <realTimeData+0x810>)
 800424c:	f003 fd01 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (81 <= soc_value && soc_value <= 85) {
 8004250:	4b35      	ldr	r3, [pc, #212]	; (8004328 <realTimeData+0x808>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b50      	cmp	r3, #80	; 0x50
 8004256:	d911      	bls.n	800427c <realTimeData+0x75c>
 8004258:	4b33      	ldr	r3, [pc, #204]	; (8004328 <realTimeData+0x808>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b55      	cmp	r3, #85	; 0x55
 800425e:	d80d      	bhi.n	800427c <realTimeData+0x75c>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat80, sizeof(bat80));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat80, sizeof(bat80), HAL_MAX_DELAY);
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	2208      	movs	r2, #8
 8004266:	493b      	ldr	r1, [pc, #236]	; (8004354 <realTimeData+0x834>)
 8004268:	4831      	ldr	r0, [pc, #196]	; (8004330 <realTimeData+0x810>)
 800426a:	f003 fcf2 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	2208      	movs	r2, #8
 8004274:	492f      	ldr	r1, [pc, #188]	; (8004334 <realTimeData+0x814>)
 8004276:	482e      	ldr	r0, [pc, #184]	; (8004330 <realTimeData+0x810>)
 8004278:	f003 fceb 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (86 <= soc_value && soc_value <= 90) {
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <realTimeData+0x808>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b55      	cmp	r3, #85	; 0x55
 8004282:	d911      	bls.n	80042a8 <realTimeData+0x788>
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <realTimeData+0x808>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b5a      	cmp	r3, #90	; 0x5a
 800428a:	d80d      	bhi.n	80042a8 <realTimeData+0x788>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat85, sizeof(bat85));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat85, sizeof(bat85), HAL_MAX_DELAY);
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	2208      	movs	r2, #8
 8004292:	4931      	ldr	r1, [pc, #196]	; (8004358 <realTimeData+0x838>)
 8004294:	4826      	ldr	r0, [pc, #152]	; (8004330 <realTimeData+0x810>)
 8004296:	f003 fcdc 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	2208      	movs	r2, #8
 80042a0:	4924      	ldr	r1, [pc, #144]	; (8004334 <realTimeData+0x814>)
 80042a2:	4823      	ldr	r0, [pc, #140]	; (8004330 <realTimeData+0x810>)
 80042a4:	f003 fcd5 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (91 <= soc_value && soc_value <= 95) {
 80042a8:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <realTimeData+0x808>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b5a      	cmp	r3, #90	; 0x5a
 80042ae:	d911      	bls.n	80042d4 <realTimeData+0x7b4>
 80042b0:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <realTimeData+0x808>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b5f      	cmp	r3, #95	; 0x5f
 80042b6:	d80d      	bhi.n	80042d4 <realTimeData+0x7b4>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	2208      	movs	r2, #8
 80042be:	4927      	ldr	r1, [pc, #156]	; (800435c <realTimeData+0x83c>)
 80042c0:	481b      	ldr	r0, [pc, #108]	; (8004330 <realTimeData+0x810>)
 80042c2:	f003 fcc6 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	2208      	movs	r2, #8
 80042cc:	4919      	ldr	r1, [pc, #100]	; (8004334 <realTimeData+0x814>)
 80042ce:	4818      	ldr	r0, [pc, #96]	; (8004330 <realTimeData+0x810>)
 80042d0:	f003 fcbf 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (96 <= soc_value && soc_value <= 99) {
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <realTimeData+0x808>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b5f      	cmp	r3, #95	; 0x5f
 80042da:	d911      	bls.n	8004300 <realTimeData+0x7e0>
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <realTimeData+0x808>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b63      	cmp	r3, #99	; 0x63
 80042e2:	d80d      	bhi.n	8004300 <realTimeData+0x7e0>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	2208      	movs	r2, #8
 80042ea:	491c      	ldr	r1, [pc, #112]	; (800435c <realTimeData+0x83c>)
 80042ec:	4810      	ldr	r0, [pc, #64]	; (8004330 <realTimeData+0x810>)
 80042ee:	f003 fcb0 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	2208      	movs	r2, #8
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <realTimeData+0x814>)
 80042fa:	480d      	ldr	r0, [pc, #52]	; (8004330 <realTimeData+0x810>)
 80042fc:	f003 fca9 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (100 == soc_value) {
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <realTimeData+0x808>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b64      	cmp	r3, #100	; 0x64
 8004306:	d10d      	bne.n	8004324 <realTimeData+0x804>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat100, sizeof(bat100));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat100, sizeof(bat100), HAL_MAX_DELAY);
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	2208      	movs	r2, #8
 800430e:	4914      	ldr	r1, [pc, #80]	; (8004360 <realTimeData+0x840>)
 8004310:	4807      	ldr	r0, [pc, #28]	; (8004330 <realTimeData+0x810>)
 8004312:	f003 fc9e 	bl	8007c52 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	2208      	movs	r2, #8
 800431c:	4905      	ldr	r1, [pc, #20]	; (8004334 <realTimeData+0x814>)
 800431e:	4804      	ldr	r0, [pc, #16]	; (8004330 <realTimeData+0x810>)
 8004320:	f003 fc97 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}

}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000450 	.word	0x20000450
 800432c:	200002cc 	.word	0x200002cc
 8004330:	200005a4 	.word	0x200005a4
 8004334:	20000204 	.word	0x20000204
 8004338:	200002d4 	.word	0x200002d4
 800433c:	200002dc 	.word	0x200002dc
 8004340:	200002e4 	.word	0x200002e4
 8004344:	200002ec 	.word	0x200002ec
 8004348:	200002f4 	.word	0x200002f4
 800434c:	200002fc 	.word	0x200002fc
 8004350:	20000304 	.word	0x20000304
 8004354:	2000030c 	.word	0x2000030c
 8004358:	20000314 	.word	0x20000314
 800435c:	2000031c 	.word	0x2000031c
 8004360:	20000324 	.word	0x20000324

08004364 <oneTimeData>:

void oneTimeData(void) {
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0

	oneTime_counter++;
 8004368:	4b08      	ldr	r3, [pc, #32]	; (800438c <oneTimeData+0x28>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <oneTimeData+0x28>)
 8004372:	701a      	strb	r2, [r3, #0]

	if (readytodrive == 0) {
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <oneTimeData+0x2c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <oneTimeData+0x38>
		DriveUnit_OFF_Icon;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
 8004380:	2208      	movs	r2, #8
 8004382:	4904      	ldr	r1, [pc, #16]	; (8004394 <oneTimeData+0x30>)
 8004384:	4804      	ldr	r0, [pc, #16]	; (8004398 <oneTimeData+0x34>)
 8004386:	f003 fc64 	bl	8007c52 <HAL_UART_Transmit>
 800438a:	e00e      	b.n	80043aa <oneTimeData+0x46>
 800438c:	200004ae 	.word	0x200004ae
 8004390:	20000463 	.word	0x20000463
 8004394:	200001f4 	.word	0x200001f4
 8004398:	200005a4 	.word	0x200005a4
	} else {
		DriveUnit_ON_Icon;
 800439c:	f04f 33ff 	mov.w	r3, #4294967295
 80043a0:	2208      	movs	r2, #8
 80043a2:	49a6      	ldr	r1, [pc, #664]	; (800463c <oneTimeData+0x2d8>)
 80043a4:	48a6      	ldr	r0, [pc, #664]	; (8004640 <oneTimeData+0x2dc>)
 80043a6:	f003 fc54 	bl	8007c52 <HAL_UART_Transmit>
	}
//RPM
	if (oneTime_counter == 0) {
 80043aa:	4ba6      	ldr	r3, [pc, #664]	; (8004644 <oneTimeData+0x2e0>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d118      	bne.n	80043e4 <oneTimeData+0x80>
		strDATA[4] = 0x12;
 80043b2:	4ba5      	ldr	r3, [pc, #660]	; (8004648 <oneTimeData+0x2e4>)
 80043b4:	2212      	movs	r2, #18
 80043b6:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 80043b8:	4ba3      	ldr	r3, [pc, #652]	; (8004648 <oneTimeData+0x2e4>)
 80043ba:	2250      	movs	r2, #80	; 0x50
 80043bc:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (rpm_meter & 0xFF);
 80043be:	4ba3      	ldr	r3, [pc, #652]	; (800464c <oneTimeData+0x2e8>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4ba0      	ldr	r3, [pc, #640]	; (8004648 <oneTimeData+0x2e4>)
 80043c6:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (rpm_meter >> 8);
 80043c8:	4ba0      	ldr	r3, [pc, #640]	; (800464c <oneTimeData+0x2e8>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	0a1b      	lsrs	r3, r3, #8
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4b9d      	ldr	r3, [pc, #628]	; (8004648 <oneTimeData+0x2e4>)
 80043d4:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295
 80043da:	2208      	movs	r2, #8
 80043dc:	499a      	ldr	r1, [pc, #616]	; (8004648 <oneTimeData+0x2e4>)
 80043de:	4898      	ldr	r0, [pc, #608]	; (8004640 <oneTimeData+0x2dc>)
 80043e0:	f003 fc37 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

//AVG SPEED
	if (oneTime_counter == 1) {
 80043e4:	4b97      	ldr	r3, [pc, #604]	; (8004644 <oneTimeData+0x2e0>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d118      	bne.n	800441e <oneTimeData+0xba>
		strDATA[4] = 0x11;
 80043ec:	4b96      	ldr	r3, [pc, #600]	; (8004648 <oneTimeData+0x2e4>)
 80043ee:	2211      	movs	r2, #17
 80043f0:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x52;
 80043f2:	4b95      	ldr	r3, [pc, #596]	; (8004648 <oneTimeData+0x2e4>)
 80043f4:	2252      	movs	r2, #82	; 0x52
 80043f6:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.tripAvgSpeed & 0xFF);
 80043f8:	4b95      	ldr	r3, [pc, #596]	; (8004650 <oneTimeData+0x2ec>)
 80043fa:	891b      	ldrh	r3, [r3, #8]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b92      	ldr	r3, [pc, #584]	; (8004648 <oneTimeData+0x2e4>)
 8004400:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.tripAvgSpeed >> 8);
 8004402:	4b93      	ldr	r3, [pc, #588]	; (8004650 <oneTimeData+0x2ec>)
 8004404:	891b      	ldrh	r3, [r3, #8]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	b29b      	uxth	r3, r3
 800440a:	b2da      	uxtb	r2, r3
 800440c:	4b8e      	ldr	r3, [pc, #568]	; (8004648 <oneTimeData+0x2e4>)
 800440e:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	2208      	movs	r2, #8
 8004416:	498c      	ldr	r1, [pc, #560]	; (8004648 <oneTimeData+0x2e4>)
 8004418:	4889      	ldr	r0, [pc, #548]	; (8004640 <oneTimeData+0x2dc>)
 800441a:	f003 fc1a 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

	//Trip Economy -------VP
	if (oneTime_counter == 2) {
 800441e:	4b89      	ldr	r3, [pc, #548]	; (8004644 <oneTimeData+0x2e0>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d118      	bne.n	8004458 <oneTimeData+0xf4>
		strDATA[4] = 0x11;
 8004426:	4b88      	ldr	r3, [pc, #544]	; (8004648 <oneTimeData+0x2e4>)
 8004428:	2211      	movs	r2, #17
 800442a:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 800442c:	4b86      	ldr	r3, [pc, #536]	; (8004648 <oneTimeData+0x2e4>)
 800442e:	2250      	movs	r2, #80	; 0x50
 8004430:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Economy & 0xFF);
 8004432:	4b87      	ldr	r3, [pc, #540]	; (8004650 <oneTimeData+0x2ec>)
 8004434:	895b      	ldrh	r3, [r3, #10]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b83      	ldr	r3, [pc, #524]	; (8004648 <oneTimeData+0x2e4>)
 800443a:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Economy >> 8);
 800443c:	4b84      	ldr	r3, [pc, #528]	; (8004650 <oneTimeData+0x2ec>)
 800443e:	895b      	ldrh	r3, [r3, #10]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	b29b      	uxth	r3, r3
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4b80      	ldr	r3, [pc, #512]	; (8004648 <oneTimeData+0x2e4>)
 8004448:	719a      	strb	r2, [r3, #6]
//	strDATA[7] = (distance.trip_Economy >> 16);
//	strDATA[6] = (distance.trip_Economy >> 24);
		Transmit_strDATA
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	2208      	movs	r2, #8
 8004450:	497d      	ldr	r1, [pc, #500]	; (8004648 <oneTimeData+0x2e4>)
 8004452:	487b      	ldr	r0, [pc, #492]	; (8004640 <oneTimeData+0x2dc>)
 8004454:	f003 fbfd 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

	//Trip Power----------VP
	if (oneTime_counter == 3) {
 8004458:	4b7a      	ldr	r3, [pc, #488]	; (8004644 <oneTimeData+0x2e0>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d118      	bne.n	8004492 <oneTimeData+0x12e>
		strDATA[4] = 0x11;
 8004460:	4b79      	ldr	r3, [pc, #484]	; (8004648 <oneTimeData+0x2e4>)
 8004462:	2211      	movs	r2, #17
 8004464:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x54;
 8004466:	4b78      	ldr	r3, [pc, #480]	; (8004648 <oneTimeData+0x2e4>)
 8004468:	2254      	movs	r2, #84	; 0x54
 800446a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Power & 0xFF);
 800446c:	4b78      	ldr	r3, [pc, #480]	; (8004650 <oneTimeData+0x2ec>)
 800446e:	899b      	ldrh	r3, [r3, #12]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b75      	ldr	r3, [pc, #468]	; (8004648 <oneTimeData+0x2e4>)
 8004474:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Power >> 8);
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <oneTimeData+0x2ec>)
 8004478:	899b      	ldrh	r3, [r3, #12]
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	b29b      	uxth	r3, r3
 800447e:	b2da      	uxtb	r2, r3
 8004480:	4b71      	ldr	r3, [pc, #452]	; (8004648 <oneTimeData+0x2e4>)
 8004482:	719a      	strb	r2, [r3, #6]
//	strDATA[7] = (distance.trip_Power >> 16);
//	strDATA[6] = (distance.trip_Power >> 24);
		Transmit_strDATA
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	2208      	movs	r2, #8
 800448a:	496f      	ldr	r1, [pc, #444]	; (8004648 <oneTimeData+0x2e4>)
 800448c:	486c      	ldr	r0, [pc, #432]	; (8004640 <oneTimeData+0x2dc>)
 800448e:	f003 fbe0 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

	//After charge trip
	if (oneTime_counter == 4) {
 8004492:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <oneTimeData+0x2e0>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d118      	bne.n	80044cc <oneTimeData+0x168>
		strDATA[4] = 0x11;
 800449a:	4b6b      	ldr	r3, [pc, #428]	; (8004648 <oneTimeData+0x2e4>)
 800449c:	2211      	movs	r2, #17
 800449e:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x62;
 80044a0:	4b69      	ldr	r3, [pc, #420]	; (8004648 <oneTimeData+0x2e4>)
 80044a2:	2262      	movs	r2, #98	; 0x62
 80044a4:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.trip & 0xFF);
 80044a6:	4b6b      	ldr	r3, [pc, #428]	; (8004654 <oneTimeData+0x2f0>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	4b66      	ldr	r3, [pc, #408]	; (8004648 <oneTimeData+0x2e4>)
 80044ae:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.trip >> 8);
 80044b0:	4b68      	ldr	r3, [pc, #416]	; (8004654 <oneTimeData+0x2f0>)
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4b63      	ldr	r3, [pc, #396]	; (8004648 <oneTimeData+0x2e4>)
 80044bc:	719a      	strb	r2, [r3, #6]
//	strDATA[7] = (afterChargeData.trip >> 16);
//	strDATA[6] = (afterChargeData.trip >> 24);
		Transmit_strDATA
 80044be:	f04f 33ff 	mov.w	r3, #4294967295
 80044c2:	2208      	movs	r2, #8
 80044c4:	4960      	ldr	r1, [pc, #384]	; (8004648 <oneTimeData+0x2e4>)
 80044c6:	485e      	ldr	r0, [pc, #376]	; (8004640 <oneTimeData+0x2dc>)
 80044c8:	f003 fbc3 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

	// After charge average speed
	if (oneTime_counter == 5) {
 80044cc:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <oneTimeData+0x2e0>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d118      	bne.n	8004506 <oneTimeData+0x1a2>
		strDATA[4] = 0x11;
 80044d4:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <oneTimeData+0x2e4>)
 80044d6:	2211      	movs	r2, #17
 80044d8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x58;
 80044da:	4b5b      	ldr	r3, [pc, #364]	; (8004648 <oneTimeData+0x2e4>)
 80044dc:	2258      	movs	r2, #88	; 0x58
 80044de:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.avarage_Speed & 0xFF);
 80044e0:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <oneTimeData+0x2f0>)
 80044e2:	885b      	ldrh	r3, [r3, #2]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	4b58      	ldr	r3, [pc, #352]	; (8004648 <oneTimeData+0x2e4>)
 80044e8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.avarage_Speed >> 8);
 80044ea:	4b5a      	ldr	r3, [pc, #360]	; (8004654 <oneTimeData+0x2f0>)
 80044ec:	885b      	ldrh	r3, [r3, #2]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	4b54      	ldr	r3, [pc, #336]	; (8004648 <oneTimeData+0x2e4>)
 80044f6:	719a      	strb	r2, [r3, #6]
//	strDATA[7] = (afterChargeData.avarage_Speed >> 16);
//	strDATA[6] = (afterChargeData.avarage_Speed >> 24);
		Transmit_strDATA
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	2208      	movs	r2, #8
 80044fe:	4952      	ldr	r1, [pc, #328]	; (8004648 <oneTimeData+0x2e4>)
 8004500:	484f      	ldr	r0, [pc, #316]	; (8004640 <oneTimeData+0x2dc>)
 8004502:	f003 fba6 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

	// After Charge Economy
	if (oneTime_counter == 6) {
 8004506:	4b4f      	ldr	r3, [pc, #316]	; (8004644 <oneTimeData+0x2e0>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d118      	bne.n	8004540 <oneTimeData+0x1dc>
		strDATA[4] = 0x11;
 800450e:	4b4e      	ldr	r3, [pc, #312]	; (8004648 <oneTimeData+0x2e4>)
 8004510:	2211      	movs	r2, #17
 8004512:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x56;
 8004514:	4b4c      	ldr	r3, [pc, #304]	; (8004648 <oneTimeData+0x2e4>)
 8004516:	2256      	movs	r2, #86	; 0x56
 8004518:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.economy & 0xFF);
 800451a:	4b4e      	ldr	r3, [pc, #312]	; (8004654 <oneTimeData+0x2f0>)
 800451c:	889b      	ldrh	r3, [r3, #4]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b49      	ldr	r3, [pc, #292]	; (8004648 <oneTimeData+0x2e4>)
 8004522:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.economy >> 8);
 8004524:	4b4b      	ldr	r3, [pc, #300]	; (8004654 <oneTimeData+0x2f0>)
 8004526:	889b      	ldrh	r3, [r3, #4]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	b29b      	uxth	r3, r3
 800452c:	b2da      	uxtb	r2, r3
 800452e:	4b46      	ldr	r3, [pc, #280]	; (8004648 <oneTimeData+0x2e4>)
 8004530:	719a      	strb	r2, [r3, #6]
//	strDATA[7] = (afterChargeData.economy >> 16);
//	strDATA[6] = (afterChargeData.economy >> 24);
		Transmit_strDATA
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	2208      	movs	r2, #8
 8004538:	4943      	ldr	r1, [pc, #268]	; (8004648 <oneTimeData+0x2e4>)
 800453a:	4841      	ldr	r0, [pc, #260]	; (8004640 <oneTimeData+0x2dc>)
 800453c:	f003 fb89 	bl	8007c52 <HAL_UART_Transmit>
		;
	}

	// After charge Power
	if (oneTime_counter == 7) {
 8004540:	4b40      	ldr	r3, [pc, #256]	; (8004644 <oneTimeData+0x2e0>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b07      	cmp	r3, #7
 8004546:	d118      	bne.n	800457a <oneTimeData+0x216>
		strDATA[4] = 0x11;
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <oneTimeData+0x2e4>)
 800454a:	2211      	movs	r2, #17
 800454c:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <oneTimeData+0x2e4>)
 8004550:	2260      	movs	r2, #96	; 0x60
 8004552:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.power & 0xFF);
 8004554:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <oneTimeData+0x2f0>)
 8004556:	88db      	ldrh	r3, [r3, #6]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b3b      	ldr	r3, [pc, #236]	; (8004648 <oneTimeData+0x2e4>)
 800455c:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.power >> 8);
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <oneTimeData+0x2f0>)
 8004560:	88db      	ldrh	r3, [r3, #6]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	b29b      	uxth	r3, r3
 8004566:	b2da      	uxtb	r2, r3
 8004568:	4b37      	ldr	r3, [pc, #220]	; (8004648 <oneTimeData+0x2e4>)
 800456a:	719a      	strb	r2, [r3, #6]
//	strDATA[7] = (afterChargeData.power >> 16);
//	strDATA[6] = (afterChargeData.power >> 24);
		Transmit_strDATA
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	2208      	movs	r2, #8
 8004572:	4935      	ldr	r1, [pc, #212]	; (8004648 <oneTimeData+0x2e4>)
 8004574:	4832      	ldr	r0, [pc, #200]	; (8004640 <oneTimeData+0x2dc>)
 8004576:	f003 fb6c 	bl	8007c52 <HAL_UART_Transmit>
	}



//Power
	if (oneTime_counter == 8) {
 800457a:	4b32      	ldr	r3, [pc, #200]	; (8004644 <oneTimeData+0x2e0>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d127      	bne.n	80045d2 <oneTimeData+0x26e>
		strDATA[4] = 0x12;
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <oneTimeData+0x2e4>)
 8004584:	2212      	movs	r2, #18
 8004586:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 8004588:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <oneTimeData+0x2e4>)
 800458a:	2260      	movs	r2, #96	; 0x60
 800458c:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (power & 0xFF);
 800458e:	4b32      	ldr	r3, [pc, #200]	; (8004658 <oneTimeData+0x2f4>)
 8004590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <oneTimeData+0x2e4>)
 8004598:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (power >> 8);
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <oneTimeData+0x2f4>)
 800459c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a0:	121b      	asrs	r3, r3, #8
 80045a2:	b21b      	sxth	r3, r3
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <oneTimeData+0x2e4>)
 80045a8:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	2208      	movs	r2, #8
 80045b0:	4925      	ldr	r1, [pc, #148]	; (8004648 <oneTimeData+0x2e4>)
 80045b2:	4823      	ldr	r0, [pc, #140]	; (8004640 <oneTimeData+0x2dc>)
 80045b4:	f003 fb4d 	bl	8007c52 <HAL_UART_Transmit>
		;
		strDATA[4] = 0x11;
 80045b8:	4b23      	ldr	r3, [pc, #140]	; (8004648 <oneTimeData+0x2e4>)
 80045ba:	2211      	movs	r2, #17
 80045bc:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <oneTimeData+0x2e4>)
 80045c0:	2270      	movs	r2, #112	; 0x70
 80045c2:	715a      	strb	r2, [r3, #5]
		Transmit_strDATA
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	2208      	movs	r2, #8
 80045ca:	491f      	ldr	r1, [pc, #124]	; (8004648 <oneTimeData+0x2e4>)
 80045cc:	481c      	ldr	r0, [pc, #112]	; (8004640 <oneTimeData+0x2dc>)
 80045ce:	f003 fb40 	bl	8007c52 <HAL_UART_Transmit>
		;
	}
//Range
	if (oneTime_counter == 9) {
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <oneTimeData+0x2e0>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	d116      	bne.n	8004608 <oneTimeData+0x2a4>
		oneTime_counter = 0;
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <oneTimeData+0x2e0>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
		strDATA[4] = 0x11;
 80045e0:	4b19      	ldr	r3, [pc, #100]	; (8004648 <oneTimeData+0x2e4>)
 80045e2:	2211      	movs	r2, #17
 80045e4:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <oneTimeData+0x2e4>)
 80045e8:	2230      	movs	r2, #48	; 0x30
 80045ea:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.range);
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <oneTimeData+0x2ec>)
 80045ee:	799a      	ldrb	r2, [r3, #6]
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <oneTimeData+0x2e4>)
 80045f2:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <oneTimeData+0x2e4>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	2208      	movs	r2, #8
 8004600:	4911      	ldr	r1, [pc, #68]	; (8004648 <oneTimeData+0x2e4>)
 8004602:	480f      	ldr	r0, [pc, #60]	; (8004640 <oneTimeData+0x2dc>)
 8004604:	f003 fb25 	bl	8007c52 <HAL_UART_Transmit>
		;
	}
	//Battery Data
	//if (oneTime_counter == 10) {

	switch (transferCount) {
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <oneTimeData+0x2f8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	2b07      	cmp	r3, #7
 8004610:	f200 810d 	bhi.w	800482e <oneTimeData+0x4ca>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <oneTimeData+0x2b8>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004661 	.word	0x08004661
 8004620:	0800468b 	.word	0x0800468b
 8004624:	080046d5 	.word	0x080046d5
 8004628:	08004709 	.word	0x08004709
 800462c:	08004757 	.word	0x08004757
 8004630:	080047a1 	.word	0x080047a1
 8004634:	080047d5 	.word	0x080047d5
 8004638:	080047ff 	.word	0x080047ff
 800463c:	200001fc 	.word	0x200001fc
 8004640:	200005a4 	.word	0x200005a4
 8004644:	200004ae 	.word	0x200004ae
 8004648:	20000410 	.word	0x20000410
 800464c:	20000458 	.word	0x20000458
 8004650:	20000424 	.word	0x20000424
 8004654:	20000434 	.word	0x20000434
 8004658:	2000045e 	.word	0x2000045e
 800465c:	20000008 	.word	0x20000008
	case 1: //SOC - Battery Percentage
		strDATA[4] = 0x11;
 8004660:	4b7a      	ldr	r3, [pc, #488]	; (800484c <oneTimeData+0x4e8>)
 8004662:	2211      	movs	r2, #17
 8004664:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x10;
 8004666:	4b79      	ldr	r3, [pc, #484]	; (800484c <oneTimeData+0x4e8>)
 8004668:	2210      	movs	r2, #16
 800466a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soc_value);
 800466c:	4b78      	ldr	r3, [pc, #480]	; (8004850 <oneTimeData+0x4ec>)
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	4b76      	ldr	r3, [pc, #472]	; (800484c <oneTimeData+0x4e8>)
 8004672:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8004674:	4b75      	ldr	r3, [pc, #468]	; (800484c <oneTimeData+0x4e8>)
 8004676:	2200      	movs	r2, #0
 8004678:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
 800467e:	2208      	movs	r2, #8
 8004680:	4972      	ldr	r1, [pc, #456]	; (800484c <oneTimeData+0x4e8>)
 8004682:	4874      	ldr	r0, [pc, #464]	; (8004854 <oneTimeData+0x4f0>)
 8004684:	f003 fae5 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 8004688:	e0d2      	b.n	8004830 <oneTimeData+0x4cc>
	case 2:  //Pack voltage
		if (currentstate == 4) {
 800468a:	4b73      	ldr	r3, [pc, #460]	; (8004858 <oneTimeData+0x4f4>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d106      	bne.n	80046a0 <oneTimeData+0x33c>
			strDATA[4] = 0x12;
 8004692:	4b6e      	ldr	r3, [pc, #440]	; (800484c <oneTimeData+0x4e8>)
 8004694:	2212      	movs	r2, #18
 8004696:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 8004698:	4b6c      	ldr	r3, [pc, #432]	; (800484c <oneTimeData+0x4e8>)
 800469a:	2210      	movs	r2, #16
 800469c:	715a      	strb	r2, [r3, #5]
 800469e:	e005      	b.n	80046ac <oneTimeData+0x348>
		} else {
			strDATA[4] = 0x11;
 80046a0:	4b6a      	ldr	r3, [pc, #424]	; (800484c <oneTimeData+0x4e8>)
 80046a2:	2211      	movs	r2, #17
 80046a4:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x64;
 80046a6:	4b69      	ldr	r3, [pc, #420]	; (800484c <oneTimeData+0x4e8>)
 80046a8:	2264      	movs	r2, #100	; 0x64
 80046aa:	715a      	strb	r2, [r3, #5]
		}
		strDATA[7] = (pack_voltage & 0xFF);
 80046ac:	4b6b      	ldr	r3, [pc, #428]	; (800485c <oneTimeData+0x4f8>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b66      	ldr	r3, [pc, #408]	; (800484c <oneTimeData+0x4e8>)
 80046b4:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (pack_voltage >> 8);
 80046b6:	4b69      	ldr	r3, [pc, #420]	; (800485c <oneTimeData+0x4f8>)
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	4b62      	ldr	r3, [pc, #392]	; (800484c <oneTimeData+0x4e8>)
 80046c2:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	2208      	movs	r2, #8
 80046ca:	4960      	ldr	r1, [pc, #384]	; (800484c <oneTimeData+0x4e8>)
 80046cc:	4861      	ldr	r0, [pc, #388]	; (8004854 <oneTimeData+0x4f0>)
 80046ce:	f003 fac0 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 80046d2:	e0ad      	b.n	8004830 <oneTimeData+0x4cc>
	case 3:  //Lowest Cell Voltage
		strDATA[4] = 0x12;
 80046d4:	4b5d      	ldr	r3, [pc, #372]	; (800484c <oneTimeData+0x4e8>)
 80046d6:	2212      	movs	r2, #18
 80046d8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x20;
 80046da:	4b5c      	ldr	r3, [pc, #368]	; (800484c <oneTimeData+0x4e8>)
 80046dc:	2220      	movs	r2, #32
 80046de:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (lcell_voltage & 0xFF);
 80046e0:	4b5f      	ldr	r3, [pc, #380]	; (8004860 <oneTimeData+0x4fc>)
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b59      	ldr	r3, [pc, #356]	; (800484c <oneTimeData+0x4e8>)
 80046e8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (lcell_voltage >> 8);
 80046ea:	4b5d      	ldr	r3, [pc, #372]	; (8004860 <oneTimeData+0x4fc>)
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	4b55      	ldr	r3, [pc, #340]	; (800484c <oneTimeData+0x4e8>)
 80046f6:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	2208      	movs	r2, #8
 80046fe:	4953      	ldr	r1, [pc, #332]	; (800484c <oneTimeData+0x4e8>)
 8004700:	4854      	ldr	r0, [pc, #336]	; (8004854 <oneTimeData+0x4f0>)
 8004702:	f003 faa6 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 8004706:	e093      	b.n	8004830 <oneTimeData+0x4cc>
	case 4:  //DC Current
		if (currentstate == 4) {
 8004708:	4b53      	ldr	r3, [pc, #332]	; (8004858 <oneTimeData+0x4f4>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d106      	bne.n	800471e <oneTimeData+0x3ba>
			strDATA[4] = 0x12;
 8004710:	4b4e      	ldr	r3, [pc, #312]	; (800484c <oneTimeData+0x4e8>)
 8004712:	2212      	movs	r2, #18
 8004714:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x80;
 8004716:	4b4d      	ldr	r3, [pc, #308]	; (800484c <oneTimeData+0x4e8>)
 8004718:	2280      	movs	r2, #128	; 0x80
 800471a:	715a      	strb	r2, [r3, #5]
 800471c:	e005      	b.n	800472a <oneTimeData+0x3c6>
		} else {
			strDATA[4] = 0x12;
 800471e:	4b4b      	ldr	r3, [pc, #300]	; (800484c <oneTimeData+0x4e8>)
 8004720:	2212      	movs	r2, #18
 8004722:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x30;
 8004724:	4b49      	ldr	r3, [pc, #292]	; (800484c <oneTimeData+0x4e8>)
 8004726:	2230      	movs	r2, #48	; 0x30
 8004728:	715a      	strb	r2, [r3, #5]
		}
		strDATA[6] = (dc_current >> 8);
 800472a:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <oneTimeData+0x500>)
 800472c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004730:	121b      	asrs	r3, r3, #8
 8004732:	b21b      	sxth	r3, r3
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4b45      	ldr	r3, [pc, #276]	; (800484c <oneTimeData+0x4e8>)
 8004738:	719a      	strb	r2, [r3, #6]
		strDATA[7] = (dc_current & 0xFF);
 800473a:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <oneTimeData+0x500>)
 800473c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <oneTimeData+0x4e8>)
 8004744:	71da      	strb	r2, [r3, #7]
		Transmit_strDATA
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	2208      	movs	r2, #8
 800474c:	493f      	ldr	r1, [pc, #252]	; (800484c <oneTimeData+0x4e8>)
 800474e:	4841      	ldr	r0, [pc, #260]	; (8004854 <oneTimeData+0x4f0>)
 8004750:	f003 fa7f 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 8004754:	e06c      	b.n	8004830 <oneTimeData+0x4cc>
	case 5:  //Pack Temperature
		strDATA[4] = 0x12;
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <oneTimeData+0x4e8>)
 8004758:	2212      	movs	r2, #18
 800475a:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x40;
 800475c:	4b3b      	ldr	r3, [pc, #236]	; (800484c <oneTimeData+0x4e8>)
 800475e:	2240      	movs	r2, #64	; 0x40
 8004760:	715a      	strb	r2, [r3, #5]
		strDATA[6] = (pack_temp >> 8);
 8004762:	4b41      	ldr	r3, [pc, #260]	; (8004868 <oneTimeData+0x504>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	121b      	asrs	r3, r3, #8
 8004768:	b2da      	uxtb	r2, r3
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <oneTimeData+0x4e8>)
 800476c:	719a      	strb	r2, [r3, #6]
		strDATA[7] = (pack_temp & 0xFF);
 800476e:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <oneTimeData+0x504>)
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <oneTimeData+0x4e8>)
 8004774:	71da      	strb	r2, [r3, #7]
		Transmit_strDATA
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	2208      	movs	r2, #8
 800477c:	4933      	ldr	r1, [pc, #204]	; (800484c <oneTimeData+0x4e8>)
 800477e:	4835      	ldr	r0, [pc, #212]	; (8004854 <oneTimeData+0x4f0>)
 8004780:	f003 fa67 	bl	8007c52 <HAL_UART_Transmit>
		;
		strDATA[4] = 0x11;
 8004784:	4b31      	ldr	r3, [pc, #196]	; (800484c <oneTimeData+0x4e8>)
 8004786:	2211      	movs	r2, #17
 8004788:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x68;
 800478a:	4b30      	ldr	r3, [pc, #192]	; (800484c <oneTimeData+0x4e8>)
 800478c:	2268      	movs	r2, #104	; 0x68
 800478e:	715a      	strb	r2, [r3, #5]
		Transmit_strDATA
 8004790:	f04f 33ff 	mov.w	r3, #4294967295
 8004794:	2208      	movs	r2, #8
 8004796:	492d      	ldr	r1, [pc, #180]	; (800484c <oneTimeData+0x4e8>)
 8004798:	482e      	ldr	r0, [pc, #184]	; (8004854 <oneTimeData+0x4f0>)
 800479a:	f003 fa5a 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 800479e:	e047      	b.n	8004830 <oneTimeData+0x4cc>
	case 6:  //Highest Cell Voltage
		strDATA[4] = 0x12;
 80047a0:	4b2a      	ldr	r3, [pc, #168]	; (800484c <oneTimeData+0x4e8>)
 80047a2:	2212      	movs	r2, #18
 80047a4:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 80047a6:	4b29      	ldr	r3, [pc, #164]	; (800484c <oneTimeData+0x4e8>)
 80047a8:	2270      	movs	r2, #112	; 0x70
 80047aa:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (hcell_voltage & 0xFF);
 80047ac:	4b2f      	ldr	r3, [pc, #188]	; (800486c <oneTimeData+0x508>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <oneTimeData+0x4e8>)
 80047b4:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (hcell_voltage >> 8);
 80047b6:	4b2d      	ldr	r3, [pc, #180]	; (800486c <oneTimeData+0x508>)
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b29b      	uxth	r3, r3
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	4b22      	ldr	r3, [pc, #136]	; (800484c <oneTimeData+0x4e8>)
 80047c2:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	2208      	movs	r2, #8
 80047ca:	4920      	ldr	r1, [pc, #128]	; (800484c <oneTimeData+0x4e8>)
 80047cc:	4821      	ldr	r0, [pc, #132]	; (8004854 <oneTimeData+0x4f0>)
 80047ce:	f003 fa40 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 80047d2:	e02d      	b.n	8004830 <oneTimeData+0x4cc>
	case 7:  //SOH Battery Health
		strDATA[4] = 0x11;
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <oneTimeData+0x4e8>)
 80047d6:	2211      	movs	r2, #17
 80047d8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x66;
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <oneTimeData+0x4e8>)
 80047dc:	2266      	movs	r2, #102	; 0x66
 80047de:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soh_value);
 80047e0:	4b23      	ldr	r3, [pc, #140]	; (8004870 <oneTimeData+0x50c>)
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <oneTimeData+0x4e8>)
 80047e6:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <oneTimeData+0x4e8>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	2208      	movs	r2, #8
 80047f4:	4915      	ldr	r1, [pc, #84]	; (800484c <oneTimeData+0x4e8>)
 80047f6:	4817      	ldr	r0, [pc, #92]	; (8004854 <oneTimeData+0x4f0>)
 80047f8:	f003 fa2b 	bl	8007c52 <HAL_UART_Transmit>
		;
		break;
 80047fc:	e018      	b.n	8004830 <oneTimeData+0x4cc>
	case 8:  //Estimated Range
		strDATA[4] = 0x11;
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <oneTimeData+0x4e8>)
 8004800:	2211      	movs	r2, #17
 8004802:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <oneTimeData+0x4e8>)
 8004806:	2230      	movs	r2, #48	; 0x30
 8004808:	715a      	strb	r2, [r3, #5]
		//strDATA[7] = uint32_t(distance.range);
		//strDATA[6] = 0;
		strDATA[7] = (distance.range & 0xFF);
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <oneTimeData+0x510>)
 800480c:	799a      	ldrb	r2, [r3, #6]
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <oneTimeData+0x4e8>)
 8004810:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.range >> 8);
 8004812:	4b18      	ldr	r3, [pc, #96]	; (8004874 <oneTimeData+0x510>)
 8004814:	799b      	ldrb	r3, [r3, #6]
 8004816:	121b      	asrs	r3, r3, #8
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <oneTimeData+0x4e8>)
 800481c:	719a      	strb	r2, [r3, #6]
		//strDATA[7] = (distance.range >> 16);
		//strDATA[6] = (distance.range >> 24);
		HAL_UART_Transmit(&huart3, strDATA, sizeof(strDATA),
 800481e:	f04f 33ff 	mov.w	r3, #4294967295
 8004822:	2208      	movs	r2, #8
 8004824:	4909      	ldr	r1, [pc, #36]	; (800484c <oneTimeData+0x4e8>)
 8004826:	480b      	ldr	r0, [pc, #44]	; (8004854 <oneTimeData+0x4f0>)
 8004828:	f003 fa13 	bl	8007c52 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		break;
 800482c:	e000      	b.n	8004830 <oneTimeData+0x4cc>
	default:
		break;
 800482e:	bf00      	nop
	}

	transferCount++;
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <oneTimeData+0x514>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a10      	ldr	r2, [pc, #64]	; (8004878 <oneTimeData+0x514>)
 8004838:	6013      	str	r3, [r2, #0]
	if (transferCount >= 9) {
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <oneTimeData+0x514>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b08      	cmp	r3, #8
 8004840:	d902      	bls.n	8004848 <oneTimeData+0x4e4>
		transferCount = 1;
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <oneTimeData+0x514>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]
	}

}
 8004848:	bf00      	nop
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000410 	.word	0x20000410
 8004850:	20000450 	.word	0x20000450
 8004854:	200005a4 	.word	0x200005a4
 8004858:	20000460 	.word	0x20000460
 800485c:	20000452 	.word	0x20000452
 8004860:	20000456 	.word	0x20000456
 8004864:	2000045c 	.word	0x2000045c
 8004868:	2000045a 	.word	0x2000045a
 800486c:	20000454 	.word	0x20000454
 8004870:	20000451 	.word	0x20000451
 8004874:	20000424 	.word	0x20000424
 8004878:	20000008 	.word	0x20000008

0800487c <gearUpdate>:

void gearUpdate(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <gearUpdate+0x70>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d106      	bne.n	8004896 <gearUpdate+0x1a>
		Gear_Neutral_Icon;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	2208      	movs	r2, #8
 800488e:	4918      	ldr	r1, [pc, #96]	; (80048f0 <gearUpdate+0x74>)
 8004890:	4818      	ldr	r0, [pc, #96]	; (80048f4 <gearUpdate+0x78>)
 8004892:	f003 f9de 	bl	8007c52 <HAL_UART_Transmit>
	}

	if (currentstate == 2) {
 8004896:	4b15      	ldr	r3, [pc, #84]	; (80048ec <gearUpdate+0x70>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d106      	bne.n	80048ac <gearUpdate+0x30>
		Gear_Drive_Icon;
 800489e:	f04f 33ff 	mov.w	r3, #4294967295
 80048a2:	2208      	movs	r2, #8
 80048a4:	4914      	ldr	r1, [pc, #80]	; (80048f8 <gearUpdate+0x7c>)
 80048a6:	4813      	ldr	r0, [pc, #76]	; (80048f4 <gearUpdate+0x78>)
 80048a8:	f003 f9d3 	bl	8007c52 <HAL_UART_Transmit>
	}

	if (currentstate == 3) {
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <gearUpdate+0x70>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d106      	bne.n	80048c2 <gearUpdate+0x46>
		Gear_Reverse_Icon;
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295
 80048b8:	2208      	movs	r2, #8
 80048ba:	4910      	ldr	r1, [pc, #64]	; (80048fc <gearUpdate+0x80>)
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <gearUpdate+0x78>)
 80048be:	f003 f9c8 	bl	8007c52 <HAL_UART_Transmit>
	}
	if (_gearCleared || currentstate == 0) {
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <gearUpdate+0x84>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <gearUpdate+0x56>
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <gearUpdate+0x70>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <gearUpdate+0x6a>
		Gear_Clear_Icon;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	2208      	movs	r2, #8
 80048d8:	490a      	ldr	r1, [pc, #40]	; (8004904 <gearUpdate+0x88>)
 80048da:	4806      	ldr	r0, [pc, #24]	; (80048f4 <gearUpdate+0x78>)
 80048dc:	f003 f9b9 	bl	8007c52 <HAL_UART_Transmit>
		_gearCleared = false;
 80048e0:	4b07      	ldr	r3, [pc, #28]	; (8004900 <gearUpdate+0x84>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
	}

}
 80048e6:	bf00      	nop
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000460 	.word	0x20000460
 80048f0:	200001bc 	.word	0x200001bc
 80048f4:	200005a4 	.word	0x200005a4
 80048f8:	200001c4 	.word	0x200001c4
 80048fc:	200001b4 	.word	0x200001b4
 8004900:	200004a6 	.word	0x200004a6
 8004904:	200001cc 	.word	0x200001cc

08004908 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <MX_USART3_UART_Init+0x50>)
 8004910:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 8004914:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004918:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 800492e:	220c      	movs	r2, #12
 8004930:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 800493a:	2200      	movs	r2, #0
 800493c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <MX_USART3_UART_Init+0x4c>)
 8004940:	f003 f93a 	bl	8007bb8 <HAL_UART_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800494a:	f7fc fe31 	bl	80015b0 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	200005a4 	.word	0x200005a4
 8004958:	40004800 	.word	0x40004800

0800495c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004964:	f107 0310 	add.w	r3, r7, #16
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_UART_MspInit+0xec>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d160      	bne.n	8004a3e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800497c:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_UART_MspInit+0xf0>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <HAL_UART_MspInit+0xf0>)
 8004982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004986:	61d3      	str	r3, [r2, #28]
 8004988:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <HAL_UART_MspInit+0xf0>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_UART_MspInit+0xf0>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <HAL_UART_MspInit+0xf0>)
 800499a:	f043 0308 	orr.w	r3, r3, #8
 800499e:	6193      	str	r3, [r2, #24]
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_UART_MspInit+0xf0>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b2:	2302      	movs	r3, #2
 80049b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049b6:	2303      	movs	r3, #3
 80049b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ba:	f107 0310 	add.w	r3, r7, #16
 80049be:	4619      	mov	r1, r3
 80049c0:	4823      	ldr	r0, [pc, #140]	; (8004a50 <HAL_UART_MspInit+0xf4>)
 80049c2:	f001 fd9f 	bl	8006504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	4619      	mov	r1, r3
 80049da:	481d      	ldr	r0, [pc, #116]	; (8004a50 <HAL_UART_MspInit+0xf4>)
 80049dc:	f001 fd92 	bl	8006504 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80049e0:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 80049e2:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <HAL_UART_MspInit+0xfc>)
 80049e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049e6:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 80049e8:	2210      	movs	r2, #16
 80049ea:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049f2:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049f8:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 8004a0c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004a10:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004a12:	4810      	ldr	r0, [pc, #64]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 8004a14:	f001 f8f4 	bl	8005c00 <HAL_DMA_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004a1e:	f7fc fdc7 	bl	80015b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <HAL_UART_MspInit+0xf8>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2100      	movs	r1, #0
 8004a32:	2027      	movs	r0, #39	; 0x27
 8004a34:	f001 f8ad 	bl	8005b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a38:	2027      	movs	r0, #39	; 0x27
 8004a3a:	f001 f8c6 	bl	8005bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40004800 	.word	0x40004800
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	40010c00 	.word	0x40010c00
 8004a54:	200005e8 	.word	0x200005e8
 8004a58:	4002001c 	.word	0x4002001c

08004a5c <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <check_ack+0x2c>)
 8004a62:	781a      	ldrb	r2, [r3, #0]
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <check_ack+0x30>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d103      	bne.n	8004a76 <check_ack+0x1a>
		modeChangeOK = true;
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <check_ack+0x34>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e002      	b.n	8004a7c <check_ack+0x20>
	} else {
		modeChangeOK = false;
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <check_ack+0x34>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <check_ack+0x34>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	20000468 	.word	0x20000468
 8004a8c:	2000047f 	.word	0x2000047f
 8004a90:	20000491 	.word	0x20000491

08004a94 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 8004a98:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <evcuMode+0x11c>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d16b      	bne.n	8004b78 <evcuMode+0xe4>
 8004aa0:	4b44      	ldr	r3, [pc, #272]	; (8004bb4 <evcuMode+0x120>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d067      	beq.n	8004b78 <evcuMode+0xe4>
		if (currentMode == ecoMode) {
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <evcuMode+0x124>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d11a      	bne.n	8004ae8 <evcuMode+0x54>
			//Set Normal Mode
			targetMode = normalMode;
 8004ab2:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <evcuMode+0x128>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004ab8:	f7ff ffd0 	bl	8004a5c <check_ack>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d05a      	beq.n	8004b78 <evcuMode+0xe4>
				currentMode = normalMode;
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <evcuMode+0x124>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <evcuMode+0x120>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004ace:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <evcuMode+0x12c>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 1;
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <evcuMode+0x130>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <evcuMode+0x134>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004ae0:	4b3a      	ldr	r3, [pc, #232]	; (8004bcc <evcuMode+0x138>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	e047      	b.n	8004b78 <evcuMode+0xe4>
			}
		} else if (currentMode == normalMode) {
 8004ae8:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <evcuMode+0x124>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11d      	bne.n	8004b2e <evcuMode+0x9a>
			//Set Sports Mode
			targetMode = sportMode;
 8004af2:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <evcuMode+0x128>)
 8004af4:	2203      	movs	r2, #3
 8004af6:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004af8:	f7ff ffb0 	bl	8004a5c <check_ack>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d03a      	beq.n	8004b78 <evcuMode+0xe4>
				currentMode = sportMode;
 8004b02:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <evcuMode+0x124>)
 8004b04:	2203      	movs	r2, #3
 8004b06:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004b08:	4b2d      	ldr	r3, [pc, #180]	; (8004bc0 <evcuMode+0x12c>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 3;
 8004b0e:	4b2d      	ldr	r3, [pc, #180]	; (8004bc4 <evcuMode+0x130>)
 8004b10:	2203      	movs	r2, #3
 8004b12:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004b14:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <evcuMode+0x134>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <evcuMode+0x120>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004b20:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <evcuMode+0x138>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004b26:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <evcuMode+0x13c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	e024      	b.n	8004b78 <evcuMode+0xe4>
			}
		} else if (currentMode == sportMode) {
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <evcuMode+0x124>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d11f      	bne.n	8004b78 <evcuMode+0xe4>
			//Set Eco Mode
			targetMode = ecoMode;
 8004b38:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <evcuMode+0x128>)
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004b3e:	f7ff ff8d 	bl	8004a5c <check_ack>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d017      	beq.n	8004b78 <evcuMode+0xe4>
				currentMode = ecoMode;
 8004b48:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <evcuMode+0x124>)
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <evcuMode+0x120>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <evcuMode+0x12c>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 2;
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <evcuMode+0x130>)
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <evcuMode+0x134>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004b66:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <evcuMode+0x138>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004b6c:	4b18      	ldr	r3, [pc, #96]	; (8004bd0 <evcuMode+0x13c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 8004b72:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <evcuMode+0x124>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 8004b78:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <evcuMode+0x11c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d115      	bne.n	8004bac <evcuMode+0x118>
		currentMode = ecoMode;
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <evcuMode+0x124>)
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <evcuMode+0x128>)
 8004b88:	2202      	movs	r2, #2
 8004b8a:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <evcuMode+0x120>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <evcuMode+0x118>
			mode = false;
 8004b94:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <evcuMode+0x120>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
			_modeSelection = 1;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <evcuMode+0x134>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
			modeIcon = true;
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <evcuMode+0x12c>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
			rtn = false;
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <evcuMode+0x138>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 8004bac:	bf00      	nop
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20000467 	.word	0x20000467
 8004bb4:	20000409 	.word	0x20000409
 8004bb8:	2000047e 	.word	0x2000047e
 8004bbc:	2000047f 	.word	0x2000047f
 8004bc0:	20000492 	.word	0x20000492
 8004bc4:	200004b1 	.word	0x200004b1
 8004bc8:	2000049c 	.word	0x2000049c
 8004bcc:	20000475 	.word	0x20000475
 8004bd0:	20000491 	.word	0x20000491

08004bd4 <trip_reset>:

void trip_reset(void){
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <trip_reset+0x1c>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <trip_reset+0x12>
		tripreset = false;
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <trip_reset+0x20>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 8004be6:	bf00      	nop
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000466 	.word	0x20000466
 8004bf4:	20000407 	.word	0x20000407

08004bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bf8:	480c      	ldr	r0, [pc, #48]	; (8004c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004bfa:	490d      	ldr	r1, [pc, #52]	; (8004c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c00:	e002      	b.n	8004c08 <LoopCopyDataInit>

08004c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c06:	3304      	adds	r3, #4

08004c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c0c:	d3f9      	bcc.n	8004c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c10:	4c0a      	ldr	r4, [pc, #40]	; (8004c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c14:	e001      	b.n	8004c1a <LoopFillZerobss>

08004c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c18:	3204      	adds	r2, #4

08004c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c1c:	d3fb      	bcc.n	8004c16 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c1e:	f7fd ffef 	bl	8002c00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004c22:	f003 fd9b 	bl	800875c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c26:	f7fc fb0f 	bl	8001248 <main>
  bx lr
 8004c2a:	4770      	bx	lr
  ldr r0, =_sdata
 8004c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c30:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 8004c34:	08008814 	.word	0x08008814
  ldr r2, =_sbss
 8004c38:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 8004c3c:	20000630 	.word	0x20000630

08004c40 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c40:	e7fe      	b.n	8004c40 <ADC1_2_IRQHandler>
	...

08004c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c48:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_Init+0x28>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_Init+0x28>)
 8004c4e:	f043 0310 	orr.w	r3, r3, #16
 8004c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c54:	2003      	movs	r0, #3
 8004c56:	f000 ff91 	bl	8005b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c5a:	200f      	movs	r0, #15
 8004c5c:	f000 f808 	bl	8004c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c60:	f7fd ff2e 	bl	8002ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40022000 	.word	0x40022000

08004c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_InitTick+0x54>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_InitTick+0x58>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	4619      	mov	r1, r3
 8004c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 ffa9 	bl	8005be6 <HAL_SYSTICK_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e00e      	b.n	8004cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b0f      	cmp	r3, #15
 8004ca2:	d80a      	bhi.n	8004cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cac:	f000 ff71 	bl	8005b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cb0:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <HAL_InitTick+0x5c>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000020 	.word	0x20000020
 8004cc8:	200003b0 	.word	0x200003b0
 8004ccc:	200003ac 	.word	0x200003ac

08004cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_IncTick+0x1c>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_IncTick+0x20>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4413      	add	r3, r2
 8004ce0:	4a03      	ldr	r2, [pc, #12]	; (8004cf0 <HAL_IncTick+0x20>)
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc80      	pop	{r7}
 8004cea:	4770      	bx	lr
 8004cec:	200003b0 	.word	0x200003b0
 8004cf0:	2000062c 	.word	0x2000062c

08004cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cf8:	4b02      	ldr	r3, [pc, #8]	; (8004d04 <HAL_GetTick+0x10>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	2000062c 	.word	0x2000062c

08004d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d10:	f7ff fff0 	bl	8004cf4 <HAL_GetTick>
 8004d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d005      	beq.n	8004d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <HAL_Delay+0x44>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d2e:	bf00      	nop
 8004d30:	f7ff ffe0 	bl	8004cf4 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d8f7      	bhi.n	8004d30 <HAL_Delay+0x28>
  {
  }
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200003b0 	.word	0x200003b0

08004d50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0ed      	b.n	8004f3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fb fc2e 	bl	80005d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d84:	f7ff ffb6 	bl	8004cf4 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d8a:	e012      	b.n	8004db2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d8c:	f7ff ffb2 	bl	8004cf4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b0a      	cmp	r3, #10
 8004d98:	d90b      	bls.n	8004db2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2205      	movs	r2, #5
 8004daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e0c5      	b.n	8004f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0e5      	beq.n	8004d8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0202 	bic.w	r2, r2, #2
 8004dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd0:	f7ff ff90 	bl	8004cf4 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dd6:	e012      	b.n	8004dfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004dd8:	f7ff ff8c 	bl	8004cf4 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b0a      	cmp	r3, #10
 8004de4:	d90b      	bls.n	8004dfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2205      	movs	r2, #5
 8004df6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e09f      	b.n	8004f3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7e1b      	ldrb	r3, [r3, #24]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d108      	bne.n	8004e26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e007      	b.n	8004e36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	7e5b      	ldrb	r3, [r3, #25]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e007      	b.n	8004e60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	7e9b      	ldrb	r3, [r3, #26]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d108      	bne.n	8004e7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0220 	orr.w	r2, r2, #32
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e007      	b.n	8004e8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0220 	bic.w	r2, r2, #32
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	7edb      	ldrb	r3, [r3, #27]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d108      	bne.n	8004ea4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0210 	bic.w	r2, r2, #16
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e007      	b.n	8004eb4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0210 	orr.w	r2, r2, #16
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7f1b      	ldrb	r3, [r3, #28]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d108      	bne.n	8004ece <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0208 	orr.w	r2, r2, #8
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e007      	b.n	8004ede <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0208 	bic.w	r2, r2, #8
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	7f5b      	ldrb	r3, [r3, #29]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d108      	bne.n	8004ef8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0204 	orr.w	r2, r2, #4
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e007      	b.n	8004f08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0204 	bic.w	r2, r2, #4
 8004f06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	ea42 0103 	orr.w	r1, r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f60:	7cfb      	ldrb	r3, [r7, #19]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d003      	beq.n	8004f6e <HAL_CAN_ConfigFilter+0x26>
 8004f66:	7cfb      	ldrb	r3, [r7, #19]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	f040 80be 	bne.w	80050ea <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f6e:	4b65      	ldr	r3, [pc, #404]	; (8005104 <HAL_CAN_ConfigFilter+0x1bc>)
 8004f70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f78:	f043 0201 	orr.w	r2, r3, #1
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	2201      	movs	r2, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	401a      	ands	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d123      	bne.n	8005018 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	401a      	ands	r2, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ff2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3248      	adds	r2, #72	; 0x48
 8004ff8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800500c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	3348      	adds	r3, #72	; 0x48
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d122      	bne.n	8005066 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	431a      	orrs	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005040:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	3248      	adds	r2, #72	; 0x48
 8005046:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800505a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	3348      	adds	r3, #72	; 0x48
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	43db      	mvns	r3, r3
 8005078:	401a      	ands	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005080:	e007      	b.n	8005092 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	431a      	orrs	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	401a      	ands	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80050ac:	e007      	b.n	80050be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	431a      	orrs	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050dc:	f023 0201 	bic.w	r2, r3, #1
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e006      	b.n	80050f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
  }
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40006400 	.word	0x40006400

08005108 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d12e      	bne.n	800517a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005134:	f7ff fdde 	bl	8004cf4 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800513a:	e012      	b.n	8005162 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800513c:	f7ff fdda 	bl	8004cf4 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b0a      	cmp	r3, #10
 8005148:	d90b      	bls.n	8005162 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2205      	movs	r2, #5
 800515a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e012      	b.n	8005188 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e5      	bne.n	800513c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e006      	b.n	8005188 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	; 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80051ae:	7ffb      	ldrb	r3, [r7, #31]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d003      	beq.n	80051bc <HAL_CAN_AddTxMessage+0x2c>
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	f040 80b8 	bne.w	800532c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80a0 	beq.w	800531c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	0e1b      	lsrs	r3, r3, #24
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d907      	bls.n	80051fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e09e      	b.n	800533a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80051fc:	2201      	movs	r2, #1
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	409a      	lsls	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	6809      	ldr	r1, [r1, #0]
 800521c:	431a      	orrs	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	3318      	adds	r3, #24
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	440b      	add	r3, r1
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e00f      	b.n	800524a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005234:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800523e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3318      	adds	r3, #24
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	440b      	add	r3, r1
 8005248:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6819      	ldr	r1, [r3, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691a      	ldr	r2, [r3, #16]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3318      	adds	r3, #24
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	440b      	add	r3, r1
 800525a:	3304      	adds	r3, #4
 800525c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	7d1b      	ldrb	r3, [r3, #20]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d111      	bne.n	800528a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3318      	adds	r3, #24
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	4413      	add	r3, r2
 8005272:	3304      	adds	r3, #4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	6811      	ldr	r1, [r2, #0]
 800527a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3318      	adds	r3, #24
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	440b      	add	r3, r1
 8005286:	3304      	adds	r3, #4
 8005288:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3307      	adds	r3, #7
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	061a      	lsls	r2, r3, #24
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3306      	adds	r3, #6
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3305      	adds	r3, #5
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	4313      	orrs	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	3204      	adds	r2, #4
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	4610      	mov	r0, r2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	6811      	ldr	r1, [r2, #0]
 80052b2:	ea43 0200 	orr.w	r2, r3, r0
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	440b      	add	r3, r1
 80052bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3303      	adds	r3, #3
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	061a      	lsls	r2, r3, #24
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3302      	adds	r3, #2
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	4313      	orrs	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	4610      	mov	r0, r2
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	6811      	ldr	r1, [r2, #0]
 80052e8:	ea43 0200 	orr.w	r2, r3, r0
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	3318      	adds	r3, #24
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	4413      	add	r3, r2
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	6811      	ldr	r1, [r2, #0]
 800530a:	f043 0201 	orr.w	r2, r3, #1
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	3318      	adds	r3, #24
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	440b      	add	r3, r1
 8005316:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e00e      	b.n	800533a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e006      	b.n	800533a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3724      	adds	r7, #36	; 0x24
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005358:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d003      	beq.n	8005368 <HAL_CAN_GetRxMessage+0x24>
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b02      	cmp	r3, #2
 8005364:	f040 80f3 	bne.w	800554e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10e      	bne.n	800538c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d116      	bne.n	80053aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0e7      	b.n	800555c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0d8      	b.n	800555c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	331b      	adds	r3, #27
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	4413      	add	r3, r2
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0204 	and.w	r2, r3, #4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10c      	bne.n	80053e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	331b      	adds	r3, #27
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4413      	add	r3, r2
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	0d5b      	lsrs	r3, r3, #21
 80053d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e00b      	b.n	80053fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	331b      	adds	r3, #27
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	4413      	add	r3, r2
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	331b      	adds	r3, #27
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4413      	add	r3, r2
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0202 	and.w	r2, r3, #2
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	331b      	adds	r3, #27
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	4413      	add	r3, r2
 800541c:	3304      	adds	r3, #4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	331b      	adds	r3, #27
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	0a1b      	lsrs	r3, r3, #8
 800543a:	b2da      	uxtb	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	331b      	adds	r3, #27
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	4413      	add	r3, r2
 800544c:	3304      	adds	r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0c1b      	lsrs	r3, r3, #16
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	4413      	add	r3, r2
 8005462:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	4413      	add	r3, r2
 8005478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	0a1a      	lsrs	r2, r3, #8
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	4413      	add	r3, r2
 8005492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	0c1a      	lsrs	r2, r3, #16
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3302      	adds	r3, #2
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0e1a      	lsrs	r2, r3, #24
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	3303      	adds	r3, #3
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	3304      	adds	r3, #4
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4413      	add	r3, r2
 80054de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0a1a      	lsrs	r2, r3, #8
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3305      	adds	r3, #5
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	0c1a      	lsrs	r2, r3, #16
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	3306      	adds	r3, #6
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	4413      	add	r3, r2
 8005512:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	0e1a      	lsrs	r2, r3, #24
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	3307      	adds	r3, #7
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d108      	bne.n	800553a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0220 	orr.w	r2, r2, #32
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e007      	b.n	800554a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0220 	orr.w	r2, r2, #32
 8005548:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	e006      	b.n	800555c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
  }
}
 800555c:	4618      	mov	r0, r3
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005576:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d002      	beq.n	8005584 <HAL_CAN_ActivateNotification+0x1e>
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d109      	bne.n	8005598 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6959      	ldr	r1, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e006      	b.n	80055a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
  }
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d07c      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d023      	beq.n	8005648 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f983 	bl	800591e <HAL_CAN_TxMailbox0CompleteCallback>
 8005618:	e016      	b.n	8005648 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
 800562c:	e00c      	b.n	8005648 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
 8005640:	e002      	b.n	8005648 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f986 	bl	8005954 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d024      	beq.n	800569c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800565a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f962 	bl	8005930 <HAL_CAN_TxMailbox1CompleteCallback>
 800566c:	e016      	b.n	800569c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	e00c      	b.n	800569c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
 8005694:	e002      	b.n	800569c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f965 	bl	8005966 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d024      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f941 	bl	8005942 <HAL_CAN_TxMailbox2CompleteCallback>
 80056c0:	e016      	b.n	80056f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
 80056d4:	e00c      	b.n	80056f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	e002      	b.n	80056f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f944 	bl	8005978 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800570a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2210      	movs	r2, #16
 8005712:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2208      	movs	r2, #8
 800572e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f92a 	bl	800598a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb fe76 	bl	8001440 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800576e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2210      	movs	r2, #16
 8005776:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d006      	beq.n	800579a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2208      	movs	r2, #8
 8005792:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f901 	bl	800599c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fb fe86 	bl	80014c4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2210      	movs	r2, #16
 80057d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8ea 	bl	80059ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2208      	movs	r2, #8
 80057f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f8e2 	bl	80059c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d07b      	beq.n	80058fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d072      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005832:	2b00      	cmp	r3, #0
 8005834:	d008      	beq.n	8005848 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	f043 0302 	orr.w	r3, r3, #2
 8005846:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	f043 0304 	orr.w	r3, r3, #4
 8005862:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586a:	2b00      	cmp	r3, #0
 800586c:	d043      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005874:	2b00      	cmp	r3, #0
 8005876:	d03e      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800587e:	2b60      	cmp	r3, #96	; 0x60
 8005880:	d02b      	beq.n	80058da <HAL_CAN_IRQHandler+0x32a>
 8005882:	2b60      	cmp	r3, #96	; 0x60
 8005884:	d82e      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 8005886:	2b50      	cmp	r3, #80	; 0x50
 8005888:	d022      	beq.n	80058d0 <HAL_CAN_IRQHandler+0x320>
 800588a:	2b50      	cmp	r3, #80	; 0x50
 800588c:	d82a      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d019      	beq.n	80058c6 <HAL_CAN_IRQHandler+0x316>
 8005892:	2b40      	cmp	r3, #64	; 0x40
 8005894:	d826      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 8005896:	2b30      	cmp	r3, #48	; 0x30
 8005898:	d010      	beq.n	80058bc <HAL_CAN_IRQHandler+0x30c>
 800589a:	2b30      	cmp	r3, #48	; 0x30
 800589c:	d822      	bhi.n	80058e4 <HAL_CAN_IRQHandler+0x334>
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d002      	beq.n	80058a8 <HAL_CAN_IRQHandler+0x2f8>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d005      	beq.n	80058b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058a6:	e01d      	b.n	80058e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f043 0308 	orr.w	r3, r3, #8
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058b0:	e019      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	f043 0310 	orr.w	r3, r3, #16
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058ba:	e014      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	f043 0320 	orr.w	r3, r3, #32
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058c4:	e00f      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058ce:	e00a      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058d8:	e005      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058e2:	e000      	b.n	80058e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80058e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2204      	movs	r2, #4
 80058fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f85e 	bl	80059d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005916:	bf00      	nop
 8005918:	3728      	adds	r7, #40	; 0x28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr

08005966 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr

080059c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr

080059e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059f4:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <__NVIC_SetPriorityGrouping+0x44>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a00:	4013      	ands	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a16:	4a04      	ldr	r2, [pc, #16]	; (8005a28 <__NVIC_SetPriorityGrouping+0x44>)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	60d3      	str	r3, [r2, #12]
}
 8005a1c:	bf00      	nop
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a30:	4b04      	ldr	r3, [pc, #16]	; (8005a44 <__NVIC_GetPriorityGrouping+0x18>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	0a1b      	lsrs	r3, r3, #8
 8005a36:	f003 0307 	and.w	r3, r3, #7
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	e000ed00 	.word	0xe000ed00

08005a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	db0b      	blt.n	8005a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	f003 021f 	and.w	r2, r3, #31
 8005a60:	4906      	ldr	r1, [pc, #24]	; (8005a7c <__NVIC_EnableIRQ+0x34>)
 8005a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2001      	movs	r0, #1
 8005a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	e000e100 	.word	0xe000e100

08005a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	6039      	str	r1, [r7, #0]
 8005a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db0a      	blt.n	8005aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	490c      	ldr	r1, [pc, #48]	; (8005acc <__NVIC_SetPriority+0x4c>)
 8005a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9e:	0112      	lsls	r2, r2, #4
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005aa8:	e00a      	b.n	8005ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4908      	ldr	r1, [pc, #32]	; (8005ad0 <__NVIC_SetPriority+0x50>)
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	3b04      	subs	r3, #4
 8005ab8:	0112      	lsls	r2, r2, #4
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	440b      	add	r3, r1
 8005abe:	761a      	strb	r2, [r3, #24]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	e000e100 	.word	0xe000e100
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b089      	sub	sp, #36	; 0x24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f1c3 0307 	rsb	r3, r3, #7
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	bf28      	it	cs
 8005af2:	2304      	movcs	r3, #4
 8005af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3304      	adds	r3, #4
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d902      	bls.n	8005b04 <NVIC_EncodePriority+0x30>
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3b03      	subs	r3, #3
 8005b02:	e000      	b.n	8005b06 <NVIC_EncodePriority+0x32>
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b12:	43da      	mvns	r2, r3
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	401a      	ands	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	fa01 f303 	lsl.w	r3, r1, r3
 8005b26:	43d9      	mvns	r1, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b2c:	4313      	orrs	r3, r2
         );
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3724      	adds	r7, #36	; 0x24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b48:	d301      	bcc.n	8005b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e00f      	b.n	8005b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <SysTick_Config+0x40>)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b56:	210f      	movs	r1, #15
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	f7ff ff90 	bl	8005a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <SysTick_Config+0x40>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b66:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <SysTick_Config+0x40>)
 8005b68:	2207      	movs	r2, #7
 8005b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	e000e010 	.word	0xe000e010

08005b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff ff2d 	bl	80059e4 <__NVIC_SetPriorityGrouping>
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	4603      	mov	r3, r0
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ba4:	f7ff ff42 	bl	8005a2c <__NVIC_GetPriorityGrouping>
 8005ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	6978      	ldr	r0, [r7, #20]
 8005bb0:	f7ff ff90 	bl	8005ad4 <NVIC_EncodePriority>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ff5f 	bl	8005a80 <__NVIC_SetPriority>
}
 8005bc2:	bf00      	nop
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7ff ff35 	bl	8005a48 <__NVIC_EnableIRQ>
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff ffa2 	bl	8005b38 <SysTick_Config>
 8005bf4:	4603      	mov	r3, r0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e059      	b.n	8005cca <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4b2d      	ldr	r3, [pc, #180]	; (8005cd4 <HAL_DMA_Init+0xd4>)
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d80f      	bhi.n	8005c42 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	4b2b      	ldr	r3, [pc, #172]	; (8005cd8 <HAL_DMA_Init+0xd8>)
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <HAL_DMA_Init+0xdc>)
 8005c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	009a      	lsls	r2, r3, #2
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <HAL_DMA_Init+0xe0>)
 8005c3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c40:	e00e      	b.n	8005c60 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <HAL_DMA_Init+0xe4>)
 8005c4a:	4413      	add	r3, r2
 8005c4c:	4a23      	ldr	r2, [pc, #140]	; (8005cdc <HAL_DMA_Init+0xdc>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	009a      	lsls	r2, r3, #2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <HAL_DMA_Init+0xe8>)
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	40020407 	.word	0x40020407
 8005cd8:	bffdfff8 	.word	0xbffdfff8
 8005cdc:	cccccccd 	.word	0xcccccccd
 8005ce0:	40020000 	.word	0x40020000
 8005ce4:	bffdfbf8 	.word	0xbffdfbf8
 8005ce8:	40020400 	.word	0x40020400

08005cec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d101      	bne.n	8005d0c <HAL_DMA_Start_IT+0x20>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e04a      	b.n	8005da2 <HAL_DMA_Start_IT+0xb6>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d13a      	bne.n	8005d94 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fbb0 	bl	80064a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 020e 	orr.w	r2, r2, #14
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e00f      	b.n	8005d82 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0204 	bic.w	r2, r2, #4
 8005d70:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 020a 	orr.w	r2, r2, #10
 8005d80:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0201 	orr.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	e005      	b.n	8005da0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d008      	beq.n	8005dd2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e020      	b.n	8005e14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 020e 	bic.w	r2, r2, #14
 8005de0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005e00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d005      	beq.n	8005e42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2204      	movs	r2, #4
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
 8005e40:	e0d6      	b.n	8005ff0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 020e 	bic.w	r2, r2, #14
 8005e50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0201 	bic.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	4b64      	ldr	r3, [pc, #400]	; (8005ffc <HAL_DMA_Abort_IT+0x1dc>)
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d958      	bls.n	8005f20 <HAL_DMA_Abort_IT+0x100>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a63      	ldr	r2, [pc, #396]	; (8006000 <HAL_DMA_Abort_IT+0x1e0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d04f      	beq.n	8005f18 <HAL_DMA_Abort_IT+0xf8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a61      	ldr	r2, [pc, #388]	; (8006004 <HAL_DMA_Abort_IT+0x1e4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d048      	beq.n	8005f14 <HAL_DMA_Abort_IT+0xf4>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a60      	ldr	r2, [pc, #384]	; (8006008 <HAL_DMA_Abort_IT+0x1e8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d040      	beq.n	8005f0e <HAL_DMA_Abort_IT+0xee>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a5e      	ldr	r2, [pc, #376]	; (800600c <HAL_DMA_Abort_IT+0x1ec>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d038      	beq.n	8005f08 <HAL_DMA_Abort_IT+0xe8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a5d      	ldr	r2, [pc, #372]	; (8006010 <HAL_DMA_Abort_IT+0x1f0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d030      	beq.n	8005f02 <HAL_DMA_Abort_IT+0xe2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a5b      	ldr	r2, [pc, #364]	; (8006014 <HAL_DMA_Abort_IT+0x1f4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d028      	beq.n	8005efc <HAL_DMA_Abort_IT+0xdc>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a53      	ldr	r2, [pc, #332]	; (8005ffc <HAL_DMA_Abort_IT+0x1dc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d020      	beq.n	8005ef6 <HAL_DMA_Abort_IT+0xd6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a57      	ldr	r2, [pc, #348]	; (8006018 <HAL_DMA_Abort_IT+0x1f8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d019      	beq.n	8005ef2 <HAL_DMA_Abort_IT+0xd2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a56      	ldr	r2, [pc, #344]	; (800601c <HAL_DMA_Abort_IT+0x1fc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d012      	beq.n	8005eee <HAL_DMA_Abort_IT+0xce>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a54      	ldr	r2, [pc, #336]	; (8006020 <HAL_DMA_Abort_IT+0x200>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_DMA_Abort_IT+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a53      	ldr	r2, [pc, #332]	; (8006024 <HAL_DMA_Abort_IT+0x204>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d102      	bne.n	8005ee2 <HAL_DMA_Abort_IT+0xc2>
 8005edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ee0:	e01b      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ee6:	e018      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eec:	e015      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005eee:	2310      	movs	r3, #16
 8005ef0:	e013      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e011      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005efa:	e00e      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005efc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005f00:	e00b      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f06:	e008      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f0c:	e005      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f12:	e002      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005f14:	2310      	movs	r3, #16
 8005f16:	e000      	b.n	8005f1a <HAL_DMA_Abort_IT+0xfa>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	4a43      	ldr	r2, [pc, #268]	; (8006028 <HAL_DMA_Abort_IT+0x208>)
 8005f1c:	6053      	str	r3, [r2, #4]
 8005f1e:	e057      	b.n	8005fd0 <HAL_DMA_Abort_IT+0x1b0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a36      	ldr	r2, [pc, #216]	; (8006000 <HAL_DMA_Abort_IT+0x1e0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d04f      	beq.n	8005fca <HAL_DMA_Abort_IT+0x1aa>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a35      	ldr	r2, [pc, #212]	; (8006004 <HAL_DMA_Abort_IT+0x1e4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d048      	beq.n	8005fc6 <HAL_DMA_Abort_IT+0x1a6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a33      	ldr	r2, [pc, #204]	; (8006008 <HAL_DMA_Abort_IT+0x1e8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d040      	beq.n	8005fc0 <HAL_DMA_Abort_IT+0x1a0>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a32      	ldr	r2, [pc, #200]	; (800600c <HAL_DMA_Abort_IT+0x1ec>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d038      	beq.n	8005fba <HAL_DMA_Abort_IT+0x19a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a30      	ldr	r2, [pc, #192]	; (8006010 <HAL_DMA_Abort_IT+0x1f0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d030      	beq.n	8005fb4 <HAL_DMA_Abort_IT+0x194>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a2f      	ldr	r2, [pc, #188]	; (8006014 <HAL_DMA_Abort_IT+0x1f4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d028      	beq.n	8005fae <HAL_DMA_Abort_IT+0x18e>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <HAL_DMA_Abort_IT+0x1dc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d020      	beq.n	8005fa8 <HAL_DMA_Abort_IT+0x188>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2b      	ldr	r2, [pc, #172]	; (8006018 <HAL_DMA_Abort_IT+0x1f8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d019      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0x184>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a29      	ldr	r2, [pc, #164]	; (800601c <HAL_DMA_Abort_IT+0x1fc>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d012      	beq.n	8005fa0 <HAL_DMA_Abort_IT+0x180>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a28      	ldr	r2, [pc, #160]	; (8006020 <HAL_DMA_Abort_IT+0x200>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00a      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x17a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a26      	ldr	r2, [pc, #152]	; (8006024 <HAL_DMA_Abort_IT+0x204>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d102      	bne.n	8005f94 <HAL_DMA_Abort_IT+0x174>
 8005f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f92:	e01b      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f98:	e018      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9e:	e015      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	e013      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e011      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fac:	e00e      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fb2:	e00b      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fb8:	e008      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fbe:	e005      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc4:	e002      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	e000      	b.n	8005fcc <HAL_DMA_Abort_IT+0x1ac>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4a17      	ldr	r2, [pc, #92]	; (800602c <HAL_DMA_Abort_IT+0x20c>)
 8005fce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
    } 
  }
  return status;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40020080 	.word	0x40020080
 8006000:	40020008 	.word	0x40020008
 8006004:	4002001c 	.word	0x4002001c
 8006008:	40020030 	.word	0x40020030
 800600c:	40020044 	.word	0x40020044
 8006010:	40020058 	.word	0x40020058
 8006014:	4002006c 	.word	0x4002006c
 8006018:	40020408 	.word	0x40020408
 800601c:	4002041c 	.word	0x4002041c
 8006020:	40020430 	.word	0x40020430
 8006024:	40020444 	.word	0x40020444
 8006028:	40020400 	.word	0x40020400
 800602c:	40020000 	.word	0x40020000

08006030 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	2204      	movs	r2, #4
 800604e:	409a      	lsls	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4013      	ands	r3, r2
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80f1 	beq.w	800623c <HAL_DMA_IRQHandler+0x20c>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 80eb 	beq.w	800623c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d107      	bne.n	8006084 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0204 	bic.w	r2, r2, #4
 8006082:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	4b5f      	ldr	r3, [pc, #380]	; (8006208 <HAL_DMA_IRQHandler+0x1d8>)
 800608c:	429a      	cmp	r2, r3
 800608e:	d958      	bls.n	8006142 <HAL_DMA_IRQHandler+0x112>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5d      	ldr	r2, [pc, #372]	; (800620c <HAL_DMA_IRQHandler+0x1dc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d04f      	beq.n	800613a <HAL_DMA_IRQHandler+0x10a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5c      	ldr	r2, [pc, #368]	; (8006210 <HAL_DMA_IRQHandler+0x1e0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d048      	beq.n	8006136 <HAL_DMA_IRQHandler+0x106>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a5a      	ldr	r2, [pc, #360]	; (8006214 <HAL_DMA_IRQHandler+0x1e4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d040      	beq.n	8006130 <HAL_DMA_IRQHandler+0x100>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a59      	ldr	r2, [pc, #356]	; (8006218 <HAL_DMA_IRQHandler+0x1e8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d038      	beq.n	800612a <HAL_DMA_IRQHandler+0xfa>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a57      	ldr	r2, [pc, #348]	; (800621c <HAL_DMA_IRQHandler+0x1ec>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d030      	beq.n	8006124 <HAL_DMA_IRQHandler+0xf4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a56      	ldr	r2, [pc, #344]	; (8006220 <HAL_DMA_IRQHandler+0x1f0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d028      	beq.n	800611e <HAL_DMA_IRQHandler+0xee>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a4d      	ldr	r2, [pc, #308]	; (8006208 <HAL_DMA_IRQHandler+0x1d8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d020      	beq.n	8006118 <HAL_DMA_IRQHandler+0xe8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a52      	ldr	r2, [pc, #328]	; (8006224 <HAL_DMA_IRQHandler+0x1f4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d019      	beq.n	8006114 <HAL_DMA_IRQHandler+0xe4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a50      	ldr	r2, [pc, #320]	; (8006228 <HAL_DMA_IRQHandler+0x1f8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d012      	beq.n	8006110 <HAL_DMA_IRQHandler+0xe0>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a4f      	ldr	r2, [pc, #316]	; (800622c <HAL_DMA_IRQHandler+0x1fc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00a      	beq.n	800610a <HAL_DMA_IRQHandler+0xda>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a4d      	ldr	r2, [pc, #308]	; (8006230 <HAL_DMA_IRQHandler+0x200>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d102      	bne.n	8006104 <HAL_DMA_IRQHandler+0xd4>
 80060fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006102:	e01b      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006104:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006108:	e018      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 800610a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800610e:	e015      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006110:	2340      	movs	r3, #64	; 0x40
 8006112:	e013      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006114:	2304      	movs	r3, #4
 8006116:	e011      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006118:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800611c:	e00e      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 800611e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006122:	e00b      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006124:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006128:	e008      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 800612a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800612e:	e005      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006134:	e002      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	e000      	b.n	800613c <HAL_DMA_IRQHandler+0x10c>
 800613a:	2304      	movs	r3, #4
 800613c:	4a3d      	ldr	r2, [pc, #244]	; (8006234 <HAL_DMA_IRQHandler+0x204>)
 800613e:	6053      	str	r3, [r2, #4]
 8006140:	e057      	b.n	80061f2 <HAL_DMA_IRQHandler+0x1c2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a31      	ldr	r2, [pc, #196]	; (800620c <HAL_DMA_IRQHandler+0x1dc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d04f      	beq.n	80061ec <HAL_DMA_IRQHandler+0x1bc>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2f      	ldr	r2, [pc, #188]	; (8006210 <HAL_DMA_IRQHandler+0x1e0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d048      	beq.n	80061e8 <HAL_DMA_IRQHandler+0x1b8>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2e      	ldr	r2, [pc, #184]	; (8006214 <HAL_DMA_IRQHandler+0x1e4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d040      	beq.n	80061e2 <HAL_DMA_IRQHandler+0x1b2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <HAL_DMA_IRQHandler+0x1e8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d038      	beq.n	80061dc <HAL_DMA_IRQHandler+0x1ac>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_DMA_IRQHandler+0x1ec>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d030      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x1a6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a29      	ldr	r2, [pc, #164]	; (8006220 <HAL_DMA_IRQHandler+0x1f0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d028      	beq.n	80061d0 <HAL_DMA_IRQHandler+0x1a0>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	; (8006208 <HAL_DMA_IRQHandler+0x1d8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d020      	beq.n	80061ca <HAL_DMA_IRQHandler+0x19a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <HAL_DMA_IRQHandler+0x1f4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d019      	beq.n	80061c6 <HAL_DMA_IRQHandler+0x196>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a24      	ldr	r2, [pc, #144]	; (8006228 <HAL_DMA_IRQHandler+0x1f8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d012      	beq.n	80061c2 <HAL_DMA_IRQHandler+0x192>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a22      	ldr	r2, [pc, #136]	; (800622c <HAL_DMA_IRQHandler+0x1fc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00a      	beq.n	80061bc <HAL_DMA_IRQHandler+0x18c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_DMA_IRQHandler+0x200>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d102      	bne.n	80061b6 <HAL_DMA_IRQHandler+0x186>
 80061b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061b4:	e01b      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80061ba:	e018      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c0:	e015      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	e013      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061c6:	2304      	movs	r3, #4
 80061c8:	e011      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061ce:	e00e      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061d4:	e00b      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80061da:	e008      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061e0:	e005      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e6:	e002      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	e000      	b.n	80061ee <HAL_DMA_IRQHandler+0x1be>
 80061ec:	2304      	movs	r3, #4
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <HAL_DMA_IRQHandler+0x208>)
 80061f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 8136 	beq.w	8006468 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006204:	e130      	b.n	8006468 <HAL_DMA_IRQHandler+0x438>
 8006206:	bf00      	nop
 8006208:	40020080 	.word	0x40020080
 800620c:	40020008 	.word	0x40020008
 8006210:	4002001c 	.word	0x4002001c
 8006214:	40020030 	.word	0x40020030
 8006218:	40020044 	.word	0x40020044
 800621c:	40020058 	.word	0x40020058
 8006220:	4002006c 	.word	0x4002006c
 8006224:	40020408 	.word	0x40020408
 8006228:	4002041c 	.word	0x4002041c
 800622c:	40020430 	.word	0x40020430
 8006230:	40020444 	.word	0x40020444
 8006234:	40020400 	.word	0x40020400
 8006238:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	2202      	movs	r2, #2
 8006242:	409a      	lsls	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4013      	ands	r3, r2
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80dd 	beq.w	8006408 <HAL_DMA_IRQHandler+0x3d8>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80d7 	beq.w	8006408 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 020a 	bic.w	r2, r2, #10
 8006276:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <HAL_DMA_IRQHandler+0x444>)
 8006288:	429a      	cmp	r2, r3
 800628a:	d958      	bls.n	800633e <HAL_DMA_IRQHandler+0x30e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a79      	ldr	r2, [pc, #484]	; (8006478 <HAL_DMA_IRQHandler+0x448>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d04f      	beq.n	8006336 <HAL_DMA_IRQHandler+0x306>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a78      	ldr	r2, [pc, #480]	; (800647c <HAL_DMA_IRQHandler+0x44c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d048      	beq.n	8006332 <HAL_DMA_IRQHandler+0x302>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a76      	ldr	r2, [pc, #472]	; (8006480 <HAL_DMA_IRQHandler+0x450>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d040      	beq.n	800632c <HAL_DMA_IRQHandler+0x2fc>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a75      	ldr	r2, [pc, #468]	; (8006484 <HAL_DMA_IRQHandler+0x454>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d038      	beq.n	8006326 <HAL_DMA_IRQHandler+0x2f6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a73      	ldr	r2, [pc, #460]	; (8006488 <HAL_DMA_IRQHandler+0x458>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d030      	beq.n	8006320 <HAL_DMA_IRQHandler+0x2f0>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a72      	ldr	r2, [pc, #456]	; (800648c <HAL_DMA_IRQHandler+0x45c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d028      	beq.n	800631a <HAL_DMA_IRQHandler+0x2ea>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a69      	ldr	r2, [pc, #420]	; (8006474 <HAL_DMA_IRQHandler+0x444>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d020      	beq.n	8006314 <HAL_DMA_IRQHandler+0x2e4>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a6e      	ldr	r2, [pc, #440]	; (8006490 <HAL_DMA_IRQHandler+0x460>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d019      	beq.n	8006310 <HAL_DMA_IRQHandler+0x2e0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6c      	ldr	r2, [pc, #432]	; (8006494 <HAL_DMA_IRQHandler+0x464>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d012      	beq.n	800630c <HAL_DMA_IRQHandler+0x2dc>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a6b      	ldr	r2, [pc, #428]	; (8006498 <HAL_DMA_IRQHandler+0x468>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00a      	beq.n	8006306 <HAL_DMA_IRQHandler+0x2d6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a69      	ldr	r2, [pc, #420]	; (800649c <HAL_DMA_IRQHandler+0x46c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d102      	bne.n	8006300 <HAL_DMA_IRQHandler+0x2d0>
 80062fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062fe:	e01b      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006304:	e018      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630a:	e015      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 800630c:	2320      	movs	r3, #32
 800630e:	e013      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006310:	2302      	movs	r3, #2
 8006312:	e011      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006318:	e00e      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 800631a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800631e:	e00b      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006324:	e008      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800632a:	e005      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 800632c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006330:	e002      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006332:	2320      	movs	r3, #32
 8006334:	e000      	b.n	8006338 <HAL_DMA_IRQHandler+0x308>
 8006336:	2302      	movs	r3, #2
 8006338:	4a59      	ldr	r2, [pc, #356]	; (80064a0 <HAL_DMA_IRQHandler+0x470>)
 800633a:	6053      	str	r3, [r2, #4]
 800633c:	e057      	b.n	80063ee <HAL_DMA_IRQHandler+0x3be>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4d      	ldr	r2, [pc, #308]	; (8006478 <HAL_DMA_IRQHandler+0x448>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d04f      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x3b8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a4b      	ldr	r2, [pc, #300]	; (800647c <HAL_DMA_IRQHandler+0x44c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d048      	beq.n	80063e4 <HAL_DMA_IRQHandler+0x3b4>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <HAL_DMA_IRQHandler+0x450>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d040      	beq.n	80063de <HAL_DMA_IRQHandler+0x3ae>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a48      	ldr	r2, [pc, #288]	; (8006484 <HAL_DMA_IRQHandler+0x454>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d038      	beq.n	80063d8 <HAL_DMA_IRQHandler+0x3a8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a47      	ldr	r2, [pc, #284]	; (8006488 <HAL_DMA_IRQHandler+0x458>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d030      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x3a2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a45      	ldr	r2, [pc, #276]	; (800648c <HAL_DMA_IRQHandler+0x45c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d028      	beq.n	80063cc <HAL_DMA_IRQHandler+0x39c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3d      	ldr	r2, [pc, #244]	; (8006474 <HAL_DMA_IRQHandler+0x444>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d020      	beq.n	80063c6 <HAL_DMA_IRQHandler+0x396>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a41      	ldr	r2, [pc, #260]	; (8006490 <HAL_DMA_IRQHandler+0x460>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d019      	beq.n	80063c2 <HAL_DMA_IRQHandler+0x392>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a40      	ldr	r2, [pc, #256]	; (8006494 <HAL_DMA_IRQHandler+0x464>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d012      	beq.n	80063be <HAL_DMA_IRQHandler+0x38e>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a3e      	ldr	r2, [pc, #248]	; (8006498 <HAL_DMA_IRQHandler+0x468>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00a      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x388>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a3d      	ldr	r2, [pc, #244]	; (800649c <HAL_DMA_IRQHandler+0x46c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d102      	bne.n	80063b2 <HAL_DMA_IRQHandler+0x382>
 80063ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063b0:	e01b      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063b6:	e018      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063bc:	e015      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063be:	2320      	movs	r3, #32
 80063c0:	e013      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063c2:	2302      	movs	r3, #2
 80063c4:	e011      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ca:	e00e      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063d0:	e00b      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063d6:	e008      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063dc:	e005      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e2:	e002      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063e4:	2320      	movs	r3, #32
 80063e6:	e000      	b.n	80063ea <HAL_DMA_IRQHandler+0x3ba>
 80063e8:	2302      	movs	r3, #2
 80063ea:	4a2e      	ldr	r2, [pc, #184]	; (80064a4 <HAL_DMA_IRQHandler+0x474>)
 80063ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d034      	beq.n	8006468 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006406:	e02f      	b.n	8006468 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	2208      	movs	r2, #8
 800640e:	409a      	lsls	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d028      	beq.n	800646a <HAL_DMA_IRQHandler+0x43a>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d023      	beq.n	800646a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 020e 	bic.w	r2, r2, #14
 8006430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f202 	lsl.w	r2, r1, r2
 8006440:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	4798      	blx	r3
    }
  }
  return;
 8006468:	bf00      	nop
 800646a:	bf00      	nop
}
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40020080 	.word	0x40020080
 8006478:	40020008 	.word	0x40020008
 800647c:	4002001c 	.word	0x4002001c
 8006480:	40020030 	.word	0x40020030
 8006484:	40020044 	.word	0x40020044
 8006488:	40020058 	.word	0x40020058
 800648c:	4002006c 	.word	0x4002006c
 8006490:	40020408 	.word	0x40020408
 8006494:	4002041c 	.word	0x4002041c
 8006498:	40020430 	.word	0x40020430
 800649c:	40020444 	.word	0x40020444
 80064a0:	40020400 	.word	0x40020400
 80064a4:	40020000 	.word	0x40020000

080064a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f202 	lsl.w	r2, r1, r2
 80064c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b10      	cmp	r3, #16
 80064d4:	d108      	bne.n	80064e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064e6:	e007      	b.n	80064f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
	...

08006504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006504:	b480      	push	{r7}
 8006506:	b08b      	sub	sp, #44	; 0x2c
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006516:	e169      	b.n	80067ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006518:	2201      	movs	r2, #1
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	4013      	ands	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	429a      	cmp	r2, r3
 8006532:	f040 8158 	bne.w	80067e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4a9a      	ldr	r2, [pc, #616]	; (80067a4 <HAL_GPIO_Init+0x2a0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d05e      	beq.n	80065fe <HAL_GPIO_Init+0xfa>
 8006540:	4a98      	ldr	r2, [pc, #608]	; (80067a4 <HAL_GPIO_Init+0x2a0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d875      	bhi.n	8006632 <HAL_GPIO_Init+0x12e>
 8006546:	4a98      	ldr	r2, [pc, #608]	; (80067a8 <HAL_GPIO_Init+0x2a4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d058      	beq.n	80065fe <HAL_GPIO_Init+0xfa>
 800654c:	4a96      	ldr	r2, [pc, #600]	; (80067a8 <HAL_GPIO_Init+0x2a4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d86f      	bhi.n	8006632 <HAL_GPIO_Init+0x12e>
 8006552:	4a96      	ldr	r2, [pc, #600]	; (80067ac <HAL_GPIO_Init+0x2a8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d052      	beq.n	80065fe <HAL_GPIO_Init+0xfa>
 8006558:	4a94      	ldr	r2, [pc, #592]	; (80067ac <HAL_GPIO_Init+0x2a8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d869      	bhi.n	8006632 <HAL_GPIO_Init+0x12e>
 800655e:	4a94      	ldr	r2, [pc, #592]	; (80067b0 <HAL_GPIO_Init+0x2ac>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d04c      	beq.n	80065fe <HAL_GPIO_Init+0xfa>
 8006564:	4a92      	ldr	r2, [pc, #584]	; (80067b0 <HAL_GPIO_Init+0x2ac>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d863      	bhi.n	8006632 <HAL_GPIO_Init+0x12e>
 800656a:	4a92      	ldr	r2, [pc, #584]	; (80067b4 <HAL_GPIO_Init+0x2b0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d046      	beq.n	80065fe <HAL_GPIO_Init+0xfa>
 8006570:	4a90      	ldr	r2, [pc, #576]	; (80067b4 <HAL_GPIO_Init+0x2b0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d85d      	bhi.n	8006632 <HAL_GPIO_Init+0x12e>
 8006576:	2b12      	cmp	r3, #18
 8006578:	d82a      	bhi.n	80065d0 <HAL_GPIO_Init+0xcc>
 800657a:	2b12      	cmp	r3, #18
 800657c:	d859      	bhi.n	8006632 <HAL_GPIO_Init+0x12e>
 800657e:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_GPIO_Init+0x80>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	080065ff 	.word	0x080065ff
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065eb 	.word	0x080065eb
 8006590:	0800662d 	.word	0x0800662d
 8006594:	08006633 	.word	0x08006633
 8006598:	08006633 	.word	0x08006633
 800659c:	08006633 	.word	0x08006633
 80065a0:	08006633 	.word	0x08006633
 80065a4:	08006633 	.word	0x08006633
 80065a8:	08006633 	.word	0x08006633
 80065ac:	08006633 	.word	0x08006633
 80065b0:	08006633 	.word	0x08006633
 80065b4:	08006633 	.word	0x08006633
 80065b8:	08006633 	.word	0x08006633
 80065bc:	08006633 	.word	0x08006633
 80065c0:	08006633 	.word	0x08006633
 80065c4:	08006633 	.word	0x08006633
 80065c8:	080065e1 	.word	0x080065e1
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	4a79      	ldr	r2, [pc, #484]	; (80067b8 <HAL_GPIO_Init+0x2b4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80065d6:	e02c      	b.n	8006632 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	623b      	str	r3, [r7, #32]
          break;
 80065de:	e029      	b.n	8006634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	3304      	adds	r3, #4
 80065e6:	623b      	str	r3, [r7, #32]
          break;
 80065e8:	e024      	b.n	8006634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	3308      	adds	r3, #8
 80065f0:	623b      	str	r3, [r7, #32]
          break;
 80065f2:	e01f      	b.n	8006634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	330c      	adds	r3, #12
 80065fa:	623b      	str	r3, [r7, #32]
          break;
 80065fc:	e01a      	b.n	8006634 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006606:	2304      	movs	r3, #4
 8006608:	623b      	str	r3, [r7, #32]
          break;
 800660a:	e013      	b.n	8006634 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006614:	2308      	movs	r3, #8
 8006616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	611a      	str	r2, [r3, #16]
          break;
 800661e:	e009      	b.n	8006634 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006620:	2308      	movs	r3, #8
 8006622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	615a      	str	r2, [r3, #20]
          break;
 800662a:	e003      	b.n	8006634 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800662c:	2300      	movs	r3, #0
 800662e:	623b      	str	r3, [r7, #32]
          break;
 8006630:	e000      	b.n	8006634 <HAL_GPIO_Init+0x130>
          break;
 8006632:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2bff      	cmp	r3, #255	; 0xff
 8006638:	d801      	bhi.n	800663e <HAL_GPIO_Init+0x13a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	e001      	b.n	8006642 <HAL_GPIO_Init+0x13e>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3304      	adds	r3, #4
 8006642:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2bff      	cmp	r3, #255	; 0xff
 8006648:	d802      	bhi.n	8006650 <HAL_GPIO_Init+0x14c>
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	e002      	b.n	8006656 <HAL_GPIO_Init+0x152>
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	3b08      	subs	r3, #8
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	210f      	movs	r1, #15
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	401a      	ands	r2, r3
 8006668:	6a39      	ldr	r1, [r7, #32]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	fa01 f303 	lsl.w	r3, r1, r3
 8006670:	431a      	orrs	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80b1 	beq.w	80067e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006684:	4b4d      	ldr	r3, [pc, #308]	; (80067bc <HAL_GPIO_Init+0x2b8>)
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	4a4c      	ldr	r2, [pc, #304]	; (80067bc <HAL_GPIO_Init+0x2b8>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6193      	str	r3, [r2, #24]
 8006690:	4b4a      	ldr	r3, [pc, #296]	; (80067bc <HAL_GPIO_Init+0x2b8>)
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800669c:	4a48      	ldr	r2, [pc, #288]	; (80067c0 <HAL_GPIO_Init+0x2bc>)
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	089b      	lsrs	r3, r3, #2
 80066a2:	3302      	adds	r3, #2
 80066a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	220f      	movs	r2, #15
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	43db      	mvns	r3, r3
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4013      	ands	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a40      	ldr	r2, [pc, #256]	; (80067c4 <HAL_GPIO_Init+0x2c0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d013      	beq.n	80066f0 <HAL_GPIO_Init+0x1ec>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <HAL_GPIO_Init+0x2c4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00d      	beq.n	80066ec <HAL_GPIO_Init+0x1e8>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3e      	ldr	r2, [pc, #248]	; (80067cc <HAL_GPIO_Init+0x2c8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <HAL_GPIO_Init+0x1e4>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a3d      	ldr	r2, [pc, #244]	; (80067d0 <HAL_GPIO_Init+0x2cc>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d101      	bne.n	80066e4 <HAL_GPIO_Init+0x1e0>
 80066e0:	2303      	movs	r3, #3
 80066e2:	e006      	b.n	80066f2 <HAL_GPIO_Init+0x1ee>
 80066e4:	2304      	movs	r3, #4
 80066e6:	e004      	b.n	80066f2 <HAL_GPIO_Init+0x1ee>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e002      	b.n	80066f2 <HAL_GPIO_Init+0x1ee>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_GPIO_Init+0x1ee>
 80066f0:	2300      	movs	r3, #0
 80066f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f4:	f002 0203 	and.w	r2, r2, #3
 80066f8:	0092      	lsls	r2, r2, #2
 80066fa:	4093      	lsls	r3, r2
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006702:	492f      	ldr	r1, [pc, #188]	; (80067c0 <HAL_GPIO_Init+0x2bc>)
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	089b      	lsrs	r3, r3, #2
 8006708:	3302      	adds	r3, #2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	492c      	ldr	r1, [pc, #176]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4313      	orrs	r3, r2
 8006726:	600b      	str	r3, [r1, #0]
 8006728:	e006      	b.n	8006738 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800672a:	4b2a      	ldr	r3, [pc, #168]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	43db      	mvns	r3, r3
 8006732:	4928      	ldr	r1, [pc, #160]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006734:	4013      	ands	r3, r2
 8006736:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d006      	beq.n	8006752 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006744:	4b23      	ldr	r3, [pc, #140]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	4922      	ldr	r1, [pc, #136]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	e006      	b.n	8006760 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	43db      	mvns	r3, r3
 800675a:	491e      	ldr	r1, [pc, #120]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800675c:	4013      	ands	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800676c:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	4918      	ldr	r1, [pc, #96]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	4313      	orrs	r3, r2
 8006776:	608b      	str	r3, [r1, #8]
 8006778:	e006      	b.n	8006788 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	43db      	mvns	r3, r3
 8006782:	4914      	ldr	r1, [pc, #80]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006784:	4013      	ands	r3, r2
 8006786:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d021      	beq.n	80067d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006794:	4b0f      	ldr	r3, [pc, #60]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	490e      	ldr	r1, [pc, #56]	; (80067d4 <HAL_GPIO_Init+0x2d0>)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	4313      	orrs	r3, r2
 800679e:	60cb      	str	r3, [r1, #12]
 80067a0:	e021      	b.n	80067e6 <HAL_GPIO_Init+0x2e2>
 80067a2:	bf00      	nop
 80067a4:	10320000 	.word	0x10320000
 80067a8:	10310000 	.word	0x10310000
 80067ac:	10220000 	.word	0x10220000
 80067b0:	10210000 	.word	0x10210000
 80067b4:	10120000 	.word	0x10120000
 80067b8:	10110000 	.word	0x10110000
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40010800 	.word	0x40010800
 80067c8:	40010c00 	.word	0x40010c00
 80067cc:	40011000 	.word	0x40011000
 80067d0:	40011400 	.word	0x40011400
 80067d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <HAL_GPIO_Init+0x304>)
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	43db      	mvns	r3, r3
 80067e0:	4909      	ldr	r1, [pc, #36]	; (8006808 <HAL_GPIO_Init+0x304>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	3301      	adds	r3, #1
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f47f ae8e 	bne.w	8006518 <HAL_GPIO_Init+0x14>
  }
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	372c      	adds	r7, #44	; 0x2c
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr
 8006808:	40010400 	.word	0x40010400

0800680c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	887b      	ldrh	r3, [r7, #2]
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006824:	2301      	movs	r3, #1
 8006826:	73fb      	strb	r3, [r7, #15]
 8006828:	e001      	b.n	800682e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	807b      	strh	r3, [r7, #2]
 8006846:	4613      	mov	r3, r2
 8006848:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800684a:	787b      	ldrb	r3, [r7, #1]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006850:	887a      	ldrh	r2, [r7, #2]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006856:	e003      	b.n	8006860 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006858:	887b      	ldrh	r3, [r7, #2]
 800685a:	041a      	lsls	r2, r3, #16
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	611a      	str	r2, [r3, #16]
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800687c:	887a      	ldrh	r2, [r7, #2]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4013      	ands	r3, r2
 8006882:	041a      	lsls	r2, r3, #16
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	43d9      	mvns	r1, r3
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	400b      	ands	r3, r1
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	611a      	str	r2, [r3, #16]
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr

0800689c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068a6:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068b2:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fa fe24 	bl	8001508 <HAL_GPIO_EXTI_Callback>
  }
}
 80068c0:	bf00      	nop
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40010400 	.word	0x40010400

080068cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e304      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8087 	beq.w	80069fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068ec:	4b92      	ldr	r3, [pc, #584]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d00c      	beq.n	8006912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068f8:	4b8f      	ldr	r3, [pc, #572]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f003 030c 	and.w	r3, r3, #12
 8006900:	2b08      	cmp	r3, #8
 8006902:	d112      	bne.n	800692a <HAL_RCC_OscConfig+0x5e>
 8006904:	4b8c      	ldr	r3, [pc, #560]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006910:	d10b      	bne.n	800692a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006912:	4b89      	ldr	r3, [pc, #548]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d06c      	beq.n	80069f8 <HAL_RCC_OscConfig+0x12c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d168      	bne.n	80069f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e2de      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006932:	d106      	bne.n	8006942 <HAL_RCC_OscConfig+0x76>
 8006934:	4b80      	ldr	r3, [pc, #512]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a7f      	ldr	r2, [pc, #508]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800693a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e02e      	b.n	80069a0 <HAL_RCC_OscConfig+0xd4>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10c      	bne.n	8006964 <HAL_RCC_OscConfig+0x98>
 800694a:	4b7b      	ldr	r3, [pc, #492]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7a      	ldr	r2, [pc, #488]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4b78      	ldr	r3, [pc, #480]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a77      	ldr	r2, [pc, #476]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800695c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e01d      	b.n	80069a0 <HAL_RCC_OscConfig+0xd4>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800696c:	d10c      	bne.n	8006988 <HAL_RCC_OscConfig+0xbc>
 800696e:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a71      	ldr	r2, [pc, #452]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	4b6f      	ldr	r3, [pc, #444]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a6e      	ldr	r2, [pc, #440]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006984:	6013      	str	r3, [r2, #0]
 8006986:	e00b      	b.n	80069a0 <HAL_RCC_OscConfig+0xd4>
 8006988:	4b6b      	ldr	r3, [pc, #428]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a6a      	ldr	r2, [pc, #424]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800698e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	4b68      	ldr	r3, [pc, #416]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a67      	ldr	r2, [pc, #412]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 800699a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800699e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d013      	beq.n	80069d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a8:	f7fe f9a4 	bl	8004cf4 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069b0:	f7fe f9a0 	bl	8004cf4 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b64      	cmp	r3, #100	; 0x64
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e292      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069c2:	4b5d      	ldr	r3, [pc, #372]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0xe4>
 80069ce:	e014      	b.n	80069fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fe f990 	bl	8004cf4 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069d8:	f7fe f98c 	bl	8004cf4 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b64      	cmp	r3, #100	; 0x64
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e27e      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ea:	4b53      	ldr	r3, [pc, #332]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x10c>
 80069f6:	e000      	b.n	80069fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d063      	beq.n	8006ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a06:	4b4c      	ldr	r3, [pc, #304]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f003 030c 	and.w	r3, r3, #12
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a12:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d11c      	bne.n	8006a58 <HAL_RCC_OscConfig+0x18c>
 8006a1e:	4b46      	ldr	r3, [pc, #280]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d116      	bne.n	8006a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a2a:	4b43      	ldr	r3, [pc, #268]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_RCC_OscConfig+0x176>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d001      	beq.n	8006a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e252      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a42:	4b3d      	ldr	r3, [pc, #244]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4939      	ldr	r1, [pc, #228]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a56:	e03a      	b.n	8006ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d020      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a60:	4b36      	ldr	r3, [pc, #216]	; (8006b3c <HAL_RCC_OscConfig+0x270>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a66:	f7fe f945 	bl	8004cf4 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a6e:	f7fe f941 	bl	8004cf4 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e233      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a80:	4b2d      	ldr	r3, [pc, #180]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a8c:	4b2a      	ldr	r3, [pc, #168]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	4927      	ldr	r1, [pc, #156]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	600b      	str	r3, [r1, #0]
 8006aa0:	e015      	b.n	8006ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006aa2:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <HAL_RCC_OscConfig+0x270>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7fe f924 	bl	8004cf4 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fe f920 	bl	8004cf4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e212      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03a      	beq.n	8006b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d019      	beq.n	8006b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <HAL_RCC_OscConfig+0x274>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae8:	f7fe f904 	bl	8004cf4 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af0:	f7fe f900 	bl	8004cf4 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e1f2      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <HAL_RCC_OscConfig+0x26c>)
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006b0e:	2001      	movs	r0, #1
 8006b10:	f000 fc20 	bl	8007354 <RCC_Delay>
 8006b14:	e01c      	b.n	8006b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <HAL_RCC_OscConfig+0x274>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1c:	f7fe f8ea 	bl	8004cf4 <HAL_GetTick>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b22:	e00f      	b.n	8006b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b24:	f7fe f8e6 	bl	8004cf4 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d908      	bls.n	8006b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e1d8      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
 8006b36:	bf00      	nop
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	42420000 	.word	0x42420000
 8006b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b44:	4b9b      	ldr	r3, [pc, #620]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e9      	bne.n	8006b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80a6 	beq.w	8006caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b62:	4b94      	ldr	r3, [pc, #592]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10d      	bne.n	8006b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6e:	4b91      	ldr	r3, [pc, #580]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4a90      	ldr	r2, [pc, #576]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b78:	61d3      	str	r3, [r2, #28]
 8006b7a:	4b8e      	ldr	r3, [pc, #568]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8a:	4b8b      	ldr	r3, [pc, #556]	; (8006db8 <HAL_RCC_OscConfig+0x4ec>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d118      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b96:	4b88      	ldr	r3, [pc, #544]	; (8006db8 <HAL_RCC_OscConfig+0x4ec>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a87      	ldr	r2, [pc, #540]	; (8006db8 <HAL_RCC_OscConfig+0x4ec>)
 8006b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ba2:	f7fe f8a7 	bl	8004cf4 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	e008      	b.n	8006bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006baa:	f7fe f8a3 	bl	8004cf4 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b64      	cmp	r3, #100	; 0x64
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e195      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bbc:	4b7e      	ldr	r3, [pc, #504]	; (8006db8 <HAL_RCC_OscConfig+0x4ec>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d106      	bne.n	8006bde <HAL_RCC_OscConfig+0x312>
 8006bd0:	4b78      	ldr	r3, [pc, #480]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	4a77      	ldr	r2, [pc, #476]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	6213      	str	r3, [r2, #32]
 8006bdc:	e02d      	b.n	8006c3a <HAL_RCC_OscConfig+0x36e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x334>
 8006be6:	4b73      	ldr	r3, [pc, #460]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	4a72      	ldr	r2, [pc, #456]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	6213      	str	r3, [r2, #32]
 8006bf2:	4b70      	ldr	r3, [pc, #448]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4a6f      	ldr	r2, [pc, #444]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	6213      	str	r3, [r2, #32]
 8006bfe:	e01c      	b.n	8006c3a <HAL_RCC_OscConfig+0x36e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d10c      	bne.n	8006c22 <HAL_RCC_OscConfig+0x356>
 8006c08:	4b6a      	ldr	r3, [pc, #424]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	4a69      	ldr	r2, [pc, #420]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c0e:	f043 0304 	orr.w	r3, r3, #4
 8006c12:	6213      	str	r3, [r2, #32]
 8006c14:	4b67      	ldr	r3, [pc, #412]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	4a66      	ldr	r2, [pc, #408]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	6213      	str	r3, [r2, #32]
 8006c20:	e00b      	b.n	8006c3a <HAL_RCC_OscConfig+0x36e>
 8006c22:	4b64      	ldr	r3, [pc, #400]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	4a63      	ldr	r2, [pc, #396]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	6213      	str	r3, [r2, #32]
 8006c2e:	4b61      	ldr	r3, [pc, #388]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	4a60      	ldr	r2, [pc, #384]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d015      	beq.n	8006c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c42:	f7fe f857 	bl	8004cf4 <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c48:	e00a      	b.n	8006c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c4a:	f7fe f853 	bl	8004cf4 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e143      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c60:	4b54      	ldr	r3, [pc, #336]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ee      	beq.n	8006c4a <HAL_RCC_OscConfig+0x37e>
 8006c6c:	e014      	b.n	8006c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c6e:	f7fe f841 	bl	8004cf4 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c74:	e00a      	b.n	8006c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c76:	f7fe f83d 	bl	8004cf4 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e12d      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c8c:	4b49      	ldr	r3, [pc, #292]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ee      	bne.n	8006c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d105      	bne.n	8006caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c9e:	4b45      	ldr	r3, [pc, #276]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	4a44      	ldr	r2, [pc, #272]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 808c 	beq.w	8006dcc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8006cb4:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc0:	d10e      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8006cc2:	4b3c      	ldr	r3, [pc, #240]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d108      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8006cce:	4b39      	ldr	r3, [pc, #228]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8006cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e103      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d14e      	bne.n	8006d86 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8006ce8:	4b32      	ldr	r3, [pc, #200]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8006cf4:	4b2f      	ldr	r3, [pc, #188]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0ef      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8006d08:	4b2c      	ldr	r3, [pc, #176]	; (8006dbc <HAL_RCC_OscConfig+0x4f0>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0e:	f7fd fff1 	bl	8004cf4 <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006d14:	e008      	b.n	8006d28 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d16:	f7fd ffed 	bl	8004cf4 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b64      	cmp	r3, #100	; 0x64
 8006d22:	d901      	bls.n	8006d28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e0df      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006d28:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f0      	bne.n	8006d16 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8006d34:	4b1f      	ldr	r3, [pc, #124]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d40:	491c      	ldr	r1, [pc, #112]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8006d46:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d52:	4918      	ldr	r1, [pc, #96]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8006d58:	4b18      	ldr	r3, [pc, #96]	; (8006dbc <HAL_RCC_OscConfig+0x4f0>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d5e:	f7fd ffc9 	bl	8004cf4 <HAL_GetTick>
 8006d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d66:	f7fd ffc5 	bl	8004cf4 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b64      	cmp	r3, #100	; 0x64
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e0b7      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006d78:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d0f0      	beq.n	8006d66 <HAL_RCC_OscConfig+0x49a>
 8006d84:	e022      	b.n	8006dcc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <HAL_RCC_OscConfig+0x4e8>)
 8006d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <HAL_RCC_OscConfig+0x4f0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d98:	f7fd ffac 	bl	8004cf4 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8006d9e:	e00f      	b.n	8006dc0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006da0:	f7fd ffa8 	bl	8004cf4 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b64      	cmp	r3, #100	; 0x64
 8006dac:	d908      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e09a      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
 8006db2:	bf00      	nop
 8006db4:	40021000 	.word	0x40021000
 8006db8:	40007000 	.word	0x40007000
 8006dbc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8006dc0:	4b4b      	ldr	r3, [pc, #300]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e9      	bne.n	8006da0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 8088 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dd6:	4b46      	ldr	r3, [pc, #280]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 030c 	and.w	r3, r3, #12
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d068      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d14d      	bne.n	8006e86 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dea:	4b42      	ldr	r3, [pc, #264]	; (8006ef4 <HAL_RCC_OscConfig+0x628>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df0:	f7fd ff80 	bl	8004cf4 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df8:	f7fd ff7c 	bl	8004cf4 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e06e      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e0a:	4b39      	ldr	r3, [pc, #228]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1e:	d10f      	bne.n	8006e40 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8006e20:	4b33      	ldr	r3, [pc, #204]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	4931      	ldr	r1, [pc, #196]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e2e:	4b30      	ldr	r3, [pc, #192]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	492d      	ldr	r1, [pc, #180]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e40:	4b2b      	ldr	r3, [pc, #172]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	430b      	orrs	r3, r1
 8006e52:	4927      	ldr	r1, [pc, #156]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e58:	4b26      	ldr	r3, [pc, #152]	; (8006ef4 <HAL_RCC_OscConfig+0x628>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5e:	f7fd ff49 	bl	8004cf4 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fd ff45 	bl	8004cf4 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e037      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e78:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x59a>
 8006e84:	e02f      	b.n	8006ee6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b1b      	ldr	r3, [pc, #108]	; (8006ef4 <HAL_RCC_OscConfig+0x628>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fd ff32 	bl	8004cf4 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fd ff2e 	bl	8004cf4 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e020      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x5c8>
 8006eb2:	e018      	b.n	8006ee6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e013      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <HAL_RCC_OscConfig+0x624>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d106      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d001      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	42420060 	.word	0x42420060

08006ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0d0      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b6a      	ldr	r3, [pc, #424]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d910      	bls.n	8006f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f023 0207 	bic.w	r2, r3, #7
 8006f22:	4965      	ldr	r1, [pc, #404]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2a:	4b63      	ldr	r3, [pc, #396]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0b8      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d020      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f54:	4b59      	ldr	r3, [pc, #356]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a58      	ldr	r2, [pc, #352]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f6c:	4b53      	ldr	r3, [pc, #332]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a52      	ldr	r2, [pc, #328]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f78:	4b50      	ldr	r3, [pc, #320]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	494d      	ldr	r1, [pc, #308]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d040      	beq.n	8007018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9e:	4b47      	ldr	r3, [pc, #284]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d115      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e07f      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d107      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb6:	4b41      	ldr	r3, [pc, #260]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e073      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fc6:	4b3d      	ldr	r3, [pc, #244]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e06b      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fd6:	4b39      	ldr	r3, [pc, #228]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f023 0203 	bic.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4936      	ldr	r1, [pc, #216]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fe8:	f7fd fe84 	bl	8004cf4 <HAL_GetTick>
 8006fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	e00a      	b.n	8007006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff0:	f7fd fe80 	bl	8004cf4 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e053      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007006:	4b2d      	ldr	r3, [pc, #180]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f003 020c 	and.w	r2, r3, #12
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	429a      	cmp	r2, r3
 8007016:	d1eb      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007018:	4b27      	ldr	r3, [pc, #156]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d210      	bcs.n	8007048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007026:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f023 0207 	bic.w	r2, r3, #7
 800702e:	4922      	ldr	r1, [pc, #136]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007036:	4b20      	ldr	r3, [pc, #128]	; (80070b8 <HAL_RCC_ClockConfig+0x1c0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e032      	b.n	80070ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4916      	ldr	r1, [pc, #88]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8007062:	4313      	orrs	r3, r2
 8007064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	490e      	ldr	r1, [pc, #56]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 8007082:	4313      	orrs	r3, r2
 8007084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007086:	f000 f821 	bl	80070cc <HAL_RCC_GetSysClockFreq>
 800708a:	4602      	mov	r2, r0
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_RCC_ClockConfig+0x1c4>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	091b      	lsrs	r3, r3, #4
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	490a      	ldr	r1, [pc, #40]	; (80070c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007098:	5ccb      	ldrb	r3, [r1, r3]
 800709a:	fa22 f303 	lsr.w	r3, r2, r3
 800709e:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <HAL_RCC_ClockConfig+0x1cc>)
 80070a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <HAL_RCC_ClockConfig+0x1d0>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fd fde2 	bl	8004c70 <HAL_InitTick>

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40022000 	.word	0x40022000
 80070bc:	40021000 	.word	0x40021000
 80070c0:	080087ec 	.word	0x080087ec
 80070c4:	20000020 	.word	0x20000020
 80070c8:	200003ac 	.word	0x200003ac

080070cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	b09d      	sub	sp, #116	; 0x74
 80070d2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80070d4:	4b81      	ldr	r3, [pc, #516]	; (80072dc <HAL_RCC_GetSysClockFreq+0x210>)
 80070d6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80070da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070dc:	c407      	stmia	r4!, {r0, r1, r2}
 80070de:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80070e0:	4b7f      	ldr	r3, [pc, #508]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x214>)
 80070e2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80070e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	667b      	str	r3, [r7, #100]	; 0x64
 80070f0:	2300      	movs	r3, #0
 80070f2:	663b      	str	r3, [r7, #96]	; 0x60
 80070f4:	2300      	movs	r3, #0
 80070f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f8:	2300      	movs	r3, #0
 80070fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	65bb      	str	r3, [r7, #88]	; 0x58
 8007104:	2300      	movs	r3, #0
 8007106:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007108:	4b76      	ldr	r3, [pc, #472]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800710e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007110:	f003 030c 	and.w	r3, r3, #12
 8007114:	2b04      	cmp	r3, #4
 8007116:	d002      	beq.n	800711e <HAL_RCC_GetSysClockFreq+0x52>
 8007118:	2b08      	cmp	r3, #8
 800711a:	d003      	beq.n	8007124 <HAL_RCC_GetSysClockFreq+0x58>
 800711c:	e0d4      	b.n	80072c8 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800711e:	4b72      	ldr	r3, [pc, #456]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8007120:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8007122:	e0d4      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007126:	0c9b      	lsrs	r3, r3, #18
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	3340      	adds	r3, #64	; 0x40
 800712e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007132:	4413      	add	r3, r2
 8007134:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8007138:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800713a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800713c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80b9 	beq.w	80072b8 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8007146:	4b67      	ldr	r3, [pc, #412]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x218>)
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	3340      	adds	r3, #64	; 0x40
 8007150:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007154:	4413      	add	r3, r2
 8007156:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800715a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800715c:	4b61      	ldr	r3, [pc, #388]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8095 	beq.w	8007294 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800716a:	4b5e      	ldr	r3, [pc, #376]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	091b      	lsrs	r3, r3, #4
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	3301      	adds	r3, #1
 8007176:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8007178:	4b5a      	ldr	r3, [pc, #360]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	3302      	adds	r3, #2
 8007184:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8007186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007188:	2200      	movs	r2, #0
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	61fa      	str	r2, [r7, #28]
 800718e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007190:	2200      	movs	r2, #0
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
 8007194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007196:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800719a:	4622      	mov	r2, r4
 800719c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071a0:	4684      	mov	ip, r0
 80071a2:	fb0c f202 	mul.w	r2, ip, r2
 80071a6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80071aa:	468c      	mov	ip, r1
 80071ac:	4618      	mov	r0, r3
 80071ae:	4621      	mov	r1, r4
 80071b0:	4603      	mov	r3, r0
 80071b2:	fb03 f30c 	mul.w	r3, r3, ip
 80071b6:	4413      	add	r3, r2
 80071b8:	4602      	mov	r2, r0
 80071ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071bc:	fba2 8901 	umull	r8, r9, r2, r1
 80071c0:	444b      	add	r3, r9
 80071c2:	4699      	mov	r9, r3
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	f04f 0000 	mov.w	r0, #0
 80071cc:	f04f 0100 	mov.w	r1, #0
 80071d0:	0159      	lsls	r1, r3, #5
 80071d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071d6:	0150      	lsls	r0, r2, #5
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	ebb2 0508 	subs.w	r5, r2, r8
 80071e0:	eb63 0609 	sbc.w	r6, r3, r9
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	01b3      	lsls	r3, r6, #6
 80071ee:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 80071f2:	01aa      	lsls	r2, r5, #6
 80071f4:	ebb2 0a05 	subs.w	sl, r2, r5
 80071f8:	eb63 0b06 	sbc.w	fp, r3, r6
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800720c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007210:	4692      	mov	sl, r2
 8007212:	469b      	mov	fp, r3
 8007214:	eb1a 0308 	adds.w	r3, sl, r8
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	eb4b 0309 	adc.w	r3, fp, r9
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	e9d7 4500 	ldrd	r4, r5, [r7]
 800722c:	4629      	mov	r1, r5
 800722e:	024b      	lsls	r3, r1, #9
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	4604      	mov	r4, r0
 8007236:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800723a:	4601      	mov	r1, r0
 800723c:	024a      	lsls	r2, r1, #9
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007244:	2200      	movs	r2, #0
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	617a      	str	r2, [r7, #20]
 800724a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800724c:	2200      	movs	r2, #0
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	60fa      	str	r2, [r7, #12]
 8007252:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007256:	4622      	mov	r2, r4
 8007258:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800725c:	4645      	mov	r5, r8
 800725e:	fb05 f202 	mul.w	r2, r5, r2
 8007262:	464e      	mov	r6, r9
 8007264:	4625      	mov	r5, r4
 8007266:	461c      	mov	r4, r3
 8007268:	4623      	mov	r3, r4
 800726a:	fb03 f306 	mul.w	r3, r3, r6
 800726e:	4413      	add	r3, r2
 8007270:	4622      	mov	r2, r4
 8007272:	4644      	mov	r4, r8
 8007274:	fba2 2404 	umull	r2, r4, r2, r4
 8007278:	627c      	str	r4, [r7, #36]	; 0x24
 800727a:	623a      	str	r2, [r7, #32]
 800727c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727e:	4413      	add	r3, r2
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
 8007282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007286:	f7f8 ffcd 	bl	8000224 <__aeabi_uldivmod>
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4613      	mov	r3, r2
 8007290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007292:	e007      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8007294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007296:	4a14      	ldr	r2, [pc, #80]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8007298:	fb03 f202 	mul.w	r2, r3, r2
 800729c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800729e:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a2:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80072a4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80072a8:	461a      	mov	r2, r3
 80072aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d108      	bne.n	80072c2 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80072b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072b6:	e004      	b.n	80072c2 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ba:	4a0c      	ldr	r2, [pc, #48]	; (80072ec <HAL_RCC_GetSysClockFreq+0x220>)
 80072bc:	fb02 f303 	mul.w	r3, r2, r3
 80072c0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80072c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c4:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80072c6:	e002      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 80072ca:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80072cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3774      	adds	r7, #116	; 0x74
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072da:	bf00      	nop
 80072dc:	080087cc 	.word	0x080087cc
 80072e0:	080087dc 	.word	0x080087dc
 80072e4:	40021000 	.word	0x40021000
 80072e8:	007a1200 	.word	0x007a1200
 80072ec:	003d0900 	.word	0x003d0900

080072f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072f4:	4b02      	ldr	r3, [pc, #8]	; (8007300 <HAL_RCC_GetHCLKFreq+0x10>)
 80072f6:	681b      	ldr	r3, [r3, #0]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr
 8007300:	20000020 	.word	0x20000020

08007304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007308:	f7ff fff2 	bl	80072f0 <HAL_RCC_GetHCLKFreq>
 800730c:	4602      	mov	r2, r0
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	4903      	ldr	r1, [pc, #12]	; (8007328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800731a:	5ccb      	ldrb	r3, [r1, r3]
 800731c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40021000 	.word	0x40021000
 8007328:	080087fc 	.word	0x080087fc

0800732c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007330:	f7ff ffde 	bl	80072f0 <HAL_RCC_GetHCLKFreq>
 8007334:	4602      	mov	r2, r0
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	0adb      	lsrs	r3, r3, #11
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	4903      	ldr	r1, [pc, #12]	; (8007350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007342:	5ccb      	ldrb	r3, [r1, r3]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40021000 	.word	0x40021000
 8007350:	080087fc 	.word	0x080087fc

08007354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <RCC_Delay+0x34>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0a      	ldr	r2, [pc, #40]	; (800738c <RCC_Delay+0x38>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	0a5b      	lsrs	r3, r3, #9
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	fb02 f303 	mul.w	r3, r2, r3
 800736e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007370:	bf00      	nop
  }
  while (Delay --);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	1e5a      	subs	r2, r3, #1
 8007376:	60fa      	str	r2, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f9      	bne.n	8007370 <RCC_Delay+0x1c>
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr
 8007388:	20000020 	.word	0x20000020
 800738c:	10624dd3 	.word	0x10624dd3

08007390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e041      	b.n	8007426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fb fc74 	bl	8002ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f000 fa78 	bl	80078c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d001      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e03f      	b.n	80074c8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0201 	orr.w	r2, r2, #1
 800745e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_TIM_Base_Start_IT+0x62>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007472:	d00e      	beq.n	8007492 <HAL_TIM_Base_Start_IT+0x62>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <HAL_TIM_Base_Start_IT+0xa8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <HAL_TIM_Base_Start_IT+0x62>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a16      	ldr	r2, [pc, #88]	; (80074dc <HAL_TIM_Base_Start_IT+0xac>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <HAL_TIM_Base_Start_IT+0x62>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <HAL_TIM_Base_Start_IT+0xb0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d111      	bne.n	80074b6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0307 	and.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b06      	cmp	r3, #6
 80074a2:	d010      	beq.n	80074c6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b4:	e007      	b.n	80074c6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0201 	orr.w	r2, r2, #1
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40012c00 	.word	0x40012c00
 80074d8:	40000400 	.word	0x40000400
 80074dc:	40000800 	.word	0x40000800
 80074e0:	40000c00 	.word	0x40000c00

080074e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d122      	bne.n	8007540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b02      	cmp	r3, #2
 8007506:	d11b      	bne.n	8007540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0202 	mvn.w	r2, #2
 8007510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9b1 	bl	800788e <HAL_TIM_IC_CaptureCallback>
 800752c:	e005      	b.n	800753a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9a4 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9b3 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b04      	cmp	r3, #4
 800754c:	d122      	bne.n	8007594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b04      	cmp	r3, #4
 800755a:	d11b      	bne.n	8007594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0204 	mvn.w	r2, #4
 8007564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f987 	bl	800788e <HAL_TIM_IC_CaptureCallback>
 8007580:	e005      	b.n	800758e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f97a 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f989 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d122      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d11b      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0208 	mvn.w	r2, #8
 80075b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f95d 	bl	800788e <HAL_TIM_IC_CaptureCallback>
 80075d4:	e005      	b.n	80075e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f950 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f95f 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b10      	cmp	r3, #16
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0210 	mvn.w	r2, #16
 800760c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2208      	movs	r2, #8
 8007612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f933 	bl	800788e <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f926 	bl	800787c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f935 	bl	80078a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d10e      	bne.n	8007668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b01      	cmp	r3, #1
 8007656:	d107      	bne.n	8007668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0201 	mvn.w	r2, #1
 8007660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7f9 ff64 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d10e      	bne.n	8007694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	2b80      	cmp	r3, #128	; 0x80
 8007682:	d107      	bne.n	8007694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800768c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fa89 	bl	8007ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d10e      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8f9 	bl	80078b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d10e      	bne.n	80076ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d107      	bne.n	80076ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0220 	mvn.w	r2, #32
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa54 	bl	8007b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_TIM_ConfigClockSource+0x18>
 8007708:	2302      	movs	r3, #2
 800770a:	e0b3      	b.n	8007874 <HAL_TIM_ConfigClockSource+0x180>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800772a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007744:	d03e      	beq.n	80077c4 <HAL_TIM_ConfigClockSource+0xd0>
 8007746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774a:	f200 8087 	bhi.w	800785c <HAL_TIM_ConfigClockSource+0x168>
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007752:	f000 8085 	beq.w	8007860 <HAL_TIM_ConfigClockSource+0x16c>
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775a:	d87f      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 800775c:	2b70      	cmp	r3, #112	; 0x70
 800775e:	d01a      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0xa2>
 8007760:	2b70      	cmp	r3, #112	; 0x70
 8007762:	d87b      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 8007764:	2b60      	cmp	r3, #96	; 0x60
 8007766:	d050      	beq.n	800780a <HAL_TIM_ConfigClockSource+0x116>
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d877      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 800776c:	2b50      	cmp	r3, #80	; 0x50
 800776e:	d03c      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0xf6>
 8007770:	2b50      	cmp	r3, #80	; 0x50
 8007772:	d873      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	d058      	beq.n	800782a <HAL_TIM_ConfigClockSource+0x136>
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d86f      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 800777c:	2b30      	cmp	r3, #48	; 0x30
 800777e:	d064      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x156>
 8007780:	2b30      	cmp	r3, #48	; 0x30
 8007782:	d86b      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 8007784:	2b20      	cmp	r3, #32
 8007786:	d060      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x156>
 8007788:	2b20      	cmp	r3, #32
 800778a:	d867      	bhi.n	800785c <HAL_TIM_ConfigClockSource+0x168>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05c      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x156>
 8007790:	2b10      	cmp	r3, #16
 8007792:	d05a      	beq.n	800784a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007794:	e062      	b.n	800785c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6899      	ldr	r1, [r3, #8]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f000 f970 	bl	8007a8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	609a      	str	r2, [r3, #8]
      break;
 80077c2:	e04e      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	6899      	ldr	r1, [r3, #8]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f000 f959 	bl	8007a8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077e6:	609a      	str	r2, [r3, #8]
      break;
 80077e8:	e03b      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	6859      	ldr	r1, [r3, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	461a      	mov	r2, r3
 80077f8:	f000 f8d0 	bl	800799c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2150      	movs	r1, #80	; 0x50
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f927 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 8007808:	e02b      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	461a      	mov	r2, r3
 8007818:	f000 f8ee 	bl	80079f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2160      	movs	r1, #96	; 0x60
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f917 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 8007828:	e01b      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6859      	ldr	r1, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	461a      	mov	r2, r3
 8007838:	f000 f8b0 	bl	800799c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2140      	movs	r1, #64	; 0x40
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f907 	bl	8007a56 <TIM_ITRx_SetConfig>
      break;
 8007848:	e00b      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4619      	mov	r1, r3
 8007854:	4610      	mov	r0, r2
 8007856:	f000 f8fe 	bl	8007a56 <TIM_ITRx_SetConfig>
        break;
 800785a:	e002      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800785c:	bf00      	nop
 800785e:	e000      	b.n	8007862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr

080078b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr

080078c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a2d      	ldr	r2, [pc, #180]	; (800798c <TIM_Base_SetConfig+0xc8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00f      	beq.n	80078fc <TIM_Base_SetConfig+0x38>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e2:	d00b      	beq.n	80078fc <TIM_Base_SetConfig+0x38>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <TIM_Base_SetConfig+0xcc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d007      	beq.n	80078fc <TIM_Base_SetConfig+0x38>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a29      	ldr	r2, [pc, #164]	; (8007994 <TIM_Base_SetConfig+0xd0>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_Base_SetConfig+0x38>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a28      	ldr	r2, [pc, #160]	; (8007998 <TIM_Base_SetConfig+0xd4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d108      	bne.n	800790e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a1e      	ldr	r2, [pc, #120]	; (800798c <TIM_Base_SetConfig+0xc8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00f      	beq.n	8007936 <TIM_Base_SetConfig+0x72>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800791c:	d00b      	beq.n	8007936 <TIM_Base_SetConfig+0x72>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <TIM_Base_SetConfig+0xcc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d007      	beq.n	8007936 <TIM_Base_SetConfig+0x72>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1a      	ldr	r2, [pc, #104]	; (8007994 <TIM_Base_SetConfig+0xd0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d003      	beq.n	8007936 <TIM_Base_SetConfig+0x72>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a19      	ldr	r2, [pc, #100]	; (8007998 <TIM_Base_SetConfig+0xd4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d108      	bne.n	8007948 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800793c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689a      	ldr	r2, [r3, #8]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a07      	ldr	r2, [pc, #28]	; (800798c <TIM_Base_SetConfig+0xc8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d103      	bne.n	800797c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	615a      	str	r2, [r3, #20]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr
 800798c:	40012c00 	.word	0x40012c00
 8007990:	40000400 	.word	0x40000400
 8007994:	40000800 	.word	0x40000800
 8007998:	40000c00 	.word	0x40000c00

0800799c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 030a 	bic.w	r3, r3, #10
 80079d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr

080079f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	f023 0210 	bic.w	r2, r3, #16
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	031b      	lsls	r3, r3, #12
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	621a      	str	r2, [r3, #32]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f043 0307 	orr.w	r3, r3, #7
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	609a      	str	r2, [r3, #8]
}
 8007a80:	bf00      	nop
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	021a      	lsls	r2, r3, #8
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	609a      	str	r2, [r3, #8]
}
 8007abe:	bf00      	nop
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bc80      	pop	{r7}
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e04b      	b.n	8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a19      	ldr	r2, [pc, #100]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d013      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b2c:	d00e      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d009      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a13      	ldr	r2, [pc, #76]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a12      	ldr	r2, [pc, #72]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d10c      	bne.n	8007b66 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40000400 	.word	0x40000400
 8007b8c:	40000800 	.word	0x40000800
 8007b90:	40000c00 	.word	0x40000c00

08007b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e03f      	b.n	8007c4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fc febc 	bl	800495c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fd1f 	bl	8008640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695a      	ldr	r2, [r3, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b08a      	sub	sp, #40	; 0x28
 8007c56:	af02      	add	r7, sp, #8
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	603b      	str	r3, [r7, #0]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	d17c      	bne.n	8007d6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_UART_Transmit+0x2c>
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e075      	b.n	8007d6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_UART_Transmit+0x3e>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e06e      	b.n	8007d6e <HAL_UART_Transmit+0x11c>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2221      	movs	r2, #33	; 0x21
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ca6:	f7fd f825 	bl	8004cf4 <HAL_GetTick>
 8007caa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	88fa      	ldrh	r2, [r7, #6]
 8007cb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	88fa      	ldrh	r2, [r7, #6]
 8007cb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc0:	d108      	bne.n	8007cd4 <HAL_UART_Transmit+0x82>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d104      	bne.n	8007cd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	61bb      	str	r3, [r7, #24]
 8007cd2:	e003      	b.n	8007cdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ce4:	e02a      	b.n	8007d3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	2200      	movs	r2, #0
 8007cee:	2180      	movs	r1, #128	; 0x80
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 faf5 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e036      	b.n	8007d6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	3302      	adds	r3, #2
 8007d1a:	61bb      	str	r3, [r7, #24]
 8007d1c:	e007      	b.n	8007d2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	781a      	ldrb	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1cf      	bne.n	8007ce6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	2140      	movs	r1, #64	; 0x40
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fac5 	bl	80082e0 <UART_WaitOnFlagUntilTimeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e006      	b.n	8007d6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e000      	b.n	8007d6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d6c:	2302      	movs	r3, #2
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d153      	bne.n	8007e3a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <HAL_UART_Transmit_DMA+0x26>
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e04c      	b.n	8007e3c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_UART_Transmit_DMA+0x38>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e045      	b.n	8007e3c <HAL_UART_Transmit_DMA+0xc4>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2221      	movs	r2, #33	; 0x21
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ddc:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <HAL_UART_Transmit_DMA+0xcc>)
 8007dde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <HAL_UART_Transmit_DMA+0xd0>)
 8007de6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <HAL_UART_Transmit_DMA+0xd4>)
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	2200      	movs	r2, #0
 8007df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8007df8:	f107 0308 	add.w	r3, r7, #8
 8007dfc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	f7fd ff6c 	bl	8005cec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	695a      	ldr	r2, [r3, #20]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e34:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e000      	b.n	8007e3c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007e3a:	2302      	movs	r3, #2
  }
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	080081df 	.word	0x080081df
 8007e48:	08008231 	.word	0x08008231
 8007e4c:	0800824d 	.word	0x0800824d

08007e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10d      	bne.n	8007ea2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x52>
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fb26 	bl	80084ec <UART_Receive_IT>
      return;
 8007ea0:	e17b      	b.n	800819a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80b1 	beq.w	800800c <HAL_UART_IRQHandler+0x1bc>
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x70>
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80a6 	beq.w	800800c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x90>
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	f043 0201 	orr.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_UART_IRQHandler+0xb0>
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef8:	f043 0202 	orr.w	r2, r3, #2
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_UART_IRQHandler+0xd0>
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	f043 0204 	orr.w	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	f003 0308 	and.w	r3, r3, #8
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <HAL_UART_IRQHandler+0xfa>
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f003 0320 	and.w	r3, r3, #32
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <HAL_UART_IRQHandler+0xee>
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d005      	beq.n	8007f4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	f043 0208 	orr.w	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 811e 	beq.w	8008190 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <HAL_UART_IRQHandler+0x11e>
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f003 0320 	and.w	r3, r3, #32
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fabf 	bl	80084ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bf14      	ite	ne
 8007f7c:	2301      	movne	r3, #1
 8007f7e:	2300      	moveq	r3, #0
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d102      	bne.n	8007f96 <HAL_UART_IRQHandler+0x146>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d031      	beq.n	8007ffa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fa01 	bl	800839e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d023      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	695a      	ldr	r2, [r3, #20]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d013      	beq.n	8007fea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	4a76      	ldr	r2, [pc, #472]	; (80081a0 <HAL_UART_IRQHandler+0x350>)
 8007fc8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fd ff26 	bl	8005e20 <HAL_DMA_Abort_IT>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d016      	beq.n	8008008 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe8:	e00e      	b.n	8008008 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8e3 	bl	80081b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff0:	e00a      	b.n	8008008 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8df 	bl	80081b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff8:	e006      	b.n	8008008 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8db 	bl	80081b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008006:	e0c3      	b.n	8008190 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	bf00      	nop
    return;
 800800a:	e0c1      	b.n	8008190 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	2b01      	cmp	r3, #1
 8008012:	f040 80a1 	bne.w	8008158 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 809b 	beq.w	8008158 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 8095 	beq.w	8008158 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800802e:	2300      	movs	r3, #0
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	60fb      	str	r3, [r7, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d04e      	beq.n	80080f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800805c:	8a3b      	ldrh	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8098 	beq.w	8008194 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008068:	8a3a      	ldrh	r2, [r7, #16]
 800806a:	429a      	cmp	r2, r3
 800806c:	f080 8092 	bcs.w	8008194 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8a3a      	ldrh	r2, [r7, #16]
 8008074:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b20      	cmp	r3, #32
 800807e:	d02b      	beq.n	80080d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800808e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695a      	ldr	r2, [r3, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0210 	bic.w	r2, r2, #16
 80080cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fd fe69 	bl	8005daa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f86d 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80080ee:	e051      	b.n	8008194 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d047      	beq.n	8008198 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008108:	8a7b      	ldrh	r3, [r7, #18]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d044      	beq.n	8008198 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800811c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695a      	ldr	r2, [r3, #20]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f022 0201 	bic.w	r2, r2, #1
 800812c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0210 	bic.w	r2, r2, #16
 800814a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800814c:	8a7b      	ldrh	r3, [r7, #18]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f839 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008156:	e01f      	b.n	8008198 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d008      	beq.n	8008174 <HAL_UART_IRQHandler+0x324>
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f956 	bl	800841e <UART_Transmit_IT>
    return;
 8008172:	e012      	b.n	800819a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <HAL_UART_IRQHandler+0x34a>
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f997 	bl	80084bc <UART_EndTransmit_IT>
    return;
 800818e:	e004      	b.n	800819a <HAL_UART_IRQHandler+0x34a>
    return;
 8008190:	bf00      	nop
 8008192:	e002      	b.n	800819a <HAL_UART_IRQHandler+0x34a>
      return;
 8008194:	bf00      	nop
 8008196:	e000      	b.n	800819a <HAL_UART_IRQHandler+0x34a>
      return;
 8008198:	bf00      	nop
  }
}
 800819a:	3728      	adds	r7, #40	; 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	080083f7 	.word	0x080083f7

080081a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr

080081b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr

080081c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d113      	bne.n	8008222 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800820e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800821e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008220:	e002      	b.n	8008228 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7f9 f9b2 	bl	800158c <HAL_UART_TxCpltCallback>
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7f9 f9ad 	bl	800159e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008268:	2b00      	cmp	r3, #0
 800826a:	bf14      	ite	ne
 800826c:	2301      	movne	r3, #1
 800826e:	2300      	moveq	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b21      	cmp	r3, #33	; 0x21
 800827e:	d108      	bne.n	8008292 <UART_DMAError+0x46>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d005      	beq.n	8008292 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2200      	movs	r2, #0
 800828a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800828c:	68b8      	ldr	r0, [r7, #8]
 800828e:	f000 f871 	bl	8008374 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	bf14      	ite	ne
 80082a0:	2301      	movne	r3, #1
 80082a2:	2300      	moveq	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	2b22      	cmp	r3, #34	; 0x22
 80082b2:	d108      	bne.n	80082c6 <UART_DMAError+0x7a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082c0:	68b8      	ldr	r0, [r7, #8]
 80082c2:	f000 f86c 	bl	800839e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ca:	f043 0210 	orr.w	r2, r3, #16
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d2:	68b8      	ldr	r0, [r7, #8]
 80082d4:	f7ff ff6f 	bl	80081b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	4613      	mov	r3, r2
 80082ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f0:	e02c      	b.n	800834c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d028      	beq.n	800834c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d007      	beq.n	8008310 <UART_WaitOnFlagUntilTimeout+0x30>
 8008300:	f7fc fcf8 	bl	8004cf4 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	429a      	cmp	r2, r3
 800830e:	d21d      	bcs.n	800834c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800831e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695a      	ldr	r2, [r3, #20]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e00f      	b.n	800836c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4013      	ands	r3, r2
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	bf0c      	ite	eq
 800835c:	2301      	moveq	r3, #1
 800835e:	2300      	movne	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	79fb      	ldrb	r3, [r7, #7]
 8008366:	429a      	cmp	r2, r3
 8008368:	d0c3      	beq.n	80082f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800838a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2220      	movs	r2, #32
 8008390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr

0800839e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695a      	ldr	r2, [r3, #20]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0201 	bic.w	r2, r2, #1
 80083c4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d107      	bne.n	80083de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0210 	bic.w	r2, r2, #16
 80083dc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bc80      	pop	{r7}
 80083f4:	4770      	bx	lr

080083f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff fed0 	bl	80081b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b21      	cmp	r3, #33	; 0x21
 8008430:	d13e      	bne.n	80084b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843a:	d114      	bne.n	8008466 <UART_Transmit_IT+0x48>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d110      	bne.n	8008466 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008458:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	1c9a      	adds	r2, r3, #2
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	621a      	str	r2, [r3, #32]
 8008464:	e008      	b.n	8008478 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	1c59      	adds	r1, r3, #1
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6211      	str	r1, [r2, #32]
 8008470:	781a      	ldrb	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	4619      	mov	r1, r3
 8008486:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10f      	bne.n	80084ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800849a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e000      	b.n	80084b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084b0:	2302      	movs	r3, #2
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr

080084bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7f9 f855 	bl	800158c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b22      	cmp	r3, #34	; 0x22
 80084fe:	f040 8099 	bne.w	8008634 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850a:	d117      	bne.n	800853c <UART_Receive_IT+0x50>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d113      	bne.n	800853c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852a:	b29a      	uxth	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008534:	1c9a      	adds	r2, r3, #2
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	629a      	str	r2, [r3, #40]	; 0x28
 800853a:	e026      	b.n	800858a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854e:	d007      	beq.n	8008560 <UART_Receive_IT+0x74>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <UART_Receive_IT+0x82>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d106      	bne.n	800856e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	b2da      	uxtb	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e008      	b.n	8008580 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800857a:	b2da      	uxtb	r2, r3
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29b      	uxth	r3, r3
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4619      	mov	r1, r3
 8008598:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800859a:	2b00      	cmp	r3, #0
 800859c:	d148      	bne.n	8008630 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0220 	bic.w	r2, r2, #32
 80085ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	695a      	ldr	r2, [r3, #20]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0201 	bic.w	r2, r2, #1
 80085cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d123      	bne.n	8008626 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0210 	bic.w	r2, r2, #16
 80085f2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0310 	and.w	r3, r3, #16
 80085fe:	2b10      	cmp	r3, #16
 8008600:	d10a      	bne.n	8008618 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	60fb      	str	r3, [r7, #12]
 8008616:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fdd2 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
 8008624:	e002      	b.n	800862c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fdbc 	bl	80081a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	e002      	b.n	8008636 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	e000      	b.n	8008636 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008634:	2302      	movs	r3, #2
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800867a:	f023 030c 	bic.w	r3, r3, #12
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6812      	ldr	r2, [r2, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	430b      	orrs	r3, r1
 8008686:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a2c      	ldr	r2, [pc, #176]	; (8008754 <UART_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d103      	bne.n	80086b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086a8:	f7fe fe40 	bl	800732c <HAL_RCC_GetPCLK2Freq>
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	e002      	b.n	80086b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80086b0:	f7fe fe28 	bl	8007304 <HAL_RCC_GetPCLK1Freq>
 80086b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	009a      	lsls	r2, r3, #2
 80086c0:	441a      	add	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086cc:	4a22      	ldr	r2, [pc, #136]	; (8008758 <UART_SetConfig+0x118>)
 80086ce:	fba2 2303 	umull	r2, r3, r2, r3
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	0119      	lsls	r1, r3, #4
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009a      	lsls	r2, r3, #2
 80086e0:	441a      	add	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80086ec:	4b1a      	ldr	r3, [pc, #104]	; (8008758 <UART_SetConfig+0x118>)
 80086ee:	fba3 0302 	umull	r0, r3, r3, r2
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	2064      	movs	r0, #100	; 0x64
 80086f6:	fb00 f303 	mul.w	r3, r0, r3
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	011b      	lsls	r3, r3, #4
 80086fe:	3332      	adds	r3, #50	; 0x32
 8008700:	4a15      	ldr	r2, [pc, #84]	; (8008758 <UART_SetConfig+0x118>)
 8008702:	fba2 2303 	umull	r2, r3, r2, r3
 8008706:	095b      	lsrs	r3, r3, #5
 8008708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800870c:	4419      	add	r1, r3
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009a      	lsls	r2, r3, #2
 8008718:	441a      	add	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	fbb2 f2f3 	udiv	r2, r2, r3
 8008724:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <UART_SetConfig+0x118>)
 8008726:	fba3 0302 	umull	r0, r3, r3, r2
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	2064      	movs	r0, #100	; 0x64
 800872e:	fb00 f303 	mul.w	r3, r0, r3
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	3332      	adds	r3, #50	; 0x32
 8008738:	4a07      	ldr	r2, [pc, #28]	; (8008758 <UART_SetConfig+0x118>)
 800873a:	fba2 2303 	umull	r2, r3, r2, r3
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	440a      	add	r2, r1
 800874a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40013800 	.word	0x40013800
 8008758:	51eb851f 	.word	0x51eb851f

0800875c <__libc_init_array>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	2600      	movs	r6, #0
 8008760:	4d0c      	ldr	r5, [pc, #48]	; (8008794 <__libc_init_array+0x38>)
 8008762:	4c0d      	ldr	r4, [pc, #52]	; (8008798 <__libc_init_array+0x3c>)
 8008764:	1b64      	subs	r4, r4, r5
 8008766:	10a4      	asrs	r4, r4, #2
 8008768:	42a6      	cmp	r6, r4
 800876a:	d109      	bne.n	8008780 <__libc_init_array+0x24>
 800876c:	f000 f822 	bl	80087b4 <_init>
 8008770:	2600      	movs	r6, #0
 8008772:	4d0a      	ldr	r5, [pc, #40]	; (800879c <__libc_init_array+0x40>)
 8008774:	4c0a      	ldr	r4, [pc, #40]	; (80087a0 <__libc_init_array+0x44>)
 8008776:	1b64      	subs	r4, r4, r5
 8008778:	10a4      	asrs	r4, r4, #2
 800877a:	42a6      	cmp	r6, r4
 800877c:	d105      	bne.n	800878a <__libc_init_array+0x2e>
 800877e:	bd70      	pop	{r4, r5, r6, pc}
 8008780:	f855 3b04 	ldr.w	r3, [r5], #4
 8008784:	4798      	blx	r3
 8008786:	3601      	adds	r6, #1
 8008788:	e7ee      	b.n	8008768 <__libc_init_array+0xc>
 800878a:	f855 3b04 	ldr.w	r3, [r5], #4
 800878e:	4798      	blx	r3
 8008790:	3601      	adds	r6, #1
 8008792:	e7f2      	b.n	800877a <__libc_init_array+0x1e>
 8008794:	0800880c 	.word	0x0800880c
 8008798:	0800880c 	.word	0x0800880c
 800879c:	0800880c 	.word	0x0800880c
 80087a0:	08008810 	.word	0x08008810

080087a4 <memset>:
 80087a4:	4603      	mov	r3, r0
 80087a6:	4402      	add	r2, r0
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d100      	bne.n	80087ae <memset+0xa>
 80087ac:	4770      	bx	lr
 80087ae:	f803 1b01 	strb.w	r1, [r3], #1
 80087b2:	e7f9      	b.n	80087a8 <memset+0x4>

080087b4 <_init>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr

080087c0 <_fini>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	bf00      	nop
 80087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c6:	bc08      	pop	{r3}
 80087c8:	469e      	mov	lr, r3
 80087ca:	4770      	bx	lr
