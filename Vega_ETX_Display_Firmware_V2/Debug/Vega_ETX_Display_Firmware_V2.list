
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  000203b8  2**0
                  CONTENTS
  4 .ARM          00000008  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e0c  08007e0c  000203b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  08007e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200003b8  080081cc  000203b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  080081cc  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129bc  00000000  00000000  000203e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f13  00000000  00000000  00032d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00036d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229ba  00000000  00000000  00037bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016daa  00000000  00000000  0005a5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba141  00000000  00000000  00071354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  0012b4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200003b8 	.word	0x200003b8
 8000200:	00000000 	.word	0x00000000
 8000204:	08007db4 	.word	0x08007db4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200003bc 	.word	0x200003bc
 8000220:	08007db4 	.word	0x08007db4

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <MX_CAN1_Init+0xa0>)
 8000536:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800053a:	2209      	movs	r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800054c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000550:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000554:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000558:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000580:	f003 fee6 	bl	8004350 <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058a:	f000 ffd1 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_CAN1_Init+0x9c>)
 80005bc:	f003 ffc4 	bl	8004548 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200003d4 	.word	0x200003d4
 80005cc:	40006400 	.word	0x40006400

080005d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <HAL_CAN_MspInit+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d149      	bne.n	8000684 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000636:	f005 fa65 	bl	8005b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000650:	f005 fa58 	bl	8005b04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f004 fd9a 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f004 fdb3 	bl	80051ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2015      	movs	r0, #21
 800066a:	f004 fd92 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800066e:	2015      	movs	r0, #21
 8000670:	f004 fdab 	bl	80051ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2016      	movs	r0, #22
 800067a:	f004 fd8a 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800067e:	2016      	movs	r0, #22
 8000680:	f004 fda3 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40006400 	.word	0x40006400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
//	EVCU_setData_i.dataID = 0;
//	EVCU_setData_i.fixSetS.bit.mode = targetMode;
//	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
//	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
//	EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <EVCU_setData_write+0x30>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <EVCU_setData_write+0x30>)
 80006b0:	7892      	ldrb	r2, [r2, #2]
 80006b2:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <EVCU_setData_write+0x34>)
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4905      	ldr	r1, [pc, #20]	; (80006d0 <EVCU_setData_write+0x38>)
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <EVCU_setData_write+0x3c>)
 80006bc:	f004 f868 	bl	8004790 <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200003fc 	.word	0x200003fc
 80006cc:	20000518 	.word	0x20000518
 80006d0:	200004b0 	.word	0x200004b0
 80006d4:	200003d4 	.word	0x200003d4

080006d8 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	091b      	lsrs	r3, r3, #4
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <EVCU_getData_read_40+0x10c>)
 80006ec:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	10db      	asrs	r3, r3, #3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b3a      	ldr	r3, [pc, #232]	; (80007e8 <EVCU_getData_read_40+0x110>)
 8000700:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	109b      	asrs	r3, r3, #2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <EVCU_getData_read_40+0x114>)
 8000714:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3301      	adds	r3, #1
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	105b      	asrs	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b32      	ldr	r3, [pc, #200]	; (80007f0 <EVCU_getData_read_40+0x118>)
 8000728:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3301      	adds	r3, #1
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <EVCU_getData_read_40+0x11c>)
 8000738:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3302      	adds	r3, #2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	09db      	lsrs	r3, r3, #7
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <EVCU_getData_read_40+0x120>)
 8000746:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3302      	adds	r3, #2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	119b      	asrs	r3, r3, #6
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <EVCU_getData_read_40+0x124>)
 800075a:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3302      	adds	r3, #2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	111b      	asrs	r3, r3, #4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <EVCU_getData_read_40+0x128>)
 800076e:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3302      	adds	r3, #2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	10db      	asrs	r3, r3, #3
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b20      	ldr	r3, [pc, #128]	; (8000804 <EVCU_getData_read_40+0x12c>)
 8000782:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3302      	adds	r3, #2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	109b      	asrs	r3, r3, #2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <EVCU_getData_read_40+0x130>)
 8000796:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3304      	adds	r3, #4
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	021b      	lsls	r3, r3, #8
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3303      	adds	r3, #3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <EVCU_getData_read_40+0x134>)
 80007b0:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3305      	adds	r3, #5
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <EVCU_getData_read_40+0x138>)
 80007bc:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3307      	adds	r3, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3306      	adds	r3, #6
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21b      	sxth	r3, r3
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <EVCU_getData_read_40+0x13c>)
 80007d8:	801a      	strh	r2, [r3, #0]



}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	20000464 	.word	0x20000464
 80007e8:	20000466 	.word	0x20000466
 80007ec:	20000467 	.word	0x20000467
 80007f0:	20000468 	.word	0x20000468
 80007f4:	20000469 	.word	0x20000469
 80007f8:	2000046a 	.word	0x2000046a
 80007fc:	2000046b 	.word	0x2000046b
 8000800:	2000046c 	.word	0x2000046c
 8000804:	20000491 	.word	0x20000491
 8000808:	2000046e 	.word	0x2000046e
 800080c:	20000462 	.word	0x20000462
 8000810:	20000450 	.word	0x20000450
 8000814:	2000045c 	.word	0x2000045c

08000818 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d129      	bne.n	800087c <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b7f      	ldr	r3, [pc, #508]	; (8000a34 <EVCU_getData_read_41+0x21c>)
 8000836:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	111b      	asrs	r3, r3, #4
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	b2da      	uxtb	r2, r3
 8000848:	4b7b      	ldr	r3, [pc, #492]	; (8000a38 <EVCU_getData_read_41+0x220>)
 800084a:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	119b      	asrs	r3, r3, #6
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	b2da      	uxtb	r2, r3
 800085c:	4b77      	ldr	r3, [pc, #476]	; (8000a3c <EVCU_getData_read_41+0x224>)
 800085e:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3301      	adds	r3, #1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	09db      	lsrs	r3, r3, #7
 8000868:	b2da      	uxtb	r2, r3
 800086a:	4b75      	ldr	r3, [pc, #468]	; (8000a40 <EVCU_getData_read_41+0x228>)
 800086c:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3302      	adds	r3, #2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	099b      	lsrs	r3, r3, #6
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b72      	ldr	r3, [pc, #456]	; (8000a44 <EVCU_getData_read_41+0x22c>)
 800087a:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d119      	bne.n	80008b8 <EVCU_getData_read_41+0xa0>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3304      	adds	r3, #4
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3303      	adds	r3, #3
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	431a      	orrs	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3302      	adds	r3, #2
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	061b      	lsls	r3, r3, #24
 80008a8:	4313      	orrs	r3, r2
 80008aa:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <EVCU_getData_read_41+0x230>)
 80008ae:	601a      	str	r2, [r3, #0]
		distance.range = canRX[5];
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	795a      	ldrb	r2, [r3, #5]
 80008b4:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <EVCU_getData_read_41+0x230>)
 80008b6:	719a      	strb	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d127      	bne.n	8000910 <EVCU_getData_read_41+0xf8>

		soc_value = canRX[1];
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	785a      	ldrb	r2, [r3, #1]
 80008c4:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <EVCU_getData_read_41+0x234>)
 80008c6:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	789a      	ldrb	r2, [r3, #2]
 80008cc:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <EVCU_getData_read_41+0x238>)
 80008ce:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	78da      	ldrb	r2, [r3, #3]
 80008d4:	4b5f      	ldr	r3, [pc, #380]	; (8000a54 <EVCU_getData_read_41+0x23c>)
 80008d6:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3305      	adds	r3, #5
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b21a      	sxth	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3304      	adds	r3, #4
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	4313      	orrs	r3, r2
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <EVCU_getData_read_41+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3307      	adds	r3, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3306      	adds	r3, #6
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21b      	sxth	r3, r3
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b53      	ldr	r3, [pc, #332]	; (8000a5c <EVCU_getData_read_41+0x244>)
 800090e:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d11a      	bne.n	800094e <EVCU_getData_read_41+0x136>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3302      	adds	r3, #2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b21a      	sxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	021b      	lsls	r3, r3, #8
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b4b      	ldr	r3, [pc, #300]	; (8000a60 <EVCU_getData_read_41+0x248>)
 8000932:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3304      	adds	r3, #4
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3303      	adds	r3, #3
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <EVCU_getData_read_41+0x24c>)
 800094c:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b04      	cmp	r3, #4
 8000954:	d11b      	bne.n	800098e <EVCU_getData_read_41+0x176>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3302      	adds	r3, #2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b21a      	sxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3301      	adds	r3, #1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21b      	sxth	r3, r3
 800096c:	b29a      	uxth	r2, r3
 800096e:	4b36      	ldr	r3, [pc, #216]	; (8000a48 <EVCU_getData_read_41+0x230>)
 8000970:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3306      	adds	r3, #6
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3305      	adds	r3, #5
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21b      	sxth	r3, r3
 8000984:	4313      	orrs	r3, r2
 8000986:	b21b      	sxth	r3, r3
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <EVCU_getData_read_41+0x230>)
 800098c:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b05      	cmp	r3, #5
 8000994:	d129      	bne.n	80009ea <EVCU_getData_read_41+0x1d2>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3302      	adds	r3, #2
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b21a      	sxth	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3301      	adds	r3, #1
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b2e      	ldr	r3, [pc, #184]	; (8000a68 <EVCU_getData_read_41+0x250>)
 80009b0:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3304      	adds	r3, #4
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3303      	adds	r3, #3
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <EVCU_getData_read_41+0x250>)
 80009cc:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3306      	adds	r3, #6
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3305      	adds	r3, #5
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <EVCU_getData_read_41+0x250>)
 80009e8:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d11b      	bne.n	8000a2a <EVCU_getData_read_41+0x212>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3302      	adds	r3, #2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3301      	adds	r3, #1
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21b      	sxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b21b      	sxth	r3, r3
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <EVCU_getData_read_41+0x230>)
 8000a0c:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3304      	adds	r3, #4
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3303      	adds	r3, #3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21b      	sxth	r3, r3
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <EVCU_getData_read_41+0x250>)
 8000a28:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	2000046f 	.word	0x2000046f
 8000a38:	20000470 	.word	0x20000470
 8000a3c:	20000471 	.word	0x20000471
 8000a40:	20000000 	.word	0x20000000
 8000a44:	2000046d 	.word	0x2000046d
 8000a48:	20000428 	.word	0x20000428
 8000a4c:	20000454 	.word	0x20000454
 8000a50:	20000455 	.word	0x20000455
 8000a54:	2000045e 	.word	0x2000045e
 8000a58:	2000045a 	.word	0x2000045a
 8000a5c:	20000458 	.word	0x20000458
 8000a60:	20000456 	.word	0x20000456
 8000a64:	20000460 	.word	0x20000460
 8000a68:	20000438 	.word	0x20000438

08000a6c <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d12d      	bne.n	8000ad8 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	785a      	ldrb	r2, [r3, #1]
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000a82:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3303      	adds	r3, #3
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b21a      	sxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3304      	adds	r3, #4
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000a9e:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3305      	adds	r3, #5
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3306      	adds	r3, #6
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000aba:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3307      	adds	r3, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3306      	adds	r3, #6
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000ad6:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d121      	bne.n	8000b24 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	785a      	ldrb	r2, [r3, #1]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000ae6:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3303      	adds	r3, #3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3302      	adds	r3, #2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b02:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791a      	ldrb	r2, [r3, #4]
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b0a:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	795a      	ldrb	r2, [r3, #5]
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b12:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	799a      	ldrb	r2, [r3, #6]
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b1a:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	79da      	ldrb	r2, [r3, #7]
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <EVCU_getData_read_43+0xc4>)
 8000b22:	73da      	strb	r2, [r3, #15]
	}
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000440 	.word	0x20000440

08000b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_DMA_Init+0x38>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <MX_DMA_Init+0x38>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6153      	str	r3, [r2, #20]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_DMA_Init+0x38>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200c      	movs	r0, #12
 8000b58:	f004 fb1b 	bl	8005192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b5c:	200c      	movs	r0, #12
 8000b5e:	f004 fb34 	bl	80051ca <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000b74:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <setError+0x214>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d13a      	bne.n	8000bf2 <setError+0x82>
		switch (err_error) {
 8000b7c:	4b82      	ldr	r3, [pc, #520]	; (8000d88 <setError+0x218>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d026      	beq.n	8000bd2 <setError+0x62>
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	dc36      	bgt.n	8000bf6 <setError+0x86>
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <setError+0x22>
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d010      	beq.n	8000bb2 <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000b90:	e031      	b.n	8000bf6 <setError+0x86>
			error_on = true;
 8000b92:	4b7e      	ldr	r3, [pc, #504]	; (8000d8c <setError+0x21c>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000b98:	4b7d      	ldr	r3, [pc, #500]	; (8000d90 <setError+0x220>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000b9e:	4b7d      	ldr	r3, [pc, #500]	; (8000d94 <setError+0x224>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000ba4:	4b7c      	ldr	r3, [pc, #496]	; (8000d98 <setError+0x228>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000baa:	4b7c      	ldr	r3, [pc, #496]	; (8000d9c <setError+0x22c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
			break;
 8000bb0:	e022      	b.n	8000bf8 <setError+0x88>
			error_on = true;
 8000bb2:	4b76      	ldr	r3, [pc, #472]	; (8000d8c <setError+0x21c>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000bb8:	4b75      	ldr	r3, [pc, #468]	; (8000d90 <setError+0x220>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000bbe:	4b75      	ldr	r3, [pc, #468]	; (8000d94 <setError+0x224>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000bc4:	4b74      	ldr	r3, [pc, #464]	; (8000d98 <setError+0x228>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000bca:	4b74      	ldr	r3, [pc, #464]	; (8000d9c <setError+0x22c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
			break;
 8000bd0:	e012      	b.n	8000bf8 <setError+0x88>
			error_on = false;
 8000bd2:	4b6e      	ldr	r3, [pc, #440]	; (8000d8c <setError+0x21c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000bd8:	4b6d      	ldr	r3, [pc, #436]	; (8000d90 <setError+0x220>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000bde:	4b6d      	ldr	r3, [pc, #436]	; (8000d94 <setError+0x224>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000be4:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <setError+0x228>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000bea:	4b6c      	ldr	r3, [pc, #432]	; (8000d9c <setError+0x22c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
			break;
 8000bf0:	e002      	b.n	8000bf8 <setError+0x88>
		}
	}
 8000bf2:	bf00      	nop
 8000bf4:	e000      	b.n	8000bf8 <setError+0x88>
			break;
 8000bf6:	bf00      	nop
	if (err_device == 1) { //BMS
 8000bf8:	4b62      	ldr	r3, [pc, #392]	; (8000d84 <setError+0x214>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	f040 80bb 	bne.w	8000d78 <setError+0x208>
		switch (err_error) {
 8000c02:	4b61      	ldr	r3, [pc, #388]	; (8000d88 <setError+0x218>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b08      	cmp	r3, #8
 8000c08:	f200 80a6 	bhi.w	8000d58 <setError+0x1e8>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <setError+0xa4>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c39 	.word	0x08000c39
 8000c18:	08000c59 	.word	0x08000c59
 8000c1c:	08000c79 	.word	0x08000c79
 8000c20:	08000c99 	.word	0x08000c99
 8000c24:	08000cb9 	.word	0x08000cb9
 8000c28:	08000cd9 	.word	0x08000cd9
 8000c2c:	08000cf9 	.word	0x08000cf9
 8000c30:	08000d19 	.word	0x08000d19
 8000c34:	08000d39 	.word	0x08000d39
		case 0: //Over_Discharge_Current
			error_on = true;
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <setError+0x21c>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c3e:	4b54      	ldr	r3, [pc, #336]	; (8000d90 <setError+0x220>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <setError+0x224>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <setError+0x228>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c50:	4b52      	ldr	r3, [pc, #328]	; (8000d9c <setError+0x22c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000c56:	e090      	b.n	8000d7a <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000c58:	4b4c      	ldr	r3, [pc, #304]	; (8000d8c <setError+0x21c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000c5e:	4b4c      	ldr	r3, [pc, #304]	; (8000d90 <setError+0x220>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c64:	4b4b      	ldr	r3, [pc, #300]	; (8000d94 <setError+0x224>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <setError+0x228>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <setError+0x22c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000c76:	e080      	b.n	8000d7a <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000c78:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <setError+0x21c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c7e:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <setError+0x220>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c84:	4b43      	ldr	r3, [pc, #268]	; (8000d94 <setError+0x224>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <setError+0x228>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c90:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <setError+0x22c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000c96:	e070      	b.n	8000d7a <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000c98:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <setError+0x21c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <setError+0x220>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000ca4:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <setError+0x224>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <setError+0x228>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <setError+0x22c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cb6:	e060      	b.n	8000d7a <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000cb8:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <setError+0x21c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <setError+0x220>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cc4:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <setError+0x224>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <setError+0x228>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cd0:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <setError+0x22c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cd6:	e050      	b.n	8000d7a <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <setError+0x21c>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <setError+0x220>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <setError+0x224>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <setError+0x228>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <setError+0x22c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cf6:	e040      	b.n	8000d7a <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <setError+0x21c>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <setError+0x220>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <setError+0x224>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <setError+0x228>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <setError+0x22c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d16:	e030      	b.n	8000d7a <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <setError+0x21c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <setError+0x220>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <setError+0x224>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <setError+0x228>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <setError+0x22c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d36:	e020      	b.n	8000d7a <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <setError+0x21c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <setError+0x220>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <setError+0x224>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <setError+0x228>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <setError+0x22c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d56:	e010      	b.n	8000d7a <setError+0x20a>
		default:
			error_on = false;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <setError+0x21c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <setError+0x220>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <setError+0x224>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <setError+0x228>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <setError+0x22c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
			break;
 8000d76:	e000      	b.n	8000d7a <setError+0x20a>
		}
	}
 8000d78:	bf00      	nop
	//_errorSelection = true;
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000470 	.word	0x20000470
 8000d88:	2000046f 	.word	0x2000046f
 8000d8c:	20000486 	.word	0x20000486
 8000d90:	20000487 	.word	0x20000487
 8000d94:	20000488 	.word	0x20000488
 8000d98:	20000489 	.word	0x20000489
 8000d9c:	2000048a 	.word	0x2000048a

08000da0 <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b40      	ldr	r3, [pc, #256]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a39      	ldr	r2, [pc, #228]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b34      	ldr	r3, [pc, #208]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b31      	ldr	r3, [pc, #196]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <MX_GPIO_Init+0x118>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin | LED_2_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2103      	movs	r1, #3
 8000e18:	4828      	ldr	r0, [pc, #160]	; (8000ebc <MX_GPIO_Init+0x11c>)
 8000e1a:	f005 f80e 	bl	8005e3a <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PCPin PCPin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4619      	mov	r1, r3
 8000e34:	4821      	ldr	r0, [pc, #132]	; (8000ebc <MX_GPIO_Init+0x11c>)
 8000e36:	f004 fe65 	bl	8005b04 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = IN4_Pin | IN3_Pin | IN2_Pin;
 8000e3a:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000e3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <MX_GPIO_Init+0x120>)
 8000e50:	f004 fe58 	bl	8005b04 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin PCPin
	 PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = IN7_Pin | IN6_Pin | IN9_Pin | IN10_Pin | IN11_Pin
 8000e54:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000e58:	613b      	str	r3, [r7, #16]
			| IN12_Pin | IN5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4619      	mov	r1, r3
 8000e68:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_GPIO_Init+0x11c>)
 8000e6a:	f004 fe4b 	bl	8005b04 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = IN8_Pin | IN1_Pin;
 8000e6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	4619      	mov	r1, r3
 8000e82:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e84:	f004 fe3e 	bl	8005b04 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = Btn_Int_1_Pin | Btn_Int_2_Pin;
 8000e88:	23c0      	movs	r3, #192	; 0xc0
 8000e8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_GPIO_Init+0x128>)
 8000e8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <MX_GPIO_Init+0x124>)
 8000e9c:	f004 fe32 	bl	8005b04 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2017      	movs	r0, #23
 8000ea6:	f004 f974 	bl	8005192 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eaa:	2017      	movs	r0, #23
 8000eac:	f004 f98d 	bl	80051ca <HAL_NVIC_EnableIRQ>

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	10110000 	.word	0x10110000

08000ecc <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	4851      	ldr	r0, [pc, #324]	; (800101c <getInputs+0x150>)
 8000ed6:	f004 ff99 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	b2d9      	uxtb	r1, r3
 8000ee2:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <getInputs+0x154>)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	f361 0300 	bfi	r3, r1, #0, #1
 8000eea:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	484c      	ldr	r0, [pc, #304]	; (8001024 <getInputs+0x158>)
 8000ef2:	f004 ff8b 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	4a48      	ldr	r2, [pc, #288]	; (8001020 <getInputs+0x154>)
 8000f00:	7813      	ldrb	r3, [r2, #0]
 8000f02:	f361 0341 	bfi	r3, r1, #1, #1
 8000f06:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 8000f08:	2108      	movs	r1, #8
 8000f0a:	4846      	ldr	r0, [pc, #280]	; (8001024 <getInputs+0x158>)
 8000f0c:	f004 ff7e 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	b2d9      	uxtb	r1, r3
 8000f18:	4a41      	ldr	r2, [pc, #260]	; (8001020 <getInputs+0x154>)
 8000f1a:	7813      	ldrb	r3, [r2, #0]
 8000f1c:	f361 0382 	bfi	r3, r1, #2, #1
 8000f20:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8000f22:	2104      	movs	r1, #4
 8000f24:	483f      	ldr	r0, [pc, #252]	; (8001024 <getInputs+0x158>)
 8000f26:	f004 ff71 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	b2d9      	uxtb	r1, r3
 8000f32:	4a3b      	ldr	r2, [pc, #236]	; (8001020 <getInputs+0x154>)
 8000f34:	7813      	ldrb	r3, [r2, #0]
 8000f36:	f361 03c3 	bfi	r3, r1, #3, #1
 8000f3a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	4839      	ldr	r0, [pc, #228]	; (8001028 <getInputs+0x15c>)
 8000f42:	f004 ff63 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2d9      	uxtb	r1, r3
 8000f4e:	4a34      	ldr	r2, [pc, #208]	; (8001020 <getInputs+0x154>)
 8000f50:	7813      	ldrb	r3, [r2, #0]
 8000f52:	f361 1304 	bfi	r3, r1, #4, #1
 8000f56:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 8000f58:	2120      	movs	r1, #32
 8000f5a:	4833      	ldr	r0, [pc, #204]	; (8001028 <getInputs+0x15c>)
 8000f5c:	f004 ff56 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2d9      	uxtb	r1, r3
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <getInputs+0x154>)
 8000f6a:	7813      	ldrb	r3, [r2, #0]
 8000f6c:	f361 1345 	bfi	r3, r1, #5, #1
 8000f70:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8000f72:	2110      	movs	r1, #16
 8000f74:	482c      	ldr	r0, [pc, #176]	; (8001028 <getInputs+0x15c>)
 8000f76:	f004 ff49 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	b2d9      	uxtb	r1, r3
 8000f82:	4a27      	ldr	r2, [pc, #156]	; (8001020 <getInputs+0x154>)
 8000f84:	7813      	ldrb	r3, [r2, #0]
 8000f86:	f361 1386 	bfi	r3, r1, #6, #1
 8000f8a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8000f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f90:	4822      	ldr	r0, [pc, #136]	; (800101c <getInputs+0x150>)
 8000f92:	f004 ff3b 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	b2d9      	uxtb	r1, r3
 8000f9e:	4a20      	ldr	r2, [pc, #128]	; (8001020 <getInputs+0x154>)
 8000fa0:	7813      	ldrb	r3, [r2, #0]
 8000fa2:	f361 13c7 	bfi	r3, r1, #7, #1
 8000fa6:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	481f      	ldr	r0, [pc, #124]	; (8001028 <getInputs+0x15c>)
 8000fac:	f004 ff2e 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	b2d9      	uxtb	r1, r3
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <getInputs+0x154>)
 8000fba:	7853      	ldrb	r3, [r2, #1]
 8000fbc:	f361 0300 	bfi	r3, r1, #0, #1
 8000fc0:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <getInputs+0x15c>)
 8000fc6:	f004 ff21 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2d9      	uxtb	r1, r3
 8000fd2:	4a13      	ldr	r2, [pc, #76]	; (8001020 <getInputs+0x154>)
 8000fd4:	7853      	ldrb	r3, [r2, #1]
 8000fd6:	f361 0341 	bfi	r3, r1, #1, #1
 8000fda:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <getInputs+0x15c>)
 8000fe2:	f004 ff13 	bl	8005e0c <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	b2d9      	uxtb	r1, r3
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <getInputs+0x154>)
 8000ff0:	7853      	ldrb	r3, [r2, #1]
 8000ff2:	f361 0382 	bfi	r3, r1, #2, #1
 8000ff6:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 8000ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <getInputs+0x15c>)
 8000ffe:	f004 ff05 	bl	8005e0c <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	b2d9      	uxtb	r1, r3
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <getInputs+0x154>)
 800100c:	7853      	ldrb	r3, [r2, #1]
 800100e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001012:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001014:	f000 f8a2 	bl	800115c <buttonOkay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010c00 	.word	0x40010c00
 8001020:	20000404 	.word	0x20000404
 8001024:	40010800 	.word	0x40010800
 8001028:	40011000 	.word	0x40011000

0800102c <setInputs>:

void setInputs() {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
//	if (gpio.buttonInputs.bit.in10) //pageUp
//	{
//		door = true;
//		HAL_Delay(50);
//	}
	if (gpio.buttonInputs.bit.in7) //pageUp
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <setInputs+0x104>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <setInputs+0x2e>
	{
		buttonCounterForward++;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <setInputs+0x108>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <setInputs+0x108>)
 8001048:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <setInputs+0x108>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d806      	bhi.n	8001060 <setInputs+0x34>
			forward = true;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <setInputs+0x10c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e002      	b.n	8001060 <setInputs+0x34>
		}
	} else {
		buttonCounterForward = 0;
 800105a:	4b36      	ldr	r3, [pc, #216]	; (8001134 <setInputs+0x108>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in5) //pageDown
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <setInputs+0x104>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00d      	beq.n	800108a <setInputs+0x5e>
	{
		buttonCounterBackward++;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <setInputs+0x110>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <setInputs+0x110>)
 8001078:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <setInputs+0x110>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d806      	bhi.n	8001090 <setInputs+0x64>
			forward = true;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <setInputs+0x10c>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	e002      	b.n	8001090 <setInputs+0x64>
		}
	} else {
		buttonCounterBackward = 0;
 800108a:	4b2c      	ldr	r3, [pc, #176]	; (800113c <setInputs+0x110>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in8) //back
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <setInputs+0x104>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <setInputs+0x8e>
	{
		buttonCounterBack++;
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <setInputs+0x114>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <setInputs+0x114>)
 80010a8:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <setInputs+0x114>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d806      	bhi.n	80010c0 <setInputs+0x94>
			back = true;
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <setInputs+0x118>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e002      	b.n	80010c0 <setInputs+0x94>
		}
	}
	else
	{
		buttonCounterBack = 0;
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <setInputs+0x114>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //mode //After fixing the okay button change mode to okay
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <setInputs+0x104>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d010      	beq.n	80010f0 <setInputs+0xc4>
	{
		buttonCounterMode++;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <setInputs+0x11c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <setInputs+0x11c>)
 80010d8:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <setInputs+0x11c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d809      	bhi.n	80010f6 <setInputs+0xca>
			mode = true;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <setInputs+0x120>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
			_modeChanged = true;
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <setInputs+0x124>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e002      	b.n	80010f6 <setInputs+0xca>
		}
	}
	else
	{
		buttonCounterMode = 0;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <setInputs+0x11c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6 == 1) //okay
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <setInputs+0x104>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <setInputs+0xf4>
	{
		buttonCounterOkay++;
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <setInputs+0x128>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <setInputs+0x128>)
 800110e:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <setInputs+0x128>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d806      	bhi.n	8001126 <setInputs+0xfa>
			okay = true;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <setInputs+0x12c>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 800111e:	e002      	b.n	8001126 <setInputs+0xfa>
		buttonCounterOkay = 0;
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <setInputs+0x128>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000404 	.word	0x20000404
 8001134:	200004a8 	.word	0x200004a8
 8001138:	20000408 	.word	0x20000408
 800113c:	200004a9 	.word	0x200004a9
 8001140:	200004aa 	.word	0x200004aa
 8001144:	2000040e 	.word	0x2000040e
 8001148:	200004ac 	.word	0x200004ac
 800114c:	2000040d 	.word	0x2000040d
 8001150:	200004a1 	.word	0x200004a1
 8001154:	200004ab 	.word	0x200004ab
 8001158:	2000040a 	.word	0x2000040a

0800115c <buttonOkay>:

void buttonOkay(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in6 == 1) {
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <buttonOkay+0x54>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <buttonOkay+0x26>
		buttonCounterLongPress++;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <buttonOkay+0x58>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <buttonOkay+0x58>)
 8001178:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f003 f8c4 	bl	8004308 <HAL_Delay>
 8001180:	e005      	b.n	800118e <buttonOkay+0x32>
	} else {
		buttonCounterLongPress = 0;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <buttonOkay+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		okay = false;
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <buttonOkay+0x5c>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <buttonOkay+0x58>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <buttonOkay+0x60>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d308      	bcc.n	80011ac <buttonOkay+0x50>
		longpress = true;
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <buttonOkay+0x64>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
		okay = false;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <buttonOkay+0x5c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <buttonOkay+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	}

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000404 	.word	0x20000404
 80011b4:	200004a7 	.word	0x200004a7
 80011b8:	2000040a 	.word	0x2000040a
 80011bc:	20000014 	.word	0x20000014
 80011c0:	2000040c 	.word	0x2000040c

080011c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c8:	f003 f83c 	bl	8004244 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f003 f89a 	bl	8004308 <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011d4:	f000 f8aa 	bl	800132c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d8:	f7ff fde2 	bl	8000da0 <MX_GPIO_Init>
	MX_DMA_Init();
 80011dc:	f7ff fcaa 	bl	8000b34 <MX_DMA_Init>
	MX_CAN1_Init();
 80011e0:	f7ff f9a4 	bl	800052c <MX_CAN1_Init>
	MX_TIM2_Init();
 80011e4:	f001 f996 	bl	8002514 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80011e8:	f002 fe98 	bl	8003f1c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 80011ec:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <main+0x130>)
 80011ee:	2208      	movs	r2, #8
 80011f0:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 80011f2:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <main+0x130>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 80011f8:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <main+0x130>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80011fe:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <main+0x130>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <main+0x130>)
 8001206:	2242      	movs	r2, #66	; 0x42
 8001208:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <main+0x130>)
 800120c:	2200      	movs	r2, #0
 800120e:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <main+0x134>)
 8001212:	22f3      	movs	r2, #243	; 0xf3
 8001214:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <main+0x138>)
 8001218:	2208      	movs	r2, #8
 800121a:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 800121c:	4b37      	ldr	r3, [pc, #220]	; (80012fc <main+0x138>)
 800121e:	2200      	movs	r2, #0
 8001220:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <main+0x138>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8001228:	4b34      	ldr	r3, [pc, #208]	; (80012fc <main+0x138>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <main+0x138>)
 8001230:	2252      	movs	r2, #82	; 0x52
 8001232:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <main+0x138>)
 8001236:	2200      	movs	r2, #0
 8001238:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <main+0x13c>)
 800123c:	22f3      	movs	r2, #243	; 0xf3
 800123e:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 8001240:	2208      	movs	r2, #8
 8001242:	2100      	movs	r1, #0
 8001244:	482f      	ldr	r0, [pc, #188]	; (8001304 <main+0x140>)
 8001246:	f006 fdad 	bl	8007da4 <memset>
	memset(strDATA2, 0, 10);
 800124a:	220a      	movs	r2, #10
 800124c:	2100      	movs	r1, #0
 800124e:	482e      	ldr	r0, [pc, #184]	; (8001308 <main+0x144>)
 8001250:	f006 fda8 	bl	8007da4 <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <main+0x140>)
 8001256:	225a      	movs	r2, #90	; 0x5a
 8001258:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <main+0x140>)
 800125c:	22a5      	movs	r2, #165	; 0xa5
 800125e:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <main+0x140>)
 8001262:	2205      	movs	r2, #5
 8001264:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <main+0x140>)
 8001268:	2282      	movs	r2, #130	; 0x82
 800126a:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <main+0x144>)
 800126e:	225a      	movs	r2, #90	; 0x5a
 8001270:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <main+0x144>)
 8001274:	22a5      	movs	r2, #165	; 0xa5
 8001276:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <main+0x144>)
 800127a:	2207      	movs	r2, #7
 800127c:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <main+0x144>)
 8001280:	2282      	movs	r2, #130	; 0x82
 8001282:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 8001284:	4821      	ldr	r0, [pc, #132]	; (800130c <main+0x148>)
 8001286:	f003 fa3f 	bl	8004708 <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800128a:	2102      	movs	r1, #2
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <main+0x148>)
 800128e:	f003 fc6a 	bl	8004b66 <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 8001292:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <main+0x14c>)
 8001294:	2201      	movs	r2, #1
 8001296:	701a      	strb	r2, [r3, #0]
	currentMode = mode_evcu;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <main+0x150>)
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <main+0x154>)
 800129e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 80012a0:	481e      	ldr	r0, [pc, #120]	; (800131c <main+0x158>)
 80012a2:	f005 fbc5 	bl	8006a30 <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <main+0x15c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <main+0x15c>)
 80012b0:	701a      	strb	r2, [r3, #0]
		counter2++;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <main+0x160>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <main+0x160>)
 80012bc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f003 f822 	bl	8004308 <HAL_Delay>

		if (counter >= 5) {
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <main+0x15c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d906      	bls.n	80012da <main+0x116>
			getInputs();
 80012cc:	f7ff fdfe 	bl	8000ecc <getInputs>
			setInputs();
 80012d0:	f7ff feac 	bl	800102c <setInputs>
			//mainStateMachine();
			counter = 0;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <main+0x15c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]

		}
		if (timeout.timeout_0_5s == true) {
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <main+0x164>)
 80012dc:	795b      	ldrb	r3, [r3, #5]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0e0      	beq.n	80012a6 <main+0xe2>
			if (counter2 >= 10) {
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <main+0x160>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d9dc      	bls.n	80012a6 <main+0xe2>

				//transmit();

				counter2 = 0;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <main+0x160>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
		counter++;
 80012f2:	e7d8      	b.n	80012a6 <main+0xe2>
 80012f4:	200004b0 	.word	0x200004b0
 80012f8:	20000524 	.word	0x20000524
 80012fc:	200004e4 	.word	0x200004e4
 8001300:	20000018 	.word	0x20000018
 8001304:	20000414 	.word	0x20000414
 8001308:	2000041c 	.word	0x2000041c
 800130c:	200003d4 	.word	0x200003d4
 8001310:	200004a4 	.word	0x200004a4
 8001314:	2000046c 	.word	0x2000046c
 8001318:	2000047f 	.word	0x2000047f
 800131c:	2000053c 	.word	0x2000053c
 8001320:	20000534 	.word	0x20000534
 8001324:	20000535 	.word	0x20000535
 8001328:	20000584 	.word	0x20000584

0800132c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	2238      	movs	r2, #56	; 0x38
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f006 fd32 	bl	8007da4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001356:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001364:	2302      	movs	r3, #2
 8001366:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800136e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f004 fda5 	bl	8005ecc <HAL_RCC_OscConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x60>
		Error_Handler();
 8001388:	f000 f8d2 	bl	8001530 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800138c:	230f      	movs	r3, #15
 800138e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2102      	movs	r1, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 f8a6 	bl	80064f8 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x8a>
		Error_Handler();
 80013b2:	f000 f8bd 	bl	8001530 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 80013b6:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <SystemClock_Config+0x98>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	3750      	adds	r7, #80	; 0x50
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	42420070 	.word	0x42420070

080013c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	can_Counter++;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80013da:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	4817      	ldr	r0, [pc, #92]	; (8001440 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80013e2:	f004 fd2a 	bl	8005e3a <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80013ea:	2100      	movs	r1, #0
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f003 faa9 	bl	8004944 <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d106      	bne.n	8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 8001402:	4810      	ldr	r0, [pc, #64]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001404:	f7ff f968 	bl	80006d8 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b41      	cmp	r3, #65	; 0x41
 800140e:	d106      	bne.n	800141e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800141a:	f7ff f9fd 	bl	8000818 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b43      	cmp	r3, #67	; 0x43
 8001424:	d106      	bne.n	8001434 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001430:	f7ff fb1c 	bl	8000a6c <EVCU_getData_read_43>
	}
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000536 	.word	0x20000536
 8001440:	40011000 	.word	0x40011000
 8001444:	2000051c 	.word	0x2000051c
 8001448:	200004c8 	.word	0x200004c8

0800144c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	counter2++;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800145e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	2102      	movs	r1, #2
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8001466:	f004 fce8 	bl	8005e3a <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800146e:	2101      	movs	r1, #1
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f003 fa67 	bl	8004944 <HAL_CAN_GetRxMessage>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000535 	.word	0x20000535
 8001484:	40011000 	.word	0x40011000
 8001488:	2000052c 	.word	0x2000052c
 800148c:	200004fc 	.word	0x200004fc

08001490 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_GPIO_EXTI_Callback+0x20>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_GPIO_EXTI_Callback+0x24>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	701a      	strb	r2, [r3, #0]
	}
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	20000406 	.word	0x20000406
 80014b4:	20000407 	.word	0x20000407

080014b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014c2:	f001 f897 	bl	80025f4 <tick_count>

	mainStateMachine();
 80014c6:	f000 fc77 	bl	8001db8 <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 80014ca:	2101      	movs	r1, #1
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014ce:	f004 fccc 	bl	8005e6a <HAL_GPIO_TogglePin>
	timCounter++;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	3301      	adds	r3, #1
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014dc:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 80014de:	f001 f8ef 	bl	80026c0 <transmit>

	if (timeout.timeout_1s == true) {
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80014e4:	799b      	ldrb	r3, [r3, #6]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014ee:	f7ff f8d3 	bl	8000698 <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000584 	.word	0x20000584
 8001500:	40011000 	.word	0x40011000
 8001504:	20000537 	.word	0x20000537
 8001508:	20000524 	.word	0x20000524

0800150c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]

}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>
	...

0800153c <navigation>:
#include <menu.h>

void navigation(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <navigation+0xc4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d103      	bne.n	8001550 <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 8001548:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <navigation+0xc8>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e002      	b.n	8001556 <navigation+0x1a>
	} else {
		_navigation = false;
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <navigation+0xc8>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
	}
	switch (currentPage) {
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <navigation+0xcc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b07      	cmp	r3, #7
 800155e:	d84c      	bhi.n	80015fa <navigation+0xbe>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <navigation+0x2c>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001589 	.word	0x08001589
 800156c:	080015a1 	.word	0x080015a1
 8001570:	080015b9 	.word	0x080015b9
 8001574:	080015d1 	.word	0x080015d1
 8001578:	080015fb 	.word	0x080015fb
 800157c:	080015fb 	.word	0x080015fb
 8001580:	080015fb 	.word	0x080015fb
 8001584:	080015e9 	.word	0x080015e9
	case front:
		front_mainPage();
 8001588:	f000 f846 	bl	8001618 <front_mainPage>
		_realTimeData = true;
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <navigation+0xd0>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <navigation+0xd4>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
		previousPage = front;
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <navigation+0xd8>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
		break;
 800159e:	e02d      	b.n	80015fc <navigation+0xc0>
	case trip:
		trip_mainPage();
 80015a0:	f000 f89a 	bl	80016d8 <trip_mainPage>
		_realTimeData = true;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <navigation+0xd0>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <navigation+0xd4>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
		previousPage = trip;
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <navigation+0xd8>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
		break;
 80015b6:	e021      	b.n	80015fc <navigation+0xc0>
	case after_charge:
		after_charge_mainPage();
 80015b8:	f000 f8e4 	bl	8001784 <after_charge_mainPage>
		_realTimeData = true;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <navigation+0xd0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <navigation+0xd4>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
		previousPage = after_charge;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <navigation+0xd8>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
		break;
 80015ce:	e015      	b.n	80015fc <navigation+0xc0>
	case info:
		info_mainPage();
 80015d0:	f000 f920 	bl	8001814 <info_mainPage>
		_realTimeData = true;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <navigation+0xd0>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		_oneTimeData = true;
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <navigation+0xd4>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
		previousPage = info;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <navigation+0xd8>)
 80015e2:	2203      	movs	r2, #3
 80015e4:	701a      	strb	r2, [r3, #0]
		break;
 80015e6:	e009      	b.n	80015fc <navigation+0xc0>
	case settings:
		settings_mainPage();
 80015e8:	f000 fa30 	bl	8001a4c <settings_mainPage>
		_realTimeData = true;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <navigation+0xd0>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
		previousPage = settings;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <navigation+0xd8>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	701a      	strb	r2, [r3, #0]
		break;
 80015f8:	e000      	b.n	80015fc <navigation+0xc0>
	default:
		break;
 80015fa:	bf00      	nop
	}

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000466 	.word	0x20000466
 8001604:	20000494 	.word	0x20000494
 8001608:	2000047a 	.word	0x2000047a
 800160c:	20000495 	.word	0x20000495
 8001610:	20000497 	.word	0x20000497
 8001614:	2000047b 	.word	0x2000047b

08001618 <front_mainPage>:

void front_mainPage(void) {
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	if (page_entry) {
 800161c:	4b23      	ldr	r3, [pc, #140]	; (80016ac <front_mainPage+0x94>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00e      	beq.n	8001642 <front_mainPage+0x2a>
		page_entry = false;
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <front_mainPage+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
		currentMode = modeCleared;
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <front_mainPage+0x98>)
 800162c:	2204      	movs	r2, #4
 800162e:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <front_mainPage+0x9c>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <front_mainPage+0xa0>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <front_mainPage+0xa4>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <front_mainPage+0xa8>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <front_mainPage+0xac>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <front_mainPage+0xb0>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00f      	beq.n	8001676 <front_mainPage+0x5e>
		currentPage = trip;
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <front_mainPage+0xb4>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <front_mainPage+0x94>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <front_mainPage+0xb0>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <front_mainPage+0xb8>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <front_mainPage+0xbc>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		return;
 8001674:	e016      	b.n	80016a4 <front_mainPage+0x8c>
	}

	if (backward == true) {
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <front_mainPage+0xb8>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <front_mainPage+0x8c>

		currentPage = settings;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <front_mainPage+0xb4>)
 8001680:	2207      	movs	r2, #7
 8001682:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <front_mainPage+0x94>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
		forward = false;
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <front_mainPage+0xb0>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <front_mainPage+0xbc>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <front_mainPage+0xb8>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <front_mainPage+0xac>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
		return;
 80016a2:	bf00      	nop
	}
}
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000013 	.word	0x20000013
 80016b0:	2000047f 	.word	0x2000047f
 80016b4:	20000498 	.word	0x20000498
 80016b8:	200004a2 	.word	0x200004a2
 80016bc:	200004a3 	.word	0x200004a3
 80016c0:	200004a5 	.word	0x200004a5
 80016c4:	200004a6 	.word	0x200004a6
 80016c8:	20000408 	.word	0x20000408
 80016cc:	2000047a 	.word	0x2000047a
 80016d0:	20000409 	.word	0x20000409
 80016d4:	2000047e 	.word	0x2000047e

080016d8 <trip_mainPage>:

void trip_mainPage(void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 80016dc:	4b20      	ldr	r3, [pc, #128]	; (8001760 <trip_mainPage+0x88>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <trip_mainPage+0x12>
		page_entry = false;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <trip_mainPage+0x88>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <trip_mainPage+0x8c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <trip_mainPage+0x26>
		tripreset = true;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <trip_mainPage+0x90>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
		longpress = false;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <trip_mainPage+0x8c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <trip_mainPage+0x94>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <trip_mainPage+0x98>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
	trip_reset();
 800170a:	f002 fd63 	bl	80041d4 <trip_reset>

	if (forward == true) {
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <trip_mainPage+0x9c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00f      	beq.n	8001736 <trip_mainPage+0x5e>

		currentPage = after_charge;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <trip_mainPage+0xa0>)
 8001718:	2202      	movs	r2, #2
 800171a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <trip_mainPage+0x88>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <trip_mainPage+0x9c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <trip_mainPage+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <trip_mainPage+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
		return;
 8001734:	e013      	b.n	800175e <trip_mainPage+0x86>
	}

	if (backward == true) {
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <trip_mainPage+0xa4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00f      	beq.n	800175e <trip_mainPage+0x86>

		currentPage = front;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <trip_mainPage+0xa0>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <trip_mainPage+0x88>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
		forward = false;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <trip_mainPage+0x9c>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <trip_mainPage+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <trip_mainPage+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
		return;
 800175c:	bf00      	nop
	}
}
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000013 	.word	0x20000013
 8001764:	2000040c 	.word	0x2000040c
 8001768:	2000040b 	.word	0x2000040b
 800176c:	200004a5 	.word	0x200004a5
 8001770:	200004a6 	.word	0x200004a6
 8001774:	20000408 	.word	0x20000408
 8001778:	2000047a 	.word	0x2000047a
 800177c:	20000409 	.word	0x20000409
 8001780:	2000047e 	.word	0x2000047e

08001784 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <after_charge_mainPage+0x74>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <after_charge_mainPage+0x12>
		page_entry = false;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <after_charge_mainPage+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <after_charge_mainPage+0x78>)
 8001798:	2202      	movs	r2, #2
 800179a:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <after_charge_mainPage+0x7c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <after_charge_mainPage+0x80>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00f      	beq.n	80017ca <after_charge_mainPage+0x46>

		currentPage = info;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <after_charge_mainPage+0x84>)
 80017ac:	2203      	movs	r2, #3
 80017ae:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <after_charge_mainPage+0x74>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
		forward = false;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <after_charge_mainPage+0x80>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
		backward = false;
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <after_charge_mainPage+0x88>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <after_charge_mainPage+0x8c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
		return;
 80017c8:	e013      	b.n	80017f2 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 80017ca:	4b10      	ldr	r3, [pc, #64]	; (800180c <after_charge_mainPage+0x88>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00f      	beq.n	80017f2 <after_charge_mainPage+0x6e>
		currentPage = trip;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <after_charge_mainPage+0x84>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <after_charge_mainPage+0x74>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
		forward = false;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <after_charge_mainPage+0x80>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		backward = false;
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <after_charge_mainPage+0x88>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <after_charge_mainPage+0x8c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
		return;
 80017f0:	bf00      	nop
	}
}
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000013 	.word	0x20000013
 80017fc:	200004a5 	.word	0x200004a5
 8001800:	200004a6 	.word	0x200004a6
 8001804:	20000408 	.word	0x20000408
 8001808:	2000047a 	.word	0x2000047a
 800180c:	20000409 	.word	0x20000409
 8001810:	2000047e 	.word	0x2000047e

08001814 <info_mainPage>:

void info_mainPage(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001818:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <info_mainPage+0x204>)
 800181a:	2203      	movs	r2, #3
 800181c:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 800181e:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <info_mainPage+0x208>)
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001824:	4b7e      	ldr	r3, [pc, #504]	; (8001a20 <info_mainPage+0x20c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	f083 0301 	eor.w	r3, r3, #1
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <info_mainPage+0x36>
		if (okay == true) {
 8001832:	4b7c      	ldr	r3, [pc, #496]	; (8001a24 <info_mainPage+0x210>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 80c4 	beq.w	80019c4 <info_mainPage+0x1b0>
			inInfoBat = true;
 800183c:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <info_mainPage+0x20c>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001842:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <info_mainPage+0x210>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e0bc      	b.n	80019c4 <info_mainPage+0x1b0>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 800184a:	4b77      	ldr	r3, [pc, #476]	; (8001a28 <info_mainPage+0x214>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00f      	beq.n	8001872 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001852:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <info_mainPage+0x218>)
 8001854:	2204      	movs	r2, #4
 8001856:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <info_mainPage+0x21c>)
 800185a:	2206      	movs	r2, #6
 800185c:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 800185e:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <info_mainPage+0x220>)
 8001860:	2205      	movs	r2, #5
 8001862:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001864:	4b70      	ldr	r3, [pc, #448]	; (8001a28 <info_mainPage+0x214>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 800186a:	2004      	movs	r0, #4
 800186c:	f001 f93e 	bl	8002aec <vehicleInfo_UI>
 8001870:	e005      	b.n	800187e <info_mainPage+0x6a>
		} else {
			vehicleInfo_UI(currentMenu);
 8001872:	4b6e      	ldr	r3, [pc, #440]	; (8001a2c <info_mainPage+0x218>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f001 f937 	bl	8002aec <vehicleInfo_UI>
		}
		if (forward == true) {
 800187e:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <info_mainPage+0x224>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d044      	beq.n	8001910 <info_mainPage+0xfc>
			//currentMenu++;
			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001886:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <info_mainPage+0x218>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b06      	cmp	r3, #6
 800188e:	d111      	bne.n	80018b4 <info_mainPage+0xa0>
 8001890:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <info_mainPage+0x21c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b05      	cmp	r3, #5
 8001898:	d10c      	bne.n	80018b4 <info_mainPage+0xa0>
				currentMenu = infobat;
 800189a:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <info_mainPage+0x218>)
 800189c:	2204      	movs	r2, #4
 800189e:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 80018a0:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <info_mainPage+0x21c>)
 80018a2:	2206      	movs	r2, #6
 80018a4:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <info_mainPage+0x220>)
 80018a8:	2205      	movs	r2, #5
 80018aa:	701a      	strb	r2, [r3, #0]
				forward = false;
 80018ac:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <info_mainPage+0x224>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
				return;
 80018b2:	e0b0      	b.n	8001a16 <info_mainPage+0x202>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <info_mainPage+0x218>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d111      	bne.n	80018e2 <info_mainPage+0xce>
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <info_mainPage+0x21c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d10c      	bne.n	80018e2 <info_mainPage+0xce>
				currentMenu = infomot;
 80018c8:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <info_mainPage+0x218>)
 80018ca:	2205      	movs	r2, #5
 80018cc:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <info_mainPage+0x21c>)
 80018d0:	2204      	movs	r2, #4
 80018d2:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 80018d4:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <info_mainPage+0x220>)
 80018d6:	2206      	movs	r2, #6
 80018d8:	701a      	strb	r2, [r3, #0]
				forward = false;
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <info_mainPage+0x224>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
				return;
 80018e0:	e099      	b.n	8001a16 <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 80018e2:	4b52      	ldr	r3, [pc, #328]	; (8001a2c <info_mainPage+0x218>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d111      	bne.n	8001910 <info_mainPage+0xfc>
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <info_mainPage+0x21c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d10c      	bne.n	8001910 <info_mainPage+0xfc>
				currentMenu = infoinv;
 80018f6:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <info_mainPage+0x218>)
 80018f8:	2206      	movs	r2, #6
 80018fa:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <info_mainPage+0x21c>)
 80018fe:	2205      	movs	r2, #5
 8001900:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001902:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <info_mainPage+0x220>)
 8001904:	2204      	movs	r2, #4
 8001906:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <info_mainPage+0x224>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
				return;
 800190e:	e082      	b.n	8001a16 <info_mainPage+0x202>
			}

		}

		if (backward == true) {
 8001910:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <info_mainPage+0x228>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d044      	beq.n	80019a2 <info_mainPage+0x18e>
			//currentMenu--;
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001918:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <info_mainPage+0x218>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b04      	cmp	r3, #4
 8001920:	d111      	bne.n	8001946 <info_mainPage+0x132>
 8001922:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <info_mainPage+0x220>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <info_mainPage+0x132>
				currentMenu = infoinv;
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <info_mainPage+0x218>)
 800192e:	2206      	movs	r2, #6
 8001930:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001932:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <info_mainPage+0x220>)
 8001934:	2204      	movs	r2, #4
 8001936:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <info_mainPage+0x21c>)
 800193a:	2205      	movs	r2, #5
 800193c:	701a      	strb	r2, [r3, #0]
				backward = false;
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <info_mainPage+0x228>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
				return;
 8001944:	e067      	b.n	8001a16 <info_mainPage+0x202>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <info_mainPage+0x218>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b06      	cmp	r3, #6
 800194e:	d111      	bne.n	8001974 <info_mainPage+0x160>
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <info_mainPage+0x220>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b04      	cmp	r3, #4
 8001958:	d10c      	bne.n	8001974 <info_mainPage+0x160>
				currentMenu = infomot;
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <info_mainPage+0x218>)
 800195c:	2205      	movs	r2, #5
 800195e:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <info_mainPage+0x220>)
 8001962:	2206      	movs	r2, #6
 8001964:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <info_mainPage+0x21c>)
 8001968:	2204      	movs	r2, #4
 800196a:	701a      	strb	r2, [r3, #0]
				backward = false;
 800196c:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <info_mainPage+0x228>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
				return;
 8001972:	e050      	b.n	8001a16 <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <info_mainPage+0x218>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b05      	cmp	r3, #5
 800197c:	d111      	bne.n	80019a2 <info_mainPage+0x18e>
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <info_mainPage+0x220>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b06      	cmp	r3, #6
 8001986:	d10c      	bne.n	80019a2 <info_mainPage+0x18e>
				currentMenu = infobat;
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <info_mainPage+0x218>)
 800198a:	2204      	movs	r2, #4
 800198c:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <info_mainPage+0x220>)
 8001990:	2205      	movs	r2, #5
 8001992:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <info_mainPage+0x21c>)
 8001996:	2206      	movs	r2, #6
 8001998:	701a      	strb	r2, [r3, #0]
				backward = false;
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <info_mainPage+0x228>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
				return;
 80019a0:	e039      	b.n	8001a16 <info_mainPage+0x202>
			}

		}

		if (back == true) {
 80019a2:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <info_mainPage+0x22c>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d034      	beq.n	8001a14 <info_mainPage+0x200>
			page_entry = true;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <info_mainPage+0x214>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <info_mainPage+0x20c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
			back = false;
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <info_mainPage+0x22c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <info_mainPage+0x230>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
		}
		return;
 80019c2:	e027      	b.n	8001a14 <info_mainPage+0x200>
	}

	if (forward == true) {
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <info_mainPage+0x224>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00f      	beq.n	80019ec <info_mainPage+0x1d8>
		currentPage = settings;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <info_mainPage+0x234>)
 80019ce:	2207      	movs	r2, #7
 80019d0:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <info_mainPage+0x214>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
		forward = false;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <info_mainPage+0x224>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
		backward = false;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <info_mainPage+0x228>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <info_mainPage+0x230>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
		return;
 80019ea:	e014      	b.n	8001a16 <info_mainPage+0x202>
	}

	if (backward == true) {
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <info_mainPage+0x228>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d010      	beq.n	8001a16 <info_mainPage+0x202>
		currentPage = after_charge;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <info_mainPage+0x234>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <info_mainPage+0x214>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <info_mainPage+0x224>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <info_mainPage+0x228>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <info_mainPage+0x230>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
		return;
 8001a12:	e000      	b.n	8001a16 <info_mainPage+0x202>
		return;
 8001a14:	bf00      	nop
	}
}
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	200004a5 	.word	0x200004a5
 8001a1c:	200004a6 	.word	0x200004a6
 8001a20:	20000410 	.word	0x20000410
 8001a24:	2000040a 	.word	0x2000040a
 8001a28:	20000013 	.word	0x20000013
 8001a2c:	2000000f 	.word	0x2000000f
 8001a30:	20000010 	.word	0x20000010
 8001a34:	20000011 	.word	0x20000011
 8001a38:	20000408 	.word	0x20000408
 8001a3c:	20000409 	.word	0x20000409
 8001a40:	2000040e 	.word	0x2000040e
 8001a44:	2000047e 	.word	0x2000047e
 8001a48:	2000047a 	.word	0x2000047a

08001a4c <settings_mainPage>:

void settings_mainPage(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

	selection_UI(front);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f001 f90d 	bl	8002c70 <selection_UI>
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001a56:	4b65      	ldr	r3, [pc, #404]	; (8001bec <settings_mainPage+0x1a0>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001a5c:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <settings_mainPage+0x1a4>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]


	if (!(inSettings)) {
 8001a62:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <settings_mainPage+0x1a8>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f083 0301 	eor.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <settings_mainPage+0x3c>
		if (okay == true) {
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <settings_mainPage+0x1ac>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 808d 	beq.w	8001b94 <settings_mainPage+0x148>
			inSettings = true;
 8001a7a:	4b5e      	ldr	r3, [pc, #376]	; (8001bf4 <settings_mainPage+0x1a8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001a80:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <settings_mainPage+0x1ac>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e085      	b.n	8001b94 <settings_mainPage+0x148>
		}
	}

	else {
		if (page_entry == true) {
 8001a88:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <settings_mainPage+0x1b0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <settings_mainPage+0x50>
			currentMenu = vehicleMenu;
 8001a90:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <settings_mainPage+0x1b4>)
 8001a92:	2208      	movs	r2, #8
 8001a94:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001a96:	4b59      	ldr	r3, [pc, #356]	; (8001bfc <settings_mainPage+0x1b0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
		}

		if (!(menuAccess)) {
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <settings_mainPage+0x1b8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d031      	beq.n	8001b0e <settings_mainPage+0xc2>
			selection_UI(currentMenu);
 8001aaa:	4b55      	ldr	r3, [pc, #340]	; (8001c00 <settings_mainPage+0x1b4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f001 f8dd 	bl	8002c70 <selection_UI>

			if (forward == true) {
 8001ab6:	4b54      	ldr	r3, [pc, #336]	; (8001c08 <settings_mainPage+0x1bc>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d011      	beq.n	8001ae2 <settings_mainPage+0x96>
				currentMenu--;
 8001abe:	4b50      	ldr	r3, [pc, #320]	; (8001c00 <settings_mainPage+0x1b4>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <settings_mainPage+0x1b4>)
 8001aca:	701a      	strb	r2, [r3, #0]
				if (currentMenu <= 7) {
 8001acc:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <settings_mainPage+0x1b4>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d802      	bhi.n	8001adc <settings_mainPage+0x90>
					currentMenu = errorsMenu;
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <settings_mainPage+0x1b4>)
 8001ad8:	220b      	movs	r2, #11
 8001ada:	701a      	strb	r2, [r3, #0]
				}
				forward = false;
 8001adc:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <settings_mainPage+0x1bc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
				//return;
			}

			if (backward == true) {
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <settings_mainPage+0x1c0>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d011      	beq.n	8001b0e <settings_mainPage+0xc2>
				currentMenu++;
 8001aea:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <settings_mainPage+0x1b4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b42      	ldr	r3, [pc, #264]	; (8001c00 <settings_mainPage+0x1b4>)
 8001af6:	701a      	strb	r2, [r3, #0]
				if (currentMenu >= 12) {
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <settings_mainPage+0x1b4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b0b      	cmp	r3, #11
 8001b00:	d902      	bls.n	8001b08 <settings_mainPage+0xbc>
					currentMenu = vehicleMenu;
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <settings_mainPage+0x1b4>)
 8001b04:	2208      	movs	r2, #8
 8001b06:	701a      	strb	r2, [r3, #0]
				}
				backward = false;
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <settings_mainPage+0x1c0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
				//return;

			}
		}
if (!inVehicleMenu || !inSystemMenu || !inErrorsMenu || !inBluetoothMenu) {
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <settings_mainPage+0x1c4>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	f083 0301 	eor.w	r3, r3, #1
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <settings_mainPage+0xea>
 8001b1c:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <settings_mainPage+0x1c8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f083 0301 	eor.w	r3, r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <settings_mainPage+0xea>
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <settings_mainPage+0x1cc>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f083 0301 	eor.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0

}
		switch (currentMenu) {
 8001b36:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <settings_mainPage+0x1b4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3b08      	subs	r3, #8
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d816      	bhi.n	8001b70 <settings_mainPage+0x124>
 8001b42:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <settings_mainPage+0xfc>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b5f 	.word	0x08001b5f
 8001b50:	08001b65 	.word	0x08001b65
 8001b54:	08001b6b 	.word	0x08001b6b
		case vehicleMenu:
			vehicle_page();
 8001b58:	f000 f866 	bl	8001c28 <vehicle_page>
			break;
 8001b5c:	e009      	b.n	8001b72 <settings_mainPage+0x126>
		case systemMenu:
			system_page();
 8001b5e:	f000 f895 	bl	8001c8c <system_page>
			break;
 8001b62:	e006      	b.n	8001b72 <settings_mainPage+0x126>
		case bluetoothMenu:
			bluetooth_page();
 8001b64:	f000 f8c4 	bl	8001cf0 <bluetooth_page>
			break;
 8001b68:	e003      	b.n	8001b72 <settings_mainPage+0x126>
		case errorsMenu:
			errors_page();
 8001b6a:	f000 f8f3 	bl	8001d54 <errors_page>
			break;
 8001b6e:	e000      	b.n	8001b72 <settings_mainPage+0x126>
		default:
			break;
 8001b70:	bf00      	nop
		}

		if (back == true) {
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <settings_mainPage+0x1d0>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <settings_mainPage+0x19c>
			page_entry = true;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <settings_mainPage+0x1b0>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
			inSettings = false;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <settings_mainPage+0x1a8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <settings_mainPage+0x1d4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			back = false;
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <settings_mainPage+0x1d0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001b92:	e029      	b.n	8001be8 <settings_mainPage+0x19c>
	}

	if (forward == true) {
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <settings_mainPage+0x1bc>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d011      	beq.n	8001bc0 <settings_mainPage+0x174>
		currentPage = front;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <settings_mainPage+0x1d8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <settings_mainPage+0x1b0>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <settings_mainPage+0x1bc>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <settings_mainPage+0x1d4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <settings_mainPage+0x1a4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <settings_mainPage+0x1c0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
	}

	if (backward == true) {
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <settings_mainPage+0x1c0>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <settings_mainPage+0x19e>
		currentPage = info;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <settings_mainPage+0x1d8>)
 8001bca:	2203      	movs	r2, #3
 8001bcc:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <settings_mainPage+0x1b0>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <settings_mainPage+0x1bc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <settings_mainPage+0x1d4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <settings_mainPage+0x1c0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e000      	b.n	8001bea <settings_mainPage+0x19e>
		return;
 8001be8:	bf00      	nop
	}

}
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200004a5 	.word	0x200004a5
 8001bf0:	200004a6 	.word	0x200004a6
 8001bf4:	2000040f 	.word	0x2000040f
 8001bf8:	2000040a 	.word	0x2000040a
 8001bfc:	20000013 	.word	0x20000013
 8001c00:	2000000f 	.word	0x2000000f
 8001c04:	20000481 	.word	0x20000481
 8001c08:	20000408 	.word	0x20000408
 8001c0c:	20000409 	.word	0x20000409
 8001c10:	20000482 	.word	0x20000482
 8001c14:	20000483 	.word	0x20000483
 8001c18:	20000485 	.word	0x20000485
 8001c1c:	2000040e 	.word	0x2000040e
 8001c20:	2000047e 	.word	0x2000047e
 8001c24:	2000047a 	.word	0x2000047a

08001c28 <vehicle_page>:

void vehicle_page(void) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <vehicle_page+0x54>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f083 0301 	eor.w	r3, r3, #1
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00d      	beq.n	8001c56 <vehicle_page+0x2e>
		if (okay == true) {
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <vehicle_page+0x58>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d019      	beq.n	8001c76 <vehicle_page+0x4e>
			menuAccess = true;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <vehicle_page+0x5c>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <vehicle_page+0x54>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <vehicle_page+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
			menuAccess = false;
			inVehicleMenu = false;
			back = false;
		}
	}
}
 8001c54:	e00f      	b.n	8001c76 <vehicle_page+0x4e>
		settings_UI(vehicleMenu);
 8001c56:	2008      	movs	r0, #8
 8001c58:	f000 ffc2 	bl	8002be0 <settings_UI>
		if (back == true) {
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <vehicle_page+0x60>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <vehicle_page+0x4e>
			menuAccess = false;
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <vehicle_page+0x5c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <vehicle_page+0x54>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
			back = false;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <vehicle_page+0x60>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000482 	.word	0x20000482
 8001c80:	2000040a 	.word	0x2000040a
 8001c84:	20000481 	.word	0x20000481
 8001c88:	2000040e 	.word	0x2000040e

08001c8c <system_page>:
void system_page(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <system_page+0x54>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <system_page+0x2e>
		if (okay == true) {
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <system_page+0x58>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00c      	beq.n	8001cc0 <system_page+0x34>
			menuAccess = true;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <system_page+0x5c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <system_page+0x54>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <system_page+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	e002      	b.n	8001cc0 <system_page+0x34>
		}
	} else {
		settings_UI(systemMenu);
 8001cba:	2009      	movs	r0, #9
 8001cbc:	f000 ff90 	bl	8002be0 <settings_UI>
	}

	if (back == true) {
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <system_page+0x60>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <system_page+0x4e>
		menuAccess = false;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <system_page+0x5c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <system_page+0x54>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
		back = false;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <system_page+0x60>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]

	}
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000483 	.word	0x20000483
 8001ce4:	2000040a 	.word	0x2000040a
 8001ce8:	20000481 	.word	0x20000481
 8001cec:	2000040e 	.word	0x2000040e

08001cf0 <bluetooth_page>:

void bluetooth_page(void) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <bluetooth_page+0x54>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <bluetooth_page+0x2e>
		if (okay == true) {
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <bluetooth_page+0x58>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <bluetooth_page+0x4e>
			menuAccess = true;
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <bluetooth_page+0x5c>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <bluetooth_page+0x54>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <bluetooth_page+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
			menuAccess = false;
			inBluetoothMenu = false;
			back = false;
		}
	}
}
 8001d1c:	e00f      	b.n	8001d3e <bluetooth_page+0x4e>
		settings_UI(bluetoothMenu);
 8001d1e:	200a      	movs	r0, #10
 8001d20:	f000 ff5e 	bl	8002be0 <settings_UI>
		if (back == true) {
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <bluetooth_page+0x60>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <bluetooth_page+0x4e>
			menuAccess = false;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <bluetooth_page+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <bluetooth_page+0x54>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
			back = false;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <bluetooth_page+0x60>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000484 	.word	0x20000484
 8001d48:	2000040a 	.word	0x2000040a
 8001d4c:	20000481 	.word	0x20000481
 8001d50:	2000040e 	.word	0x2000040e

08001d54 <errors_page>:
void errors_page(void) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <errors_page+0x54>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	f083 0301 	eor.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00d      	beq.n	8001d82 <errors_page+0x2e>
		if (okay == true) {
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <errors_page+0x58>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <errors_page+0x4e>
			menuAccess = true;
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <errors_page+0x5c>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <errors_page+0x54>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <errors_page+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
			menuAccess = false;
			inErrorsMenu = false;
			back = false;
		}
	}
}
 8001d80:	e00f      	b.n	8001da2 <errors_page+0x4e>
		settings_UI(errorsMenu);
 8001d82:	200b      	movs	r0, #11
 8001d84:	f000 ff2c 	bl	8002be0 <settings_UI>
		if (back == true) {
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <errors_page+0x60>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <errors_page+0x4e>
			menuAccess = false;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <errors_page+0x5c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <errors_page+0x54>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
			back = false;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <errors_page+0x60>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000485 	.word	0x20000485
 8001dac:	2000040a 	.word	0x2000040a
 8001db0:	20000481 	.word	0x20000481
 8001db4:	2000040e 	.word	0x2000040e

08001db8 <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <mainStateMachine+0x44>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d816      	bhi.n	8001df4 <mainStateMachine+0x3c>
 8001dc6:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <mainStateMachine+0x14>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001de3 	.word	0x08001de3
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001def 	.word	0x08001def
	case startingup_state:
		startUpState();
 8001ddc:	f000 f810 	bl	8001e00 <startUpState>
		break;
 8001de0:	e009      	b.n	8001df6 <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 8001de2:	f000 f8e7 	bl	8001fb4 <driveState>
		break;
 8001de6:	e006      	b.n	8001df6 <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 8001de8:	f000 f97a 	bl	80020e0 <chargeState>
		break;
 8001dec:	e003      	b.n	8001df6 <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 8001dee:	f000 f9f5 	bl	80021dc <errorState>
		break;
 8001df2:	e000      	b.n	8001df6 <mainStateMachine+0x3e>
	default:
		break;
 8001df4:	bf00      	nop
	}
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000047c 	.word	0x2000047c

08001e00 <startUpState>:

void startUpState(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

	dataCounter++;
 8001e04:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <startUpState+0x13c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <startUpState+0x13c>)
 8001e0e:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <startUpState+0x140>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <startUpState+0x3e>
		state_entry = false;
 8001e18:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <startUpState+0x140>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <startUpState+0x144>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 8001e24:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <startUpState+0x148>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8001e2a:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <startUpState+0x14c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8001e30:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <startUpState+0x150>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <startUpState+0x3e>
			_errorSetIcon = false;
 8001e38:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <startUpState+0x154>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
		}
	}

	//	fillandTransmit();
	if (dataCounter > 2) {
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <startUpState+0x13c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d905      	bls.n	8001e52 <startUpState+0x52>
		_oneTimeData = true;
 8001e46:	4b44      	ldr	r3, [pc, #272]	; (8001f58 <startUpState+0x158>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <startUpState+0x13c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
	}

	//	fillandTransmitCommon();
	_realTimeData = true;
 8001e52:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <startUpState+0x15c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]

	if (err_error != 0) {
 8001e58:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <startUpState+0x160>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d016      	beq.n	8001e8e <startUpState+0x8e>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8001e60:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <startUpState+0x150>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d164      	bne.n	8001f32 <startUpState+0x132>
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <startUpState+0x164>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <startUpState+0x168>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d05e      	beq.n	8001f32 <startUpState+0x132>
			currentStateSM = Error_state;
 8001e74:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <startUpState+0x16c>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <startUpState+0x170>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8001e80:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <startUpState+0x140>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <startUpState+0x174>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 8001e8c:	e051      	b.n	8001f32 <startUpState+0x132>
	}

	if (currentstate == 4) {
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <startUpState+0x178>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d109      	bne.n	8001eaa <startUpState+0xaa>
		currentStateSM = charging_state;
 8001e96:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <startUpState+0x16c>)
 8001e98:	2202      	movs	r2, #2
 8001e9a:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <startUpState+0x170>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <startUpState+0x140>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
		return;
 8001ea8:	e046      	b.n	8001f38 <startUpState+0x138>
	}
	if (accessory == 1) {
 8001eaa:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <startUpState+0x17c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d112      	bne.n	8001ed8 <startUpState+0xd8>
		navigation(); //enable navigation in Accessory Mode
 8001eb2:	f7ff fb43 	bl	800153c <navigation>
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 8001eb6:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <startUpState+0x150>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d022      	beq.n	8001f04 <startUpState+0x104>
			entry = true;
 8001ebe:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <startUpState+0x180>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
			startup = true;
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <startUpState+0x184>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
			checklit = true;
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <startUpState+0x188>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <startUpState+0x18c>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e015      	b.n	8001f04 <startUpState+0x104>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <startUpState+0x190>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <startUpState+0x194>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <startUpState+0x198>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <startUpState+0x19c>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <startUpState+0x1a0>)
 8001ef0:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <startUpState+0x144>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
		inInfoBat = false;
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <startUpState+0x1a4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <startUpState+0x14c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
	}

	//StartingUp Transmit flag
	//Fill and Transmit
	//startingUp();
	_startingUp = true;
 8001f04:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <startUpState+0x18c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]

	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <startUpState+0x1a8>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d111      	bne.n	8001f36 <startUpState+0x136>
		return;
	}

	currentStateSM = driving_state;
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <startUpState+0x16c>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <startUpState+0x170>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
	_modeSelection = true;
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <startUpState+0x1ac>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
	_modeChanged = true;
 8001f24:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <startUpState+0x1b0>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
	state_entry = true;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <startUpState+0x140>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e002      	b.n	8001f38 <startUpState+0x138>
		return; //Will exit from the function
 8001f32:	bf00      	nop
 8001f34:	e000      	b.n	8001f38 <startUpState+0x138>
		return;
 8001f36:	bf00      	nop
}
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000538 	.word	0x20000538
 8001f40:	20000012 	.word	0x20000012
 8001f44:	2000047a 	.word	0x2000047a
 8001f48:	2000040a 	.word	0x2000040a
 8001f4c:	200004a6 	.word	0x200004a6
 8001f50:	20000000 	.word	0x20000000
 8001f54:	2000049c 	.word	0x2000049c
 8001f58:	20000497 	.word	0x20000497
 8001f5c:	20000495 	.word	0x20000495
 8001f60:	2000046f 	.word	0x2000046f
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000474 	.word	0x20000474
 8001f6c:	2000047c 	.word	0x2000047c
 8001f70:	2000047d 	.word	0x2000047d
 8001f74:	2000049d 	.word	0x2000049d
 8001f78:	20000464 	.word	0x20000464
 8001f7c:	20000466 	.word	0x20000466
 8001f80:	2000000d 	.word	0x2000000d
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	2000000e 	.word	0x2000000e
 8001f8c:	20000493 	.word	0x20000493
 8001f90:	20000408 	.word	0x20000408
 8001f94:	20000409 	.word	0x20000409
 8001f98:	20000494 	.word	0x20000494
 8001f9c:	2000046c 	.word	0x2000046c
 8001fa0:	2000047f 	.word	0x2000047f
 8001fa4:	20000410 	.word	0x20000410
 8001fa8:	20000467 	.word	0x20000467
 8001fac:	20000498 	.word	0x20000498
 8001fb0:	200004a1 	.word	0x200004a1

08001fb4 <driveState>:

void driveState(void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	if (state_entry) {
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <driveState+0xd8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d018      	beq.n	8001ff2 <driveState+0x3e>
		state_entry = false;
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <driveState+0xd8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 8001fc6:	4b32      	ldr	r3, [pc, #200]	; (8002090 <driveState+0xdc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <driveState+0xe0>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <driveState+0xe4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
		_realTimeData = true;
 8001fd8:	4b30      	ldr	r3, [pc, #192]	; (800209c <driveState+0xe8>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
		///////////////////////
		_oneTimeData = true;
 8001fde:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <driveState+0xec>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
		//////////////////////
		if (err_or_not != 0) {
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <driveState+0xf0>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <driveState+0x3e>
			_errorSetIcon = false;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <driveState+0xf4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <driveState+0xf0>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d112      	bne.n	8002020 <driveState+0x6c>
 8001ffa:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <driveState+0xf8>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <driveState+0xfc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d00c      	beq.n	8002020 <driveState+0x6c>
		currentStateSM = Error_state;
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <driveState+0x100>)
 8002008:	2203      	movs	r2, #3
 800200a:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <driveState+0x104>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <driveState+0xd8>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <driveState+0x108>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
		return;
 800201e:	e034      	b.n	800208a <driveState+0xd6>
	}

	if (accessory == 1) {
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <driveState+0x10c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d109      	bne.n	800203c <driveState+0x88>
		currentStateSM = startingup_state;
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <driveState+0x100>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <driveState+0x104>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <driveState+0xd8>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
		return;
 800203a:	e026      	b.n	800208a <driveState+0xd6>
	}

	if (currentstate == 2) {
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <driveState+0x110>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d101      	bne.n	8002048 <driveState+0x94>
		evcuMode();
 8002044:	f002 f830 	bl	80040a8 <evcuMode>

	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <driveState+0x114>)
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <driveState+0x110>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d006      	beq.n	8002062 <driveState+0xae>
		_gearChanged = true;
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <driveState+0x118>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <driveState+0x110>)
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <driveState+0x114>)
 8002060:	701a      	strb	r2, [r3, #0]
	}

	_modeSelection = true;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <driveState+0x11c>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]

	//fillandTransmitCommon();
	_realTimeData = true;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <driveState+0xe8>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
	_oneTimeData = true;
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <driveState+0xec>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
	_driverPageSet = true;
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <driveState+0x120>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
//	if (_modeChanged) {
//		modeSelection(currentMode);	//This should be called using a flag _modeSelection
//	}
	if (rtn) { //rtn True when there is a error
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <driveState+0x124>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <driveState+0xd6>
		_allowNavigation = true;
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <driveState+0x128>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
		return;
 8002088:	bf00      	nop
	}
}
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000012 	.word	0x20000012
 8002090:	2000047a 	.word	0x2000047a
 8002094:	20000452 	.word	0x20000452
 8002098:	200004a6 	.word	0x200004a6
 800209c:	20000495 	.word	0x20000495
 80020a0:	20000497 	.word	0x20000497
 80020a4:	20000000 	.word	0x20000000
 80020a8:	2000049c 	.word	0x2000049c
 80020ac:	20000004 	.word	0x20000004
 80020b0:	20000474 	.word	0x20000474
 80020b4:	2000047c 	.word	0x2000047c
 80020b8:	2000047d 	.word	0x2000047d
 80020bc:	2000049d 	.word	0x2000049d
 80020c0:	20000466 	.word	0x20000466
 80020c4:	20000464 	.word	0x20000464
 80020c8:	20000465 	.word	0x20000465
 80020cc:	200004a3 	.word	0x200004a3
 80020d0:	20000498 	.word	0x20000498
 80020d4:	20000496 	.word	0x20000496
 80020d8:	20000479 	.word	0x20000479
 80020dc:	20000499 	.word	0x20000499

080020e0 <chargeState>:

void chargeState(void) {
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
	if (state_entry) {
 80020e4:	4b2e      	ldr	r3, [pc, #184]	; (80021a0 <chargeState+0xc0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <chargeState+0x2c>
		state_entry = false;
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <chargeState+0xc0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <chargeState+0xc4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <chargeState+0xc8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <chargeState+0xcc>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <chargeState+0x2c>
			_errorSetIcon = false;
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <chargeState+0xd0>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <chargeState+0xd4>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <chargeState+0xd8>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <chargeState+0xdc>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <chargeState+0xe0>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b04      	cmp	r3, #4
 8002124:	d009      	beq.n	800213a <chargeState+0x5a>
		currentStateSM = startingup_state;
 8002126:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <chargeState+0xe4>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <chargeState+0xe8>)
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <chargeState+0xc0>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
		return;
 8002138:	e02e      	b.n	8002198 <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <chargeState+0xcc>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d113      	bne.n	800216a <chargeState+0x8a>
		currentStateSM = Error_state;
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <chargeState+0xe4>)
 8002144:	2203      	movs	r2, #3
 8002146:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <chargeState+0xe8>)
 800214a:	2202      	movs	r2, #2
 800214c:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <chargeState+0xc0>)
 8002150:	2201      	movs	r2, #1
 8002152:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <chargeState+0xec>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <chargeState+0xcc>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d019      	beq.n	8002196 <chargeState+0xb6>
			_errorSetIcon = false;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <chargeState+0xd0>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
		}
		return;
 8002168:	e015      	b.n	8002196 <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <chargeState+0xf0>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d106      	bne.n	8002180 <chargeState+0xa0>
		_chargeComplete = true;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <chargeState+0xf4>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <chargeState+0xf8>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
		return;
 800217e:	e00b      	b.n	8002198 <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002180:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <chargeState+0xf8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <chargeState+0xf8>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	e000      	b.n	8002198 <chargeState+0xb8>
		return;
 8002196:	bf00      	nop
	}

}
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000012 	.word	0x20000012
 80021a4:	200004a6 	.word	0x200004a6
 80021a8:	20000493 	.word	0x20000493
 80021ac:	20000000 	.word	0x20000000
 80021b0:	2000049c 	.word	0x2000049c
 80021b4:	2000049e 	.word	0x2000049e
 80021b8:	20000495 	.word	0x20000495
 80021bc:	20000497 	.word	0x20000497
 80021c0:	20000464 	.word	0x20000464
 80021c4:	2000047c 	.word	0x2000047c
 80021c8:	2000047d 	.word	0x2000047d
 80021cc:	2000049d 	.word	0x2000049d
 80021d0:	20000490 	.word	0x20000490
 80021d4:	200004a0 	.word	0x200004a0
 80021d8:	2000049f 	.word	0x2000049f

080021dc <errorState>:

void errorState(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

	if (state_entry) {
 80021e0:	4b63      	ldr	r3, [pc, #396]	; (8002370 <errorState+0x194>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01b      	beq.n	8002220 <errorState+0x44>
		state_entry = false;
 80021e8:	4b61      	ldr	r3, [pc, #388]	; (8002370 <errorState+0x194>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 80021ee:	4b61      	ldr	r3, [pc, #388]	; (8002374 <errorState+0x198>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
		error_check = true;
 80021f4:	4b60      	ldr	r3, [pc, #384]	; (8002378 <errorState+0x19c>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 80021fa:	4b60      	ldr	r3, [pc, #384]	; (800237c <errorState+0x1a0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		rtn = true;
 8002200:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <errorState+0x1a4>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <errorState+0x1a8>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 800220c:	4b5e      	ldr	r3, [pc, #376]	; (8002388 <errorState+0x1ac>)
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <errorState+0x1b0>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <errorState+0x44>
			_errorSetIcon = false;
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <errorState+0x1b4>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 8002220:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <errorState+0x1b8>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]

	setError();
 8002226:	f7fe fca3 	bl	8000b70 <setError>

	_errorSetPopup = true; //Transmit pop-up
 800222a:	4b5b      	ldr	r3, [pc, #364]	; (8002398 <errorState+0x1bc>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 8002230:	4b57      	ldr	r3, [pc, #348]	; (8002390 <errorState+0x1b4>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 8002236:	4b59      	ldr	r3, [pc, #356]	; (800239c <errorState+0x1c0>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 800223c:	4b58      	ldr	r3, [pc, #352]	; (80023a0 <errorState+0x1c4>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <errorState+0x74>
		_errorSetPopup = false;
 8002244:	4b54      	ldr	r3, [pc, #336]	; (8002398 <errorState+0x1bc>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 800224a:	4b54      	ldr	r3, [pc, #336]	; (800239c <errorState+0x1c0>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 8002250:	f001 ff2a 	bl	80040a8 <evcuMode>

	if (previousStateSM == driving_state) {
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <errorState+0x1c8>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d123      	bne.n	80022a6 <errorState+0xca>
		modeSelection(currentMode);
 800225e:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <errorState+0x1cc>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fe6f 	bl	8002f48 <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <errorState+0x1d0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d019      	beq.n	80022a6 <errorState+0xca>
			err_previous = err_fullerror;
 8002272:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <errorState+0x1d4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <errorState+0x1d8>)
 8002278:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 800227a:	4b4f      	ldr	r3, [pc, #316]	; (80023b8 <errorState+0x1dc>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002280:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <errorState+0x1c8>)
 8002282:	2203      	movs	r2, #3
 8002284:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <errorState+0x194>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
			okay = false;
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <errorState+0x1d0>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 8002292:	4b41      	ldr	r3, [pc, #260]	; (8002398 <errorState+0x1bc>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002298:	4b40      	ldr	r3, [pc, #256]	; (800239c <errorState+0x1c0>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 800229e:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <errorState+0x1c4>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
			return;
 80022a4:	e063      	b.n	800236e <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <errorState+0x1c8>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d10d      	bne.n	80022cc <errorState+0xf0>
 80022b0:	4b31      	ldr	r3, [pc, #196]	; (8002378 <errorState+0x19c>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <errorState+0xf0>
		charge_error = true;
 80022b8:	4b40      	ldr	r3, [pc, #256]	; (80023bc <errorState+0x1e0>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <errorState+0x194>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 80022c4:	200f      	movs	r0, #15
 80022c6:	f000 fc45 	bl	8002b54 <charging_UI>
		return;
 80022ca:	e050      	b.n	800236e <errorState+0x192>
	}

	if (accessory == 1) {
 80022cc:	4b3c      	ldr	r3, [pc, #240]	; (80023c0 <errorState+0x1e4>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d110      	bne.n	80022f6 <errorState+0x11a>
		err_previous = err_fullerror;
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <errorState+0x1d4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <errorState+0x1d8>)
 80022da:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <errorState+0x1dc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 80022e2:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <errorState+0x1c8>)
 80022e4:	2203      	movs	r2, #3
 80022e6:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <errorState+0x194>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <errorState+0x1bc>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 80022f4:	e03b      	b.n	800236e <errorState+0x192>
	}

	if (okay) {
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <errorState+0x1d0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00e      	beq.n	800231c <errorState+0x140>
		okay = false;
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <errorState+0x1d0>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <errorState+0x1a0>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <errorState+0x1bc>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <errorState+0x1c0>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <errorState+0x1c4>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <errorState+0x1a4>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d024      	beq.n	800236e <errorState+0x192>
		if (err_State_Navigation) {
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <errorState+0x1a0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 800232c:	f7ff f906 	bl	800153c <navigation>
			_errorSetPopup = false;
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <errorState+0x1bc>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <errorState+0x1c0>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 800233c:	e016      	b.n	800236c <errorState+0x190>
			if (mode) {
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <errorState+0x1e8>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00f      	beq.n	8002366 <errorState+0x18a>
				mode = false;
 8002346:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <errorState+0x1e8>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <errorState+0x1bc>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 8002352:	4b12      	ldr	r3, [pc, #72]	; (800239c <errorState+0x1c0>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <errorState+0x1cc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fdf2 	bl	8002f48 <modeSelection>
		return;
 8002364:	e002      	b.n	800236c <errorState+0x190>
				_errorSetCode = true;
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <errorState+0x1c0>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
		return;
 800236c:	bf00      	nop
	}
}
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000012 	.word	0x20000012
 8002374:	2000047a 	.word	0x2000047a
 8002378:	2000048c 	.word	0x2000048c
 800237c:	20000478 	.word	0x20000478
 8002380:	20000479 	.word	0x20000479
 8002384:	2000049f 	.word	0x2000049f
 8002388:	200004a6 	.word	0x200004a6
 800238c:	20000000 	.word	0x20000000
 8002390:	2000049c 	.word	0x2000049c
 8002394:	20000495 	.word	0x20000495
 8002398:	2000049a 	.word	0x2000049a
 800239c:	2000049b 	.word	0x2000049b
 80023a0:	2000049d 	.word	0x2000049d
 80023a4:	2000047d 	.word	0x2000047d
 80023a8:	2000047f 	.word	0x2000047f
 80023ac:	2000040a 	.word	0x2000040a
 80023b0:	20000004 	.word	0x20000004
 80023b4:	20000474 	.word	0x20000474
 80023b8:	2000047c 	.word	0x2000047c
 80023bc:	2000048f 	.word	0x2000048f
 80023c0:	20000466 	.word	0x20000466
 80023c4:	2000040d 	.word	0x2000040d

080023c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_MspInit+0x5c>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <HAL_MspInit+0x5c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6193      	str	r3, [r2, #24]
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_MspInit+0x5c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <HAL_MspInit+0x5c>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HAL_MspInit+0x5c>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_MspInit+0x5c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_MspInit+0x60>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_MspInit+0x60>)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000
 8002428:	40010000 	.word	0x40010000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <NMI_Handler+0x4>

08002432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <HardFault_Handler+0x4>

08002438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <MemManage_Handler+0x4>

0800243e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <UsageFault_Handler+0x4>

0800244a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002472:	f001 ff2d 	bl	80042d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel2_IRQHandler+0x10>)
 8002482:	f003 f8d5 	bl	8005630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200005e0 	.word	0x200005e0

08002490 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <CAN1_RX0_IRQHandler+0x10>)
 8002496:	f002 fb8b 	bl	8004bb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200003d4 	.word	0x200003d4

080024a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <CAN1_RX1_IRQHandler+0x10>)
 80024aa:	f002 fb81 	bl	8004bb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003d4 	.word	0x200003d4

080024b8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <CAN1_SCE_IRQHandler+0x10>)
 80024be:	f002 fb77 	bl	8004bb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003d4 	.word	0x200003d4

080024cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 80024d0:	2040      	movs	r0, #64	; 0x40
 80024d2:	f003 fce3 	bl	8005e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 80024d6:	2080      	movs	r0, #128	; 0x80
 80024d8:	f003 fce0 	bl	8005e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}

080024e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <TIM2_IRQHandler+0x10>)
 80024e6:	f004 fafd 	bl	8006ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000053c 	.word	0x2000053c

080024f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <USART3_IRQHandler+0x10>)
 80024fa:	f004 ffa9 	bl	8007450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000059c 	.word	0x2000059c

08002508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0308 	add.w	r3, r7, #8
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	463b      	mov	r3, r7
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002532:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002536:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <MX_TIM2_Init+0x94>)
 800253a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800253e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002548:	2264      	movs	r2, #100	; 0x64
 800254a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_TIM2_Init+0x94>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002558:	4813      	ldr	r0, [pc, #76]	; (80025a8 <MX_TIM2_Init+0x94>)
 800255a:	f004 fa19 	bl	8006990 <HAL_TIM_Base_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002564:	f7fe ffe4 	bl	8001530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	4619      	mov	r1, r3
 8002574:	480c      	ldr	r0, [pc, #48]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002576:	f004 fbbd 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002580:	f7fe ffd6 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800258c:	463b      	mov	r3, r7
 800258e:	4619      	mov	r1, r3
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_TIM2_Init+0x94>)
 8002592:	f004 fd99 	bl	80070c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800259c:	f7fe ffc8 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000053c 	.word	0x2000053c

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d113      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	61d3      	str	r3, [r2, #28]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	201c      	movs	r0, #28
 80025dc:	f002 fdd9 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e0:	201c      	movs	r0, #28
 80025e2:	f002 fdf2 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f241 7270 	movw	r2, #6000	; 0x1770
 800260e:	4293      	cmp	r3, r2
 8002610:	d04c      	beq.n	80026ac <tick_count+0xb8>
 8002612:	f241 7270 	movw	r2, #6000	; 0x1770
 8002616:	4293      	cmp	r3, r2
 8002618:	d84c      	bhi.n	80026b4 <tick_count+0xc0>
 800261a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800261e:	d041      	beq.n	80026a4 <tick_count+0xb0>
 8002620:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002624:	d846      	bhi.n	80026b4 <tick_count+0xc0>
 8002626:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800262a:	d037      	beq.n	800269c <tick_count+0xa8>
 800262c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002630:	d840      	bhi.n	80026b4 <tick_count+0xc0>
 8002632:	2bc8      	cmp	r3, #200	; 0xc8
 8002634:	d02e      	beq.n	8002694 <tick_count+0xa0>
 8002636:	2bc8      	cmp	r3, #200	; 0xc8
 8002638:	d83c      	bhi.n	80026b4 <tick_count+0xc0>
 800263a:	2ba0      	cmp	r3, #160	; 0xa0
 800263c:	d026      	beq.n	800268c <tick_count+0x98>
 800263e:	2ba0      	cmp	r3, #160	; 0xa0
 8002640:	d838      	bhi.n	80026b4 <tick_count+0xc0>
 8002642:	2b78      	cmp	r3, #120	; 0x78
 8002644:	d01e      	beq.n	8002684 <tick_count+0x90>
 8002646:	2b78      	cmp	r3, #120	; 0x78
 8002648:	d834      	bhi.n	80026b4 <tick_count+0xc0>
 800264a:	2b50      	cmp	r3, #80	; 0x50
 800264c:	d016      	beq.n	800267c <tick_count+0x88>
 800264e:	2b50      	cmp	r3, #80	; 0x50
 8002650:	d830      	bhi.n	80026b4 <tick_count+0xc0>
 8002652:	2b28      	cmp	r3, #40	; 0x28
 8002654:	d00e      	beq.n	8002674 <tick_count+0x80>
 8002656:	2b28      	cmp	r3, #40	; 0x28
 8002658:	d82c      	bhi.n	80026b4 <tick_count+0xc0>
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d002      	beq.n	8002664 <tick_count+0x70>
 800265e:	2b14      	cmp	r3, #20
 8002660:	d004      	beq.n	800266c <tick_count+0x78>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 8002662:	e027      	b.n	80026b4 <tick_count+0xc0>
			timer_ptr->timeout_0_5s = true;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	715a      	strb	r2, [r3, #5]
			break;
 800266a:	e024      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_1s = true;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	719a      	strb	r2, [r3, #6]
			break;
 8002672:	e020      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_2s = true;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	71da      	strb	r2, [r3, #7]
			break;
 800267a:	e01c      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_4s = true;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	721a      	strb	r2, [r3, #8]
			break;
 8002682:	e018      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_6s = true;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	725a      	strb	r2, [r3, #9]
			break;
 800268a:	e014      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_8s = true;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	729a      	strb	r2, [r3, #10]
			break;
 8002692:	e010      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_10s = true;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	72da      	strb	r2, [r3, #11]
			break;
 800269a:	e00c      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_15s = true;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	731a      	strb	r2, [r3, #12]
			break;
 80026a2:	e008      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_30s = true;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	735a      	strb	r2, [r3, #13]
			break;
 80026aa:	e004      	b.n	80026b6 <tick_count+0xc2>
			timer_ptr->timeout_5m = true;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	739a      	strb	r2, [r3, #14]
			break;
 80026b2:	e000      	b.n	80026b6 <tick_count+0xc2>
			break;
 80026b4:	bf00      	nop
	}
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	_transmit_Function++;
 80026c4:	4b51      	ldr	r3, [pc, #324]	; (800280c <transmit+0x14c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	3301      	adds	r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <transmit+0x14c>)
 80026ce:	701a      	strb	r2, [r3, #0]
	if (_transmit_Function == 1) {
 80026d0:	4b4e      	ldr	r3, [pc, #312]	; (800280c <transmit+0x14c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <transmit+0x2a>
		if (_realTimeData) {
 80026d8:	4b4d      	ldr	r3, [pc, #308]	; (8002810 <transmit+0x150>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <transmit+0x2a>
			realTimeData();
 80026e0:	f000 fdf6 	bl	80032d0 <realTimeData>
			_realTimeData = false;
 80026e4:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <transmit+0x150>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 2) {
 80026ea:	4b48      	ldr	r3, [pc, #288]	; (800280c <transmit+0x14c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d108      	bne.n	8002704 <transmit+0x44>
		if (_oneTimeData) {
 80026f2:	4b48      	ldr	r3, [pc, #288]	; (8002814 <transmit+0x154>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <transmit+0x44>
			oneTimeData();
 80026fa:	f001 fa0b 	bl	8003b14 <oneTimeData>
			_oneTimeData = false;
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <transmit+0x154>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 3) {
 8002704:	4b41      	ldr	r3, [pc, #260]	; (800280c <transmit+0x14c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d109      	bne.n	8002720 <transmit+0x60>
		if (_startingUp) {
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <transmit+0x158>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <transmit+0x60>
			_startingUp = false;
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <transmit+0x158>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
			startingUp();
 800271a:	f000 fd01 	bl	8003120 <startingUp>
			return;
 800271e:	e073      	b.n	8002808 <transmit+0x148>
		}
	}

	if (_transmit_Function == 4) {
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <transmit+0x14c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d109      	bne.n	800273c <transmit+0x7c>
		if (_gearChanged) {
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <transmit+0x15c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <transmit+0x7c>
			_gearChanged = false;
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <transmit+0x15c>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 8002736:	f001 fbab 	bl	8003e90 <gearUpdate>
			return;
 800273a:	e065      	b.n	8002808 <transmit+0x148>
		}
	}

	if (_transmit_Function == 5) {
 800273c:	4b33      	ldr	r3, [pc, #204]	; (800280c <transmit+0x14c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d12f      	bne.n	80027a4 <transmit+0xe4>
		_transmit_Function = 0;
 8002744:	4b31      	ldr	r3, [pc, #196]	; (800280c <transmit+0x14c>)
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
		if (_modeSelection && currentStateSM == driving_state) {
 800274a:	4b35      	ldr	r3, [pc, #212]	; (8002820 <transmit+0x160>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d015      	beq.n	800277e <transmit+0xbe>
 8002752:	4b34      	ldr	r3, [pc, #208]	; (8002824 <transmit+0x164>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d110      	bne.n	800277e <transmit+0xbe>
			if (_modeChanged) {
 800275c:	4b32      	ldr	r3, [pc, #200]	; (8002828 <transmit+0x168>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00c      	beq.n	800277e <transmit+0xbe>
				modeSelection(currentMode);
 8002764:	4b31      	ldr	r3, [pc, #196]	; (800282c <transmit+0x16c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fbec 	bl	8002f48 <modeSelection>
				_modeChanged = false;
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <transmit+0x168>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
				_modeSelection = false;
 8002776:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <transmit+0x160>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
				return;
 800277c:	e044      	b.n	8002808 <transmit+0x148>
			//At the Start
//			modeSelection(mode_evcu);
//			_modeSelection = false;
//			return;
		}
		if (_modeSelection && currentStateSM == startingup_state) {
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <transmit+0x160>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00e      	beq.n	80027a4 <transmit+0xe4>
 8002786:	4b27      	ldr	r3, [pc, #156]	; (8002824 <transmit+0x164>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d109      	bne.n	80027a4 <transmit+0xe4>
			modeSelection(currentMode);
 8002790:	4b26      	ldr	r3, [pc, #152]	; (800282c <transmit+0x16c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fbd6 	bl	8002f48 <modeSelection>
			_modeSelection = false;
 800279c:	4b20      	ldr	r3, [pc, #128]	; (8002820 <transmit+0x160>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
			return;
 80027a2:	e031      	b.n	8002808 <transmit+0x148>
//			drivePageSetter(currentPage);
//			return;
//		}
//	}

	if (_errorSetIcon) {
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <transmit+0x170>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <transmit+0xf0>
		errorIcon();
 80027ac:	f000 fab6 	bl	8002d1c <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 80027b0:	4b20      	ldr	r3, [pc, #128]	; (8002834 <transmit+0x174>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <transmit+0x10e>
 80027b8:	4b1f      	ldr	r3, [pc, #124]	; (8002838 <transmit+0x178>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <transmit+0x10e>
		errorCode();
 80027c6:	f000 fb4d 	bl	8002e64 <errorCode>
		errorPopup();
 80027ca:	f000 fb2b 	bl	8002e24 <errorPopup>
	}

	if (_charingState) {
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <transmit+0x17c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d018      	beq.n	8002808 <transmit+0x148>
		_charingState = false;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <transmit+0x17c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
		if (_chargingUI) {
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <transmit+0x180>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <transmit+0x132>
			charging_UI(charging_ui);
 80027e4:	200d      	movs	r0, #13
 80027e6:	f000 f9b5 	bl	8002b54 <charging_UI>
			_chargingUI = false;
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <transmit+0x180>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 2;
			return;
 80027f0:	e00a      	b.n	8002808 <transmit+0x148>
		}
		if (_chargeComplete) {
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <transmit+0x184>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <transmit+0x148>
			charging_UI(chargingcomp_ui);
 80027fa:	200e      	movs	r0, #14
 80027fc:	f000 f9aa 	bl	8002b54 <charging_UI>
			_chargeComplete = false;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <transmit+0x184>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 3;
			return;
 8002806:	bf00      	nop
		}
	}
}
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000596 	.word	0x20000596
 8002810:	20000495 	.word	0x20000495
 8002814:	20000497 	.word	0x20000497
 8002818:	20000493 	.word	0x20000493
 800281c:	200004a3 	.word	0x200004a3
 8002820:	20000498 	.word	0x20000498
 8002824:	2000047c 	.word	0x2000047c
 8002828:	200004a1 	.word	0x200004a1
 800282c:	2000047f 	.word	0x2000047f
 8002830:	2000049c 	.word	0x2000049c
 8002834:	2000049a 	.word	0x2000049a
 8002838:	2000049d 	.word	0x2000049d
 800283c:	2000049e 	.word	0x2000049e
 8002840:	2000049f 	.word	0x2000049f
 8002844:	200004a0 	.word	0x200004a0

08002848 <drivePageSetter>:

uint8_t drivePageTransmit = 0;

void drivePageSetter(uitype_t page) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 8002852:	4b90      	ldr	r3, [pc, #576]	; (8002a94 <drivePageSetter+0x24c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b8e      	ldr	r3, [pc, #568]	; (8002a94 <drivePageSetter+0x24c>)
 800285c:	701a      	strb	r2, [r3, #0]
	switch (page) {
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b07      	cmp	r3, #7
 8002862:	f200 8109 	bhi.w	8002a78 <drivePageSetter+0x230>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <drivePageSetter+0x24>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	0800288d 	.word	0x0800288d
 8002870:	08002a01 	.word	0x08002a01
 8002874:	08002a1f 	.word	0x08002a1f
 8002878:	08002a3d 	.word	0x08002a3d
 800287c:	08002a79 	.word	0x08002a79
 8002880:	08002a79 	.word	0x08002a79
 8002884:	08002a79 	.word	0x08002a79
 8002888:	08002a5b 	.word	0x08002a5b
	case front:
		//Checking for Errors
		if (error_check) {
 800288c:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <drivePageSetter+0x250>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d07c      	beq.n	800298e <drivePageSetter+0x146>
			if (accessory == 1) {
 8002894:	4b81      	ldr	r3, [pc, #516]	; (8002a9c <drivePageSetter+0x254>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d123      	bne.n	80028e4 <drivePageSetter+0x9c>
				if (drivePageTransmit == 1) {
 800289c:	4b7d      	ldr	r3, [pc, #500]	; (8002a94 <drivePageSetter+0x24c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <drivePageSetter+0x6a>
					ReadytoDrive_OFF_Icon;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	2208      	movs	r2, #8
 80028aa:	497d      	ldr	r1, [pc, #500]	; (8002aa0 <drivePageSetter+0x258>)
 80028ac:	487d      	ldr	r0, [pc, #500]	; (8002aa4 <drivePageSetter+0x25c>)
 80028ae:	f004 fcd0 	bl	8007252 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 2) {
 80028b2:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <drivePageSetter+0x24c>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d106      	bne.n	80028c8 <drivePageSetter+0x80>
					ModeClear_Icon;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	2208      	movs	r2, #8
 80028c0:	4979      	ldr	r1, [pc, #484]	; (8002aa8 <drivePageSetter+0x260>)
 80028c2:	4878      	ldr	r0, [pc, #480]	; (8002aa4 <drivePageSetter+0x25c>)
 80028c4:	f004 fcc5 	bl	8007252 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 3) {
 80028c8:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <drivePageSetter+0x24c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d109      	bne.n	80028e4 <drivePageSetter+0x9c>
					PowerLimitON_Icon;
 80028d0:	f04f 33ff 	mov.w	r3, #4294967295
 80028d4:	2208      	movs	r2, #8
 80028d6:	4975      	ldr	r1, [pc, #468]	; (8002aac <drivePageSetter+0x264>)
 80028d8:	4872      	ldr	r0, [pc, #456]	; (8002aa4 <drivePageSetter+0x25c>)
 80028da:	f004 fcba 	bl	8007252 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 80028de:	4b6d      	ldr	r3, [pc, #436]	; (8002a94 <drivePageSetter+0x24c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 80028e4:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <drivePageSetter+0x268>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <drivePageSetter+0xc0>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 80028ec:	4b69      	ldr	r3, [pc, #420]	; (8002a94 <drivePageSetter+0x24c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d109      	bne.n	8002908 <drivePageSetter+0xc0>
					SysError_Shutdown_Page;
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	220a      	movs	r2, #10
 80028fa:	496e      	ldr	r1, [pc, #440]	; (8002ab4 <drivePageSetter+0x26c>)
 80028fc:	4869      	ldr	r0, [pc, #420]	; (8002aa4 <drivePageSetter+0x25c>)
 80028fe:	f004 fca8 	bl	8007252 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8002902:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <drivePageSetter+0x24c>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 8002908:	4b6b      	ldr	r3, [pc, #428]	; (8002ab8 <drivePageSetter+0x270>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 80b4 	bne.w	8002a7c <drivePageSetter+0x234>
				if (shutdown == 1) {
 8002914:	4b69      	ldr	r3, [pc, #420]	; (8002abc <drivePageSetter+0x274>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10d      	bne.n	8002938 <drivePageSetter+0xf0>
					if (drivePageTransmit == 1) {
 800291c:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <drivePageSetter+0x24c>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d109      	bne.n	8002938 <drivePageSetter+0xf0>
						SysError_StopDrive_Page;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	220a      	movs	r2, #10
 800292a:	4965      	ldr	r1, [pc, #404]	; (8002ac0 <drivePageSetter+0x278>)
 800292c:	485d      	ldr	r0, [pc, #372]	; (8002aa4 <drivePageSetter+0x25c>)
 800292e:	f004 fc90 	bl	8007252 <HAL_UART_Transmit>
						drivePageTransmit = 0;
 8002932:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <drivePageSetter+0x24c>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 8002938:	4b60      	ldr	r3, [pc, #384]	; (8002abc <drivePageSetter+0x274>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f040 809d 	bne.w	8002a7c <drivePageSetter+0x234>
					if (mode) {
 8002942:	4b60      	ldr	r3, [pc, #384]	; (8002ac4 <drivePageSetter+0x27c>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d011      	beq.n	800296e <drivePageSetter+0x126>
						if (drivePageTransmit == 1) {
 800294a:	4b52      	ldr	r3, [pc, #328]	; (8002a94 <drivePageSetter+0x24c>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d109      	bne.n	8002966 <drivePageSetter+0x11e>
							ModeChangeOFF_Page;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	220a      	movs	r2, #10
 8002958:	495b      	ldr	r1, [pc, #364]	; (8002ac8 <drivePageSetter+0x280>)
 800295a:	4852      	ldr	r0, [pc, #328]	; (8002aa4 <drivePageSetter+0x25c>)
 800295c:	f004 fc79 	bl	8007252 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8002960:	4b4c      	ldr	r3, [pc, #304]	; (8002a94 <drivePageSetter+0x24c>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 8002966:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <drivePageSetter+0x27c>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
					drivePageTransmit = 0;
				}
			}
		}
		break;
 800296c:	e086      	b.n	8002a7c <drivePageSetter+0x234>
						if (drivePageTransmit == 1) {
 800296e:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <drivePageSetter+0x24c>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b01      	cmp	r3, #1
 8002974:	f040 8082 	bne.w	8002a7c <drivePageSetter+0x234>
							SysError_StopDrive_Page;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	220a      	movs	r2, #10
 800297e:	4950      	ldr	r1, [pc, #320]	; (8002ac0 <drivePageSetter+0x278>)
 8002980:	4848      	ldr	r0, [pc, #288]	; (8002aa4 <drivePageSetter+0x25c>)
 8002982:	f004 fc66 	bl	8007252 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <drivePageSetter+0x24c>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
		break;
 800298c:	e076      	b.n	8002a7c <drivePageSetter+0x234>
			if (accessory == 1) {
 800298e:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <drivePageSetter+0x254>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d123      	bne.n	80029de <drivePageSetter+0x196>
				if (drivePageTransmit == 1) {
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <drivePageSetter+0x24c>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <drivePageSetter+0x164>
					ReadytoDrive_OFF_Icon;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	2208      	movs	r2, #8
 80029a4:	493e      	ldr	r1, [pc, #248]	; (8002aa0 <drivePageSetter+0x258>)
 80029a6:	483f      	ldr	r0, [pc, #252]	; (8002aa4 <drivePageSetter+0x25c>)
 80029a8:	f004 fc53 	bl	8007252 <HAL_UART_Transmit>
				if (drivePageTransmit == 2) {
 80029ac:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <drivePageSetter+0x24c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d106      	bne.n	80029c2 <drivePageSetter+0x17a>
					ModeClear_Icon;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	2208      	movs	r2, #8
 80029ba:	493b      	ldr	r1, [pc, #236]	; (8002aa8 <drivePageSetter+0x260>)
 80029bc:	4839      	ldr	r0, [pc, #228]	; (8002aa4 <drivePageSetter+0x25c>)
 80029be:	f004 fc48 	bl	8007252 <HAL_UART_Transmit>
				if (drivePageTransmit == 3) {
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <drivePageSetter+0x24c>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d109      	bne.n	80029de <drivePageSetter+0x196>
					Disengage_KillSwitch_Page;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	220a      	movs	r2, #10
 80029d0:	493e      	ldr	r1, [pc, #248]	; (8002acc <drivePageSetter+0x284>)
 80029d2:	4834      	ldr	r0, [pc, #208]	; (8002aa4 <drivePageSetter+0x25c>)
 80029d4:	f004 fc3d 	bl	8007252 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 80029d8:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <drivePageSetter+0x24c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
			if (readytodrive == 1) {
 80029de:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <drivePageSetter+0x288>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d14a      	bne.n	8002a7c <drivePageSetter+0x234>
				if (drivePageTransmit == 1) {
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <drivePageSetter+0x24c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d146      	bne.n	8002a7c <drivePageSetter+0x234>
					HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
 80029ee:	220a      	movs	r2, #10
 80029f0:	4938      	ldr	r1, [pc, #224]	; (8002ad4 <drivePageSetter+0x28c>)
 80029f2:	482c      	ldr	r0, [pc, #176]	; (8002aa4 <drivePageSetter+0x25c>)
 80029f4:	f004 fcc0 	bl	8007378 <HAL_UART_Transmit_DMA>
					drivePageTransmit = 0;
 80029f8:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <drivePageSetter+0x24c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		break;
 80029fe:	e03d      	b.n	8002a7c <drivePageSetter+0x234>
	case trip:
		if (_menupage == 1) {
 8002a00:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <drivePageSetter+0x290>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d03b      	beq.n	8002a80 <drivePageSetter+0x238>
			return;
		}
		_menupage = 1;
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <drivePageSetter+0x290>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	220a      	movs	r2, #10
 8002a14:	4931      	ldr	r1, [pc, #196]	; (8002adc <drivePageSetter+0x294>)
 8002a16:	4823      	ldr	r0, [pc, #140]	; (8002aa4 <drivePageSetter+0x25c>)
 8002a18:	f004 fc1b 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002a1c:	e037      	b.n	8002a8e <drivePageSetter+0x246>
	case after_charge:
		if (_menupage == 2) {
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <drivePageSetter+0x290>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d02e      	beq.n	8002a84 <drivePageSetter+0x23c>
			return;
		}
		_menupage = 2;
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <drivePageSetter+0x290>)
 8002a28:	2202      	movs	r2, #2
 8002a2a:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	220a      	movs	r2, #10
 8002a32:	492b      	ldr	r1, [pc, #172]	; (8002ae0 <drivePageSetter+0x298>)
 8002a34:	481b      	ldr	r0, [pc, #108]	; (8002aa4 <drivePageSetter+0x25c>)
 8002a36:	f004 fc0c 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002a3a:	e028      	b.n	8002a8e <drivePageSetter+0x246>
	case info:
		if (_menupage == 3) {
 8002a3c:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <drivePageSetter+0x290>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d021      	beq.n	8002a88 <drivePageSetter+0x240>
			return;
		}
		_menupage = 3;
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <drivePageSetter+0x290>)
 8002a46:	2203      	movs	r2, #3
 8002a48:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	220a      	movs	r2, #10
 8002a50:	4924      	ldr	r1, [pc, #144]	; (8002ae4 <drivePageSetter+0x29c>)
 8002a52:	4814      	ldr	r0, [pc, #80]	; (8002aa4 <drivePageSetter+0x25c>)
 8002a54:	f004 fbfd 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002a58:	e019      	b.n	8002a8e <drivePageSetter+0x246>
	case settings:
		if (_menupage == 4) {
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <drivePageSetter+0x290>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d014      	beq.n	8002a8c <drivePageSetter+0x244>
			return;
		}
		_menupage = 4;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <drivePageSetter+0x290>)
 8002a64:	2204      	movs	r2, #4
 8002a66:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	491e      	ldr	r1, [pc, #120]	; (8002ae8 <drivePageSetter+0x2a0>)
 8002a70:	480c      	ldr	r0, [pc, #48]	; (8002aa4 <drivePageSetter+0x25c>)
 8002a72:	f004 fbee 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002a76:	e00a      	b.n	8002a8e <drivePageSetter+0x246>
	default:
		break;
 8002a78:	bf00      	nop
 8002a7a:	e008      	b.n	8002a8e <drivePageSetter+0x246>
		break;
 8002a7c:	bf00      	nop
 8002a7e:	e006      	b.n	8002a8e <drivePageSetter+0x246>
			return;
 8002a80:	bf00      	nop
 8002a82:	e004      	b.n	8002a8e <drivePageSetter+0x246>
			return;
 8002a84:	bf00      	nop
 8002a86:	e002      	b.n	8002a8e <drivePageSetter+0x246>
			return;
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <drivePageSetter+0x246>
			return;
 8002a8c:	bf00      	nop

	}

}
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000597 	.word	0x20000597
 8002a98:	2000048c 	.word	0x2000048c
 8002a9c:	20000466 	.word	0x20000466
 8002aa0:	200001a8 	.word	0x200001a8
 8002aa4:	2000059c 	.word	0x2000059c
 8002aa8:	200001e8 	.word	0x200001e8
 8002aac:	20000190 	.word	0x20000190
 8002ab0:	20000478 	.word	0x20000478
 8002ab4:	200000e4 	.word	0x200000e4
 8002ab8:	2000047c 	.word	0x2000047c
 8002abc:	2000046e 	.word	0x2000046e
 8002ac0:	200000f0 	.word	0x200000f0
 8002ac4:	2000040d 	.word	0x2000040d
 8002ac8:	20000274 	.word	0x20000274
 8002acc:	20000024 	.word	0x20000024
 8002ad0:	20000467 	.word	0x20000467
 8002ad4:	20000144 	.word	0x20000144
 8002ad8:	2000047e 	.word	0x2000047e
 8002adc:	20000060 	.word	0x20000060
 8002ae0:	2000006c 	.word	0x2000006c
 8002ae4:	20000078 	.word	0x20000078
 8002ae8:	200000a8 	.word	0x200000a8

08002aec <vehicleInfo_UI>:

void vehicleInfo_UI(uitype_t InfoUI) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d016      	beq.n	8002b2a <vehicleInfo_UI+0x3e>
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	dc1c      	bgt.n	8002b3a <vehicleInfo_UI+0x4e>
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d002      	beq.n	8002b0a <vehicleInfo_UI+0x1e>
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d008      	beq.n	8002b1a <vehicleInfo_UI+0x2e>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 8002b08:	e017      	b.n	8002b3a <vehicleInfo_UI+0x4e>
		Battery_Info_Page;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0e:	220a      	movs	r2, #10
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <vehicleInfo_UI+0x58>)
 8002b12:	480d      	ldr	r0, [pc, #52]	; (8002b48 <vehicleInfo_UI+0x5c>)
 8002b14:	f004 fb9d 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002b18:	e010      	b.n	8002b3c <vehicleInfo_UI+0x50>
		Motor_Info_Page;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	220a      	movs	r2, #10
 8002b20:	490a      	ldr	r1, [pc, #40]	; (8002b4c <vehicleInfo_UI+0x60>)
 8002b22:	4809      	ldr	r0, [pc, #36]	; (8002b48 <vehicleInfo_UI+0x5c>)
 8002b24:	f004 fb95 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002b28:	e008      	b.n	8002b3c <vehicleInfo_UI+0x50>
		Inverter_Info_Page;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	220a      	movs	r2, #10
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <vehicleInfo_UI+0x64>)
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <vehicleInfo_UI+0x5c>)
 8002b34:	f004 fb8d 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002b38:	e000      	b.n	8002b3c <vehicleInfo_UI+0x50>
		break;
 8002b3a:	bf00      	nop
	}
}
 8002b3c:	bf00      	nop
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000084 	.word	0x20000084
 8002b48:	2000059c 	.word	0x2000059c
 8002b4c:	20000090 	.word	0x20000090
 8002b50:	2000009c 	.word	0x2000009c

08002b54 <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	d016      	beq.n	8002b92 <charging_UI+0x3e>
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	dc27      	bgt.n	8002bb8 <charging_UI+0x64>
 8002b68:	2b0d      	cmp	r3, #13
 8002b6a:	d002      	beq.n	8002b72 <charging_UI+0x1e>
 8002b6c:	2b0e      	cmp	r3, #14
 8002b6e:	d008      	beq.n	8002b82 <charging_UI+0x2e>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 8002b70:	e022      	b.n	8002bb8 <charging_UI+0x64>
		Charging_Page;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	220a      	movs	r2, #10
 8002b78:	4913      	ldr	r1, [pc, #76]	; (8002bc8 <charging_UI+0x74>)
 8002b7a:	4814      	ldr	r0, [pc, #80]	; (8002bcc <charging_UI+0x78>)
 8002b7c:	f004 fb69 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002b80:	e01d      	b.n	8002bbe <charging_UI+0x6a>
		ChargeComplete_Page;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	220a      	movs	r2, #10
 8002b88:	4911      	ldr	r1, [pc, #68]	; (8002bd0 <charging_UI+0x7c>)
 8002b8a:	4810      	ldr	r0, [pc, #64]	; (8002bcc <charging_UI+0x78>)
 8002b8c:	f004 fb61 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002b90:	e015      	b.n	8002bbe <charging_UI+0x6a>
		Charge_Error_Page;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	220a      	movs	r2, #10
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <charging_UI+0x80>)
 8002b9a:	480c      	ldr	r0, [pc, #48]	; (8002bcc <charging_UI+0x78>)
 8002b9c:	f004 fb59 	bl	8007252 <HAL_UART_Transmit>
		if (charge_error) {
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <charging_UI+0x84>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <charging_UI+0x68>
			Charge_Connection_Error_Popup_ON;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	2208      	movs	r2, #8
 8002bae:	490b      	ldr	r1, [pc, #44]	; (8002bdc <charging_UI+0x88>)
 8002bb0:	4806      	ldr	r0, [pc, #24]	; (8002bcc <charging_UI+0x78>)
 8002bb2:	f004 fb4e 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002bb6:	e001      	b.n	8002bbc <charging_UI+0x68>
		break;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <charging_UI+0x6a>
		break;
 8002bbc:	bf00      	nop
	}
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000108 	.word	0x20000108
 8002bcc:	2000059c 	.word	0x2000059c
 8002bd0:	20000114 	.word	0x20000114
 8002bd4:	20000120 	.word	0x20000120
 8002bd8:	2000048f 	.word	0x2000048f
 8002bdc:	20000280 	.word	0x20000280

08002be0 <settings_UI>:

void settings_UI(uitype_t SettingsMenu) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
	switch (SettingsMenu) {
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	3b08      	subs	r3, #8
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d82d      	bhi.n	8002c4e <settings_UI+0x6e>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <settings_UI+0x18>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c19 	.word	0x08002c19
 8002c00:	08002c29 	.word	0x08002c29
 8002c04:	08002c39 	.word	0x08002c39
	case vehicleMenu:
		General_Menu_Page;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0c:	220a      	movs	r2, #10
 8002c0e:	4912      	ldr	r1, [pc, #72]	; (8002c58 <settings_UI+0x78>)
 8002c10:	4812      	ldr	r0, [pc, #72]	; (8002c5c <settings_UI+0x7c>)
 8002c12:	f004 fb1e 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002c16:	e01b      	b.n	8002c50 <settings_UI+0x70>
	case systemMenu:
		System_Menu_Page;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	220a      	movs	r2, #10
 8002c1e:	4910      	ldr	r1, [pc, #64]	; (8002c60 <settings_UI+0x80>)
 8002c20:	480e      	ldr	r0, [pc, #56]	; (8002c5c <settings_UI+0x7c>)
 8002c22:	f004 fb16 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002c26:	e013      	b.n	8002c50 <settings_UI+0x70>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2c:	220a      	movs	r2, #10
 8002c2e:	490d      	ldr	r1, [pc, #52]	; (8002c64 <settings_UI+0x84>)
 8002c30:	480a      	ldr	r0, [pc, #40]	; (8002c5c <settings_UI+0x7c>)
 8002c32:	f004 fb0e 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002c36:	e00b      	b.n	8002c50 <settings_UI+0x70>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <settings_UI+0x88>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	220a      	movs	r2, #10
 8002c44:	4909      	ldr	r1, [pc, #36]	; (8002c6c <settings_UI+0x8c>)
 8002c46:	4805      	ldr	r0, [pc, #20]	; (8002c5c <settings_UI+0x7c>)
 8002c48:	f004 fb03 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002c4c:	e000      	b.n	8002c50 <settings_UI+0x70>
	default:
		break;
 8002c4e:	bf00      	nop
	}
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200000b4 	.word	0x200000b4
 8002c5c:	2000059c 	.word	0x2000059c
 8002c60:	200000c0 	.word	0x200000c0
 8002c64:	200000cc 	.word	0x200000cc
 8002c68:	2000048b 	.word	0x2000048b
 8002c6c:	200000d8 	.word	0x200000d8

08002c70 <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	220a      	movs	r2, #10
 8002c80:	491f      	ldr	r1, [pc, #124]	; (8002d00 <selection_UI+0x90>)
 8002c82:	4820      	ldr	r0, [pc, #128]	; (8002d04 <selection_UI+0x94>)
 8002c84:	f004 fae5 	bl	8007252 <HAL_UART_Transmit>
	switch (SettingsMenu) {
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	3b08      	subs	r3, #8
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d82b      	bhi.n	8002ce8 <selection_UI+0x78>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <selection_UI+0x28>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	08002cc9 	.word	0x08002cc9
 8002ca4:	08002cd9 	.word	0x08002cd9
	case vehicleMenu:
		Vehicle_Button;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	2208      	movs	r2, #8
 8002cae:	4916      	ldr	r1, [pc, #88]	; (8002d08 <selection_UI+0x98>)
 8002cb0:	4814      	ldr	r0, [pc, #80]	; (8002d04 <selection_UI+0x94>)
 8002cb2:	f004 face 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002cb6:	e01f      	b.n	8002cf8 <selection_UI+0x88>
	case systemMenu:
		System_Button;
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4913      	ldr	r1, [pc, #76]	; (8002d0c <selection_UI+0x9c>)
 8002cc0:	4810      	ldr	r0, [pc, #64]	; (8002d04 <selection_UI+0x94>)
 8002cc2:	f004 fac6 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002cc6:	e017      	b.n	8002cf8 <selection_UI+0x88>
	case bluetoothMenu:
		Bluetooth_Button;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4910      	ldr	r1, [pc, #64]	; (8002d10 <selection_UI+0xa0>)
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <selection_UI+0x94>)
 8002cd2:	f004 fabe 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002cd6:	e00f      	b.n	8002cf8 <selection_UI+0x88>
	case errorsMenu:
		Error_Button;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	2208      	movs	r2, #8
 8002cde:	490d      	ldr	r1, [pc, #52]	; (8002d14 <selection_UI+0xa4>)
 8002ce0:	4808      	ldr	r0, [pc, #32]	; (8002d04 <selection_UI+0x94>)
 8002ce2:	f004 fab6 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002ce6:	e007      	b.n	8002cf8 <selection_UI+0x88>
	default:
		NO_Button;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cec:	2208      	movs	r2, #8
 8002cee:	490a      	ldr	r1, [pc, #40]	; (8002d18 <selection_UI+0xa8>)
 8002cf0:	4804      	ldr	r0, [pc, #16]	; (8002d04 <selection_UI+0x94>)
 8002cf2:	f004 faae 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002cf6:	bf00      	nop
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200000a8 	.word	0x200000a8
 8002d04:	2000059c 	.word	0x2000059c
 8002d08:	20000218 	.word	0x20000218
 8002d0c:	20000220 	.word	0x20000220
 8002d10:	20000228 	.word	0x20000228
 8002d14:	20000230 	.word	0x20000230
 8002d18:	20000238 	.word	0x20000238

08002d1c <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0

	if (error_on == true) {
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <errorIcon+0xc8>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <errorIcon+0x1c>
		Error_ON_Icon;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	492e      	ldr	r1, [pc, #184]	; (8002de8 <errorIcon+0xcc>)
 8002d30:	482e      	ldr	r0, [pc, #184]	; (8002dec <errorIcon+0xd0>)
 8002d32:	f004 fa8e 	bl	8007252 <HAL_UART_Transmit>
 8002d36:	e006      	b.n	8002d46 <errorIcon+0x2a>
	} else {
		Error_OFF_Icon;
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	492c      	ldr	r1, [pc, #176]	; (8002df0 <errorIcon+0xd4>)
 8002d40:	482a      	ldr	r0, [pc, #168]	; (8002dec <errorIcon+0xd0>)
 8002d42:	f004 fa86 	bl	8007252 <HAL_UART_Transmit>
	}
	if (milderror_on == true) {
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <errorIcon+0xd8>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <errorIcon+0x42>
		Mild_Error_ON_Icon;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	2208      	movs	r2, #8
 8002d54:	4928      	ldr	r1, [pc, #160]	; (8002df8 <errorIcon+0xdc>)
 8002d56:	4825      	ldr	r0, [pc, #148]	; (8002dec <errorIcon+0xd0>)
 8002d58:	f004 fa7b 	bl	8007252 <HAL_UART_Transmit>
 8002d5c:	e006      	b.n	8002d6c <errorIcon+0x50>
	} else {
		Mild_Error_OFF_Icon;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	2208      	movs	r2, #8
 8002d64:	4925      	ldr	r1, [pc, #148]	; (8002dfc <errorIcon+0xe0>)
 8002d66:	4821      	ldr	r0, [pc, #132]	; (8002dec <errorIcon+0xd0>)
 8002d68:	f004 fa73 	bl	8007252 <HAL_UART_Transmit>
	}
	if (service_on == true) {
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <errorIcon+0xe4>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <errorIcon+0x68>
		Service_Error_ON_Icon;
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4922      	ldr	r1, [pc, #136]	; (8002e04 <errorIcon+0xe8>)
 8002d7c:	481b      	ldr	r0, [pc, #108]	; (8002dec <errorIcon+0xd0>)
 8002d7e:	f004 fa68 	bl	8007252 <HAL_UART_Transmit>
 8002d82:	e006      	b.n	8002d92 <errorIcon+0x76>
	} else {
		Service_Error_OFF_Icon;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	2208      	movs	r2, #8
 8002d8a:	491f      	ldr	r1, [pc, #124]	; (8002e08 <errorIcon+0xec>)
 8002d8c:	4817      	ldr	r0, [pc, #92]	; (8002dec <errorIcon+0xd0>)
 8002d8e:	f004 fa60 	bl	8007252 <HAL_UART_Transmit>
	}
	if (bat_temp_high == true) {
 8002d92:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <errorIcon+0xf0>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <errorIcon+0x8e>
		Battery_High_Temp_Popup_ON;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	2208      	movs	r2, #8
 8002da0:	491b      	ldr	r1, [pc, #108]	; (8002e10 <errorIcon+0xf4>)
 8002da2:	4812      	ldr	r0, [pc, #72]	; (8002dec <errorIcon+0xd0>)
 8002da4:	f004 fa55 	bl	8007252 <HAL_UART_Transmit>
 8002da8:	e006      	b.n	8002db8 <errorIcon+0x9c>
	} else {
		Battery_High_Temp_Popup_OFF;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	2208      	movs	r2, #8
 8002db0:	4918      	ldr	r1, [pc, #96]	; (8002e14 <errorIcon+0xf8>)
 8002db2:	480e      	ldr	r0, [pc, #56]	; (8002dec <errorIcon+0xd0>)
 8002db4:	f004 fa4d 	bl	8007252 <HAL_UART_Transmit>
	}
	if (aux_low_on == true) {
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <errorIcon+0xfc>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <errorIcon+0xb4>
		Battery_ON_Icon;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	4915      	ldr	r1, [pc, #84]	; (8002e1c <errorIcon+0x100>)
 8002dc8:	4808      	ldr	r0, [pc, #32]	; (8002dec <errorIcon+0xd0>)
 8002dca:	f004 fa42 	bl	8007252 <HAL_UART_Transmit>
	} else {
		Battery_OFF_Icon;
	}
}
 8002dce:	e006      	b.n	8002dde <errorIcon+0xc2>
		Battery_OFF_Icon;
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <errorIcon+0x104>)
 8002dd8:	4804      	ldr	r0, [pc, #16]	; (8002dec <errorIcon+0xd0>)
 8002dda:	f004 fa3a 	bl	8007252 <HAL_UART_Transmit>
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000486 	.word	0x20000486
 8002de8:	20000160 	.word	0x20000160
 8002dec:	2000059c 	.word	0x2000059c
 8002df0:	20000168 	.word	0x20000168
 8002df4:	20000487 	.word	0x20000487
 8002df8:	20000180 	.word	0x20000180
 8002dfc:	20000188 	.word	0x20000188
 8002e00:	20000488 	.word	0x20000488
 8002e04:	20000170 	.word	0x20000170
 8002e08:	20000178 	.word	0x20000178
 8002e0c:	20000489 	.word	0x20000489
 8002e10:	20000240 	.word	0x20000240
 8002e14:	20000248 	.word	0x20000248
 8002e18:	2000048a 	.word	0x2000048a
 8002e1c:	20000150 	.word	0x20000150
 8002e20:	20000158 	.word	0x20000158

08002e24 <errorPopup>:

void errorPopup(void) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <errorPopup+0x30>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <errorPopup+0x1c>
		SystemError_Critical_Popup;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	220a      	movs	r2, #10
 8002e36:	4908      	ldr	r1, [pc, #32]	; (8002e58 <errorPopup+0x34>)
 8002e38:	4808      	ldr	r0, [pc, #32]	; (8002e5c <errorPopup+0x38>)
 8002e3a:	f004 fa0a 	bl	8007252 <HAL_UART_Transmit>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 8002e3e:	e006      	b.n	8002e4e <errorPopup+0x2a>
		SystemError_Mild_Popup_Page;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
 8002e44:	220a      	movs	r2, #10
 8002e46:	4906      	ldr	r1, [pc, #24]	; (8002e60 <errorPopup+0x3c>)
 8002e48:	4804      	ldr	r0, [pc, #16]	; (8002e5c <errorPopup+0x38>)
 8002e4a:	f004 fa02 	bl	8007252 <HAL_UART_Transmit>
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000471 	.word	0x20000471
 8002e58:	20000138 	.word	0x20000138
 8002e5c:	2000059c 	.word	0x2000059c
 8002e60:	2000012c 	.word	0x2000012c

08002e64 <errorCode>:

void errorCode(void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <errorCode+0xd0>)
 8002e6a:	2211      	movs	r2, #17
 8002e6c:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <errorCode+0xd0>)
 8002e70:	2294      	movs	r2, #148	; 0x94
 8002e72:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8002e74:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <errorCode+0xd0>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <errorCode+0xd4>)
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <errorCode+0xd0>)
 8002e80:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	2208      	movs	r2, #8
 8002e88:	492a      	ldr	r1, [pc, #168]	; (8002f34 <errorCode+0xd0>)
 8002e8a:	482c      	ldr	r0, [pc, #176]	; (8002f3c <errorCode+0xd8>)
 8002e8c:	f004 f9e1 	bl	8007252 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 8002e90:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <errorCode+0xd0>)
 8002e92:	2211      	movs	r2, #17
 8002e94:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <errorCode+0xd0>)
 8002e98:	2297      	movs	r2, #151	; 0x97
 8002e9a:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	4924      	ldr	r1, [pc, #144]	; (8002f34 <errorCode+0xd0>)
 8002ea4:	4825      	ldr	r0, [pc, #148]	; (8002f3c <errorCode+0xd8>)
 8002ea6:	f004 f9d4 	bl	8007252 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <errorCode+0xd0>)
 8002eac:	2211      	movs	r2, #17
 8002eae:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <errorCode+0xd0>)
 8002eb2:	2295      	movs	r2, #149	; 0x95
 8002eb4:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <errorCode+0xd0>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <errorCode+0xdc>)
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <errorCode+0xd0>)
 8002ec2:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec8:	2208      	movs	r2, #8
 8002eca:	491a      	ldr	r1, [pc, #104]	; (8002f34 <errorCode+0xd0>)
 8002ecc:	481b      	ldr	r0, [pc, #108]	; (8002f3c <errorCode+0xd8>)
 8002ece:	f004 f9c0 	bl	8007252 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <errorCode+0xd0>)
 8002ed4:	2211      	movs	r2, #17
 8002ed6:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <errorCode+0xd0>)
 8002eda:	2298      	movs	r2, #152	; 0x98
 8002edc:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	4913      	ldr	r1, [pc, #76]	; (8002f34 <errorCode+0xd0>)
 8002ee6:	4815      	ldr	r0, [pc, #84]	; (8002f3c <errorCode+0xd8>)
 8002ee8:	f004 f9b3 	bl	8007252 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <errorCode+0xd0>)
 8002eee:	2211      	movs	r2, #17
 8002ef0:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 8002ef2:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <errorCode+0xd0>)
 8002ef4:	2296      	movs	r2, #150	; 0x96
 8002ef6:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <errorCode+0xd0>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <errorCode+0xe0>)
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <errorCode+0xd0>)
 8002f04:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 8002f06:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	4909      	ldr	r1, [pc, #36]	; (8002f34 <errorCode+0xd0>)
 8002f0e:	480b      	ldr	r0, [pc, #44]	; (8002f3c <errorCode+0xd8>)
 8002f10:	f004 f99f 	bl	8007252 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 8002f14:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <errorCode+0xd0>)
 8002f16:	2211      	movs	r2, #17
 8002f18:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <errorCode+0xd0>)
 8002f1c:	2299      	movs	r2, #153	; 0x99
 8002f1e:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
 8002f24:	2208      	movs	r2, #8
 8002f26:	4903      	ldr	r1, [pc, #12]	; (8002f34 <errorCode+0xd0>)
 8002f28:	4804      	ldr	r0, [pc, #16]	; (8002f3c <errorCode+0xd8>)
 8002f2a:	f004 f992 	bl	8007252 <HAL_UART_Transmit>
	;

}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000414 	.word	0x20000414
 8002f38:	2000046f 	.word	0x2000046f
 8002f3c:	2000059c 	.word	0x2000059c
 8002f40:	20000470 	.word	0x20000470
 8002f44:	20000471 	.word	0x20000471

08002f48 <modeSelection>:

void modeSelection(uimode_t currentMode) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
	if (!_modeChanged) {
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <modeSelection+0x170>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <modeSelection+0x24>
		drivePageSetter(currentPage);
 8002f60:	4b56      	ldr	r3, [pc, #344]	; (80030bc <modeSelection+0x174>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fc6e 	bl	8002848 <drivePageSetter>
	}
	if (currentMode == modeCleared) {
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d107      	bne.n	8002f82 <modeSelection+0x3a>
		ModeClear_Icon;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	2208      	movs	r2, #8
 8002f78:	4951      	ldr	r1, [pc, #324]	; (80030c0 <modeSelection+0x178>)
 8002f7a:	4852      	ldr	r0, [pc, #328]	; (80030c4 <modeSelection+0x17c>)
 8002f7c:	f004 f969 	bl	8007252 <HAL_UART_Transmit>
		return;
 8002f80:	e097      	b.n	80030b2 <modeSelection+0x16a>
	}
	mode_count++;
 8002f82:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <modeSelection+0x180>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <modeSelection+0x180>)
 8002f8c:	801a      	strh	r2, [r3, #0]
	//Mode set pop-up timer
	if (mode_count > 15) {
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <modeSelection+0x180>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	d905      	bls.n	8002fa2 <modeSelection+0x5a>
		rtn = true;
 8002f96:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <modeSelection+0x184>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <modeSelection+0x180>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
	}
	switch (currentMode) {
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d062      	beq.n	800306e <modeSelection+0x126>
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	dc7d      	bgt.n	80030a8 <modeSelection+0x160>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <modeSelection+0x6e>
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d020      	beq.n	8002ff6 <modeSelection+0xae>
			modeMenu = false;
			SportMode_Icon;
		}
		break;
	default:
		break;
 8002fb4:	e078      	b.n	80030a8 <modeSelection+0x160>
		if (_modeChanged && modeMenu) {
 8002fb6:	4b40      	ldr	r3, [pc, #256]	; (80030b8 <modeSelection+0x170>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d010      	beq.n	8002fe0 <modeSelection+0x98>
 8002fbe:	4b44      	ldr	r3, [pc, #272]	; (80030d0 <modeSelection+0x188>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <modeSelection+0x98>
			NormalMode_Popup;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	220a      	movs	r2, #10
 8002fcc:	4941      	ldr	r1, [pc, #260]	; (80030d4 <modeSelection+0x18c>)
 8002fce:	483d      	ldr	r0, [pc, #244]	; (80030c4 <modeSelection+0x17c>)
 8002fd0:	f004 f93f 	bl	8007252 <HAL_UART_Transmit>
			_modeChanged = false;
 8002fd4:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <modeSelection+0x170>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
			modeMenu = false;
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <modeSelection+0x188>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		modeMenu = false;
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <modeSelection+0x188>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
		NormalMode_Icon;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	2208      	movs	r2, #8
 8002fec:	493a      	ldr	r1, [pc, #232]	; (80030d8 <modeSelection+0x190>)
 8002fee:	4835      	ldr	r0, [pc, #212]	; (80030c4 <modeSelection+0x17c>)
 8002ff0:	f004 f92f 	bl	8007252 <HAL_UART_Transmit>
		break;
 8002ff4:	e05d      	b.n	80030b2 <modeSelection+0x16a>
		if (_modeChanged) {
 8002ff6:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <modeSelection+0x170>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <modeSelection+0xca>
			EcoMode_Popup;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	220a      	movs	r2, #10
 8003004:	4935      	ldr	r1, [pc, #212]	; (80030dc <modeSelection+0x194>)
 8003006:	482f      	ldr	r0, [pc, #188]	; (80030c4 <modeSelection+0x17c>)
 8003008:	f004 f923 	bl	8007252 <HAL_UART_Transmit>
			_modeChanged = false;
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <modeSelection+0x170>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
		if (mode_evcu == 1) {
 8003012:	4b33      	ldr	r3, [pc, #204]	; (80030e0 <modeSelection+0x198>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <modeSelection+0xe2>
			PowerLimitON_Icon;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	2208      	movs	r2, #8
 8003020:	4930      	ldr	r1, [pc, #192]	; (80030e4 <modeSelection+0x19c>)
 8003022:	4828      	ldr	r0, [pc, #160]	; (80030c4 <modeSelection+0x17c>)
 8003024:	f004 f915 	bl	8007252 <HAL_UART_Transmit>
 8003028:	e006      	b.n	8003038 <modeSelection+0xf0>
			PowerLimitOFF_Icon;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	2208      	movs	r2, #8
 8003030:	492d      	ldr	r1, [pc, #180]	; (80030e8 <modeSelection+0x1a0>)
 8003032:	4824      	ldr	r0, [pc, #144]	; (80030c4 <modeSelection+0x17c>)
 8003034:	f004 f90d 	bl	8007252 <HAL_UART_Transmit>
		if (modeMenu) {
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <modeSelection+0x188>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d035      	beq.n	80030ac <modeSelection+0x164>
			modeMenu = false;
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <modeSelection+0x188>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
			if (mode_override == 1) {
 8003046:	4b29      	ldr	r3, [pc, #164]	; (80030ec <modeSelection+0x1a4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <modeSelection+0x116>
				ModeChangeOFF_Page;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	220a      	movs	r2, #10
 8003054:	4926      	ldr	r1, [pc, #152]	; (80030f0 <modeSelection+0x1a8>)
 8003056:	481b      	ldr	r0, [pc, #108]	; (80030c4 <modeSelection+0x17c>)
 8003058:	f004 f8fb 	bl	8007252 <HAL_UART_Transmit>
				return;
 800305c:	e029      	b.n	80030b2 <modeSelection+0x16a>
				EcoMode_Icon;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	2208      	movs	r2, #8
 8003064:	4923      	ldr	r1, [pc, #140]	; (80030f4 <modeSelection+0x1ac>)
 8003066:	4817      	ldr	r0, [pc, #92]	; (80030c4 <modeSelection+0x17c>)
 8003068:	f004 f8f3 	bl	8007252 <HAL_UART_Transmit>
		break;
 800306c:	e01e      	b.n	80030ac <modeSelection+0x164>
		if (_modeChanged) {
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <modeSelection+0x170>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <modeSelection+0x142>
			SportMode_Popup;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	220a      	movs	r2, #10
 800307c:	491e      	ldr	r1, [pc, #120]	; (80030f8 <modeSelection+0x1b0>)
 800307e:	4811      	ldr	r0, [pc, #68]	; (80030c4 <modeSelection+0x17c>)
 8003080:	f004 f8e7 	bl	8007252 <HAL_UART_Transmit>
			_modeChanged = false;
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <modeSelection+0x170>)
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
		if (modeMenu) {
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <modeSelection+0x188>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <modeSelection+0x168>
			modeMenu = false;
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <modeSelection+0x188>)
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	2208      	movs	r2, #8
 800309e:	4917      	ldr	r1, [pc, #92]	; (80030fc <modeSelection+0x1b4>)
 80030a0:	4808      	ldr	r0, [pc, #32]	; (80030c4 <modeSelection+0x17c>)
 80030a2:	f004 f8d6 	bl	8007252 <HAL_UART_Transmit>
		break;
 80030a6:	e003      	b.n	80030b0 <modeSelection+0x168>
		break;
 80030a8:	bf00      	nop
 80030aa:	e002      	b.n	80030b2 <modeSelection+0x16a>
		break;
 80030ac:	bf00      	nop
 80030ae:	e000      	b.n	80030b2 <modeSelection+0x16a>
		break;
 80030b0:	bf00      	nop
	}
}
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	200004a1 	.word	0x200004a1
 80030bc:	2000047a 	.word	0x2000047a
 80030c0:	200001e8 	.word	0x200001e8
 80030c4:	2000059c 	.word	0x2000059c
 80030c8:	20000452 	.word	0x20000452
 80030cc:	20000479 	.word	0x20000479
 80030d0:	2000048e 	.word	0x2000048e
 80030d4:	2000025c 	.word	0x2000025c
 80030d8:	200001d8 	.word	0x200001d8
 80030dc:	20000250 	.word	0x20000250
 80030e0:	2000046c 	.word	0x2000046c
 80030e4:	20000190 	.word	0x20000190
 80030e8:	20000198 	.word	0x20000198
 80030ec:	2000046b 	.word	0x2000046b
 80030f0:	20000274 	.word	0x20000274
 80030f4:	200001d0 	.word	0x200001d0
 80030f8:	20000268 	.word	0x20000268
 80030fc:	200001e0 	.word	0x200001e0

08003100 <startupModeChange>:

//When Mode change unavailable
void startupModeChange() {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, Tuk, sizeof(Tuk),
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	220a      	movs	r2, #10
 800310a:	4903      	ldr	r1, [pc, #12]	; (8003118 <startupModeChange+0x18>)
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <startupModeChange+0x1c>)
 800310e:	f004 f8a0 	bl	8007252 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200000fc 	.word	0x200000fc
 800311c:	2000059c 	.word	0x2000059c

08003120 <startingUp>:

	}
}
uint8_t delayCounter = 0;

void startingUp(void) {
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0

//	if (accessory == 0) {
//		modeSelection(currentMode);
//	}

	if (error_check) {
 8003124:	4b52      	ldr	r3, [pc, #328]	; (8003270 <startingUp+0x150>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <startingUp+0x22>
		if (err_State_Navigation == true) {
 800312c:	4b51      	ldr	r3, [pc, #324]	; (8003274 <startingUp+0x154>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <startingUp+0x22>
			SysError_Shutdown_Page;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	220a      	movs	r2, #10
 800313a:	494f      	ldr	r1, [pc, #316]	; (8003278 <startingUp+0x158>)
 800313c:	484f      	ldr	r0, [pc, #316]	; (800327c <startingUp+0x15c>)
 800313e:	f004 f888 	bl	8007252 <HAL_UART_Transmit>
		}
	}

	if (entry == true) {
 8003142:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <startingUp+0x160>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d024      	beq.n	8003194 <startingUp+0x74>
		if (_navigation) {
 800314a:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <startingUp+0x164>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d019      	beq.n	8003186 <startingUp+0x66>
			if (_trasmitGlobal == MainMenuPages) {
 8003152:	4b4d      	ldr	r3, [pc, #308]	; (8003288 <startingUp+0x168>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <startingUp+0x4a>
				drivePageSetter(_drivePageSet);
 800315c:	4b4b      	ldr	r3, [pc, #300]	; (800328c <startingUp+0x16c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fb70 	bl	8002848 <drivePageSetter>
				return;
 8003168:	e081      	b.n	800326e <startingUp+0x14e>
			}
			_trasmitGlobal = MainMenuPages;
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <startingUp+0x168>)
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	220a      	movs	r2, #10
 8003176:	4946      	ldr	r1, [pc, #280]	; (8003290 <startingUp+0x170>)
 8003178:	4840      	ldr	r0, [pc, #256]	; (800327c <startingUp+0x15c>)
 800317a:	f004 f86a 	bl	8007252 <HAL_UART_Transmit>
			_navigation = false;
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <startingUp+0x164>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
			return;
 8003184:	e073      	b.n	800326e <startingUp+0x14e>

//		if (_trasmitGlobal == 4) {
//			return;
//		}
//		_trasmitGlobal = 4;
		Press_Brake_Page;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	220a      	movs	r2, #10
 800318c:	4941      	ldr	r1, [pc, #260]	; (8003294 <startingUp+0x174>)
 800318e:	483b      	ldr	r0, [pc, #236]	; (800327c <startingUp+0x15c>)
 8003190:	f004 f85f 	bl	8007252 <HAL_UART_Transmit>
	}

	if (start == 1) {
 8003194:	4b40      	ldr	r3, [pc, #256]	; (8003298 <startingUp+0x178>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d13e      	bne.n	800321a <startingUp+0xfa>
		entry = false;
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <startingUp+0x160>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 80031a2:	4b3e      	ldr	r3, [pc, #248]	; (800329c <startingUp+0x17c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <startingUp+0x90>
			//bootAnimation();
			checklit = false;
 80031aa:	4b3c      	ldr	r3, [pc, #240]	; (800329c <startingUp+0x17c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 80031b0:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <startingUp+0x180>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d115      	bne.n	80031e4 <startingUp+0xc4>
			ReadytoDrive_ON_Icon;
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295
 80031bc:	2208      	movs	r2, #8
 80031be:	4939      	ldr	r1, [pc, #228]	; (80032a4 <startingUp+0x184>)
 80031c0:	482e      	ldr	r0, [pc, #184]	; (800327c <startingUp+0x15c>)
 80031c2:	f004 f846 	bl	8007252 <HAL_UART_Transmit>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 80031c6:	4b38      	ldr	r3, [pc, #224]	; (80032a8 <startingUp+0x188>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d011      	beq.n	80031f2 <startingUp+0xd2>
				ReadytoDrive_Page;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	220a      	movs	r2, #10
 80031d4:	4935      	ldr	r1, [pc, #212]	; (80032ac <startingUp+0x18c>)
 80031d6:	4829      	ldr	r0, [pc, #164]	; (800327c <startingUp+0x15c>)
 80031d8:	f004 f83b 	bl	8007252 <HAL_UART_Transmit>
				startup = false;
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <startingUp+0x188>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e006      	b.n	80031f2 <startingUp+0xd2>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 80031e4:	f04f 33ff 	mov.w	r3, #4294967295
 80031e8:	220a      	movs	r2, #10
 80031ea:	4931      	ldr	r1, [pc, #196]	; (80032b0 <startingUp+0x190>)
 80031ec:	4823      	ldr	r0, [pc, #140]	; (800327c <startingUp+0x15c>)
 80031ee:	f004 f830 	bl	8007252 <HAL_UART_Transmit>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 80031f2:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <startingUp+0x194>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <startingUp+0xea>
			Charge_Connection_Error_Popup_ON;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	2208      	movs	r2, #8
 8003200:	492d      	ldr	r1, [pc, #180]	; (80032b8 <startingUp+0x198>)
 8003202:	481e      	ldr	r0, [pc, #120]	; (800327c <startingUp+0x15c>)
 8003204:	f004 f825 	bl	8007252 <HAL_UART_Transmit>
 8003208:	e031      	b.n	800326e <startingUp+0x14e>
		} else {
			Charge_Connection_Error_Popup_OFF;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
 800320e:	2208      	movs	r2, #8
 8003210:	492a      	ldr	r1, [pc, #168]	; (80032bc <startingUp+0x19c>)
 8003212:	481a      	ldr	r0, [pc, #104]	; (800327c <startingUp+0x15c>)
 8003214:	f004 f81d 	bl	8007252 <HAL_UART_Transmit>
 8003218:	e029      	b.n	800326e <startingUp+0x14e>
		}
		/////////////////////////////////////////////////////////

	} else { //if Start == 0//
		if (mode) {
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <startingUp+0x1a0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <startingUp+0x10c>
			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
 8003222:	f7ff ff6d 	bl	8003100 <startupModeChange>
			//Final: Mode Change unavailable before ignition
			mode = false;
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <startingUp+0x1a0>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
		}
		if (warning == 1) {
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <startingUp+0x1a4>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d106      	bne.n	8003242 <startingUp+0x122>
			Press_Brake_Page;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	220a      	movs	r2, #10
 800323a:	4916      	ldr	r1, [pc, #88]	; (8003294 <startingUp+0x174>)
 800323c:	480f      	ldr	r0, [pc, #60]	; (800327c <startingUp+0x15c>)
 800323e:	f004 f808 	bl	8007252 <HAL_UART_Transmit>
		}
		if (warning == 2) {
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <startingUp+0x1a4>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d106      	bne.n	8003258 <startingUp+0x138>
			Mild_Error_ON_Icon;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	2208      	movs	r2, #8
 8003250:	491d      	ldr	r1, [pc, #116]	; (80032c8 <startingUp+0x1a8>)
 8003252:	480a      	ldr	r0, [pc, #40]	; (800327c <startingUp+0x15c>)
 8003254:	f003 fffd 	bl	8007252 <HAL_UART_Transmit>
		}
		if (warning == 3) {
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <startingUp+0x1a4>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d106      	bne.n	800326e <startingUp+0x14e>
			Gear_Error_Page;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	220a      	movs	r2, #10
 8003266:	4919      	ldr	r1, [pc, #100]	; (80032cc <startingUp+0x1ac>)
 8003268:	4804      	ldr	r0, [pc, #16]	; (800327c <startingUp+0x15c>)
 800326a:	f003 fff2 	bl	8007252 <HAL_UART_Transmit>

		}
	}

}
 800326e:	bd80      	pop	{r7, pc}
 8003270:	2000048c 	.word	0x2000048c
 8003274:	20000478 	.word	0x20000478
 8003278:	200000e4 	.word	0x200000e4
 800327c:	2000059c 	.word	0x2000059c
 8003280:	2000000d 	.word	0x2000000d
 8003284:	20000494 	.word	0x20000494
 8003288:	200004a6 	.word	0x200004a6
 800328c:	200004a5 	.word	0x200004a5
 8003290:	20000024 	.word	0x20000024
 8003294:	20000030 	.word	0x20000030
 8003298:	20000468 	.word	0x20000468
 800329c:	2000000e 	.word	0x2000000e
 80032a0:	20000467 	.word	0x20000467
 80032a4:	200001a0 	.word	0x200001a0
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	20000054 	.word	0x20000054
 80032b0:	20000048 	.word	0x20000048
 80032b4:	20000491 	.word	0x20000491
 80032b8:	20000280 	.word	0x20000280
 80032bc:	20000288 	.word	0x20000288
 80032c0:	2000040d 	.word	0x2000040d
 80032c4:	2000046d 	.word	0x2000046d
 80032c8:	20000180 	.word	0x20000180
 80032cc:	2000003c 	.word	0x2000003c

080032d0 <realTimeData>:

uint8_t powerBarTransmit = 0;

void realTimeData(void) { //Realtime updatable data sending
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
//Speed
	realTime_counter++;
 80032d4:	4ba3      	ldr	r3, [pc, #652]	; (8003564 <realTimeData+0x294>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	4ba1      	ldr	r3, [pc, #644]	; (8003564 <realTimeData+0x294>)
 80032de:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 1) {
 80032e0:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <realTimeData+0x294>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d11b      	bne.n	8003320 <realTimeData+0x50>
		strDATA[4] = 0x11; //
 80032e8:	4b9f      	ldr	r3, [pc, #636]	; (8003568 <realTimeData+0x298>)
 80032ea:	2211      	movs	r2, #17
 80032ec:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x00; //
 80032ee:	4b9e      	ldr	r3, [pc, #632]	; (8003568 <realTimeData+0x298>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (test_speed & 0xFF);
 80032f4:	4b9d      	ldr	r3, [pc, #628]	; (800356c <realTimeData+0x29c>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b9b      	ldr	r3, [pc, #620]	; (8003568 <realTimeData+0x298>)
 80032fc:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (test_speed >> 8);
 80032fe:	4b9b      	ldr	r3, [pc, #620]	; (800356c <realTimeData+0x29c>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	0a1b      	lsrs	r3, r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	4b97      	ldr	r3, [pc, #604]	; (8003568 <realTimeData+0x298>)
 800330a:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	2208      	movs	r2, #8
 8003312:	4995      	ldr	r1, [pc, #596]	; (8003568 <realTimeData+0x298>)
 8003314:	4896      	ldr	r0, [pc, #600]	; (8003570 <realTimeData+0x2a0>)
 8003316:	f003 ff9c 	bl	8007252 <HAL_UART_Transmit>
		;
		testFlag_2 = true;
 800331a:	4b96      	ldr	r3, [pc, #600]	; (8003574 <realTimeData+0x2a4>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
	}
//ODO
	if (realTime_counter == 2) {
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <realTimeData+0x294>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d123      	bne.n	8003370 <realTimeData+0xa0>
		strDATA2[4] = 0x11;
 8003328:	4b93      	ldr	r3, [pc, #588]	; (8003578 <realTimeData+0x2a8>)
 800332a:	2211      	movs	r2, #17
 800332c:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x20;
 800332e:	4b92      	ldr	r3, [pc, #584]	; (8003578 <realTimeData+0x2a8>)
 8003330:	2220      	movs	r2, #32
 8003332:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.ODO & 0xFF);
 8003334:	4b91      	ldr	r3, [pc, #580]	; (800357c <realTimeData+0x2ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b8f      	ldr	r3, [pc, #572]	; (8003578 <realTimeData+0x2a8>)
 800333c:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.ODO >> 8);
 800333e:	4b8f      	ldr	r3, [pc, #572]	; (800357c <realTimeData+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	b2da      	uxtb	r2, r3
 8003346:	4b8c      	ldr	r3, [pc, #560]	; (8003578 <realTimeData+0x2a8>)
 8003348:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.ODO >> 16);
 800334a:	4b8c      	ldr	r3, [pc, #560]	; (800357c <realTimeData+0x2ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b89      	ldr	r3, [pc, #548]	; (8003578 <realTimeData+0x2a8>)
 8003354:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.ODO >> 24);
 8003356:	4b89      	ldr	r3, [pc, #548]	; (800357c <realTimeData+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e1b      	lsrs	r3, r3, #24
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b86      	ldr	r3, [pc, #536]	; (8003578 <realTimeData+0x2a8>)
 8003360:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA2
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	220a      	movs	r2, #10
 8003368:	4983      	ldr	r1, [pc, #524]	; (8003578 <realTimeData+0x2a8>)
 800336a:	4881      	ldr	r0, [pc, #516]	; (8003570 <realTimeData+0x2a0>)
 800336c:	f003 ff71 	bl	8007252 <HAL_UART_Transmit>
		;
	}
////Trip
	if (realTime_counter == 3) {
 8003370:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <realTimeData+0x294>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d124      	bne.n	80033c2 <realTimeData+0xf2>
		strDATA2[4] = 0x11;
 8003378:	4b7f      	ldr	r3, [pc, #508]	; (8003578 <realTimeData+0x2a8>)
 800337a:	2211      	movs	r2, #17
 800337c:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x40;
 800337e:	4b7e      	ldr	r3, [pc, #504]	; (8003578 <realTimeData+0x2a8>)
 8003380:	2240      	movs	r2, #64	; 0x40
 8003382:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.trip & 0xFF);
 8003384:	4b7d      	ldr	r3, [pc, #500]	; (800357c <realTimeData+0x2ac>)
 8003386:	889b      	ldrh	r3, [r3, #4]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <realTimeData+0x2a8>)
 800338c:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.trip >> 8);
 800338e:	4b7b      	ldr	r3, [pc, #492]	; (800357c <realTimeData+0x2ac>)
 8003390:	889b      	ldrh	r3, [r3, #4]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	b29b      	uxth	r3, r3
 8003396:	b2da      	uxtb	r2, r3
 8003398:	4b77      	ldr	r3, [pc, #476]	; (8003578 <realTimeData+0x2a8>)
 800339a:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.trip >> 16);
 800339c:	4b77      	ldr	r3, [pc, #476]	; (800357c <realTimeData+0x2ac>)
 800339e:	889b      	ldrh	r3, [r3, #4]
 80033a0:	141b      	asrs	r3, r3, #16
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b74      	ldr	r3, [pc, #464]	; (8003578 <realTimeData+0x2a8>)
 80033a6:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.trip >> 24);
 80033a8:	4b74      	ldr	r3, [pc, #464]	; (800357c <realTimeData+0x2ac>)
 80033aa:	889b      	ldrh	r3, [r3, #4]
 80033ac:	161b      	asrs	r3, r3, #24
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b71      	ldr	r3, [pc, #452]	; (8003578 <realTimeData+0x2a8>)
 80033b2:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA2
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	220a      	movs	r2, #10
 80033ba:	496f      	ldr	r1, [pc, #444]	; (8003578 <realTimeData+0x2a8>)
 80033bc:	486c      	ldr	r0, [pc, #432]	; (8003570 <realTimeData+0x2a0>)
 80033be:	f003 ff48 	bl	8007252 <HAL_UART_Transmit>
		;
	}
//Power Bar
	powerBarTransmit++;
 80033c2:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <realTimeData+0x2b0>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4b6d      	ldr	r3, [pc, #436]	; (8003580 <realTimeData+0x2b0>)
 80033cc:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 10) {
 80033ce:	4b65      	ldr	r3, [pc, #404]	; (8003564 <realTimeData+0x294>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b0a      	cmp	r3, #10
 80033d4:	f040 817b 	bne.w	80036ce <realTimeData+0x3fe>

		if (rpm_meter >= 1) {
 80033d8:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <realTimeData+0x2b4>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8173 	beq.w	80036c8 <realTimeData+0x3f8>
			if (powerBarTransmit == 9) {
 80033e2:	4b67      	ldr	r3, [pc, #412]	; (8003580 <realTimeData+0x2b0>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d10f      	bne.n	800340a <realTimeData+0x13a>
				if (power_90 <= power) {
 80033ea:	4b67      	ldr	r3, [pc, #412]	; (8003588 <realTimeData+0x2b8>)
 80033ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f0:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 80033f4:	dd06      	ble.n	8003404 <realTimeData+0x134>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power5, sizeof(power5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power5, sizeof(power5),
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	2208      	movs	r2, #8
 80033fc:	4963      	ldr	r1, [pc, #396]	; (800358c <realTimeData+0x2bc>)
 80033fe:	485c      	ldr	r0, [pc, #368]	; (8003570 <realTimeData+0x2a0>)
 8003400:	f003 ff27 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
				powerBarTransmit = 0;
 8003404:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <realTimeData+0x2b0>)
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
			}
			if (powerBarTransmit == 8) {
 800340a:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <realTimeData+0x2b0>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d113      	bne.n	800343a <realTimeData+0x16a>
				if (power_80 <= power && power < power_90) {
 8003412:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <realTimeData+0x2b8>)
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	f240 22e6 	movw	r2, #742	; 0x2e6
 800341c:	4293      	cmp	r3, r2
 800341e:	dd0c      	ble.n	800343a <realTimeData+0x16a>
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <realTimeData+0x2b8>)
 8003422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003426:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800342a:	dc06      	bgt.n	800343a <realTimeData+0x16a>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power4, sizeof(power4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power4, sizeof(power4),
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	2208      	movs	r2, #8
 8003432:	4957      	ldr	r1, [pc, #348]	; (8003590 <realTimeData+0x2c0>)
 8003434:	484e      	ldr	r0, [pc, #312]	; (8003570 <realTimeData+0x2a0>)
 8003436:	f003 ff0c 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 7) {
 800343a:	4b51      	ldr	r3, [pc, #324]	; (8003580 <realTimeData+0x2b0>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b07      	cmp	r3, #7
 8003440:	d114      	bne.n	800346c <realTimeData+0x19c>
				if (power_70 <= power && power < power_80) {
 8003442:	4b51      	ldr	r3, [pc, #324]	; (8003588 <realTimeData+0x2b8>)
 8003444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003448:	f240 2295 	movw	r2, #661	; 0x295
 800344c:	4293      	cmp	r3, r2
 800344e:	dd0d      	ble.n	800346c <realTimeData+0x19c>
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <realTimeData+0x2b8>)
 8003452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003456:	f240 22e6 	movw	r2, #742	; 0x2e6
 800345a:	4293      	cmp	r3, r2
 800345c:	dc06      	bgt.n	800346c <realTimeData+0x19c>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power3, sizeof(power3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power3, sizeof(power3),
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	2208      	movs	r2, #8
 8003464:	494b      	ldr	r1, [pc, #300]	; (8003594 <realTimeData+0x2c4>)
 8003466:	4842      	ldr	r0, [pc, #264]	; (8003570 <realTimeData+0x2a0>)
 8003468:	f003 fef3 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 6) {
 800346c:	4b44      	ldr	r3, [pc, #272]	; (8003580 <realTimeData+0x2b0>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b06      	cmp	r3, #6
 8003472:	d113      	bne.n	800349c <realTimeData+0x1cc>
				if (power_60 <= power && power < power_70) {
 8003474:	4b44      	ldr	r3, [pc, #272]	; (8003588 <realTimeData+0x2b8>)
 8003476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347a:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 800347e:	dd0d      	ble.n	800349c <realTimeData+0x1cc>
 8003480:	4b41      	ldr	r3, [pc, #260]	; (8003588 <realTimeData+0x2b8>)
 8003482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003486:	f240 2295 	movw	r2, #661	; 0x295
 800348a:	4293      	cmp	r3, r2
 800348c:	dc06      	bgt.n	800349c <realTimeData+0x1cc>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power2, sizeof(power2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power2, sizeof(power2),
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	2208      	movs	r2, #8
 8003494:	4940      	ldr	r1, [pc, #256]	; (8003598 <realTimeData+0x2c8>)
 8003496:	4836      	ldr	r0, [pc, #216]	; (8003570 <realTimeData+0x2a0>)
 8003498:	f003 fedb 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 5) {
 800349c:	4b38      	ldr	r3, [pc, #224]	; (8003580 <realTimeData+0x2b0>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d112      	bne.n	80034ca <realTimeData+0x1fa>
				if (eco_50 <= power && power < power_60) {
 80034a4:	4b38      	ldr	r3, [pc, #224]	; (8003588 <realTimeData+0x2b8>)
 80034a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034ae:	dd0c      	ble.n	80034ca <realTimeData+0x1fa>
 80034b0:	4b35      	ldr	r3, [pc, #212]	; (8003588 <realTimeData+0x2b8>)
 80034b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b6:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80034ba:	dc06      	bgt.n	80034ca <realTimeData+0x1fa>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, power1, sizeof(power1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, power1, sizeof(power1),
 80034bc:	f04f 33ff 	mov.w	r3, #4294967295
 80034c0:	2208      	movs	r2, #8
 80034c2:	4936      	ldr	r1, [pc, #216]	; (800359c <realTimeData+0x2cc>)
 80034c4:	482a      	ldr	r0, [pc, #168]	; (8003570 <realTimeData+0x2a0>)
 80034c6:	f003 fec4 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 4) {
 80034ca:	4b2d      	ldr	r3, [pc, #180]	; (8003580 <realTimeData+0x2b0>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d112      	bne.n	80034f8 <realTimeData+0x228>
				if (eco_40 <= power && power < eco_50) {
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <realTimeData+0x2b8>)
 80034d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80034dc:	dd0c      	ble.n	80034f8 <realTimeData+0x228>
 80034de:	4b2a      	ldr	r3, [pc, #168]	; (8003588 <realTimeData+0x2b8>)
 80034e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034e8:	dc06      	bgt.n	80034f8 <realTimeData+0x228>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco5, sizeof(eco5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco5, sizeof(eco5),
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	2208      	movs	r2, #8
 80034f0:	492b      	ldr	r1, [pc, #172]	; (80035a0 <realTimeData+0x2d0>)
 80034f2:	481f      	ldr	r0, [pc, #124]	; (8003570 <realTimeData+0x2a0>)
 80034f4:	f003 fead 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 3) {
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <realTimeData+0x2b0>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d112      	bne.n	8003526 <realTimeData+0x256>
				if (eco_30 <= power && power < eco_40) {
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <realTimeData+0x2b8>)
 8003502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003506:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800350a:	dd0c      	ble.n	8003526 <realTimeData+0x256>
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <realTimeData+0x2b8>)
 800350e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003512:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003516:	dc06      	bgt.n	8003526 <realTimeData+0x256>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco4, sizeof(eco4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco4, sizeof(eco4),
 8003518:	f04f 33ff 	mov.w	r3, #4294967295
 800351c:	2208      	movs	r2, #8
 800351e:	4921      	ldr	r1, [pc, #132]	; (80035a4 <realTimeData+0x2d4>)
 8003520:	4813      	ldr	r0, [pc, #76]	; (8003570 <realTimeData+0x2a0>)
 8003522:	f003 fe96 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 2) {
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <realTimeData+0x2b0>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d111      	bne.n	8003552 <realTimeData+0x282>
				if (eco_20 <= power && power < eco_30) {
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <realTimeData+0x2b8>)
 8003530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003534:	2bc8      	cmp	r3, #200	; 0xc8
 8003536:	dd0c      	ble.n	8003552 <realTimeData+0x282>
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <realTimeData+0x2b8>)
 800353a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800353e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003542:	dc06      	bgt.n	8003552 <realTimeData+0x282>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco3, sizeof(eco3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco3, sizeof(eco3),
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	2208      	movs	r2, #8
 800354a:	4917      	ldr	r1, [pc, #92]	; (80035a8 <realTimeData+0x2d8>)
 800354c:	4808      	ldr	r0, [pc, #32]	; (8003570 <realTimeData+0x2a0>)
 800354e:	f003 fe80 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 1) {
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <realTimeData+0x2b0>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d135      	bne.n	80035c6 <realTimeData+0x2f6>
				if (eco_10 <= power && power < eco_20) {
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <realTimeData+0x2b8>)
 800355c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003560:	2b64      	cmp	r3, #100	; 0x64
 8003562:	e023      	b.n	80035ac <realTimeData+0x2dc>
 8003564:	20000594 	.word	0x20000594
 8003568:	20000414 	.word	0x20000414
 800356c:	20000450 	.word	0x20000450
 8003570:	2000059c 	.word	0x2000059c
 8003574:	20000492 	.word	0x20000492
 8003578:	2000041c 	.word	0x2000041c
 800357c:	20000428 	.word	0x20000428
 8003580:	20000598 	.word	0x20000598
 8003584:	2000045c 	.word	0x2000045c
 8003588:	20000462 	.word	0x20000462
 800358c:	20000380 	.word	0x20000380
 8003590:	20000378 	.word	0x20000378
 8003594:	20000370 	.word	0x20000370
 8003598:	20000368 	.word	0x20000368
 800359c:	20000360 	.word	0x20000360
 80035a0:	20000358 	.word	0x20000358
 80035a4:	20000350 	.word	0x20000350
 80035a8:	20000348 	.word	0x20000348
 80035ac:	dd0b      	ble.n	80035c6 <realTimeData+0x2f6>
 80035ae:	4ba6      	ldr	r3, [pc, #664]	; (8003848 <realTimeData+0x578>)
 80035b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b4:	2bc8      	cmp	r3, #200	; 0xc8
 80035b6:	dc06      	bgt.n	80035c6 <realTimeData+0x2f6>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco2, sizeof(eco2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco2, sizeof(eco2),
 80035b8:	f04f 33ff 	mov.w	r3, #4294967295
 80035bc:	2208      	movs	r2, #8
 80035be:	49a3      	ldr	r1, [pc, #652]	; (800384c <realTimeData+0x57c>)
 80035c0:	48a3      	ldr	r0, [pc, #652]	; (8003850 <realTimeData+0x580>)
 80035c2:	f003 fe46 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 0) {
 80035c6:	4ba3      	ldr	r3, [pc, #652]	; (8003854 <realTimeData+0x584>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d110      	bne.n	80035f0 <realTimeData+0x320>
				if (0 <= power && power < eco_10) {
 80035ce:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <realTimeData+0x578>)
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	db0b      	blt.n	80035f0 <realTimeData+0x320>
 80035d8:	4b9b      	ldr	r3, [pc, #620]	; (8003848 <realTimeData+0x578>)
 80035da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	dc06      	bgt.n	80035f0 <realTimeData+0x320>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, eco1, sizeof(eco1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, eco1, sizeof(eco1),
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	2208      	movs	r2, #8
 80035e8:	499b      	ldr	r1, [pc, #620]	; (8003858 <realTimeData+0x588>)
 80035ea:	4899      	ldr	r0, [pc, #612]	; (8003850 <realTimeData+0x580>)
 80035ec:	f003 fe31 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 10) {
 80035f0:	4b98      	ldr	r3, [pc, #608]	; (8003854 <realTimeData+0x584>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b0a      	cmp	r3, #10
 80035f6:	d111      	bne.n	800361c <realTimeData+0x34c>
				if (-1 >= power && power >= -50) {
 80035f8:	4b93      	ldr	r3, [pc, #588]	; (8003848 <realTimeData+0x578>)
 80035fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	da0c      	bge.n	800361c <realTimeData+0x34c>
 8003602:	4b91      	ldr	r3, [pc, #580]	; (8003848 <realTimeData+0x578>)
 8003604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003608:	f113 0f32 	cmn.w	r3, #50	; 0x32
 800360c:	db06      	blt.n	800361c <realTimeData+0x34c>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge1, sizeof(charge1));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge1, sizeof(charge1),
 800360e:	f04f 33ff 	mov.w	r3, #4294967295
 8003612:	2208      	movs	r2, #8
 8003614:	4991      	ldr	r1, [pc, #580]	; (800385c <realTimeData+0x58c>)
 8003616:	488e      	ldr	r0, [pc, #568]	; (8003850 <realTimeData+0x580>)
 8003618:	f003 fe1b 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}

			}
			if (powerBarTransmit == 11) {
 800361c:	4b8d      	ldr	r3, [pc, #564]	; (8003854 <realTimeData+0x584>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b0b      	cmp	r3, #11
 8003622:	d112      	bne.n	800364a <realTimeData+0x37a>
				if (-51 >= power && power >= -101) {
 8003624:	4b88      	ldr	r3, [pc, #544]	; (8003848 <realTimeData+0x578>)
 8003626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362a:	f113 0f32 	cmn.w	r3, #50	; 0x32
 800362e:	da0c      	bge.n	800364a <realTimeData+0x37a>
 8003630:	4b85      	ldr	r3, [pc, #532]	; (8003848 <realTimeData+0x578>)
 8003632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003636:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800363a:	db06      	blt.n	800364a <realTimeData+0x37a>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge2, sizeof(charge2));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge2, sizeof(charge2),
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	2208      	movs	r2, #8
 8003642:	4987      	ldr	r1, [pc, #540]	; (8003860 <realTimeData+0x590>)
 8003644:	4882      	ldr	r0, [pc, #520]	; (8003850 <realTimeData+0x580>)
 8003646:	f003 fe04 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 12) {
 800364a:	4b82      	ldr	r3, [pc, #520]	; (8003854 <realTimeData+0x584>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d112      	bne.n	8003678 <realTimeData+0x3a8>
				if (-102 >= power && power >= -152) {
 8003652:	4b7d      	ldr	r3, [pc, #500]	; (8003848 <realTimeData+0x578>)
 8003654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003658:	f113 0f65 	cmn.w	r3, #101	; 0x65
 800365c:	da0c      	bge.n	8003678 <realTimeData+0x3a8>
 800365e:	4b7a      	ldr	r3, [pc, #488]	; (8003848 <realTimeData+0x578>)
 8003660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003664:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003668:	db06      	blt.n	8003678 <realTimeData+0x3a8>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge3, sizeof(charge3));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge3, sizeof(charge3),
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	2208      	movs	r2, #8
 8003670:	497c      	ldr	r1, [pc, #496]	; (8003864 <realTimeData+0x594>)
 8003672:	4877      	ldr	r0, [pc, #476]	; (8003850 <realTimeData+0x580>)
 8003674:	f003 fded 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 13) {
 8003678:	4b76      	ldr	r3, [pc, #472]	; (8003854 <realTimeData+0x584>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b0d      	cmp	r3, #13
 800367e:	d112      	bne.n	80036a6 <realTimeData+0x3d6>
				if (-153 >= power && power >= -203) {
 8003680:	4b71      	ldr	r3, [pc, #452]	; (8003848 <realTimeData+0x578>)
 8003682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003686:	f113 0f98 	cmn.w	r3, #152	; 0x98
 800368a:	da0c      	bge.n	80036a6 <realTimeData+0x3d6>
 800368c:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <realTimeData+0x578>)
 800368e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003692:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003696:	db06      	blt.n	80036a6 <realTimeData+0x3d6>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge4, sizeof(charge4));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge4, sizeof(charge4),
 8003698:	f04f 33ff 	mov.w	r3, #4294967295
 800369c:	2208      	movs	r2, #8
 800369e:	4972      	ldr	r1, [pc, #456]	; (8003868 <realTimeData+0x598>)
 80036a0:	486b      	ldr	r0, [pc, #428]	; (8003850 <realTimeData+0x580>)
 80036a2:	f003 fdd6 	bl	8007252 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
#endif
				}
			}
			if (powerBarTransmit == 14) {
 80036a6:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <realTimeData+0x584>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b0e      	cmp	r3, #14
 80036ac:	d10c      	bne.n	80036c8 <realTimeData+0x3f8>
				if (-204 >= power) {
 80036ae:	4b66      	ldr	r3, [pc, #408]	; (8003848 <realTimeData+0x578>)
 80036b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b4:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 80036b8:	da06      	bge.n	80036c8 <realTimeData+0x3f8>
#ifdef DMA
					HAL_UART_Transmit_DMA(&huart3, charge5, sizeof(charge5));
#endif
#ifdef No_DMA
					HAL_UART_Transmit(&huart3, charge5, sizeof(charge5),
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	2208      	movs	r2, #8
 80036c0:	496a      	ldr	r1, [pc, #424]	; (800386c <realTimeData+0x59c>)
 80036c2:	4863      	ldr	r0, [pc, #396]	; (8003850 <realTimeData+0x580>)
 80036c4:	f003 fdc5 	bl	8007252 <HAL_UART_Transmit>
#endif
				}
			}

		}
		realTime_counter = 0;
 80036c8:	4b69      	ldr	r3, [pc, #420]	; (8003870 <realTimeData+0x5a0>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	701a      	strb	r2, [r3, #0]
	}
	if (rpm_meter == 0) {
 80036ce:	4b69      	ldr	r3, [pc, #420]	; (8003874 <realTimeData+0x5a4>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <realTimeData+0x414>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, eco0, sizeof(eco0));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, eco0, sizeof(eco0), HAL_MAX_DELAY);
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	2208      	movs	r2, #8
 80036dc:	4966      	ldr	r1, [pc, #408]	; (8003878 <realTimeData+0x5a8>)
 80036de:	485c      	ldr	r0, [pc, #368]	; (8003850 <realTimeData+0x580>)
 80036e0:	f003 fdb7 	bl	8007252 <HAL_UART_Transmit>
//		}

	///}

//Battery Bar
	if (soc_value <= 5) {
 80036e4:	4b65      	ldr	r3, [pc, #404]	; (800387c <realTimeData+0x5ac>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d80d      	bhi.n	8003708 <realTimeData+0x438>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat0, sizeof(bat0));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat0, sizeof(bat0), HAL_MAX_DELAY);
 80036ec:	f04f 33ff 	mov.w	r3, #4294967295
 80036f0:	2208      	movs	r2, #8
 80036f2:	4963      	ldr	r1, [pc, #396]	; (8003880 <realTimeData+0x5b0>)
 80036f4:	4856      	ldr	r0, [pc, #344]	; (8003850 <realTimeData+0x580>)
 80036f6:	f003 fdac 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	2208      	movs	r2, #8
 8003700:	4960      	ldr	r1, [pc, #384]	; (8003884 <realTimeData+0x5b4>)
 8003702:	4853      	ldr	r0, [pc, #332]	; (8003850 <realTimeData+0x580>)
 8003704:	f003 fda5 	bl	8007252 <HAL_UART_Transmit>
#endif
	}
	if (6 <= soc_value && soc_value <= 10) {
 8003708:	4b5c      	ldr	r3, [pc, #368]	; (800387c <realTimeData+0x5ac>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d911      	bls.n	8003734 <realTimeData+0x464>
 8003710:	4b5a      	ldr	r3, [pc, #360]	; (800387c <realTimeData+0x5ac>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b0a      	cmp	r3, #10
 8003716:	d80d      	bhi.n	8003734 <realTimeData+0x464>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat5, sizeof(bat5));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat5, sizeof(bat5), HAL_MAX_DELAY);
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	2208      	movs	r2, #8
 800371e:	495a      	ldr	r1, [pc, #360]	; (8003888 <realTimeData+0x5b8>)
 8003720:	484b      	ldr	r0, [pc, #300]	; (8003850 <realTimeData+0x580>)
 8003722:	f003 fd96 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	2208      	movs	r2, #8
 800372c:	4955      	ldr	r1, [pc, #340]	; (8003884 <realTimeData+0x5b4>)
 800372e:	4848      	ldr	r0, [pc, #288]	; (8003850 <realTimeData+0x580>)
 8003730:	f003 fd8f 	bl	8007252 <HAL_UART_Transmit>
#endif
	}
	if (11 <= soc_value && soc_value <= 15) {
 8003734:	4b51      	ldr	r3, [pc, #324]	; (800387c <realTimeData+0x5ac>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b0a      	cmp	r3, #10
 800373a:	d911      	bls.n	8003760 <realTimeData+0x490>
 800373c:	4b4f      	ldr	r3, [pc, #316]	; (800387c <realTimeData+0x5ac>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d80d      	bhi.n	8003760 <realTimeData+0x490>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat10, sizeof(bat10));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat10, sizeof(bat10), HAL_MAX_DELAY);
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	2208      	movs	r2, #8
 800374a:	4950      	ldr	r1, [pc, #320]	; (800388c <realTimeData+0x5bc>)
 800374c:	4840      	ldr	r0, [pc, #256]	; (8003850 <realTimeData+0x580>)
 800374e:	f003 fd80 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	2208      	movs	r2, #8
 8003758:	494a      	ldr	r1, [pc, #296]	; (8003884 <realTimeData+0x5b4>)
 800375a:	483d      	ldr	r0, [pc, #244]	; (8003850 <realTimeData+0x580>)
 800375c:	f003 fd79 	bl	8007252 <HAL_UART_Transmit>
#endif
	}
	if (16 <= soc_value && soc_value <= 20) {
 8003760:	4b46      	ldr	r3, [pc, #280]	; (800387c <realTimeData+0x5ac>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d911      	bls.n	800378c <realTimeData+0x4bc>
 8003768:	4b44      	ldr	r3, [pc, #272]	; (800387c <realTimeData+0x5ac>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b14      	cmp	r3, #20
 800376e:	d80d      	bhi.n	800378c <realTimeData+0x4bc>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat15, sizeof(bat15));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat15, sizeof(bat15), HAL_MAX_DELAY);
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
 8003774:	2208      	movs	r2, #8
 8003776:	4946      	ldr	r1, [pc, #280]	; (8003890 <realTimeData+0x5c0>)
 8003778:	4835      	ldr	r0, [pc, #212]	; (8003850 <realTimeData+0x580>)
 800377a:	f003 fd6a 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	2208      	movs	r2, #8
 8003784:	493f      	ldr	r1, [pc, #252]	; (8003884 <realTimeData+0x5b4>)
 8003786:	4832      	ldr	r0, [pc, #200]	; (8003850 <realTimeData+0x580>)
 8003788:	f003 fd63 	bl	8007252 <HAL_UART_Transmit>
#endif
	}
	if (21 <= soc_value && soc_value <= 25) {
 800378c:	4b3b      	ldr	r3, [pc, #236]	; (800387c <realTimeData+0x5ac>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b14      	cmp	r3, #20
 8003792:	d911      	bls.n	80037b8 <realTimeData+0x4e8>
 8003794:	4b39      	ldr	r3, [pc, #228]	; (800387c <realTimeData+0x5ac>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b19      	cmp	r3, #25
 800379a:	d80d      	bhi.n	80037b8 <realTimeData+0x4e8>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat20, sizeof(bat20));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat20, sizeof(bat20), HAL_MAX_DELAY);
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	2208      	movs	r2, #8
 80037a2:	493c      	ldr	r1, [pc, #240]	; (8003894 <realTimeData+0x5c4>)
 80037a4:	482a      	ldr	r0, [pc, #168]	; (8003850 <realTimeData+0x580>)
 80037a6:	f003 fd54 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	2208      	movs	r2, #8
 80037b0:	4939      	ldr	r1, [pc, #228]	; (8003898 <realTimeData+0x5c8>)
 80037b2:	4827      	ldr	r0, [pc, #156]	; (8003850 <realTimeData+0x580>)
 80037b4:	f003 fd4d 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (26 <= soc_value && soc_value <= 30) {
 80037b8:	4b30      	ldr	r3, [pc, #192]	; (800387c <realTimeData+0x5ac>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b19      	cmp	r3, #25
 80037be:	d911      	bls.n	80037e4 <realTimeData+0x514>
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <realTimeData+0x5ac>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b1e      	cmp	r3, #30
 80037c6:	d80d      	bhi.n	80037e4 <realTimeData+0x514>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat25, sizeof(bat25));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat25, sizeof(bat25), HAL_MAX_DELAY);
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	2208      	movs	r2, #8
 80037ce:	4933      	ldr	r1, [pc, #204]	; (800389c <realTimeData+0x5cc>)
 80037d0:	481f      	ldr	r0, [pc, #124]	; (8003850 <realTimeData+0x580>)
 80037d2:	f003 fd3e 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	2208      	movs	r2, #8
 80037dc:	492e      	ldr	r1, [pc, #184]	; (8003898 <realTimeData+0x5c8>)
 80037de:	481c      	ldr	r0, [pc, #112]	; (8003850 <realTimeData+0x580>)
 80037e0:	f003 fd37 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (31 <= soc_value && soc_value <= 35) {
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <realTimeData+0x5ac>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b1e      	cmp	r3, #30
 80037ea:	d911      	bls.n	8003810 <realTimeData+0x540>
 80037ec:	4b23      	ldr	r3, [pc, #140]	; (800387c <realTimeData+0x5ac>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b23      	cmp	r3, #35	; 0x23
 80037f2:	d80d      	bhi.n	8003810 <realTimeData+0x540>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat30, sizeof(bat30));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat30, sizeof(bat30), HAL_MAX_DELAY);
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	2208      	movs	r2, #8
 80037fa:	4929      	ldr	r1, [pc, #164]	; (80038a0 <realTimeData+0x5d0>)
 80037fc:	4814      	ldr	r0, [pc, #80]	; (8003850 <realTimeData+0x580>)
 80037fe:	f003 fd28 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	2208      	movs	r2, #8
 8003808:	4923      	ldr	r1, [pc, #140]	; (8003898 <realTimeData+0x5c8>)
 800380a:	4811      	ldr	r0, [pc, #68]	; (8003850 <realTimeData+0x580>)
 800380c:	f003 fd21 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (36 <= soc_value && soc_value <= 40) {
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <realTimeData+0x5ac>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b23      	cmp	r3, #35	; 0x23
 8003816:	d911      	bls.n	800383c <realTimeData+0x56c>
 8003818:	4b18      	ldr	r3, [pc, #96]	; (800387c <realTimeData+0x5ac>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b28      	cmp	r3, #40	; 0x28
 800381e:	d80d      	bhi.n	800383c <realTimeData+0x56c>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat35, sizeof(bat35));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat35, sizeof(bat35), HAL_MAX_DELAY);
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	2208      	movs	r2, #8
 8003826:	491f      	ldr	r1, [pc, #124]	; (80038a4 <realTimeData+0x5d4>)
 8003828:	4809      	ldr	r0, [pc, #36]	; (8003850 <realTimeData+0x580>)
 800382a:	f003 fd12 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	2208      	movs	r2, #8
 8003834:	4918      	ldr	r1, [pc, #96]	; (8003898 <realTimeData+0x5c8>)
 8003836:	4806      	ldr	r0, [pc, #24]	; (8003850 <realTimeData+0x580>)
 8003838:	f003 fd0b 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (41 <= soc_value && soc_value <= 45) {
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <realTimeData+0x5ac>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b28      	cmp	r3, #40	; 0x28
 8003842:	d943      	bls.n	80038cc <realTimeData+0x5fc>
 8003844:	e030      	b.n	80038a8 <realTimeData+0x5d8>
 8003846:	bf00      	nop
 8003848:	20000462 	.word	0x20000462
 800384c:	20000340 	.word	0x20000340
 8003850:	2000059c 	.word	0x2000059c
 8003854:	20000598 	.word	0x20000598
 8003858:	20000338 	.word	0x20000338
 800385c:	20000388 	.word	0x20000388
 8003860:	20000390 	.word	0x20000390
 8003864:	20000398 	.word	0x20000398
 8003868:	200003a0 	.word	0x200003a0
 800386c:	200003a8 	.word	0x200003a8
 8003870:	20000594 	.word	0x20000594
 8003874:	2000045c 	.word	0x2000045c
 8003878:	20000330 	.word	0x20000330
 800387c:	20000454 	.word	0x20000454
 8003880:	20000290 	.word	0x20000290
 8003884:	20000210 	.word	0x20000210
 8003888:	20000298 	.word	0x20000298
 800388c:	200002a0 	.word	0x200002a0
 8003890:	200002a8 	.word	0x200002a8
 8003894:	200002b0 	.word	0x200002b0
 8003898:	20000208 	.word	0x20000208
 800389c:	200002b8 	.word	0x200002b8
 80038a0:	200002c0 	.word	0x200002c0
 80038a4:	200002c8 	.word	0x200002c8
 80038a8:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <realTimeData+0x808>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b2d      	cmp	r3, #45	; 0x2d
 80038ae:	d80d      	bhi.n	80038cc <realTimeData+0x5fc>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat40, sizeof(bat40));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat40, sizeof(bat40), HAL_MAX_DELAY);
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
 80038b4:	2208      	movs	r2, #8
 80038b6:	4989      	ldr	r1, [pc, #548]	; (8003adc <realTimeData+0x80c>)
 80038b8:	4889      	ldr	r0, [pc, #548]	; (8003ae0 <realTimeData+0x810>)
 80038ba:	f003 fcca 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	2208      	movs	r2, #8
 80038c4:	4987      	ldr	r1, [pc, #540]	; (8003ae4 <realTimeData+0x814>)
 80038c6:	4886      	ldr	r0, [pc, #536]	; (8003ae0 <realTimeData+0x810>)
 80038c8:	f003 fcc3 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (46 <= soc_value && soc_value <= 50) {
 80038cc:	4b82      	ldr	r3, [pc, #520]	; (8003ad8 <realTimeData+0x808>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b2d      	cmp	r3, #45	; 0x2d
 80038d2:	d911      	bls.n	80038f8 <realTimeData+0x628>
 80038d4:	4b80      	ldr	r3, [pc, #512]	; (8003ad8 <realTimeData+0x808>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b32      	cmp	r3, #50	; 0x32
 80038da:	d80d      	bhi.n	80038f8 <realTimeData+0x628>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat45, sizeof(bat45));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat45, sizeof(bat45), HAL_MAX_DELAY);
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	2208      	movs	r2, #8
 80038e2:	4981      	ldr	r1, [pc, #516]	; (8003ae8 <realTimeData+0x818>)
 80038e4:	487e      	ldr	r0, [pc, #504]	; (8003ae0 <realTimeData+0x810>)
 80038e6:	f003 fcb4 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	2208      	movs	r2, #8
 80038f0:	497c      	ldr	r1, [pc, #496]	; (8003ae4 <realTimeData+0x814>)
 80038f2:	487b      	ldr	r0, [pc, #492]	; (8003ae0 <realTimeData+0x810>)
 80038f4:	f003 fcad 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (51 <= soc_value && soc_value <= 55) {
 80038f8:	4b77      	ldr	r3, [pc, #476]	; (8003ad8 <realTimeData+0x808>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b32      	cmp	r3, #50	; 0x32
 80038fe:	d911      	bls.n	8003924 <realTimeData+0x654>
 8003900:	4b75      	ldr	r3, [pc, #468]	; (8003ad8 <realTimeData+0x808>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b37      	cmp	r3, #55	; 0x37
 8003906:	d80d      	bhi.n	8003924 <realTimeData+0x654>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat50, sizeof(bat50));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat50, sizeof(bat50), HAL_MAX_DELAY);
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	2208      	movs	r2, #8
 800390e:	4977      	ldr	r1, [pc, #476]	; (8003aec <realTimeData+0x81c>)
 8003910:	4873      	ldr	r0, [pc, #460]	; (8003ae0 <realTimeData+0x810>)
 8003912:	f003 fc9e 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	2208      	movs	r2, #8
 800391c:	4971      	ldr	r1, [pc, #452]	; (8003ae4 <realTimeData+0x814>)
 800391e:	4870      	ldr	r0, [pc, #448]	; (8003ae0 <realTimeData+0x810>)
 8003920:	f003 fc97 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (56 <= soc_value && soc_value <= 60) {
 8003924:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <realTimeData+0x808>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b37      	cmp	r3, #55	; 0x37
 800392a:	d911      	bls.n	8003950 <realTimeData+0x680>
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <realTimeData+0x808>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b3c      	cmp	r3, #60	; 0x3c
 8003932:	d80d      	bhi.n	8003950 <realTimeData+0x680>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat55, sizeof(bat55));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat55, sizeof(bat55), HAL_MAX_DELAY);
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	2208      	movs	r2, #8
 800393a:	496d      	ldr	r1, [pc, #436]	; (8003af0 <realTimeData+0x820>)
 800393c:	4868      	ldr	r0, [pc, #416]	; (8003ae0 <realTimeData+0x810>)
 800393e:	f003 fc88 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
 8003946:	2208      	movs	r2, #8
 8003948:	4966      	ldr	r1, [pc, #408]	; (8003ae4 <realTimeData+0x814>)
 800394a:	4865      	ldr	r0, [pc, #404]	; (8003ae0 <realTimeData+0x810>)
 800394c:	f003 fc81 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (61 <= soc_value && soc_value <= 65) {
 8003950:	4b61      	ldr	r3, [pc, #388]	; (8003ad8 <realTimeData+0x808>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b3c      	cmp	r3, #60	; 0x3c
 8003956:	d911      	bls.n	800397c <realTimeData+0x6ac>
 8003958:	4b5f      	ldr	r3, [pc, #380]	; (8003ad8 <realTimeData+0x808>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b41      	cmp	r3, #65	; 0x41
 800395e:	d80d      	bhi.n	800397c <realTimeData+0x6ac>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat60, sizeof(bat60));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat60, sizeof(bat60), HAL_MAX_DELAY);
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	2208      	movs	r2, #8
 8003966:	4963      	ldr	r1, [pc, #396]	; (8003af4 <realTimeData+0x824>)
 8003968:	485d      	ldr	r0, [pc, #372]	; (8003ae0 <realTimeData+0x810>)
 800396a:	f003 fc72 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	2208      	movs	r2, #8
 8003974:	495b      	ldr	r1, [pc, #364]	; (8003ae4 <realTimeData+0x814>)
 8003976:	485a      	ldr	r0, [pc, #360]	; (8003ae0 <realTimeData+0x810>)
 8003978:	f003 fc6b 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (66 <= soc_value && soc_value <= 70) {
 800397c:	4b56      	ldr	r3, [pc, #344]	; (8003ad8 <realTimeData+0x808>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b41      	cmp	r3, #65	; 0x41
 8003982:	d911      	bls.n	80039a8 <realTimeData+0x6d8>
 8003984:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <realTimeData+0x808>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b46      	cmp	r3, #70	; 0x46
 800398a:	d80d      	bhi.n	80039a8 <realTimeData+0x6d8>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat65, sizeof(bat65));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat65, sizeof(bat65), HAL_MAX_DELAY);
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	2208      	movs	r2, #8
 8003992:	4959      	ldr	r1, [pc, #356]	; (8003af8 <realTimeData+0x828>)
 8003994:	4852      	ldr	r0, [pc, #328]	; (8003ae0 <realTimeData+0x810>)
 8003996:	f003 fc5c 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	2208      	movs	r2, #8
 80039a0:	4950      	ldr	r1, [pc, #320]	; (8003ae4 <realTimeData+0x814>)
 80039a2:	484f      	ldr	r0, [pc, #316]	; (8003ae0 <realTimeData+0x810>)
 80039a4:	f003 fc55 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (71 <= soc_value && soc_value <= 75) {
 80039a8:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <realTimeData+0x808>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b46      	cmp	r3, #70	; 0x46
 80039ae:	d911      	bls.n	80039d4 <realTimeData+0x704>
 80039b0:	4b49      	ldr	r3, [pc, #292]	; (8003ad8 <realTimeData+0x808>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b4b      	cmp	r3, #75	; 0x4b
 80039b6:	d80d      	bhi.n	80039d4 <realTimeData+0x704>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat70, sizeof(bat70));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat70, sizeof(bat70), HAL_MAX_DELAY);
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	2208      	movs	r2, #8
 80039be:	494f      	ldr	r1, [pc, #316]	; (8003afc <realTimeData+0x82c>)
 80039c0:	4847      	ldr	r0, [pc, #284]	; (8003ae0 <realTimeData+0x810>)
 80039c2:	f003 fc46 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	2208      	movs	r2, #8
 80039cc:	4945      	ldr	r1, [pc, #276]	; (8003ae4 <realTimeData+0x814>)
 80039ce:	4844      	ldr	r0, [pc, #272]	; (8003ae0 <realTimeData+0x810>)
 80039d0:	f003 fc3f 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (76 <= soc_value && soc_value <= 80) {
 80039d4:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <realTimeData+0x808>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b4b      	cmp	r3, #75	; 0x4b
 80039da:	d911      	bls.n	8003a00 <realTimeData+0x730>
 80039dc:	4b3e      	ldr	r3, [pc, #248]	; (8003ad8 <realTimeData+0x808>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d80d      	bhi.n	8003a00 <realTimeData+0x730>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat75, sizeof(bat75));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat75, sizeof(bat75), HAL_MAX_DELAY);
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	2208      	movs	r2, #8
 80039ea:	4945      	ldr	r1, [pc, #276]	; (8003b00 <realTimeData+0x830>)
 80039ec:	483c      	ldr	r0, [pc, #240]	; (8003ae0 <realTimeData+0x810>)
 80039ee:	f003 fc30 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	2208      	movs	r2, #8
 80039f8:	493a      	ldr	r1, [pc, #232]	; (8003ae4 <realTimeData+0x814>)
 80039fa:	4839      	ldr	r0, [pc, #228]	; (8003ae0 <realTimeData+0x810>)
 80039fc:	f003 fc29 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (81 <= soc_value && soc_value <= 85) {
 8003a00:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <realTimeData+0x808>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d911      	bls.n	8003a2c <realTimeData+0x75c>
 8003a08:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <realTimeData+0x808>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b55      	cmp	r3, #85	; 0x55
 8003a0e:	d80d      	bhi.n	8003a2c <realTimeData+0x75c>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat80, sizeof(bat80));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat80, sizeof(bat80), HAL_MAX_DELAY);
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
 8003a14:	2208      	movs	r2, #8
 8003a16:	493b      	ldr	r1, [pc, #236]	; (8003b04 <realTimeData+0x834>)
 8003a18:	4831      	ldr	r0, [pc, #196]	; (8003ae0 <realTimeData+0x810>)
 8003a1a:	f003 fc1a 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	2208      	movs	r2, #8
 8003a24:	492f      	ldr	r1, [pc, #188]	; (8003ae4 <realTimeData+0x814>)
 8003a26:	482e      	ldr	r0, [pc, #184]	; (8003ae0 <realTimeData+0x810>)
 8003a28:	f003 fc13 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (86 <= soc_value && soc_value <= 90) {
 8003a2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <realTimeData+0x808>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b55      	cmp	r3, #85	; 0x55
 8003a32:	d911      	bls.n	8003a58 <realTimeData+0x788>
 8003a34:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <realTimeData+0x808>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b5a      	cmp	r3, #90	; 0x5a
 8003a3a:	d80d      	bhi.n	8003a58 <realTimeData+0x788>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat85, sizeof(bat85));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat85, sizeof(bat85), HAL_MAX_DELAY);
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	2208      	movs	r2, #8
 8003a42:	4931      	ldr	r1, [pc, #196]	; (8003b08 <realTimeData+0x838>)
 8003a44:	4826      	ldr	r0, [pc, #152]	; (8003ae0 <realTimeData+0x810>)
 8003a46:	f003 fc04 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	2208      	movs	r2, #8
 8003a50:	4924      	ldr	r1, [pc, #144]	; (8003ae4 <realTimeData+0x814>)
 8003a52:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <realTimeData+0x810>)
 8003a54:	f003 fbfd 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (91 <= soc_value && soc_value <= 95) {
 8003a58:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <realTimeData+0x808>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b5a      	cmp	r3, #90	; 0x5a
 8003a5e:	d911      	bls.n	8003a84 <realTimeData+0x7b4>
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <realTimeData+0x808>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b5f      	cmp	r3, #95	; 0x5f
 8003a66:	d80d      	bhi.n	8003a84 <realTimeData+0x7b4>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	4927      	ldr	r1, [pc, #156]	; (8003b0c <realTimeData+0x83c>)
 8003a70:	481b      	ldr	r0, [pc, #108]	; (8003ae0 <realTimeData+0x810>)
 8003a72:	f003 fbee 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	4919      	ldr	r1, [pc, #100]	; (8003ae4 <realTimeData+0x814>)
 8003a7e:	4818      	ldr	r0, [pc, #96]	; (8003ae0 <realTimeData+0x810>)
 8003a80:	f003 fbe7 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (96 <= soc_value && soc_value <= 99) {
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <realTimeData+0x808>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b5f      	cmp	r3, #95	; 0x5f
 8003a8a:	d911      	bls.n	8003ab0 <realTimeData+0x7e0>
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <realTimeData+0x808>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b63      	cmp	r3, #99	; 0x63
 8003a92:	d80d      	bhi.n	8003ab0 <realTimeData+0x7e0>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295
 8003a98:	2208      	movs	r2, #8
 8003a9a:	491c      	ldr	r1, [pc, #112]	; (8003b0c <realTimeData+0x83c>)
 8003a9c:	4810      	ldr	r0, [pc, #64]	; (8003ae0 <realTimeData+0x810>)
 8003a9e:	f003 fbd8 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	490e      	ldr	r1, [pc, #56]	; (8003ae4 <realTimeData+0x814>)
 8003aaa:	480d      	ldr	r0, [pc, #52]	; (8003ae0 <realTimeData+0x810>)
 8003aac:	f003 fbd1 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (100 == soc_value) {
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <realTimeData+0x808>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b64      	cmp	r3, #100	; 0x64
 8003ab6:	d10d      	bne.n	8003ad4 <realTimeData+0x804>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat100, sizeof(bat100));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat100, sizeof(bat100), HAL_MAX_DELAY);
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	2208      	movs	r2, #8
 8003abe:	4914      	ldr	r1, [pc, #80]	; (8003b10 <realTimeData+0x840>)
 8003ac0:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <realTimeData+0x810>)
 8003ac2:	f003 fbc6 	bl	8007252 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	2208      	movs	r2, #8
 8003acc:	4905      	ldr	r1, [pc, #20]	; (8003ae4 <realTimeData+0x814>)
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <realTimeData+0x810>)
 8003ad0:	f003 fbbf 	bl	8007252 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}

}
 8003ad4:	bf00      	nop
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000454 	.word	0x20000454
 8003adc:	200002d0 	.word	0x200002d0
 8003ae0:	2000059c 	.word	0x2000059c
 8003ae4:	20000200 	.word	0x20000200
 8003ae8:	200002d8 	.word	0x200002d8
 8003aec:	200002e0 	.word	0x200002e0
 8003af0:	200002e8 	.word	0x200002e8
 8003af4:	200002f0 	.word	0x200002f0
 8003af8:	200002f8 	.word	0x200002f8
 8003afc:	20000300 	.word	0x20000300
 8003b00:	20000308 	.word	0x20000308
 8003b04:	20000310 	.word	0x20000310
 8003b08:	20000318 	.word	0x20000318
 8003b0c:	20000320 	.word	0x20000320
 8003b10:	20000328 	.word	0x20000328

08003b14 <oneTimeData>:

void oneTimeData(void) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0

	oneTime_counter++;
 8003b18:	4ba9      	ldr	r3, [pc, #676]	; (8003dc0 <oneTimeData+0x2ac>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	4ba7      	ldr	r3, [pc, #668]	; (8003dc0 <oneTimeData+0x2ac>)
 8003b22:	701a      	strb	r2, [r3, #0]

	if (readytodrive == 0) {
 8003b24:	4ba7      	ldr	r3, [pc, #668]	; (8003dc4 <oneTimeData+0x2b0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <oneTimeData+0x28>
		DriveUnit_OFF_Icon;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	2208      	movs	r2, #8
 8003b32:	49a5      	ldr	r1, [pc, #660]	; (8003dc8 <oneTimeData+0x2b4>)
 8003b34:	48a5      	ldr	r0, [pc, #660]	; (8003dcc <oneTimeData+0x2b8>)
 8003b36:	f003 fb8c 	bl	8007252 <HAL_UART_Transmit>
 8003b3a:	e006      	b.n	8003b4a <oneTimeData+0x36>
	} else {
		DriveUnit_ON_Icon;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	2208      	movs	r2, #8
 8003b42:	49a3      	ldr	r1, [pc, #652]	; (8003dd0 <oneTimeData+0x2bc>)
 8003b44:	48a1      	ldr	r0, [pc, #644]	; (8003dcc <oneTimeData+0x2b8>)
 8003b46:	f003 fb84 	bl	8007252 <HAL_UART_Transmit>
	}
//RPM
	if (oneTime_counter == 0) {
 8003b4a:	4b9d      	ldr	r3, [pc, #628]	; (8003dc0 <oneTimeData+0x2ac>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d118      	bne.n	8003b84 <oneTimeData+0x70>
		strDATA[4] = 0x12;
 8003b52:	4ba0      	ldr	r3, [pc, #640]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b54:	2212      	movs	r2, #18
 8003b56:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 8003b58:	4b9e      	ldr	r3, [pc, #632]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b5a:	2250      	movs	r2, #80	; 0x50
 8003b5c:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (rpm_meter & 0xFF);
 8003b5e:	4b9e      	ldr	r3, [pc, #632]	; (8003dd8 <oneTimeData+0x2c4>)
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b9b      	ldr	r3, [pc, #620]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b66:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (rpm_meter >> 8);
 8003b68:	4b9b      	ldr	r3, [pc, #620]	; (8003dd8 <oneTimeData+0x2c4>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4b98      	ldr	r3, [pc, #608]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b74:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	4995      	ldr	r1, [pc, #596]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b7e:	4893      	ldr	r0, [pc, #588]	; (8003dcc <oneTimeData+0x2b8>)
 8003b80:	f003 fb67 	bl	8007252 <HAL_UART_Transmit>
		;
	}

//AVG SPEED
	if (oneTime_counter == 1) {
 8003b84:	4b8e      	ldr	r3, [pc, #568]	; (8003dc0 <oneTimeData+0x2ac>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d118      	bne.n	8003bbe <oneTimeData+0xaa>
		strDATA[4] = 0x11;
 8003b8c:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b8e:	2211      	movs	r2, #17
 8003b90:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x52;
 8003b92:	4b90      	ldr	r3, [pc, #576]	; (8003dd4 <oneTimeData+0x2c0>)
 8003b94:	2252      	movs	r2, #82	; 0x52
 8003b96:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.tripAvgSpeed & 0xFF);
 8003b98:	4b90      	ldr	r3, [pc, #576]	; (8003ddc <oneTimeData+0x2c8>)
 8003b9a:	891b      	ldrh	r3, [r3, #8]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	; (8003dd4 <oneTimeData+0x2c0>)
 8003ba0:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.tripAvgSpeed >> 8);
 8003ba2:	4b8e      	ldr	r3, [pc, #568]	; (8003ddc <oneTimeData+0x2c8>)
 8003ba4:	891b      	ldrh	r3, [r3, #8]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	4b89      	ldr	r3, [pc, #548]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bae:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	4987      	ldr	r1, [pc, #540]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bb8:	4884      	ldr	r0, [pc, #528]	; (8003dcc <oneTimeData+0x2b8>)
 8003bba:	f003 fb4a 	bl	8007252 <HAL_UART_Transmit>
		;
	}

//Power
	if (oneTime_counter == 2) {
 8003bbe:	4b80      	ldr	r3, [pc, #512]	; (8003dc0 <oneTimeData+0x2ac>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d127      	bne.n	8003c16 <oneTimeData+0x102>
		strDATA[4] = 0x12;
 8003bc6:	4b83      	ldr	r3, [pc, #524]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bc8:	2212      	movs	r2, #18
 8003bca:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 8003bcc:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bce:	2260      	movs	r2, #96	; 0x60
 8003bd0:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (power & 0xFF);
 8003bd2:	4b83      	ldr	r3, [pc, #524]	; (8003de0 <oneTimeData+0x2cc>)
 8003bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bdc:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (power >> 8);
 8003bde:	4b80      	ldr	r3, [pc, #512]	; (8003de0 <oneTimeData+0x2cc>)
 8003be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be4:	121b      	asrs	r3, r3, #8
 8003be6:	b21b      	sxth	r3, r3
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4b7a      	ldr	r3, [pc, #488]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bec:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	4977      	ldr	r1, [pc, #476]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bf6:	4875      	ldr	r0, [pc, #468]	; (8003dcc <oneTimeData+0x2b8>)
 8003bf8:	f003 fb2b 	bl	8007252 <HAL_UART_Transmit>
		;
		strDATA[4] = 0x11;
 8003bfc:	4b75      	ldr	r3, [pc, #468]	; (8003dd4 <oneTimeData+0x2c0>)
 8003bfe:	2211      	movs	r2, #17
 8003c00:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c04:	2270      	movs	r2, #112	; 0x70
 8003c06:	715a      	strb	r2, [r3, #5]
		Transmit_strDATA
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	4971      	ldr	r1, [pc, #452]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c10:	486e      	ldr	r0, [pc, #440]	; (8003dcc <oneTimeData+0x2b8>)
 8003c12:	f003 fb1e 	bl	8007252 <HAL_UART_Transmit>
		;
	}
//Range
	if (oneTime_counter == 3) {
 8003c16:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <oneTimeData+0x2ac>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d113      	bne.n	8003c46 <oneTimeData+0x132>
		strDATA[4] = 0x11;
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c20:	2211      	movs	r2, #17
 8003c22:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 8003c24:	4b6b      	ldr	r3, [pc, #428]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c26:	2230      	movs	r2, #48	; 0x30
 8003c28:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.range);
 8003c2a:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <oneTimeData+0x2c8>)
 8003c2c:	799a      	ldrb	r2, [r3, #6]
 8003c2e:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c30:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8003c32:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	4965      	ldr	r1, [pc, #404]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c40:	4862      	ldr	r0, [pc, #392]	; (8003dcc <oneTimeData+0x2b8>)
 8003c42:	f003 fb06 	bl	8007252 <HAL_UART_Transmit>
		;
	}
	//Battery Data
	if (oneTime_counter == 4) {
 8003c46:	4b5e      	ldr	r3, [pc, #376]	; (8003dc0 <oneTimeData+0x2ac>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	f040 8114 	bne.w	8003e78 <oneTimeData+0x364>
		switch (transferCount) {
 8003c50:	4b64      	ldr	r3, [pc, #400]	; (8003de4 <oneTimeData+0x2d0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	f200 8101 	bhi.w	8003e5e <oneTimeData+0x34a>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <oneTimeData+0x150>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	08003cab 	.word	0x08003cab
 8003c6c:	08003cf5 	.word	0x08003cf5
 8003c70:	08003d29 	.word	0x08003d29
 8003c74:	08003d77 	.word	0x08003d77
 8003c78:	08003e01 	.word	0x08003e01
 8003c7c:	08003e35 	.word	0x08003e35
		case 1: //SOC - Battery Percentage
			strDATA[4] = 0x11;
 8003c80:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c82:	2211      	movs	r2, #17
 8003c84:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 8003c86:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c88:	2210      	movs	r2, #16
 8003c8a:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (soc_value);
 8003c8c:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <oneTimeData+0x2d4>)
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c92:	71da      	strb	r2, [r3, #7]
			strDATA[6] = 0;
 8003c94:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <oneTimeData+0x2c0>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	494c      	ldr	r1, [pc, #304]	; (8003dd4 <oneTimeData+0x2c0>)
 8003ca2:	484a      	ldr	r0, [pc, #296]	; (8003dcc <oneTimeData+0x2b8>)
 8003ca4:	f003 fad5 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003ca8:	e0da      	b.n	8003e60 <oneTimeData+0x34c>
		case 2:  //Pack voltage
			if (currentstate == charging_state) {
 8003caa:	4b50      	ldr	r3, [pc, #320]	; (8003dec <oneTimeData+0x2d8>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d106      	bne.n	8003cc0 <oneTimeData+0x1ac>
				strDATA[4] = 0x12;
 8003cb2:	4b48      	ldr	r3, [pc, #288]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cb4:	2212      	movs	r2, #18
 8003cb6:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x10;
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cba:	2210      	movs	r2, #16
 8003cbc:	715a      	strb	r2, [r3, #5]
 8003cbe:	e005      	b.n	8003ccc <oneTimeData+0x1b8>
			} else {
				strDATA[4] = 0x11;
 8003cc0:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cc2:	2211      	movs	r2, #17
 8003cc4:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x64;
 8003cc6:	4b43      	ldr	r3, [pc, #268]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cc8:	2264      	movs	r2, #100	; 0x64
 8003cca:	715a      	strb	r2, [r3, #5]
			}
			strDATA[7] = (pack_voltage & 0xFF);
 8003ccc:	4b48      	ldr	r3, [pc, #288]	; (8003df0 <oneTimeData+0x2dc>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b40      	ldr	r3, [pc, #256]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cd4:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (pack_voltage >> 8);
 8003cd6:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <oneTimeData+0x2dc>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	; (8003dd4 <oneTimeData+0x2c0>)
 8003ce2:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	2208      	movs	r2, #8
 8003cea:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cec:	4837      	ldr	r0, [pc, #220]	; (8003dcc <oneTimeData+0x2b8>)
 8003cee:	f003 fab0 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003cf2:	e0b5      	b.n	8003e60 <oneTimeData+0x34c>
		case 3:  //Lowest Cell Voltage
			strDATA[4] = 0x12;
 8003cf4:	4b37      	ldr	r3, [pc, #220]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cf6:	2212      	movs	r2, #18
 8003cf8:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x20;
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <oneTimeData+0x2c0>)
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (lcell_voltage & 0xFF);
 8003d00:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <oneTimeData+0x2e0>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	4b33      	ldr	r3, [pc, #204]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d08:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (lcell_voltage >> 8);
 8003d0a:	4b3a      	ldr	r3, [pc, #232]	; (8003df4 <oneTimeData+0x2e0>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d16:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	492d      	ldr	r1, [pc, #180]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d20:	482a      	ldr	r0, [pc, #168]	; (8003dcc <oneTimeData+0x2b8>)
 8003d22:	f003 fa96 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003d26:	e09b      	b.n	8003e60 <oneTimeData+0x34c>
		case 4:  //DC Current
			if (currentstate == charging_state) {
 8003d28:	4b30      	ldr	r3, [pc, #192]	; (8003dec <oneTimeData+0x2d8>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d106      	bne.n	8003d3e <oneTimeData+0x22a>
				strDATA[4] = 0x12;
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d32:	2212      	movs	r2, #18
 8003d34:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x80;
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	715a      	strb	r2, [r3, #5]
 8003d3c:	e005      	b.n	8003d4a <oneTimeData+0x236>
			} else {
				strDATA[4] = 0x12;
 8003d3e:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d40:	2212      	movs	r2, #18
 8003d42:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x30;
 8003d44:	4b23      	ldr	r3, [pc, #140]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d46:	2230      	movs	r2, #48	; 0x30
 8003d48:	715a      	strb	r2, [r3, #5]
			}
			strDATA[6] = (dc_current >> 8);
 8003d4a:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <oneTimeData+0x2e4>)
 8003d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d50:	121b      	asrs	r3, r3, #8
 8003d52:	b21b      	sxth	r3, r3
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d58:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (dc_current & 0xFF);
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <oneTimeData+0x2e4>)
 8003d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d64:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	4919      	ldr	r1, [pc, #100]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d6e:	4817      	ldr	r0, [pc, #92]	; (8003dcc <oneTimeData+0x2b8>)
 8003d70:	f003 fa6f 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003d74:	e074      	b.n	8003e60 <oneTimeData+0x34c>
		case 5:  //Pack Temperature
			strDATA[4] = 0x12;
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d78:	2212      	movs	r2, #18
 8003d7a:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x40;
 8003d7c:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	715a      	strb	r2, [r3, #5]
			strDATA[6] = (pack_temp >> 8);
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <oneTimeData+0x2e8>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	121b      	asrs	r3, r3, #8
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d8c:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (pack_temp & 0xFF);
 8003d8e:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <oneTimeData+0x2e8>)
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d94:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	490d      	ldr	r1, [pc, #52]	; (8003dd4 <oneTimeData+0x2c0>)
 8003d9e:	480b      	ldr	r0, [pc, #44]	; (8003dcc <oneTimeData+0x2b8>)
 8003da0:	f003 fa57 	bl	8007252 <HAL_UART_Transmit>
			;
			strDATA[4] = 0x11;
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <oneTimeData+0x2c0>)
 8003da6:	2211      	movs	r2, #17
 8003da8:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x68;
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <oneTimeData+0x2c0>)
 8003dac:	2268      	movs	r2, #104	; 0x68
 8003dae:	715a      	strb	r2, [r3, #5]
			Transmit_strDATA
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	2208      	movs	r2, #8
 8003db6:	4907      	ldr	r1, [pc, #28]	; (8003dd4 <oneTimeData+0x2c0>)
 8003db8:	4804      	ldr	r0, [pc, #16]	; (8003dcc <oneTimeData+0x2b8>)
 8003dba:	f003 fa4a 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003dbe:	e04f      	b.n	8003e60 <oneTimeData+0x34c>
 8003dc0:	20000595 	.word	0x20000595
 8003dc4:	20000467 	.word	0x20000467
 8003dc8:	200001f0 	.word	0x200001f0
 8003dcc:	2000059c 	.word	0x2000059c
 8003dd0:	200001f8 	.word	0x200001f8
 8003dd4:	20000414 	.word	0x20000414
 8003dd8:	2000045c 	.word	0x2000045c
 8003ddc:	20000428 	.word	0x20000428
 8003de0:	20000462 	.word	0x20000462
 8003de4:	20000008 	.word	0x20000008
 8003de8:	20000454 	.word	0x20000454
 8003dec:	20000464 	.word	0x20000464
 8003df0:	20000456 	.word	0x20000456
 8003df4:	2000045a 	.word	0x2000045a
 8003df8:	20000460 	.word	0x20000460
 8003dfc:	2000045e 	.word	0x2000045e
		case 6:  //Highest Cell Voltage
			strDATA[4] = 0x12;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <oneTimeData+0x368>)
 8003e02:	2212      	movs	r2, #18
 8003e04:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x70;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <oneTimeData+0x368>)
 8003e08:	2270      	movs	r2, #112	; 0x70
 8003e0a:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (hcell_voltage & 0xFF);
 8003e0c:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <oneTimeData+0x36c>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <oneTimeData+0x368>)
 8003e14:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (hcell_voltage >> 8);
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <oneTimeData+0x36c>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <oneTimeData+0x368>)
 8003e22:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	2208      	movs	r2, #8
 8003e2a:	4914      	ldr	r1, [pc, #80]	; (8003e7c <oneTimeData+0x368>)
 8003e2c:	4815      	ldr	r0, [pc, #84]	; (8003e84 <oneTimeData+0x370>)
 8003e2e:	f003 fa10 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003e32:	e015      	b.n	8003e60 <oneTimeData+0x34c>
		case 7:  //SOH Battery Health
			strDATA[4] = 0x11;
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <oneTimeData+0x368>)
 8003e36:	2211      	movs	r2, #17
 8003e38:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x66;
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <oneTimeData+0x368>)
 8003e3c:	2266      	movs	r2, #102	; 0x66
 8003e3e:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (soh_value);
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <oneTimeData+0x374>)
 8003e42:	781a      	ldrb	r2, [r3, #0]
 8003e44:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <oneTimeData+0x368>)
 8003e46:	71da      	strb	r2, [r3, #7]
			strDATA[6] = 0;
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <oneTimeData+0x368>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e52:	2208      	movs	r2, #8
 8003e54:	4909      	ldr	r1, [pc, #36]	; (8003e7c <oneTimeData+0x368>)
 8003e56:	480b      	ldr	r0, [pc, #44]	; (8003e84 <oneTimeData+0x370>)
 8003e58:	f003 f9fb 	bl	8007252 <HAL_UART_Transmit>
			;
			break;
 8003e5c:	e000      	b.n	8003e60 <oneTimeData+0x34c>

		default:
			break;
 8003e5e:	bf00      	nop
		}

		transferCount++;
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <oneTimeData+0x378>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3301      	adds	r3, #1
 8003e66:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <oneTimeData+0x378>)
 8003e68:	6013      	str	r3, [r2, #0]
		if (transferCount >= 8) {
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <oneTimeData+0x378>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b07      	cmp	r3, #7
 8003e70:	d902      	bls.n	8003e78 <oneTimeData+0x364>
			transferCount = 1;
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <oneTimeData+0x378>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000414 	.word	0x20000414
 8003e80:	20000458 	.word	0x20000458
 8003e84:	2000059c 	.word	0x2000059c
 8003e88:	20000455 	.word	0x20000455
 8003e8c:	20000008 	.word	0x20000008

08003e90 <gearUpdate>:

void gearUpdate(void) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <gearUpdate+0x70>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d106      	bne.n	8003eaa <gearUpdate+0x1a>
		Gear_Neutral_Icon;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4918      	ldr	r1, [pc, #96]	; (8003f04 <gearUpdate+0x74>)
 8003ea4:	4818      	ldr	r0, [pc, #96]	; (8003f08 <gearUpdate+0x78>)
 8003ea6:	f003 f9d4 	bl	8007252 <HAL_UART_Transmit>
	}

	if (currentstate == 2) {
 8003eaa:	4b15      	ldr	r3, [pc, #84]	; (8003f00 <gearUpdate+0x70>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d106      	bne.n	8003ec0 <gearUpdate+0x30>
		Gear_Drive_Icon;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	4914      	ldr	r1, [pc, #80]	; (8003f0c <gearUpdate+0x7c>)
 8003eba:	4813      	ldr	r0, [pc, #76]	; (8003f08 <gearUpdate+0x78>)
 8003ebc:	f003 f9c9 	bl	8007252 <HAL_UART_Transmit>
	}

	if (currentstate == 3) {
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <gearUpdate+0x70>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d106      	bne.n	8003ed6 <gearUpdate+0x46>
		Gear_Reverse_Icon;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4910      	ldr	r1, [pc, #64]	; (8003f10 <gearUpdate+0x80>)
 8003ed0:	480d      	ldr	r0, [pc, #52]	; (8003f08 <gearUpdate+0x78>)
 8003ed2:	f003 f9be 	bl	8007252 <HAL_UART_Transmit>
	}
	if (_gearCleared || currentstate == 0) {
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <gearUpdate+0x84>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <gearUpdate+0x56>
 8003ede:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <gearUpdate+0x70>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <gearUpdate+0x6a>
		Gear_Clear_Icon;
 8003ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eea:	2208      	movs	r2, #8
 8003eec:	490a      	ldr	r1, [pc, #40]	; (8003f18 <gearUpdate+0x88>)
 8003eee:	4806      	ldr	r0, [pc, #24]	; (8003f08 <gearUpdate+0x78>)
 8003ef0:	f003 f9af 	bl	8007252 <HAL_UART_Transmit>
		_gearCleared = false;
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <gearUpdate+0x84>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
	}

}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000464 	.word	0x20000464
 8003f04:	200001b8 	.word	0x200001b8
 8003f08:	2000059c 	.word	0x2000059c
 8003f0c:	200001c0 	.word	0x200001c0
 8003f10:	200001b0 	.word	0x200001b0
 8003f14:	200004a2 	.word	0x200004a2
 8003f18:	200001c8 	.word	0x200001c8

08003f1c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <MX_USART3_UART_Init+0x50>)
 8003f24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003f2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003f2e:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f42:	220c      	movs	r2, #12
 8003f44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f46:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <MX_USART3_UART_Init+0x4c>)
 8003f54:	f003 f930 	bl	80071b8 <HAL_UART_Init>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003f5e:	f7fd fae7 	bl	8001530 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000059c 	.word	0x2000059c
 8003f6c:	40004800 	.word	0x40004800

08003f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	609a      	str	r2, [r3, #8]
 8003f84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a34      	ldr	r2, [pc, #208]	; (800405c <HAL_UART_MspInit+0xec>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d160      	bne.n	8004052 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	4a32      	ldr	r2, [pc, #200]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9a:	61d3      	str	r3, [r2, #28]
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003fae:	f043 0308 	orr.w	r3, r3, #8
 8003fb2:	6193      	str	r3, [r2, #24]
 8003fb4:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <HAL_UART_MspInit+0xf0>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4823      	ldr	r0, [pc, #140]	; (8004064 <HAL_UART_MspInit+0xf4>)
 8003fd6:	f001 fd95 	bl	8005b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003fda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe8:	f107 0310 	add.w	r3, r7, #16
 8003fec:	4619      	mov	r1, r3
 8003fee:	481d      	ldr	r0, [pc, #116]	; (8004064 <HAL_UART_MspInit+0xf4>)
 8003ff0:	f001 fd88 	bl	8005b04 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	; (800406c <HAL_UART_MspInit+0xfc>)
 8003ff8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800400c:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_UART_MspInit+0xf8>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004018:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_UART_MspInit+0xf8>)
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8004020:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004024:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004026:	4810      	ldr	r0, [pc, #64]	; (8004068 <HAL_UART_MspInit+0xf8>)
 8004028:	f001 f8ea 	bl	8005200 <HAL_DMA_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004032:	f7fd fa7d 	bl	8001530 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <HAL_UART_MspInit+0xf8>)
 800403a:	635a      	str	r2, [r3, #52]	; 0x34
 800403c:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <HAL_UART_MspInit+0xf8>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	2027      	movs	r0, #39	; 0x27
 8004048:	f001 f8a3 	bl	8005192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800404c:	2027      	movs	r0, #39	; 0x27
 800404e:	f001 f8bc 	bl	80051ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004052:	bf00      	nop
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40004800 	.word	0x40004800
 8004060:	40021000 	.word	0x40021000
 8004064:	40010c00 	.word	0x40010c00
 8004068:	200005e0 	.word	0x200005e0
 800406c:	4002001c 	.word	0x4002001c

08004070 <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <check_ack+0x2c>)
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <check_ack+0x30>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	429a      	cmp	r2, r3
 8004080:	d103      	bne.n	800408a <check_ack+0x1a>
		modeChangeOK = true;
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <check_ack+0x34>)
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e002      	b.n	8004090 <check_ack+0x20>
	} else {
		modeChangeOK = false;
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <check_ack+0x34>)
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 8004090:	4b04      	ldr	r3, [pc, #16]	; (80040a4 <check_ack+0x34>)
 8004092:	781b      	ldrb	r3, [r3, #0]
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	2000046c 	.word	0x2000046c
 80040a0:	20000480 	.word	0x20000480
 80040a4:	2000048d 	.word	0x2000048d

080040a8 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <evcuMode+0x10c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d162      	bne.n	800417a <evcuMode+0xd2>
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <evcuMode+0x110>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05e      	beq.n	800417a <evcuMode+0xd2>
		if (currentMode == ecoMode) {
 80040bc:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <evcuMode+0x114>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d117      	bne.n	80040f6 <evcuMode+0x4e>
			//Set Normal Mode
			targetMode = normalMode;
 80040c6:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <evcuMode+0x118>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 80040cc:	f7ff ffd0 	bl	8004070 <check_ack>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d051      	beq.n	800417a <evcuMode+0xd2>
				currentMode = normalMode;
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <evcuMode+0x114>)
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
				mode = false;
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <evcuMode+0x110>)
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
				modeMenu = true;
 80040e2:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <evcuMode+0x11c>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
				_modeSelection = true;
 80040e8:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <evcuMode+0x120>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <evcuMode+0x124>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e041      	b.n	800417a <evcuMode+0xd2>
			}
		} else if (currentMode == normalMode) {
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <evcuMode+0x114>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11a      	bne.n	8004136 <evcuMode+0x8e>
			//Set Sports Mode
			targetMode = sportMode;
 8004100:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <evcuMode+0x118>)
 8004102:	2203      	movs	r2, #3
 8004104:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004106:	f7ff ffb3 	bl	8004070 <check_ack>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d034      	beq.n	800417a <evcuMode+0xd2>
				currentMode = sportMode;
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <evcuMode+0x114>)
 8004112:	2203      	movs	r2, #3
 8004114:	701a      	strb	r2, [r3, #0]
				modeMenu = true;
 8004116:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <evcuMode+0x11c>)
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
				_modeSelection = true;
 800411c:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <evcuMode+0x120>)
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004122:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <evcuMode+0x110>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004128:	4b28      	ldr	r3, [pc, #160]	; (80041cc <evcuMode+0x124>)
 800412a:	2200      	movs	r2, #0
 800412c:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 800412e:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <evcuMode+0x128>)
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e021      	b.n	800417a <evcuMode+0xd2>
			}
		} else if (currentMode == sportMode) {
 8004136:	4b21      	ldr	r3, [pc, #132]	; (80041bc <evcuMode+0x114>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b03      	cmp	r3, #3
 800413e:	d11c      	bne.n	800417a <evcuMode+0xd2>
			//Set Eco Mode
			targetMode = ecoMode;
 8004140:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <evcuMode+0x118>)
 8004142:	2202      	movs	r2, #2
 8004144:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004146:	f7ff ff93 	bl	8004070 <check_ack>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d014      	beq.n	800417a <evcuMode+0xd2>
				currentMode = ecoMode;
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <evcuMode+0x114>)
 8004152:	2202      	movs	r2, #2
 8004154:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <evcuMode+0x110>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
				modeMenu = true;
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <evcuMode+0x11c>)
 800415e:	2201      	movs	r2, #1
 8004160:	701a      	strb	r2, [r3, #0]
				_modeSelection = true;
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <evcuMode+0x120>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <evcuMode+0x124>)
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <evcuMode+0x128>)
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 8004174:	4b11      	ldr	r3, [pc, #68]	; (80041bc <evcuMode+0x114>)
 8004176:	2202      	movs	r2, #2
 8004178:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <evcuMode+0x10c>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d115      	bne.n	80041ae <evcuMode+0x106>
		currentMode = ecoMode;
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <evcuMode+0x114>)
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 8004188:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <evcuMode+0x118>)
 800418a:	2202      	movs	r2, #2
 800418c:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <evcuMode+0x110>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00b      	beq.n	80041ae <evcuMode+0x106>
			mode = false;
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <evcuMode+0x110>)
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
			_modeSelection = true;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <evcuMode+0x120>)
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]
			modeMenu = true;
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <evcuMode+0x11c>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
			rtn = false;
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <evcuMode+0x124>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000046b 	.word	0x2000046b
 80041b8:	2000040d 	.word	0x2000040d
 80041bc:	2000047f 	.word	0x2000047f
 80041c0:	20000480 	.word	0x20000480
 80041c4:	2000048e 	.word	0x2000048e
 80041c8:	20000498 	.word	0x20000498
 80041cc:	20000479 	.word	0x20000479
 80041d0:	2000048d 	.word	0x2000048d

080041d4 <trip_reset>:

void trip_reset(void){
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <trip_reset+0x1c>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <trip_reset+0x12>
		tripreset = false;
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <trip_reset+0x20>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000046a 	.word	0x2000046a
 80041f4:	2000040b 	.word	0x2000040b

080041f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041f8:	480c      	ldr	r0, [pc, #48]	; (800422c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041fa:	490d      	ldr	r1, [pc, #52]	; (8004230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041fc:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004200:	e002      	b.n	8004208 <LoopCopyDataInit>

08004202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004206:	3304      	adds	r3, #4

08004208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800420a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800420c:	d3f9      	bcc.n	8004202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004210:	4c0a      	ldr	r4, [pc, #40]	; (800423c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004214:	e001      	b.n	800421a <LoopFillZerobss>

08004216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004218:	3204      	adds	r2, #4

0800421a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800421a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800421c:	d3fb      	bcc.n	8004216 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800421e:	f7fe f973 	bl	8002508 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004222:	f003 fd9b 	bl	8007d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004226:	f7fc ffcd 	bl	80011c4 <main>
  bx lr
 800422a:	4770      	bx	lr
  ldr r0, =_sdata
 800422c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004230:	200003b8 	.word	0x200003b8
  ldr r2, =_sidata
 8004234:	08007e14 	.word	0x08007e14
  ldr r2, =_sbss
 8004238:	200003b8 	.word	0x200003b8
  ldr r4, =_ebss
 800423c:	20000628 	.word	0x20000628

08004240 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004240:	e7fe      	b.n	8004240 <ADC1_2_IRQHandler>
	...

08004244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_Init+0x28>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_Init+0x28>)
 800424e:	f043 0310 	orr.w	r3, r3, #16
 8004252:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004254:	2003      	movs	r0, #3
 8004256:	f000 ff91 	bl	800517c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800425a:	200f      	movs	r0, #15
 800425c:	f000 f808 	bl	8004270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004260:	f7fe f8b2 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40022000 	.word	0x40022000

08004270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_InitTick+0x54>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_InitTick+0x58>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4619      	mov	r1, r3
 8004282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004286:	fbb3 f3f1 	udiv	r3, r3, r1
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	4618      	mov	r0, r3
 8004290:	f000 ffa9 	bl	80051e6 <HAL_SYSTICK_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e00e      	b.n	80042bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d80a      	bhi.n	80042ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042a4:	2200      	movs	r2, #0
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	f000 ff71 	bl	8005192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042b0:	4a06      	ldr	r2, [pc, #24]	; (80042cc <HAL_InitTick+0x5c>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000020 	.word	0x20000020
 80042c8:	200003b4 	.word	0x200003b4
 80042cc:	200003b0 	.word	0x200003b0

080042d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_IncTick+0x1c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_IncTick+0x20>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4413      	add	r3, r2
 80042e0:	4a03      	ldr	r2, [pc, #12]	; (80042f0 <HAL_IncTick+0x20>)
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	200003b4 	.word	0x200003b4
 80042f0:	20000624 	.word	0x20000624

080042f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return uwTick;
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <HAL_GetTick+0x10>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	20000624 	.word	0x20000624

08004308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7ff fff0 	bl	80042f4 <HAL_GetTick>
 8004314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d005      	beq.n	800432e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_Delay+0x44>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800432e:	bf00      	nop
 8004330:	f7ff ffe0 	bl	80042f4 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d8f7      	bhi.n	8004330 <HAL_Delay+0x28>
  {
  }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200003b4 	.word	0x200003b4

08004350 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0ed      	b.n	800453e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc f92e 	bl	80005d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004384:	f7ff ffb6 	bl	80042f4 <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800438a:	e012      	b.n	80043b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800438c:	f7ff ffb2 	bl	80042f4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b0a      	cmp	r3, #10
 8004398:	d90b      	bls.n	80043b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2205      	movs	r2, #5
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0c5      	b.n	800453e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0e5      	beq.n	800438c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0202 	bic.w	r2, r2, #2
 80043ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043d0:	f7ff ff90 	bl	80042f4 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043d6:	e012      	b.n	80043fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80043d8:	f7ff ff8c 	bl	80042f4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b0a      	cmp	r3, #10
 80043e4:	d90b      	bls.n	80043fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2205      	movs	r2, #5
 80043f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e09f      	b.n	800453e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e1b      	ldrb	r3, [r3, #24]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d108      	bne.n	8004426 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e007      	b.n	8004436 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	7e5b      	ldrb	r3, [r3, #25]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d108      	bne.n	8004450 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e007      	b.n	8004460 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7e9b      	ldrb	r3, [r3, #26]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d108      	bne.n	800447a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0220 	orr.w	r2, r2, #32
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e007      	b.n	800448a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0220 	bic.w	r2, r2, #32
 8004488:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7edb      	ldrb	r3, [r3, #27]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d108      	bne.n	80044a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0210 	bic.w	r2, r2, #16
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e007      	b.n	80044b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0210 	orr.w	r2, r2, #16
 80044b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	7f1b      	ldrb	r3, [r3, #28]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0208 	orr.w	r2, r2, #8
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e007      	b.n	80044de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0208 	bic.w	r2, r2, #8
 80044dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7f5b      	ldrb	r3, [r3, #29]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d108      	bne.n	80044f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0204 	orr.w	r2, r2, #4
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	e007      	b.n	8004508 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	ea42 0103 	orr.w	r1, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	1e5a      	subs	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800455e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d003      	beq.n	800456e <HAL_CAN_ConfigFilter+0x26>
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b02      	cmp	r3, #2
 800456a:	f040 80be 	bne.w	80046ea <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <HAL_CAN_ConfigFilter+0x1bc>)
 8004570:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004588:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	021b      	lsls	r3, r3, #8
 800459e:	431a      	orrs	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2201      	movs	r2, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	43db      	mvns	r3, r3
 80045c0:	401a      	ands	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d123      	bne.n	8004618 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	43db      	mvns	r3, r3
 80045da:	401a      	ands	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80045f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3248      	adds	r2, #72	; 0x48
 80045f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800460c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	3348      	adds	r3, #72	; 0x48
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	440b      	add	r3, r1
 8004616:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d122      	bne.n	8004666 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	431a      	orrs	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004640:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3248      	adds	r2, #72	; 0x48
 8004646:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800465a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800465c:	6979      	ldr	r1, [r7, #20]
 800465e:	3348      	adds	r3, #72	; 0x48
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	440b      	add	r3, r1
 8004664:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43db      	mvns	r3, r3
 8004678:	401a      	ands	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004680:	e007      	b.n	8004692 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	431a      	orrs	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d109      	bne.n	80046ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	401a      	ands	r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80046ac:	e007      	b.n	80046be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046dc:	f023 0201 	bic.w	r2, r3, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	e006      	b.n	80046f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40006400 	.word	0x40006400

08004708 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d12e      	bne.n	800477a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004734:	f7ff fdde 	bl	80042f4 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800473a:	e012      	b.n	8004762 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800473c:	f7ff fdda 	bl	80042f4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b0a      	cmp	r3, #10
 8004748:	d90b      	bls.n	8004762 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2205      	movs	r2, #5
 800475a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e012      	b.n	8004788 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e5      	bne.n	800473c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	e006      	b.n	8004788 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d003      	beq.n	80047bc <HAL_CAN_AddTxMessage+0x2c>
 80047b4:	7ffb      	ldrb	r3, [r7, #31]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	f040 80b8 	bne.w	800492c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d105      	bne.n	80047dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80a0 	beq.w	800491c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	0e1b      	lsrs	r3, r3, #24
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d907      	bls.n	80047fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09e      	b.n	800493a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80047fc:	2201      	movs	r2, #1
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	409a      	lsls	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10d      	bne.n	800482a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	6809      	ldr	r1, [r1, #0]
 800481c:	431a      	orrs	r2, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	3318      	adds	r3, #24
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	440b      	add	r3, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e00f      	b.n	800484a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004834:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800483e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3318      	adds	r3, #24
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	440b      	add	r3, r1
 8004848:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3318      	adds	r3, #24
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	440b      	add	r3, r1
 800485a:	3304      	adds	r3, #4
 800485c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	7d1b      	ldrb	r3, [r3, #20]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d111      	bne.n	800488a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	3318      	adds	r3, #24
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4413      	add	r3, r2
 8004872:	3304      	adds	r3, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	6811      	ldr	r1, [r2, #0]
 800487a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	3318      	adds	r3, #24
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	440b      	add	r3, r1
 8004886:	3304      	adds	r3, #4
 8004888:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3307      	adds	r3, #7
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	061a      	lsls	r2, r3, #24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3306      	adds	r3, #6
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3305      	adds	r3, #5
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	4313      	orrs	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	3204      	adds	r2, #4
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	4610      	mov	r0, r2
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6811      	ldr	r1, [r2, #0]
 80048b2:	ea43 0200 	orr.w	r2, r3, r0
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	440b      	add	r3, r1
 80048bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80048c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3303      	adds	r3, #3
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	061a      	lsls	r2, r3, #24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3302      	adds	r3, #2
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	041b      	lsls	r3, r3, #16
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3301      	adds	r3, #1
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	4313      	orrs	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	7812      	ldrb	r2, [r2, #0]
 80048e2:	4610      	mov	r0, r2
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6811      	ldr	r1, [r2, #0]
 80048e8:	ea43 0200 	orr.w	r2, r3, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	440b      	add	r3, r1
 80048f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80048f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3318      	adds	r3, #24
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	4413      	add	r3, r2
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	6811      	ldr	r1, [r2, #0]
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	3318      	adds	r3, #24
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	440b      	add	r3, r1
 8004916:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004918:	2300      	movs	r3, #0
 800491a:	e00e      	b.n	800493a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e006      	b.n	800493a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	; 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004958:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800495a:	7dfb      	ldrb	r3, [r7, #23]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d003      	beq.n	8004968 <HAL_CAN_GetRxMessage+0x24>
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b02      	cmp	r3, #2
 8004964:	f040 80f3 	bne.w	8004b4e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10e      	bne.n	800498c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d116      	bne.n	80049aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0e7      	b.n	8004b5c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d107      	bne.n	80049aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0d8      	b.n	8004b5c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	331b      	adds	r3, #27
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	4413      	add	r3, r2
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0204 	and.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10c      	bne.n	80049e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	331b      	adds	r3, #27
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	4413      	add	r3, r2
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	0d5b      	lsrs	r3, r3, #21
 80049d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	e00b      	b.n	80049fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	331b      	adds	r3, #27
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	08db      	lsrs	r3, r3, #3
 80049f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	331b      	adds	r3, #27
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	4413      	add	r3, r2
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0202 	and.w	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	331b      	adds	r3, #27
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	331b      	adds	r3, #27
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	4413      	add	r3, r2
 8004a34:	3304      	adds	r3, #4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	331b      	adds	r3, #27
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	0a1a      	lsrs	r2, r3, #8
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0c1a      	lsrs	r2, r3, #16
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	0e1a      	lsrs	r2, r3, #24
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3303      	adds	r3, #3
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0a1a      	lsrs	r2, r3, #8
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3305      	adds	r3, #5
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	0c1a      	lsrs	r2, r3, #16
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	3306      	adds	r3, #6
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	0e1a      	lsrs	r2, r3, #24
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	3307      	adds	r3, #7
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d108      	bne.n	8004b3a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0220 	orr.w	r2, r2, #32
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	e007      	b.n	8004b4a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0220 	orr.w	r2, r2, #32
 8004b48:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e006      	b.n	8004b5c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	371c      	adds	r7, #28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d002      	beq.n	8004b84 <HAL_CAN_ActivateNotification+0x1e>
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d109      	bne.n	8004b98 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6959      	ldr	r1, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e006      	b.n	8004ba6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
  }
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d07c      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d023      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f983 	bl	8004f1e <HAL_CAN_TxMailbox0CompleteCallback>
 8004c18:	e016      	b.n	8004c48 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d004      	beq.n	8004c2e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2c:	e00c      	b.n	8004c48 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	e002      	b.n	8004c48 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f986 	bl	8004f54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d024      	beq.n	8004c9c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f962 	bl	8004f30 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c6c:	e016      	b.n	8004c9c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d004      	beq.n	8004c82 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	e00c      	b.n	8004c9c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
 8004c94:	e002      	b.n	8004c9c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f965 	bl	8004f66 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d024      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004cae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f941 	bl	8004f42 <HAL_CAN_TxMailbox2CompleteCallback>
 8004cc0:	e016      	b.n	8004cf0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	e00c      	b.n	8004cf0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce8:	e002      	b.n	8004cf0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f944 	bl	8004f78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2210      	movs	r2, #16
 8004d12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f92a 	bl	8004f8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fb3a 	bl	80013c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2210      	movs	r2, #16
 8004d76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d006      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2208      	movs	r2, #8
 8004d92:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f901 	bl	8004f9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d009      	beq.n	8004db8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc fb4a 	bl	800144c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00b      	beq.n	8004dda <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d006      	beq.n	8004dda <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8ea 	bl	8004fae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f8e2 	bl	8004fc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d07b      	beq.n	8004efe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d072      	beq.n	8004ef6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	f043 0302 	orr.w	r3, r3, #2
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e64:	6a3b      	ldr	r3, [r7, #32]
 8004e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d043      	beq.n	8004ef6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03e      	beq.n	8004ef6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e7e:	2b60      	cmp	r3, #96	; 0x60
 8004e80:	d02b      	beq.n	8004eda <HAL_CAN_IRQHandler+0x32a>
 8004e82:	2b60      	cmp	r3, #96	; 0x60
 8004e84:	d82e      	bhi.n	8004ee4 <HAL_CAN_IRQHandler+0x334>
 8004e86:	2b50      	cmp	r3, #80	; 0x50
 8004e88:	d022      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x320>
 8004e8a:	2b50      	cmp	r3, #80	; 0x50
 8004e8c:	d82a      	bhi.n	8004ee4 <HAL_CAN_IRQHandler+0x334>
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d019      	beq.n	8004ec6 <HAL_CAN_IRQHandler+0x316>
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d826      	bhi.n	8004ee4 <HAL_CAN_IRQHandler+0x334>
 8004e96:	2b30      	cmp	r3, #48	; 0x30
 8004e98:	d010      	beq.n	8004ebc <HAL_CAN_IRQHandler+0x30c>
 8004e9a:	2b30      	cmp	r3, #48	; 0x30
 8004e9c:	d822      	bhi.n	8004ee4 <HAL_CAN_IRQHandler+0x334>
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d002      	beq.n	8004ea8 <HAL_CAN_IRQHandler+0x2f8>
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d005      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004ea6:	e01d      	b.n	8004ee4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	f043 0308 	orr.w	r3, r3, #8
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb0:	e019      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	f043 0310 	orr.w	r3, r3, #16
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eba:	e014      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	f043 0320 	orr.w	r3, r3, #32
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ec4:	e00f      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ece:	e00a      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ee2:	e000      	b.n	8004ee6 <HAL_CAN_IRQHandler+0x336>
            break;
 8004ee4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ef4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2204      	movs	r2, #4
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f85e 	bl	8004fd2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004f16:	bf00      	nop
 8004f18:	3728      	adds	r7, #40	; 0x28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr

08004fae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005000:	4013      	ands	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800500c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005016:	4a04      	ldr	r2, [pc, #16]	; (8005028 <__NVIC_SetPriorityGrouping+0x44>)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	60d3      	str	r3, [r2, #12]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	bc80      	pop	{r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <__NVIC_GetPriorityGrouping+0x18>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	f003 0307 	and.w	r3, r3, #7
}
 800503a:	4618      	mov	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	2b00      	cmp	r3, #0
 8005058:	db0b      	blt.n	8005072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	f003 021f 	and.w	r2, r3, #31
 8005060:	4906      	ldr	r1, [pc, #24]	; (800507c <__NVIC_EnableIRQ+0x34>)
 8005062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2001      	movs	r0, #1
 800506a:	fa00 f202 	lsl.w	r2, r0, r2
 800506e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	e000e100 	.word	0xe000e100

08005080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	6039      	str	r1, [r7, #0]
 800508a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db0a      	blt.n	80050aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	490c      	ldr	r1, [pc, #48]	; (80050cc <__NVIC_SetPriority+0x4c>)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	0112      	lsls	r2, r2, #4
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050a8:	e00a      	b.n	80050c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4908      	ldr	r1, [pc, #32]	; (80050d0 <__NVIC_SetPriority+0x50>)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	440b      	add	r3, r1
 80050be:	761a      	strb	r2, [r3, #24]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f1c3 0307 	rsb	r3, r3, #7
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	bf28      	it	cs
 80050f2:	2304      	movcs	r3, #4
 80050f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d902      	bls.n	8005104 <NVIC_EncodePriority+0x30>
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3b03      	subs	r3, #3
 8005102:	e000      	b.n	8005106 <NVIC_EncodePriority+0x32>
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	f04f 32ff 	mov.w	r2, #4294967295
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	401a      	ands	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511c:	f04f 31ff 	mov.w	r1, #4294967295
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	43d9      	mvns	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	4313      	orrs	r3, r2
         );
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3b01      	subs	r3, #1
 8005144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005148:	d301      	bcc.n	800514e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800514a:	2301      	movs	r3, #1
 800514c:	e00f      	b.n	800516e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800514e:	4a0a      	ldr	r2, [pc, #40]	; (8005178 <SysTick_Config+0x40>)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3b01      	subs	r3, #1
 8005154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005156:	210f      	movs	r1, #15
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	f7ff ff90 	bl	8005080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005160:	4b05      	ldr	r3, [pc, #20]	; (8005178 <SysTick_Config+0x40>)
 8005162:	2200      	movs	r2, #0
 8005164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <SysTick_Config+0x40>)
 8005168:	2207      	movs	r2, #7
 800516a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	e000e010 	.word	0xe000e010

0800517c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff ff2d 	bl	8004fe4 <__NVIC_SetPriorityGrouping>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051a4:	f7ff ff42 	bl	800502c <__NVIC_GetPriorityGrouping>
 80051a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f7ff ff90 	bl	80050d4 <NVIC_EncodePriority>
 80051b4:	4602      	mov	r2, r0
 80051b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ff5f 	bl	8005080 <__NVIC_SetPriority>
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4603      	mov	r3, r0
 80051d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff ff35 	bl	8005048 <__NVIC_EnableIRQ>
}
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7ff ffa2 	bl	8005138 <SysTick_Config>
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e059      	b.n	80052ca <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	4b2d      	ldr	r3, [pc, #180]	; (80052d4 <HAL_DMA_Init+0xd4>)
 800521e:	429a      	cmp	r2, r3
 8005220:	d80f      	bhi.n	8005242 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <HAL_DMA_Init+0xd8>)
 800522a:	4413      	add	r3, r2
 800522c:	4a2b      	ldr	r2, [pc, #172]	; (80052dc <HAL_DMA_Init+0xdc>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	009a      	lsls	r2, r3, #2
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_DMA_Init+0xe0>)
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005240:	e00e      	b.n	8005260 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <HAL_DMA_Init+0xe4>)
 800524a:	4413      	add	r3, r2
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <HAL_DMA_Init+0xdc>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	009a      	lsls	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_DMA_Init+0xe8>)
 800525e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005276:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800527a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800529c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	40020407 	.word	0x40020407
 80052d8:	bffdfff8 	.word	0xbffdfff8
 80052dc:	cccccccd 	.word	0xcccccccd
 80052e0:	40020000 	.word	0x40020000
 80052e4:	bffdfbf8 	.word	0xbffdfbf8
 80052e8:	40020400 	.word	0x40020400

080052ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_DMA_Start_IT+0x20>
 8005308:	2302      	movs	r3, #2
 800530a:	e04a      	b.n	80053a2 <HAL_DMA_Start_IT+0xb6>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800531a:	2b01      	cmp	r3, #1
 800531c:	d13a      	bne.n	8005394 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fbb0 	bl	8005aa8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 020e 	orr.w	r2, r2, #14
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e00f      	b.n	8005382 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0204 	bic.w	r2, r2, #4
 8005370:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 020a 	orr.w	r2, r2, #10
 8005380:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e005      	b.n	80053a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800539c:	2302      	movs	r3, #2
 800539e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d008      	beq.n	80053d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2204      	movs	r2, #4
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e020      	b.n	8005414 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 020e 	bic.w	r2, r2, #14
 80053e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr
	...

08005420 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005432:	2b02      	cmp	r3, #2
 8005434:	d005      	beq.n	8005442 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2204      	movs	r2, #4
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e0d6      	b.n	80055f0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 020e 	bic.w	r2, r2, #14
 8005450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	4b64      	ldr	r3, [pc, #400]	; (80055fc <HAL_DMA_Abort_IT+0x1dc>)
 800546a:	429a      	cmp	r2, r3
 800546c:	d958      	bls.n	8005520 <HAL_DMA_Abort_IT+0x100>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a63      	ldr	r2, [pc, #396]	; (8005600 <HAL_DMA_Abort_IT+0x1e0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d04f      	beq.n	8005518 <HAL_DMA_Abort_IT+0xf8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a61      	ldr	r2, [pc, #388]	; (8005604 <HAL_DMA_Abort_IT+0x1e4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d048      	beq.n	8005514 <HAL_DMA_Abort_IT+0xf4>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a60      	ldr	r2, [pc, #384]	; (8005608 <HAL_DMA_Abort_IT+0x1e8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d040      	beq.n	800550e <HAL_DMA_Abort_IT+0xee>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a5e      	ldr	r2, [pc, #376]	; (800560c <HAL_DMA_Abort_IT+0x1ec>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d038      	beq.n	8005508 <HAL_DMA_Abort_IT+0xe8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a5d      	ldr	r2, [pc, #372]	; (8005610 <HAL_DMA_Abort_IT+0x1f0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d030      	beq.n	8005502 <HAL_DMA_Abort_IT+0xe2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a5b      	ldr	r2, [pc, #364]	; (8005614 <HAL_DMA_Abort_IT+0x1f4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d028      	beq.n	80054fc <HAL_DMA_Abort_IT+0xdc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a53      	ldr	r2, [pc, #332]	; (80055fc <HAL_DMA_Abort_IT+0x1dc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d020      	beq.n	80054f6 <HAL_DMA_Abort_IT+0xd6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a57      	ldr	r2, [pc, #348]	; (8005618 <HAL_DMA_Abort_IT+0x1f8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d019      	beq.n	80054f2 <HAL_DMA_Abort_IT+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a56      	ldr	r2, [pc, #344]	; (800561c <HAL_DMA_Abort_IT+0x1fc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d012      	beq.n	80054ee <HAL_DMA_Abort_IT+0xce>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a54      	ldr	r2, [pc, #336]	; (8005620 <HAL_DMA_Abort_IT+0x200>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00a      	beq.n	80054e8 <HAL_DMA_Abort_IT+0xc8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a53      	ldr	r2, [pc, #332]	; (8005624 <HAL_DMA_Abort_IT+0x204>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d102      	bne.n	80054e2 <HAL_DMA_Abort_IT+0xc2>
 80054dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e0:	e01b      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 80054e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054e6:	e018      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 80054e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054ec:	e015      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 80054ee:	2310      	movs	r3, #16
 80054f0:	e013      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e011      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 80054f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054fa:	e00e      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 80054fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005500:	e00b      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 8005502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005506:	e008      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 8005508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800550c:	e005      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 800550e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005512:	e002      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 8005514:	2310      	movs	r3, #16
 8005516:	e000      	b.n	800551a <HAL_DMA_Abort_IT+0xfa>
 8005518:	2301      	movs	r3, #1
 800551a:	4a43      	ldr	r2, [pc, #268]	; (8005628 <HAL_DMA_Abort_IT+0x208>)
 800551c:	6053      	str	r3, [r2, #4]
 800551e:	e057      	b.n	80055d0 <HAL_DMA_Abort_IT+0x1b0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a36      	ldr	r2, [pc, #216]	; (8005600 <HAL_DMA_Abort_IT+0x1e0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d04f      	beq.n	80055ca <HAL_DMA_Abort_IT+0x1aa>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a35      	ldr	r2, [pc, #212]	; (8005604 <HAL_DMA_Abort_IT+0x1e4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d048      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x1a6>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a33      	ldr	r2, [pc, #204]	; (8005608 <HAL_DMA_Abort_IT+0x1e8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d040      	beq.n	80055c0 <HAL_DMA_Abort_IT+0x1a0>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a32      	ldr	r2, [pc, #200]	; (800560c <HAL_DMA_Abort_IT+0x1ec>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d038      	beq.n	80055ba <HAL_DMA_Abort_IT+0x19a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a30      	ldr	r2, [pc, #192]	; (8005610 <HAL_DMA_Abort_IT+0x1f0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d030      	beq.n	80055b4 <HAL_DMA_Abort_IT+0x194>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <HAL_DMA_Abort_IT+0x1f4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d028      	beq.n	80055ae <HAL_DMA_Abort_IT+0x18e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a26      	ldr	r2, [pc, #152]	; (80055fc <HAL_DMA_Abort_IT+0x1dc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d020      	beq.n	80055a8 <HAL_DMA_Abort_IT+0x188>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <HAL_DMA_Abort_IT+0x1f8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d019      	beq.n	80055a4 <HAL_DMA_Abort_IT+0x184>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a29      	ldr	r2, [pc, #164]	; (800561c <HAL_DMA_Abort_IT+0x1fc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d012      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x180>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a28      	ldr	r2, [pc, #160]	; (8005620 <HAL_DMA_Abort_IT+0x200>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00a      	beq.n	800559a <HAL_DMA_Abort_IT+0x17a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <HAL_DMA_Abort_IT+0x204>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d102      	bne.n	8005594 <HAL_DMA_Abort_IT+0x174>
 800558e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005592:	e01b      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 8005594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005598:	e018      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 800559a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800559e:	e015      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055a0:	2310      	movs	r3, #16
 80055a2:	e013      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e011      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055ac:	e00e      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80055b2:	e00b      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055b8:	e008      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055be:	e005      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055c4:	e002      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055c6:	2310      	movs	r3, #16
 80055c8:	e000      	b.n	80055cc <HAL_DMA_Abort_IT+0x1ac>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <HAL_DMA_Abort_IT+0x20c>)
 80055ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4798      	blx	r3
    } 
  }
  return status;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40020080 	.word	0x40020080
 8005600:	40020008 	.word	0x40020008
 8005604:	4002001c 	.word	0x4002001c
 8005608:	40020030 	.word	0x40020030
 800560c:	40020044 	.word	0x40020044
 8005610:	40020058 	.word	0x40020058
 8005614:	4002006c 	.word	0x4002006c
 8005618:	40020408 	.word	0x40020408
 800561c:	4002041c 	.word	0x4002041c
 8005620:	40020430 	.word	0x40020430
 8005624:	40020444 	.word	0x40020444
 8005628:	40020400 	.word	0x40020400
 800562c:	40020000 	.word	0x40020000

08005630 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	2204      	movs	r2, #4
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80f1 	beq.w	800583c <HAL_DMA_IRQHandler+0x20c>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80eb 	beq.w	800583c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d107      	bne.n	8005684 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0204 	bic.w	r2, r2, #4
 8005682:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	4b5f      	ldr	r3, [pc, #380]	; (8005808 <HAL_DMA_IRQHandler+0x1d8>)
 800568c:	429a      	cmp	r2, r3
 800568e:	d958      	bls.n	8005742 <HAL_DMA_IRQHandler+0x112>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5d      	ldr	r2, [pc, #372]	; (800580c <HAL_DMA_IRQHandler+0x1dc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d04f      	beq.n	800573a <HAL_DMA_IRQHandler+0x10a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a5c      	ldr	r2, [pc, #368]	; (8005810 <HAL_DMA_IRQHandler+0x1e0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d048      	beq.n	8005736 <HAL_DMA_IRQHandler+0x106>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a5a      	ldr	r2, [pc, #360]	; (8005814 <HAL_DMA_IRQHandler+0x1e4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d040      	beq.n	8005730 <HAL_DMA_IRQHandler+0x100>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a59      	ldr	r2, [pc, #356]	; (8005818 <HAL_DMA_IRQHandler+0x1e8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d038      	beq.n	800572a <HAL_DMA_IRQHandler+0xfa>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a57      	ldr	r2, [pc, #348]	; (800581c <HAL_DMA_IRQHandler+0x1ec>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d030      	beq.n	8005724 <HAL_DMA_IRQHandler+0xf4>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a56      	ldr	r2, [pc, #344]	; (8005820 <HAL_DMA_IRQHandler+0x1f0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d028      	beq.n	800571e <HAL_DMA_IRQHandler+0xee>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a4d      	ldr	r2, [pc, #308]	; (8005808 <HAL_DMA_IRQHandler+0x1d8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d020      	beq.n	8005718 <HAL_DMA_IRQHandler+0xe8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a52      	ldr	r2, [pc, #328]	; (8005824 <HAL_DMA_IRQHandler+0x1f4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d019      	beq.n	8005714 <HAL_DMA_IRQHandler+0xe4>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a50      	ldr	r2, [pc, #320]	; (8005828 <HAL_DMA_IRQHandler+0x1f8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d012      	beq.n	8005710 <HAL_DMA_IRQHandler+0xe0>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4f      	ldr	r2, [pc, #316]	; (800582c <HAL_DMA_IRQHandler+0x1fc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00a      	beq.n	800570a <HAL_DMA_IRQHandler+0xda>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4d      	ldr	r2, [pc, #308]	; (8005830 <HAL_DMA_IRQHandler+0x200>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d102      	bne.n	8005704 <HAL_DMA_IRQHandler+0xd4>
 80056fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005702:	e01b      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005708:	e018      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 800570a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800570e:	e015      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005710:	2340      	movs	r3, #64	; 0x40
 8005712:	e013      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005714:	2304      	movs	r3, #4
 8005716:	e011      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005718:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800571c:	e00e      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 800571e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005722:	e00b      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005724:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005728:	e008      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 800572a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800572e:	e005      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005734:	e002      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 8005736:	2340      	movs	r3, #64	; 0x40
 8005738:	e000      	b.n	800573c <HAL_DMA_IRQHandler+0x10c>
 800573a:	2304      	movs	r3, #4
 800573c:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <HAL_DMA_IRQHandler+0x204>)
 800573e:	6053      	str	r3, [r2, #4]
 8005740:	e057      	b.n	80057f2 <HAL_DMA_IRQHandler+0x1c2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a31      	ldr	r2, [pc, #196]	; (800580c <HAL_DMA_IRQHandler+0x1dc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d04f      	beq.n	80057ec <HAL_DMA_IRQHandler+0x1bc>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a2f      	ldr	r2, [pc, #188]	; (8005810 <HAL_DMA_IRQHandler+0x1e0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d048      	beq.n	80057e8 <HAL_DMA_IRQHandler+0x1b8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <HAL_DMA_IRQHandler+0x1e4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d040      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x1b2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2c      	ldr	r2, [pc, #176]	; (8005818 <HAL_DMA_IRQHandler+0x1e8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d038      	beq.n	80057dc <HAL_DMA_IRQHandler+0x1ac>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2b      	ldr	r2, [pc, #172]	; (800581c <HAL_DMA_IRQHandler+0x1ec>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d030      	beq.n	80057d6 <HAL_DMA_IRQHandler+0x1a6>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a29      	ldr	r2, [pc, #164]	; (8005820 <HAL_DMA_IRQHandler+0x1f0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d028      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x1a0>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a21      	ldr	r2, [pc, #132]	; (8005808 <HAL_DMA_IRQHandler+0x1d8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d020      	beq.n	80057ca <HAL_DMA_IRQHandler+0x19a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_DMA_IRQHandler+0x1f4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d019      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x196>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a24      	ldr	r2, [pc, #144]	; (8005828 <HAL_DMA_IRQHandler+0x1f8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d012      	beq.n	80057c2 <HAL_DMA_IRQHandler+0x192>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_DMA_IRQHandler+0x1fc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00a      	beq.n	80057bc <HAL_DMA_IRQHandler+0x18c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <HAL_DMA_IRQHandler+0x200>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d102      	bne.n	80057b6 <HAL_DMA_IRQHandler+0x186>
 80057b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057b4:	e01b      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057ba:	e018      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057c0:	e015      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057c2:	2340      	movs	r3, #64	; 0x40
 80057c4:	e013      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057c6:	2304      	movs	r3, #4
 80057c8:	e011      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80057ce:	e00e      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057d4:	e00b      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057da:	e008      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057e0:	e005      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e6:	e002      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057e8:	2340      	movs	r3, #64	; 0x40
 80057ea:	e000      	b.n	80057ee <HAL_DMA_IRQHandler+0x1be>
 80057ec:	2304      	movs	r3, #4
 80057ee:	4a12      	ldr	r2, [pc, #72]	; (8005838 <HAL_DMA_IRQHandler+0x208>)
 80057f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8136 	beq.w	8005a68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005804:	e130      	b.n	8005a68 <HAL_DMA_IRQHandler+0x438>
 8005806:	bf00      	nop
 8005808:	40020080 	.word	0x40020080
 800580c:	40020008 	.word	0x40020008
 8005810:	4002001c 	.word	0x4002001c
 8005814:	40020030 	.word	0x40020030
 8005818:	40020044 	.word	0x40020044
 800581c:	40020058 	.word	0x40020058
 8005820:	4002006c 	.word	0x4002006c
 8005824:	40020408 	.word	0x40020408
 8005828:	4002041c 	.word	0x4002041c
 800582c:	40020430 	.word	0x40020430
 8005830:	40020444 	.word	0x40020444
 8005834:	40020400 	.word	0x40020400
 8005838:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	2202      	movs	r2, #2
 8005842:	409a      	lsls	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80dd 	beq.w	8005a08 <HAL_DMA_IRQHandler+0x3d8>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 80d7 	beq.w	8005a08 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 020a 	bic.w	r2, r2, #10
 8005876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	4b7b      	ldr	r3, [pc, #492]	; (8005a74 <HAL_DMA_IRQHandler+0x444>)
 8005888:	429a      	cmp	r2, r3
 800588a:	d958      	bls.n	800593e <HAL_DMA_IRQHandler+0x30e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a79      	ldr	r2, [pc, #484]	; (8005a78 <HAL_DMA_IRQHandler+0x448>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d04f      	beq.n	8005936 <HAL_DMA_IRQHandler+0x306>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a78      	ldr	r2, [pc, #480]	; (8005a7c <HAL_DMA_IRQHandler+0x44c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d048      	beq.n	8005932 <HAL_DMA_IRQHandler+0x302>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a76      	ldr	r2, [pc, #472]	; (8005a80 <HAL_DMA_IRQHandler+0x450>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d040      	beq.n	800592c <HAL_DMA_IRQHandler+0x2fc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a75      	ldr	r2, [pc, #468]	; (8005a84 <HAL_DMA_IRQHandler+0x454>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d038      	beq.n	8005926 <HAL_DMA_IRQHandler+0x2f6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a73      	ldr	r2, [pc, #460]	; (8005a88 <HAL_DMA_IRQHandler+0x458>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d030      	beq.n	8005920 <HAL_DMA_IRQHandler+0x2f0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <HAL_DMA_IRQHandler+0x45c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d028      	beq.n	800591a <HAL_DMA_IRQHandler+0x2ea>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a69      	ldr	r2, [pc, #420]	; (8005a74 <HAL_DMA_IRQHandler+0x444>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d020      	beq.n	8005914 <HAL_DMA_IRQHandler+0x2e4>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6e      	ldr	r2, [pc, #440]	; (8005a90 <HAL_DMA_IRQHandler+0x460>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d019      	beq.n	8005910 <HAL_DMA_IRQHandler+0x2e0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a6c      	ldr	r2, [pc, #432]	; (8005a94 <HAL_DMA_IRQHandler+0x464>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d012      	beq.n	800590c <HAL_DMA_IRQHandler+0x2dc>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a6b      	ldr	r2, [pc, #428]	; (8005a98 <HAL_DMA_IRQHandler+0x468>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00a      	beq.n	8005906 <HAL_DMA_IRQHandler+0x2d6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a69      	ldr	r2, [pc, #420]	; (8005a9c <HAL_DMA_IRQHandler+0x46c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d102      	bne.n	8005900 <HAL_DMA_IRQHandler+0x2d0>
 80058fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058fe:	e01b      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005900:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005904:	e018      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800590a:	e015      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 800590c:	2320      	movs	r3, #32
 800590e:	e013      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005910:	2302      	movs	r3, #2
 8005912:	e011      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005914:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005918:	e00e      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 800591a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800591e:	e00b      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005924:	e008      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800592a:	e005      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 800592c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005930:	e002      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005932:	2320      	movs	r3, #32
 8005934:	e000      	b.n	8005938 <HAL_DMA_IRQHandler+0x308>
 8005936:	2302      	movs	r3, #2
 8005938:	4a59      	ldr	r2, [pc, #356]	; (8005aa0 <HAL_DMA_IRQHandler+0x470>)
 800593a:	6053      	str	r3, [r2, #4]
 800593c:	e057      	b.n	80059ee <HAL_DMA_IRQHandler+0x3be>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a4d      	ldr	r2, [pc, #308]	; (8005a78 <HAL_DMA_IRQHandler+0x448>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04f      	beq.n	80059e8 <HAL_DMA_IRQHandler+0x3b8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a4b      	ldr	r2, [pc, #300]	; (8005a7c <HAL_DMA_IRQHandler+0x44c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d048      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x3b4>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a4a      	ldr	r2, [pc, #296]	; (8005a80 <HAL_DMA_IRQHandler+0x450>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d040      	beq.n	80059de <HAL_DMA_IRQHandler+0x3ae>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a48      	ldr	r2, [pc, #288]	; (8005a84 <HAL_DMA_IRQHandler+0x454>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d038      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x3a8>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a47      	ldr	r2, [pc, #284]	; (8005a88 <HAL_DMA_IRQHandler+0x458>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d030      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x3a2>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a45      	ldr	r2, [pc, #276]	; (8005a8c <HAL_DMA_IRQHandler+0x45c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d028      	beq.n	80059cc <HAL_DMA_IRQHandler+0x39c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a3d      	ldr	r2, [pc, #244]	; (8005a74 <HAL_DMA_IRQHandler+0x444>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d020      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x396>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a41      	ldr	r2, [pc, #260]	; (8005a90 <HAL_DMA_IRQHandler+0x460>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d019      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x392>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a40      	ldr	r2, [pc, #256]	; (8005a94 <HAL_DMA_IRQHandler+0x464>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d012      	beq.n	80059be <HAL_DMA_IRQHandler+0x38e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a3e      	ldr	r2, [pc, #248]	; (8005a98 <HAL_DMA_IRQHandler+0x468>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00a      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x388>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a3d      	ldr	r2, [pc, #244]	; (8005a9c <HAL_DMA_IRQHandler+0x46c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d102      	bne.n	80059b2 <HAL_DMA_IRQHandler+0x382>
 80059ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059b0:	e01b      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059b6:	e018      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059bc:	e015      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059be:	2320      	movs	r3, #32
 80059c0:	e013      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e011      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ca:	e00e      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80059d0:	e00b      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059d6:	e008      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059dc:	e005      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e2:	e002      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059e4:	2320      	movs	r3, #32
 80059e6:	e000      	b.n	80059ea <HAL_DMA_IRQHandler+0x3ba>
 80059e8:	2302      	movs	r3, #2
 80059ea:	4a2e      	ldr	r2, [pc, #184]	; (8005aa4 <HAL_DMA_IRQHandler+0x474>)
 80059ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d034      	beq.n	8005a68 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a06:	e02f      	b.n	8005a68 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d028      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x43a>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d023      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 020e 	bic.w	r2, r2, #14
 8005a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
    }
  }
  return;
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
}
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40020080 	.word	0x40020080
 8005a78:	40020008 	.word	0x40020008
 8005a7c:	4002001c 	.word	0x4002001c
 8005a80:	40020030 	.word	0x40020030
 8005a84:	40020044 	.word	0x40020044
 8005a88:	40020058 	.word	0x40020058
 8005a8c:	4002006c 	.word	0x4002006c
 8005a90:	40020408 	.word	0x40020408
 8005a94:	4002041c 	.word	0x4002041c
 8005a98:	40020430 	.word	0x40020430
 8005a9c:	40020444 	.word	0x40020444
 8005aa0:	40020400 	.word	0x40020400
 8005aa4:	40020000 	.word	0x40020000

08005aa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	2101      	movs	r1, #1
 8005ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d108      	bne.n	8005ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ae6:	e007      	b.n	8005af8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b08b      	sub	sp, #44	; 0x2c
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b12:	2300      	movs	r3, #0
 8005b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b16:	e169      	b.n	8005dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	f040 8158 	bne.w	8005de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	4a9a      	ldr	r2, [pc, #616]	; (8005da4 <HAL_GPIO_Init+0x2a0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d05e      	beq.n	8005bfe <HAL_GPIO_Init+0xfa>
 8005b40:	4a98      	ldr	r2, [pc, #608]	; (8005da4 <HAL_GPIO_Init+0x2a0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d875      	bhi.n	8005c32 <HAL_GPIO_Init+0x12e>
 8005b46:	4a98      	ldr	r2, [pc, #608]	; (8005da8 <HAL_GPIO_Init+0x2a4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d058      	beq.n	8005bfe <HAL_GPIO_Init+0xfa>
 8005b4c:	4a96      	ldr	r2, [pc, #600]	; (8005da8 <HAL_GPIO_Init+0x2a4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d86f      	bhi.n	8005c32 <HAL_GPIO_Init+0x12e>
 8005b52:	4a96      	ldr	r2, [pc, #600]	; (8005dac <HAL_GPIO_Init+0x2a8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d052      	beq.n	8005bfe <HAL_GPIO_Init+0xfa>
 8005b58:	4a94      	ldr	r2, [pc, #592]	; (8005dac <HAL_GPIO_Init+0x2a8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d869      	bhi.n	8005c32 <HAL_GPIO_Init+0x12e>
 8005b5e:	4a94      	ldr	r2, [pc, #592]	; (8005db0 <HAL_GPIO_Init+0x2ac>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d04c      	beq.n	8005bfe <HAL_GPIO_Init+0xfa>
 8005b64:	4a92      	ldr	r2, [pc, #584]	; (8005db0 <HAL_GPIO_Init+0x2ac>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d863      	bhi.n	8005c32 <HAL_GPIO_Init+0x12e>
 8005b6a:	4a92      	ldr	r2, [pc, #584]	; (8005db4 <HAL_GPIO_Init+0x2b0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d046      	beq.n	8005bfe <HAL_GPIO_Init+0xfa>
 8005b70:	4a90      	ldr	r2, [pc, #576]	; (8005db4 <HAL_GPIO_Init+0x2b0>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d85d      	bhi.n	8005c32 <HAL_GPIO_Init+0x12e>
 8005b76:	2b12      	cmp	r3, #18
 8005b78:	d82a      	bhi.n	8005bd0 <HAL_GPIO_Init+0xcc>
 8005b7a:	2b12      	cmp	r3, #18
 8005b7c:	d859      	bhi.n	8005c32 <HAL_GPIO_Init+0x12e>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <HAL_GPIO_Init+0x80>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005bff 	.word	0x08005bff
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005beb 	.word	0x08005beb
 8005b90:	08005c2d 	.word	0x08005c2d
 8005b94:	08005c33 	.word	0x08005c33
 8005b98:	08005c33 	.word	0x08005c33
 8005b9c:	08005c33 	.word	0x08005c33
 8005ba0:	08005c33 	.word	0x08005c33
 8005ba4:	08005c33 	.word	0x08005c33
 8005ba8:	08005c33 	.word	0x08005c33
 8005bac:	08005c33 	.word	0x08005c33
 8005bb0:	08005c33 	.word	0x08005c33
 8005bb4:	08005c33 	.word	0x08005c33
 8005bb8:	08005c33 	.word	0x08005c33
 8005bbc:	08005c33 	.word	0x08005c33
 8005bc0:	08005c33 	.word	0x08005c33
 8005bc4:	08005c33 	.word	0x08005c33
 8005bc8:	08005be1 	.word	0x08005be1
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	4a79      	ldr	r2, [pc, #484]	; (8005db8 <HAL_GPIO_Init+0x2b4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005bd6:	e02c      	b.n	8005c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	623b      	str	r3, [r7, #32]
          break;
 8005bde:	e029      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	3304      	adds	r3, #4
 8005be6:	623b      	str	r3, [r7, #32]
          break;
 8005be8:	e024      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	623b      	str	r3, [r7, #32]
          break;
 8005bf2:	e01f      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	623b      	str	r3, [r7, #32]
          break;
 8005bfc:	e01a      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c06:	2304      	movs	r3, #4
 8005c08:	623b      	str	r3, [r7, #32]
          break;
 8005c0a:	e013      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c14:	2308      	movs	r3, #8
 8005c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	611a      	str	r2, [r3, #16]
          break;
 8005c1e:	e009      	b.n	8005c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c20:	2308      	movs	r3, #8
 8005c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	615a      	str	r2, [r3, #20]
          break;
 8005c2a:	e003      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	623b      	str	r3, [r7, #32]
          break;
 8005c30:	e000      	b.n	8005c34 <HAL_GPIO_Init+0x130>
          break;
 8005c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	2bff      	cmp	r3, #255	; 0xff
 8005c38:	d801      	bhi.n	8005c3e <HAL_GPIO_Init+0x13a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	e001      	b.n	8005c42 <HAL_GPIO_Init+0x13e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2bff      	cmp	r3, #255	; 0xff
 8005c48:	d802      	bhi.n	8005c50 <HAL_GPIO_Init+0x14c>
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	e002      	b.n	8005c56 <HAL_GPIO_Init+0x152>
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	3b08      	subs	r3, #8
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	210f      	movs	r1, #15
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	fa01 f303 	lsl.w	r3, r1, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	401a      	ands	r2, r3
 8005c68:	6a39      	ldr	r1, [r7, #32]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c70:	431a      	orrs	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80b1 	beq.w	8005de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c84:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <HAL_GPIO_Init+0x2b8>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	4a4c      	ldr	r2, [pc, #304]	; (8005dbc <HAL_GPIO_Init+0x2b8>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6193      	str	r3, [r2, #24]
 8005c90:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <HAL_GPIO_Init+0x2b8>)
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005c9c:	4a48      	ldr	r2, [pc, #288]	; (8005dc0 <HAL_GPIO_Init+0x2bc>)
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	089b      	lsrs	r3, r3, #2
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	220f      	movs	r2, #15
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a40      	ldr	r2, [pc, #256]	; (8005dc4 <HAL_GPIO_Init+0x2c0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d013      	beq.n	8005cf0 <HAL_GPIO_Init+0x1ec>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3f      	ldr	r2, [pc, #252]	; (8005dc8 <HAL_GPIO_Init+0x2c4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00d      	beq.n	8005cec <HAL_GPIO_Init+0x1e8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3e      	ldr	r2, [pc, #248]	; (8005dcc <HAL_GPIO_Init+0x2c8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <HAL_GPIO_Init+0x1e4>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3d      	ldr	r2, [pc, #244]	; (8005dd0 <HAL_GPIO_Init+0x2cc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d101      	bne.n	8005ce4 <HAL_GPIO_Init+0x1e0>
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e006      	b.n	8005cf2 <HAL_GPIO_Init+0x1ee>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	e004      	b.n	8005cf2 <HAL_GPIO_Init+0x1ee>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e002      	b.n	8005cf2 <HAL_GPIO_Init+0x1ee>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <HAL_GPIO_Init+0x1ee>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	f002 0203 	and.w	r2, r2, #3
 8005cf8:	0092      	lsls	r2, r2, #2
 8005cfa:	4093      	lsls	r3, r2
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d02:	492f      	ldr	r1, [pc, #188]	; (8005dc0 <HAL_GPIO_Init+0x2bc>)
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d1c:	4b2d      	ldr	r3, [pc, #180]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	492c      	ldr	r1, [pc, #176]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]
 8005d28:	e006      	b.n	8005d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d2a:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	4928      	ldr	r1, [pc, #160]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4922      	ldr	r1, [pc, #136]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	604b      	str	r3, [r1, #4]
 8005d50:	e006      	b.n	8005d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d52:	4b20      	ldr	r3, [pc, #128]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	491e      	ldr	r1, [pc, #120]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	4918      	ldr	r1, [pc, #96]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	608b      	str	r3, [r1, #8]
 8005d78:	e006      	b.n	8005d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005d7a:	4b16      	ldr	r3, [pc, #88]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	4914      	ldr	r1, [pc, #80]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d021      	beq.n	8005dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	490e      	ldr	r1, [pc, #56]	; (8005dd4 <HAL_GPIO_Init+0x2d0>)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60cb      	str	r3, [r1, #12]
 8005da0:	e021      	b.n	8005de6 <HAL_GPIO_Init+0x2e2>
 8005da2:	bf00      	nop
 8005da4:	10320000 	.word	0x10320000
 8005da8:	10310000 	.word	0x10310000
 8005dac:	10220000 	.word	0x10220000
 8005db0:	10210000 	.word	0x10210000
 8005db4:	10120000 	.word	0x10120000
 8005db8:	10110000 	.word	0x10110000
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40010800 	.word	0x40010800
 8005dc8:	40010c00 	.word	0x40010c00
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	40011400 	.word	0x40011400
 8005dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <HAL_GPIO_Init+0x304>)
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	4909      	ldr	r1, [pc, #36]	; (8005e08 <HAL_GPIO_Init+0x304>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	3301      	adds	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	fa22 f303 	lsr.w	r3, r2, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f47f ae8e 	bne.w	8005b18 <HAL_GPIO_Init+0x14>
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	372c      	adds	r7, #44	; 0x2c
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr
 8005e08:	40010400 	.word	0x40010400

08005e0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	e001      	b.n	8005e2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	807b      	strh	r3, [r7, #2]
 8005e46:	4613      	mov	r3, r2
 8005e48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e4a:	787b      	ldrb	r3, [r7, #1]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005e56:	e003      	b.n	8005e60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	041a      	lsls	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	611a      	str	r2, [r3, #16]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e7c:	887a      	ldrh	r2, [r7, #2]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4013      	ands	r3, r2
 8005e82:	041a      	lsls	r2, r3, #16
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	43d9      	mvns	r1, r3
 8005e88:	887b      	ldrh	r3, [r7, #2]
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	611a      	str	r2, [r3, #16]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ea6:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eb2:	4a05      	ldr	r2, [pc, #20]	; (8005ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb fae8 	bl	8001490 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40010400 	.word	0x40010400

08005ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e304      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 8087 	beq.w	8005ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005eec:	4b92      	ldr	r3, [pc, #584]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 030c 	and.w	r3, r3, #12
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d00c      	beq.n	8005f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ef8:	4b8f      	ldr	r3, [pc, #572]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f003 030c 	and.w	r3, r3, #12
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d112      	bne.n	8005f2a <HAL_RCC_OscConfig+0x5e>
 8005f04:	4b8c      	ldr	r3, [pc, #560]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f10:	d10b      	bne.n	8005f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f12:	4b89      	ldr	r3, [pc, #548]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d06c      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x12c>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d168      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e2de      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f32:	d106      	bne.n	8005f42 <HAL_RCC_OscConfig+0x76>
 8005f34:	4b80      	ldr	r3, [pc, #512]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a7f      	ldr	r2, [pc, #508]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e02e      	b.n	8005fa0 <HAL_RCC_OscConfig+0xd4>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <HAL_RCC_OscConfig+0x98>
 8005f4a:	4b7b      	ldr	r3, [pc, #492]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a7a      	ldr	r2, [pc, #488]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	4b78      	ldr	r3, [pc, #480]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a77      	ldr	r2, [pc, #476]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e01d      	b.n	8005fa0 <HAL_RCC_OscConfig+0xd4>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f6c:	d10c      	bne.n	8005f88 <HAL_RCC_OscConfig+0xbc>
 8005f6e:	4b72      	ldr	r3, [pc, #456]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a71      	ldr	r2, [pc, #452]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a6e      	ldr	r2, [pc, #440]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e00b      	b.n	8005fa0 <HAL_RCC_OscConfig+0xd4>
 8005f88:	4b6b      	ldr	r3, [pc, #428]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6a      	ldr	r2, [pc, #424]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f92:	6013      	str	r3, [r2, #0]
 8005f94:	4b68      	ldr	r3, [pc, #416]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a67      	ldr	r2, [pc, #412]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d013      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7fe f9a4 	bl	80042f4 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fe f9a0 	bl	80042f4 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	; 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e292      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc2:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0xe4>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fe f990 	bl	80042f4 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fd8:	f7fe f98c 	bl	80042f4 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b64      	cmp	r3, #100	; 0x64
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e27e      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fea:	4b53      	ldr	r3, [pc, #332]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x10c>
 8005ff6:	e000      	b.n	8005ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d063      	beq.n	80060ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006006:	4b4c      	ldr	r3, [pc, #304]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 030c 	and.w	r3, r3, #12
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006012:	4b49      	ldr	r3, [pc, #292]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b08      	cmp	r3, #8
 800601c:	d11c      	bne.n	8006058 <HAL_RCC_OscConfig+0x18c>
 800601e:	4b46      	ldr	r3, [pc, #280]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d116      	bne.n	8006058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602a:	4b43      	ldr	r3, [pc, #268]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_RCC_OscConfig+0x176>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d001      	beq.n	8006042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e252      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006042:	4b3d      	ldr	r3, [pc, #244]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4939      	ldr	r1, [pc, #228]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006052:	4313      	orrs	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006056:	e03a      	b.n	80060ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006060:	4b36      	ldr	r3, [pc, #216]	; (800613c <HAL_RCC_OscConfig+0x270>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006066:	f7fe f945 	bl	80042f4 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800606e:	f7fe f941 	bl	80042f4 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e233      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006080:	4b2d      	ldr	r3, [pc, #180]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	4b2a      	ldr	r3, [pc, #168]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4927      	ldr	r1, [pc, #156]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]
 80060a0:	e015      	b.n	80060ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060a2:	4b26      	ldr	r3, [pc, #152]	; (800613c <HAL_RCC_OscConfig+0x270>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a8:	f7fe f924 	bl	80042f4 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b0:	f7fe f920 	bl	80042f4 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e212      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d03a      	beq.n	8006150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d019      	beq.n	8006116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <HAL_RCC_OscConfig+0x274>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060e8:	f7fe f904 	bl	80042f4 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f0:	f7fe f900 	bl	80042f4 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e1f2      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006102:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <HAL_RCC_OscConfig+0x26c>)
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f0      	beq.n	80060f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800610e:	2001      	movs	r0, #1
 8006110:	f000 fc20 	bl	8006954 <RCC_Delay>
 8006114:	e01c      	b.n	8006150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_RCC_OscConfig+0x274>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800611c:	f7fe f8ea 	bl	80042f4 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006122:	e00f      	b.n	8006144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006124:	f7fe f8e6 	bl	80042f4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d908      	bls.n	8006144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e1d8      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
 8006136:	bf00      	nop
 8006138:	40021000 	.word	0x40021000
 800613c:	42420000 	.word	0x42420000
 8006140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	4b9b      	ldr	r3, [pc, #620]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e9      	bne.n	8006124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a6 	beq.w	80062aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4b94      	ldr	r3, [pc, #592]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10d      	bne.n	800618a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	4b91      	ldr	r3, [pc, #580]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	4a90      	ldr	r2, [pc, #576]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006178:	61d3      	str	r3, [r2, #28]
 800617a:	4b8e      	ldr	r3, [pc, #568]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618a:	4b8b      	ldr	r3, [pc, #556]	; (80063b8 <HAL_RCC_OscConfig+0x4ec>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d118      	bne.n	80061c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006196:	4b88      	ldr	r3, [pc, #544]	; (80063b8 <HAL_RCC_OscConfig+0x4ec>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a87      	ldr	r2, [pc, #540]	; (80063b8 <HAL_RCC_OscConfig+0x4ec>)
 800619c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a2:	f7fe f8a7 	bl	80042f4 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061aa:	f7fe f8a3 	bl	80042f4 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b64      	cmp	r3, #100	; 0x64
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e195      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061bc:	4b7e      	ldr	r3, [pc, #504]	; (80063b8 <HAL_RCC_OscConfig+0x4ec>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d106      	bne.n	80061de <HAL_RCC_OscConfig+0x312>
 80061d0:	4b78      	ldr	r3, [pc, #480]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	4a77      	ldr	r2, [pc, #476]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6213      	str	r3, [r2, #32]
 80061dc:	e02d      	b.n	800623a <HAL_RCC_OscConfig+0x36e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10c      	bne.n	8006200 <HAL_RCC_OscConfig+0x334>
 80061e6:	4b73      	ldr	r3, [pc, #460]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	4a72      	ldr	r2, [pc, #456]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	6213      	str	r3, [r2, #32]
 80061f2:	4b70      	ldr	r3, [pc, #448]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	4a6f      	ldr	r2, [pc, #444]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80061f8:	f023 0304 	bic.w	r3, r3, #4
 80061fc:	6213      	str	r3, [r2, #32]
 80061fe:	e01c      	b.n	800623a <HAL_RCC_OscConfig+0x36e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b05      	cmp	r3, #5
 8006206:	d10c      	bne.n	8006222 <HAL_RCC_OscConfig+0x356>
 8006208:	4b6a      	ldr	r3, [pc, #424]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	4a69      	ldr	r2, [pc, #420]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	6213      	str	r3, [r2, #32]
 8006214:	4b67      	ldr	r3, [pc, #412]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	4a66      	ldr	r2, [pc, #408]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800621a:	f043 0301 	orr.w	r3, r3, #1
 800621e:	6213      	str	r3, [r2, #32]
 8006220:	e00b      	b.n	800623a <HAL_RCC_OscConfig+0x36e>
 8006222:	4b64      	ldr	r3, [pc, #400]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	4a63      	ldr	r2, [pc, #396]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	6213      	str	r3, [r2, #32]
 800622e:	4b61      	ldr	r3, [pc, #388]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	4a60      	ldr	r2, [pc, #384]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006234:	f023 0304 	bic.w	r3, r3, #4
 8006238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d015      	beq.n	800626e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006242:	f7fe f857 	bl	80042f4 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006248:	e00a      	b.n	8006260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624a:	f7fe f853 	bl	80042f4 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e143      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006260:	4b54      	ldr	r3, [pc, #336]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0ee      	beq.n	800624a <HAL_RCC_OscConfig+0x37e>
 800626c:	e014      	b.n	8006298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800626e:	f7fe f841 	bl	80042f4 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fe f83d 	bl	80042f4 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e12d      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800628c:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ee      	bne.n	8006276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d105      	bne.n	80062aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629e:	4b45      	ldr	r3, [pc, #276]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	4a44      	ldr	r2, [pc, #272]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062a8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 808c 	beq.w	80063cc <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80062b4:	4b3f      	ldr	r3, [pc, #252]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d10e      	bne.n	80062e0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80062c2:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d108      	bne.n	80062e0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80062ce:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e103      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d14e      	bne.n	8006386 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80062e8:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80062f4:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0ef      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8006308:	4b2c      	ldr	r3, [pc, #176]	; (80063bc <HAL_RCC_OscConfig+0x4f0>)
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630e:	f7fd fff1 	bl	80042f4 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006316:	f7fd ffed 	bl	80042f4 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b64      	cmp	r3, #100	; 0x64
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e0df      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006328:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f0      	bne.n	8006316 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8006334:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	491c      	ldr	r1, [pc, #112]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006342:	4313      	orrs	r3, r2
 8006344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	4918      	ldr	r1, [pc, #96]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006354:	4313      	orrs	r3, r2
 8006356:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8006358:	4b18      	ldr	r3, [pc, #96]	; (80063bc <HAL_RCC_OscConfig+0x4f0>)
 800635a:	2201      	movs	r2, #1
 800635c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635e:	f7fd ffc9 	bl	80042f4 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006364:	e008      	b.n	8006378 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006366:	f7fd ffc5 	bl	80042f4 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b64      	cmp	r3, #100	; 0x64
 8006372:	d901      	bls.n	8006378 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e0b7      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCC_OscConfig+0x49a>
 8006384:	e022      	b.n	80063cc <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <HAL_RCC_OscConfig+0x4e8>)
 800638c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006390:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_RCC_OscConfig+0x4f0>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006398:	f7fd ffac 	bl	80042f4 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800639e:	e00f      	b.n	80063c0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063a0:	f7fd ffa8 	bl	80042f4 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d908      	bls.n	80063c0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e09a      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40007000 	.word	0x40007000
 80063bc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80063c0:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e9      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8088 	beq.w	80064e6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063d6:	4b46      	ldr	r3, [pc, #280]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f003 030c 	and.w	r3, r3, #12
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d068      	beq.n	80064b4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d14d      	bne.n	8006486 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ea:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <HAL_RCC_OscConfig+0x628>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fd ff80 	bl	80042f4 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f8:	f7fd ff7c 	bl	80042f4 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e06e      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800640a:	4b39      	ldr	r3, [pc, #228]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641e:	d10f      	bne.n	8006440 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8006420:	4b33      	ldr	r3, [pc, #204]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4931      	ldr	r1, [pc, #196]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 800642a:	4313      	orrs	r3, r2
 800642c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800642e:	4b30      	ldr	r3, [pc, #192]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	f023 020f 	bic.w	r2, r3, #15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	492d      	ldr	r1, [pc, #180]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 800643c:	4313      	orrs	r3, r2
 800643e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006440:	4b2b      	ldr	r3, [pc, #172]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	430b      	orrs	r3, r1
 8006452:	4927      	ldr	r1, [pc, #156]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 8006454:	4313      	orrs	r3, r2
 8006456:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006458:	4b26      	ldr	r3, [pc, #152]	; (80064f4 <HAL_RCC_OscConfig+0x628>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645e:	f7fd ff49 	bl	80042f4 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006466:	f7fd ff45 	bl	80042f4 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e037      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006478:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x59a>
 8006484:	e02f      	b.n	80064e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006486:	4b1b      	ldr	r3, [pc, #108]	; (80064f4 <HAL_RCC_OscConfig+0x628>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800648c:	f7fd ff32 	bl	80042f4 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006494:	f7fd ff2e 	bl	80042f4 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e020      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f0      	bne.n	8006494 <HAL_RCC_OscConfig+0x5c8>
 80064b2:	e018      	b.n	80064e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e013      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <HAL_RCC_OscConfig+0x624>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d001      	beq.n	80064e6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40021000 	.word	0x40021000
 80064f4:	42420060 	.word	0x42420060

080064f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0d0      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800650c:	4b6a      	ldr	r3, [pc, #424]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d910      	bls.n	800653c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4b67      	ldr	r3, [pc, #412]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 0207 	bic.w	r2, r3, #7
 8006522:	4965      	ldr	r1, [pc, #404]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b63      	ldr	r3, [pc, #396]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0b8      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006554:	4b59      	ldr	r3, [pc, #356]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a58      	ldr	r2, [pc, #352]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 800655a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800655e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800656c:	4b53      	ldr	r3, [pc, #332]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a52      	ldr	r2, [pc, #328]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006572:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006578:	4b50      	ldr	r3, [pc, #320]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	494d      	ldr	r1, [pc, #308]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006586:	4313      	orrs	r3, r2
 8006588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d040      	beq.n	8006618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d107      	bne.n	80065ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659e:	4b47      	ldr	r3, [pc, #284]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d115      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e07f      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d107      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b6:	4b41      	ldr	r3, [pc, #260]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e073      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c6:	4b3d      	ldr	r3, [pc, #244]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e06b      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065d6:	4b39      	ldr	r3, [pc, #228]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f023 0203 	bic.w	r2, r3, #3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4936      	ldr	r1, [pc, #216]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065e8:	f7fd fe84 	bl	80042f4 <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f0:	f7fd fe80 	bl	80042f4 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e053      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006606:	4b2d      	ldr	r3, [pc, #180]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 020c 	and.w	r2, r3, #12
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	429a      	cmp	r2, r3
 8006616:	d1eb      	bne.n	80065f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006618:	4b27      	ldr	r3, [pc, #156]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d210      	bcs.n	8006648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006626:	4b24      	ldr	r3, [pc, #144]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f023 0207 	bic.w	r2, r3, #7
 800662e:	4922      	ldr	r1, [pc, #136]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	4313      	orrs	r3, r2
 8006634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e032      	b.n	80066ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006654:	4b19      	ldr	r3, [pc, #100]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4916      	ldr	r1, [pc, #88]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	490e      	ldr	r1, [pc, #56]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 8006682:	4313      	orrs	r3, r2
 8006684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006686:	f000 f821 	bl	80066cc <HAL_RCC_GetSysClockFreq>
 800668a:	4602      	mov	r2, r0
 800668c:	4b0b      	ldr	r3, [pc, #44]	; (80066bc <HAL_RCC_ClockConfig+0x1c4>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	490a      	ldr	r1, [pc, #40]	; (80066c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006698:	5ccb      	ldrb	r3, [r1, r3]
 800669a:	fa22 f303 	lsr.w	r3, r2, r3
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <HAL_RCC_ClockConfig+0x1cc>)
 80066a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <HAL_RCC_ClockConfig+0x1d0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fd fde2 	bl	8004270 <HAL_InitTick>

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40022000 	.word	0x40022000
 80066bc:	40021000 	.word	0x40021000
 80066c0:	08007dec 	.word	0x08007dec
 80066c4:	20000020 	.word	0x20000020
 80066c8:	200003b0 	.word	0x200003b0

080066cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	b09d      	sub	sp, #116	; 0x74
 80066d2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80066d4:	4b81      	ldr	r3, [pc, #516]	; (80068dc <HAL_RCC_GetSysClockFreq+0x210>)
 80066d6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80066da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066dc:	c407      	stmia	r4!, {r0, r1, r2}
 80066de:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80066e0:	4b7f      	ldr	r3, [pc, #508]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x214>)
 80066e2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80066e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
 80066f0:	2300      	movs	r3, #0
 80066f2:	663b      	str	r3, [r7, #96]	; 0x60
 80066f4:	2300      	movs	r3, #0
 80066f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f8:	2300      	movs	r3, #0
 80066fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	65bb      	str	r3, [r7, #88]	; 0x58
 8006704:	2300      	movs	r3, #0
 8006706:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006708:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800670e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006710:	f003 030c 	and.w	r3, r3, #12
 8006714:	2b04      	cmp	r3, #4
 8006716:	d002      	beq.n	800671e <HAL_RCC_GetSysClockFreq+0x52>
 8006718:	2b08      	cmp	r3, #8
 800671a:	d003      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0x58>
 800671c:	e0d4      	b.n	80068c8 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800671e:	4b72      	ldr	r3, [pc, #456]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006720:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006722:	e0d4      	b.n	80068ce <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006726:	0c9b      	lsrs	r3, r3, #18
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	3340      	adds	r3, #64	; 0x40
 800672e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006732:	4413      	add	r3, r2
 8006734:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006738:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800673a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800673c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 80b9 	beq.w	80068b8 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006746:	4b67      	ldr	r3, [pc, #412]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x218>)
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	3340      	adds	r3, #64	; 0x40
 8006750:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006754:	4413      	add	r3, r2
 8006756:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800675a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800675c:	4b61      	ldr	r3, [pc, #388]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8095 	beq.w	8006894 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800676a:	4b5e      	ldr	r3, [pc, #376]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 030f 	and.w	r3, r3, #15
 8006774:	3301      	adds	r3, #1
 8006776:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006778:	4b5a      	ldr	r3, [pc, #360]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x218>)
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	0a1b      	lsrs	r3, r3, #8
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	3302      	adds	r3, #2
 8006784:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006788:	2200      	movs	r2, #0
 800678a:	61bb      	str	r3, [r7, #24]
 800678c:	61fa      	str	r2, [r7, #28]
 800678e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006790:	2200      	movs	r2, #0
 8006792:	62bb      	str	r3, [r7, #40]	; 0x28
 8006794:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006796:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800679a:	4622      	mov	r2, r4
 800679c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80067a0:	4684      	mov	ip, r0
 80067a2:	fb0c f202 	mul.w	r2, ip, r2
 80067a6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80067aa:	468c      	mov	ip, r1
 80067ac:	4618      	mov	r0, r3
 80067ae:	4621      	mov	r1, r4
 80067b0:	4603      	mov	r3, r0
 80067b2:	fb03 f30c 	mul.w	r3, r3, ip
 80067b6:	4413      	add	r3, r2
 80067b8:	4602      	mov	r2, r0
 80067ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067bc:	fba2 8901 	umull	r8, r9, r2, r1
 80067c0:	444b      	add	r3, r9
 80067c2:	4699      	mov	r9, r3
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	f04f 0000 	mov.w	r0, #0
 80067cc:	f04f 0100 	mov.w	r1, #0
 80067d0:	0159      	lsls	r1, r3, #5
 80067d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067d6:	0150      	lsls	r0, r2, #5
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	ebb2 0508 	subs.w	r5, r2, r8
 80067e0:	eb63 0609 	sbc.w	r6, r3, r9
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	01b3      	lsls	r3, r6, #6
 80067ee:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 80067f2:	01aa      	lsls	r2, r5, #6
 80067f4:	ebb2 0a05 	subs.w	sl, r2, r5
 80067f8:	eb63 0b06 	sbc.w	fp, r3, r6
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800680c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006810:	4692      	mov	sl, r2
 8006812:	469b      	mov	fp, r3
 8006814:	eb1a 0308 	adds.w	r3, sl, r8
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	eb4b 0309 	adc.w	r3, fp, r9
 800681e:	607b      	str	r3, [r7, #4]
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 4500 	ldrd	r4, r5, [r7]
 800682c:	4629      	mov	r1, r5
 800682e:	024b      	lsls	r3, r1, #9
 8006830:	4620      	mov	r0, r4
 8006832:	4629      	mov	r1, r5
 8006834:	4604      	mov	r4, r0
 8006836:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800683a:	4601      	mov	r1, r0
 800683c:	024a      	lsls	r2, r1, #9
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006844:	2200      	movs	r2, #0
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	617a      	str	r2, [r7, #20]
 800684a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800684c:	2200      	movs	r2, #0
 800684e:	60bb      	str	r3, [r7, #8]
 8006850:	60fa      	str	r2, [r7, #12]
 8006852:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006856:	4622      	mov	r2, r4
 8006858:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800685c:	4645      	mov	r5, r8
 800685e:	fb05 f202 	mul.w	r2, r5, r2
 8006862:	464e      	mov	r6, r9
 8006864:	4625      	mov	r5, r4
 8006866:	461c      	mov	r4, r3
 8006868:	4623      	mov	r3, r4
 800686a:	fb03 f306 	mul.w	r3, r3, r6
 800686e:	4413      	add	r3, r2
 8006870:	4622      	mov	r2, r4
 8006872:	4644      	mov	r4, r8
 8006874:	fba2 2404 	umull	r2, r4, r2, r4
 8006878:	627c      	str	r4, [r7, #36]	; 0x24
 800687a:	623a      	str	r2, [r7, #32]
 800687c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687e:	4413      	add	r3, r2
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006886:	f7f9 fccd 	bl	8000224 <__aeabi_uldivmod>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4613      	mov	r3, r2
 8006890:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006892:	e007      	b.n	80068a4 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8006894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006896:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006898:	fb03 f202 	mul.w	r2, r3, r2
 800689c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80068a4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80068a8:	461a      	mov	r2, r3
 80068aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d108      	bne.n	80068c2 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80068b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068b6:	e004      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80068b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068ba:	4a0c      	ldr	r2, [pc, #48]	; (80068ec <HAL_RCC_GetSysClockFreq+0x220>)
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80068c6:	e002      	b.n	80068ce <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x21c>)
 80068ca:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80068cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3774      	adds	r7, #116	; 0x74
 80068d4:	46bd      	mov	sp, r7
 80068d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068da:	bf00      	nop
 80068dc:	08007dcc 	.word	0x08007dcc
 80068e0:	08007ddc 	.word	0x08007ddc
 80068e4:	40021000 	.word	0x40021000
 80068e8:	007a1200 	.word	0x007a1200
 80068ec:	003d0900 	.word	0x003d0900

080068f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f4:	4b02      	ldr	r3, [pc, #8]	; (8006900 <HAL_RCC_GetHCLKFreq+0x10>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr
 8006900:	20000020 	.word	0x20000020

08006904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006908:	f7ff fff2 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 800690c:	4602      	mov	r2, r0
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	4903      	ldr	r1, [pc, #12]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800691a:	5ccb      	ldrb	r3, [r1, r3]
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40021000 	.word	0x40021000
 8006928:	08007dfc 	.word	0x08007dfc

0800692c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006930:	f7ff ffde 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	0adb      	lsrs	r3, r3, #11
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	; (8006950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40021000 	.word	0x40021000
 8006950:	08007dfc 	.word	0x08007dfc

08006954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <RCC_Delay+0x34>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <RCC_Delay+0x38>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	0a5b      	lsrs	r3, r3, #9
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006970:	bf00      	nop
  }
  while (Delay --);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1e5a      	subs	r2, r3, #1
 8006976:	60fa      	str	r2, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f9      	bne.n	8006970 <RCC_Delay+0x1c>
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	20000020 	.word	0x20000020
 800698c:	10624dd3 	.word	0x10624dd3

08006990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e041      	b.n	8006a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fb fdf8 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3304      	adds	r3, #4
 80069cc:	4619      	mov	r1, r3
 80069ce:	4610      	mov	r0, r2
 80069d0:	f000 fa78 	bl	8006ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d001      	beq.n	8006a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e03f      	b.n	8006ac8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1b      	ldr	r2, [pc, #108]	; (8006ad4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d013      	beq.n	8006a92 <HAL_TIM_Base_Start_IT+0x62>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d00e      	beq.n	8006a92 <HAL_TIM_Base_Start_IT+0x62>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <HAL_TIM_Base_Start_IT+0xa8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d009      	beq.n	8006a92 <HAL_TIM_Base_Start_IT+0x62>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a16      	ldr	r2, [pc, #88]	; (8006adc <HAL_TIM_Base_Start_IT+0xac>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d004      	beq.n	8006a92 <HAL_TIM_Base_Start_IT+0x62>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d111      	bne.n	8006ab6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b06      	cmp	r3, #6
 8006aa2:	d010      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0201 	orr.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab4:	e007      	b.n	8006ac6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	40000c00 	.word	0x40000c00

08006ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d122      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d11b      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0202 	mvn.w	r2, #2
 8006b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9b1 	bl	8006e8e <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e005      	b.n	8006b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9a4 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f9b3 	bl	8006ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d122      	bne.n	8006b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d11b      	bne.n	8006b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0204 	mvn.w	r2, #4
 8006b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f987 	bl	8006e8e <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f97a 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f989 	bl	8006ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d122      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d11b      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0208 	mvn.w	r2, #8
 8006bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f95d 	bl	8006e8e <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f950 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f95f 	bl	8006ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d122      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d11b      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0210 	mvn.w	r2, #16
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2208      	movs	r2, #8
 8006c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f933 	bl	8006e8e <HAL_TIM_IC_CaptureCallback>
 8006c28:	e005      	b.n	8006c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f926 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f935 	bl	8006ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0201 	mvn.w	r2, #1
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fa fc28 	bl	80014b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fa89 	bl	80071a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8f9 	bl	8006eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d10e      	bne.n	8006cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d107      	bne.n	8006cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0220 	mvn.w	r2, #32
 8006ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa54 	bl	8007194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIM_ConfigClockSource+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e0b3      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x180>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d44:	d03e      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0xd0>
 8006d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4a:	f200 8087 	bhi.w	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d52:	f000 8085 	beq.w	8006e60 <HAL_TIM_ConfigClockSource+0x16c>
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5a:	d87f      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d5c:	2b70      	cmp	r3, #112	; 0x70
 8006d5e:	d01a      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0xa2>
 8006d60:	2b70      	cmp	r3, #112	; 0x70
 8006d62:	d87b      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d64:	2b60      	cmp	r3, #96	; 0x60
 8006d66:	d050      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x116>
 8006d68:	2b60      	cmp	r3, #96	; 0x60
 8006d6a:	d877      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d6c:	2b50      	cmp	r3, #80	; 0x50
 8006d6e:	d03c      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0xf6>
 8006d70:	2b50      	cmp	r3, #80	; 0x50
 8006d72:	d873      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d74:	2b40      	cmp	r3, #64	; 0x40
 8006d76:	d058      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x136>
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d86f      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	d064      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d86b      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d060      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d867      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d05c      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d05a      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d94:	e062      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6899      	ldr	r1, [r3, #8]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f000 f970 	bl	800708a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006db8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	609a      	str	r2, [r3, #8]
      break;
 8006dc2:	e04e      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	6899      	ldr	r1, [r3, #8]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f000 f959 	bl	800708a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006de6:	609a      	str	r2, [r3, #8]
      break;
 8006de8:	e03b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f000 f8d0 	bl	8006f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2150      	movs	r1, #80	; 0x50
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f927 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006e08:	e02b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f000 f8ee 	bl	8006ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2160      	movs	r1, #96	; 0x60
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f917 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e01b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 f8b0 	bl	8006f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2140      	movs	r1, #64	; 0x40
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f907 	bl	8007056 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e00b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f000 f8fe 	bl	8007056 <TIM_ITRx_SetConfig>
        break;
 8006e5a:	e002      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a2d      	ldr	r2, [pc, #180]	; (8006f8c <TIM_Base_SetConfig+0xc8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00f      	beq.n	8006efc <TIM_Base_SetConfig+0x38>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee2:	d00b      	beq.n	8006efc <TIM_Base_SetConfig+0x38>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <TIM_Base_SetConfig+0xcc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d007      	beq.n	8006efc <TIM_Base_SetConfig+0x38>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a29      	ldr	r2, [pc, #164]	; (8006f94 <TIM_Base_SetConfig+0xd0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_Base_SetConfig+0x38>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a28      	ldr	r2, [pc, #160]	; (8006f98 <TIM_Base_SetConfig+0xd4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d108      	bne.n	8006f0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a1e      	ldr	r2, [pc, #120]	; (8006f8c <TIM_Base_SetConfig+0xc8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00f      	beq.n	8006f36 <TIM_Base_SetConfig+0x72>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1c:	d00b      	beq.n	8006f36 <TIM_Base_SetConfig+0x72>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <TIM_Base_SetConfig+0xcc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d007      	beq.n	8006f36 <TIM_Base_SetConfig+0x72>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a1a      	ldr	r2, [pc, #104]	; (8006f94 <TIM_Base_SetConfig+0xd0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d003      	beq.n	8006f36 <TIM_Base_SetConfig+0x72>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a19      	ldr	r2, [pc, #100]	; (8006f98 <TIM_Base_SetConfig+0xd4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d108      	bne.n	8006f48 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <TIM_Base_SetConfig+0xc8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d103      	bne.n	8006f7c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	615a      	str	r2, [r3, #20]
}
 8006f82:	bf00      	nop
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00

08006f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
 8006fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f023 0201 	bic.w	r2, r3, #1
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f023 030a 	bic.w	r3, r3, #10
 8006fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	f023 0210 	bic.w	r2, r3, #16
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007022:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	031b      	lsls	r3, r3, #12
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4313      	orrs	r3, r2
 800702c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007034:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	621a      	str	r2, [r3, #32]
}
 800704c:	bf00      	nop
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr

08007056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	f043 0307 	orr.w	r3, r3, #7
 8007078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	609a      	str	r2, [r3, #8]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr

0800708a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800708a:	b480      	push	{r7}
 800708c:	b087      	sub	sp, #28
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	021a      	lsls	r2, r3, #8
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	609a      	str	r2, [r3, #8]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070dc:	2302      	movs	r3, #2
 80070de:	e04b      	b.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a19      	ldr	r2, [pc, #100]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d013      	beq.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d00e      	beq.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d009      	beq.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a13      	ldr	r2, [pc, #76]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d004      	beq.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a12      	ldr	r2, [pc, #72]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10c      	bne.n	8007166 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007152:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	4313      	orrs	r3, r2
 800715c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40000c00 	.word	0x40000c00

08007194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e03f      	b.n	800724a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fc fec6 	bl	8003f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2224      	movs	r2, #36	; 0x24
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fd1f 	bl	8007c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691a      	ldr	r2, [r3, #16]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2220      	movs	r2, #32
 8007244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b08a      	sub	sp, #40	; 0x28
 8007256:	af02      	add	r7, sp, #8
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b20      	cmp	r3, #32
 8007270:	d17c      	bne.n	800736c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_UART_Transmit+0x2c>
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e075      	b.n	800736e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_UART_Transmit+0x3e>
 800728c:	2302      	movs	r3, #2
 800728e:	e06e      	b.n	800736e <HAL_UART_Transmit+0x11c>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2221      	movs	r2, #33	; 0x21
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072a6:	f7fd f825 	bl	80042f4 <HAL_GetTick>
 80072aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c0:	d108      	bne.n	80072d4 <HAL_UART_Transmit+0x82>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e003      	b.n	80072dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072e4:	e02a      	b.n	800733c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2200      	movs	r2, #0
 80072ee:	2180      	movs	r1, #128	; 0x80
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 faf5 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e036      	b.n	800736e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	3302      	adds	r3, #2
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	e007      	b.n	800732e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	781a      	ldrb	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	3301      	adds	r3, #1
 800732c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1cf      	bne.n	80072e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2200      	movs	r2, #0
 800734e:	2140      	movs	r1, #64	; 0x40
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fac5 	bl	80078e0 <UART_WaitOnFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e006      	b.n	800736e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e000      	b.n	800736e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800736c:	2302      	movs	r3, #2
  }
}
 800736e:	4618      	mov	r0, r3
 8007370:	3720      	adds	r7, #32
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b20      	cmp	r3, #32
 8007390:	d153      	bne.n	800743a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_UART_Transmit_DMA+0x26>
 8007398:	88fb      	ldrh	r3, [r7, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e04c      	b.n	800743c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_UART_Transmit_DMA+0x38>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e045      	b.n	800743c <HAL_UART_Transmit_DMA+0xc4>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	88fa      	ldrh	r2, [r7, #6]
 80073c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2221      	movs	r2, #33	; 0x21
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073dc:	4a19      	ldr	r2, [pc, #100]	; (8007444 <HAL_UART_Transmit_DMA+0xcc>)
 80073de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e4:	4a18      	ldr	r2, [pc, #96]	; (8007448 <HAL_UART_Transmit_DMA+0xd0>)
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	4a17      	ldr	r2, [pc, #92]	; (800744c <HAL_UART_Transmit_DMA+0xd4>)
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	2200      	movs	r2, #0
 80073f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80073f8:	f107 0308 	add.w	r3, r7, #8
 80073fc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	6819      	ldr	r1, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3304      	adds	r3, #4
 800740c:	461a      	mov	r2, r3
 800740e:	88fb      	ldrh	r3, [r7, #6]
 8007410:	f7fd ff6c 	bl	80052ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800741c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695a      	ldr	r2, [r3, #20]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007434:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e000      	b.n	800743c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
  }
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	080077df 	.word	0x080077df
 8007448:	08007831 	.word	0x08007831
 800744c:	0800784d 	.word	0x0800784d

08007450 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	; 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007470:	2300      	movs	r3, #0
 8007472:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007474:	2300      	movs	r3, #0
 8007476:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10d      	bne.n	80074a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	f003 0320 	and.w	r3, r3, #32
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <HAL_UART_IRQHandler+0x52>
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fb26 	bl	8007aec <UART_Receive_IT>
      return;
 80074a0:	e17b      	b.n	800779a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 80b1 	beq.w	800760c <HAL_UART_IRQHandler+0x1bc>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <HAL_UART_IRQHandler+0x70>
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80a6 	beq.w	800760c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_UART_IRQHandler+0x90>
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	f043 0201 	orr.w	r2, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <HAL_UART_IRQHandler+0xb0>
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f043 0202 	orr.w	r2, r3, #2
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_UART_IRQHandler+0xd0>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	f043 0204 	orr.w	r2, r3, #4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00f      	beq.n	800754a <HAL_UART_IRQHandler+0xfa>
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <HAL_UART_IRQHandler+0xee>
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f043 0208 	orr.w	r2, r3, #8
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 811e 	beq.w	8007790 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_UART_IRQHandler+0x11e>
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fabf 	bl	8007aec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	bf14      	ite	ne
 800757c:	2301      	movne	r3, #1
 800757e:	2300      	moveq	r3, #0
 8007580:	b2db      	uxtb	r3, r3
 8007582:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <HAL_UART_IRQHandler+0x146>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d031      	beq.n	80075fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fa01 	bl	800799e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d023      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d013      	beq.n	80075ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	4a76      	ldr	r2, [pc, #472]	; (80077a0 <HAL_UART_IRQHandler+0x350>)
 80075c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fd ff26 	bl	8005420 <HAL_DMA_Abort_IT>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d016      	beq.n	8007608 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00e      	b.n	8007608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8e3 	bl	80077b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e00a      	b.n	8007608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f8df 	bl	80077b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	e006      	b.n	8007608 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f8db 	bl	80077b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007606:	e0c3      	b.n	8007790 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	bf00      	nop
    return;
 800760a:	e0c1      	b.n	8007790 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	2b01      	cmp	r3, #1
 8007612:	f040 80a1 	bne.w	8007758 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 809b 	beq.w	8007758 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8095 	beq.w	8007758 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764e:	2b00      	cmp	r3, #0
 8007650:	d04e      	beq.n	80076f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800765c:	8a3b      	ldrh	r3, [r7, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	f000 8098 	beq.w	8007794 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007668:	8a3a      	ldrh	r2, [r7, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	f080 8092 	bcs.w	8007794 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8a3a      	ldrh	r2, [r7, #16]
 8007674:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b20      	cmp	r3, #32
 800767e:	d02b      	beq.n	80076d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800768e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0201 	bic.w	r2, r2, #1
 800769e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0210 	bic.w	r2, r2, #16
 80076cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fd fe69 	bl	80053aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f86d 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076ee:	e051      	b.n	8007794 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d047      	beq.n	8007798 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007708:	8a7b      	ldrh	r3, [r7, #18]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d044      	beq.n	8007798 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800771c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0201 	bic.w	r2, r2, #1
 800772c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0210 	bic.w	r2, r2, #16
 800774a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800774c:	8a7b      	ldrh	r3, [r7, #18]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f839 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007756:	e01f      	b.n	8007798 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_UART_IRQHandler+0x324>
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f956 	bl	8007a1e <UART_Transmit_IT>
    return;
 8007772:	e012      	b.n	800779a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00d      	beq.n	800779a <HAL_UART_IRQHandler+0x34a>
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f997 	bl	8007abc <UART_EndTransmit_IT>
    return;
 800778e:	e004      	b.n	800779a <HAL_UART_IRQHandler+0x34a>
    return;
 8007790:	bf00      	nop
 8007792:	e002      	b.n	800779a <HAL_UART_IRQHandler+0x34a>
      return;
 8007794:	bf00      	nop
 8007796:	e000      	b.n	800779a <HAL_UART_IRQHandler+0x34a>
      return;
 8007798:	bf00      	nop
  }
}
 800779a:	3728      	adds	r7, #40	; 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	080079f7 	.word	0x080079f7

080077a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b084      	sub	sp, #16
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d113      	bne.n	8007822 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695a      	ldr	r2, [r3, #20]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007820:	e002      	b.n	8007828 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7f9 fe72 	bl	800150c <HAL_UART_TxCpltCallback>
}
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7f9 fe6d 	bl	800151e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007844:	bf00      	nop
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b21      	cmp	r3, #33	; 0x21
 800787e:	d108      	bne.n	8007892 <UART_DMAError+0x46>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d005      	beq.n	8007892 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2200      	movs	r2, #0
 800788a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800788c:	68b8      	ldr	r0, [r7, #8]
 800788e:	f000 f871 	bl	8007974 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	bf14      	ite	ne
 80078a0:	2301      	movne	r3, #1
 80078a2:	2300      	moveq	r3, #0
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b22      	cmp	r3, #34	; 0x22
 80078b2:	d108      	bne.n	80078c6 <UART_DMAError+0x7a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2200      	movs	r2, #0
 80078be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078c0:	68b8      	ldr	r0, [r7, #8]
 80078c2:	f000 f86c 	bl	800799e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f043 0210 	orr.w	r2, r3, #16
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f7ff ff6f 	bl	80077b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f0:	e02c      	b.n	800794c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d028      	beq.n	800794c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <UART_WaitOnFlagUntilTimeout+0x30>
 8007900:	f7fc fcf8 	bl	80042f4 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	429a      	cmp	r2, r3
 800790e:	d21d      	bcs.n	800794c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800791e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695a      	ldr	r2, [r3, #20]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e00f      	b.n	800796c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	4013      	ands	r3, r2
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	429a      	cmp	r2, r3
 800795a:	bf0c      	ite	eq
 800795c:	2301      	moveq	r3, #1
 800795e:	2300      	movne	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	429a      	cmp	r2, r3
 8007968:	d0c3      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800798a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr

0800799e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80079b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	695a      	ldr	r2, [r3, #20]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0201 	bic.w	r2, r2, #1
 80079c4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0210 	bic.w	r2, r2, #16
 80079dc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr

080079f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff fed0 	bl	80077b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a16:	bf00      	nop
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b21      	cmp	r3, #33	; 0x21
 8007a30:	d13e      	bne.n	8007ab0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3a:	d114      	bne.n	8007a66 <UART_Transmit_IT+0x48>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d110      	bne.n	8007a66 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	1c9a      	adds	r2, r3, #2
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	621a      	str	r2, [r3, #32]
 8007a64:	e008      	b.n	8007a78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	1c59      	adds	r1, r3, #1
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6211      	str	r1, [r2, #32]
 8007a70:	781a      	ldrb	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	4619      	mov	r1, r3
 8007a86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10f      	bne.n	8007aac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ad2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7f9 fd15 	bl	800150c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b22      	cmp	r3, #34	; 0x22
 8007afe:	f040 8099 	bne.w	8007c34 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	d117      	bne.n	8007b3c <UART_Receive_IT+0x50>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d113      	bne.n	8007b3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b34:	1c9a      	adds	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28
 8007b3a:	e026      	b.n	8007b8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4e:	d007      	beq.n	8007b60 <UART_Receive_IT+0x74>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <UART_Receive_IT+0x82>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e008      	b.n	8007b80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	3b01      	subs	r3, #1
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d148      	bne.n	8007c30 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0220 	bic.w	r2, r2, #32
 8007bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695a      	ldr	r2, [r3, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0201 	bic.w	r2, r2, #1
 8007bcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d123      	bne.n	8007c26 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0210 	bic.w	r2, r2, #16
 8007bf2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d10a      	bne.n	8007c18 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fdd2 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
 8007c24:	e002      	b.n	8007c2c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fdbc 	bl	80077a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e002      	b.n	8007c36 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007c34:	2302      	movs	r3, #2
  }
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007c7a:	f023 030c 	bic.w	r3, r3, #12
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	430b      	orrs	r3, r1
 8007c86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a2c      	ldr	r2, [pc, #176]	; (8007d54 <UART_SetConfig+0x114>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d103      	bne.n	8007cb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ca8:	f7fe fe40 	bl	800692c <HAL_RCC_GetPCLK2Freq>
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	e002      	b.n	8007cb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007cb0:	f7fe fe28 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 8007cb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009a      	lsls	r2, r3, #2
 8007cc0:	441a      	add	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <UART_SetConfig+0x118>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	0119      	lsls	r1, r3, #4
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009a      	lsls	r2, r3, #2
 8007ce0:	441a      	add	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <UART_SetConfig+0x118>)
 8007cee:	fba3 0302 	umull	r0, r3, r3, r2
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	2064      	movs	r0, #100	; 0x64
 8007cf6:	fb00 f303 	mul.w	r3, r0, r3
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	3332      	adds	r3, #50	; 0x32
 8007d00:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <UART_SetConfig+0x118>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d0c:	4419      	add	r1, r3
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009a      	lsls	r2, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d24:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <UART_SetConfig+0x118>)
 8007d26:	fba3 0302 	umull	r0, r3, r3, r2
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2064      	movs	r0, #100	; 0x64
 8007d2e:	fb00 f303 	mul.w	r3, r0, r3
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	011b      	lsls	r3, r3, #4
 8007d36:	3332      	adds	r3, #50	; 0x32
 8007d38:	4a07      	ldr	r2, [pc, #28]	; (8007d58 <UART_SetConfig+0x118>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	440a      	add	r2, r1
 8007d4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40013800 	.word	0x40013800
 8007d58:	51eb851f 	.word	0x51eb851f

08007d5c <__libc_init_array>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	2600      	movs	r6, #0
 8007d60:	4d0c      	ldr	r5, [pc, #48]	; (8007d94 <__libc_init_array+0x38>)
 8007d62:	4c0d      	ldr	r4, [pc, #52]	; (8007d98 <__libc_init_array+0x3c>)
 8007d64:	1b64      	subs	r4, r4, r5
 8007d66:	10a4      	asrs	r4, r4, #2
 8007d68:	42a6      	cmp	r6, r4
 8007d6a:	d109      	bne.n	8007d80 <__libc_init_array+0x24>
 8007d6c:	f000 f822 	bl	8007db4 <_init>
 8007d70:	2600      	movs	r6, #0
 8007d72:	4d0a      	ldr	r5, [pc, #40]	; (8007d9c <__libc_init_array+0x40>)
 8007d74:	4c0a      	ldr	r4, [pc, #40]	; (8007da0 <__libc_init_array+0x44>)
 8007d76:	1b64      	subs	r4, r4, r5
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	42a6      	cmp	r6, r4
 8007d7c:	d105      	bne.n	8007d8a <__libc_init_array+0x2e>
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d84:	4798      	blx	r3
 8007d86:	3601      	adds	r6, #1
 8007d88:	e7ee      	b.n	8007d68 <__libc_init_array+0xc>
 8007d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8e:	4798      	blx	r3
 8007d90:	3601      	adds	r6, #1
 8007d92:	e7f2      	b.n	8007d7a <__libc_init_array+0x1e>
 8007d94:	08007e0c 	.word	0x08007e0c
 8007d98:	08007e0c 	.word	0x08007e0c
 8007d9c:	08007e0c 	.word	0x08007e0c
 8007da0:	08007e10 	.word	0x08007e10

08007da4 <memset>:
 8007da4:	4603      	mov	r3, r0
 8007da6:	4402      	add	r2, r0
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d100      	bne.n	8007dae <memset+0xa>
 8007dac:	4770      	bx	lr
 8007dae:	f803 1b01 	strb.w	r1, [r3], #1
 8007db2:	e7f9      	b.n	8007da8 <memset+0x4>

08007db4 <_init>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	bf00      	nop
 8007db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dba:	bc08      	pop	{r3}
 8007dbc:	469e      	mov	lr, r3
 8007dbe:	4770      	bx	lr

08007dc0 <_fini>:
 8007dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc2:	bf00      	nop
 8007dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc6:	bc08      	pop	{r3}
 8007dc8:	469e      	mov	lr, r3
 8007dca:	4770      	bx	lr
