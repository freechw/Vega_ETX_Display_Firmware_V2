
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075cc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e8  080077e8  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077f0  080077f0  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  080077f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  20000268  08007a60  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  08007a60  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ad  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314d  00000000  00000000  0003393e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00037b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e5d  00000000  00000000  00038a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b25  00000000  00000000  0005b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9f7e  00000000  00000000  00073402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004214  00000000  00000000  0012d3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000268 	.word	0x20000268
 8000200:	00000000 	.word	0x00000000
 8000204:	08007798 	.word	0x08007798

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000026c 	.word	0x2000026c
 8000220:	08007798 	.word	0x08007798

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <PollingRoutine>:
void PollingInit(void) {
	someState = 1; // send EconON
}

// main while loop
void PollingRoutine(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	//SomeTask();
	UART_SendMessage();
 8000530:	f000 f840 	bl	80005b4 <UART_SendMessage>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <SaveToUART_TxBuffer>:
//		// buffer is full. Use some notification so user is aware and can increase UART_TX_QUEUE_SIZE
//	}
//	someState = 0;
//}

void SaveToUART_TxBuffer(uint8_t *data, uint32_t dataSize) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	if (txMsg.RING_BUFF.ptr.iCnt_OverFlow) {
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000544:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <SaveToUART_TxBuffer+0x1a>
		//return 1; // Overflow. Increase UART_TX_QUEUE_SIZE
		queueOverFlowed = true;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <SaveToUART_TxBuffer+0x74>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
	}
	memcpy(&txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexIN].data, data, dataSize);
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000554:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	; 0x708
 8000558:	461a      	mov	r2, r3
 800055a:	4613      	mov	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4413      	add	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000564:	4413      	add	r3, r2
 8000566:	3301      	adds	r3, #1
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	f007 f8fd 	bl	800776c <memcpy>
	txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexIN].dataSize = dataSize;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000574:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	; 0x708
 8000578:	4619      	mov	r1, r3
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	b2d8      	uxtb	r0, r3
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	330b      	adds	r3, #11
 800058c:	4602      	mov	r2, r0
 800058e:	701a      	strb	r2, [r3, #0]
	DRV_RingBuffPtr__Input(&txMsg.RING_BUFF.ptr, UART_TX_QUEUE_SIZE);
 8000590:	2196      	movs	r1, #150	; 0x96
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <SaveToUART_TxBuffer+0x78>)
 8000594:	f000 f840 	bl	8000618 <DRV_RingBuffPtr__Input>

	queueOverFlowed = false;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <SaveToUART_TxBuffer+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	//return 0; // no error
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000370 	.word	0x20000370
 80005ac:	20000a80 	.word	0x20000a80
 80005b0:	20000a78 	.word	0x20000a78

080005b4 <UART_SendMessage>:

void UART_SendMessage(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if (txMsg.RING_BUFF.ptr.iCnt_Handle) {
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <UART_SendMessage+0x58>)
 80005ba:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d022      	beq.n	8000608 <UART_SendMessage+0x54>
		if (HAL_UART_Transmit_IT(&huart3,
				txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexOUT].data,
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <UART_SendMessage+0x58>)
 80005c4:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
 80005c8:	461a      	mov	r2, r3
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <UART_SendMessage+0x58>)
 80005d4:	4413      	add	r3, r2
 80005d6:	1c59      	adds	r1, r3, #1
				txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexOUT].dataSize) == HAL_OK) {
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <UART_SendMessage+0x58>)
 80005da:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
 80005de:	4618      	mov	r0, r3
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <UART_SendMessage+0x58>)
 80005e2:	4603      	mov	r3, r0
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4403      	add	r3, r0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	330b      	adds	r3, #11
 80005ee:	781b      	ldrb	r3, [r3, #0]
		if (HAL_UART_Transmit_IT(&huart3,
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <UART_SendMessage+0x5c>)
 80005f6:	f006 fc60 	bl	8006eba <HAL_UART_Transmit_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d103      	bne.n	8000608 <UART_SendMessage+0x54>
			// transmit is good, increment queue pointer to next available message
			DRV_RingBuffPtr__Output(&txMsg.RING_BUFF.ptr, UART_TX_QUEUE_SIZE);
 8000600:	2196      	movs	r1, #150	; 0x96
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <UART_SendMessage+0x60>)
 8000604:	f000 f850 	bl	80006a8 <DRV_RingBuffPtr__Output>
		}
	}
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000370 	.word	0x20000370
 8000610:	20000b70 	.word	0x20000b70
 8000614:	20000a78 	.word	0x20000a78

08000618 <DRV_RingBuffPtr__Input>:
	ptr->iIndexIN = 0;
	ptr->iIndexOUT = 0;
	ptr->iCnt_Handle = 0;
	ptr->iCnt_OverFlow = 0;
}
void DRV_RingBuffPtr__Input(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	ptr->iIndexIN++;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b29a      	uxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	801a      	strh	r2, [r3, #0]
	if (ptr->iIndexIN >= iBufferSize)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	4293      	cmp	r3, r2
 8000638:	d802      	bhi.n	8000640 <DRV_RingBuffPtr__Input+0x28>
		ptr->iIndexIN = 0;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	801a      	strh	r2, [r3, #0]
	ptr->iCnt_Handle++;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	b29a      	uxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	809a      	strh	r2, [r3, #4]
	if (ptr->iIndexIN == ptr->iIndexOUT) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	885b      	ldrh	r3, [r3, #2]
 8000654:	429a      	cmp	r2, r3
 8000656:	d122      	bne.n	800069e <DRV_RingBuffPtr__Input+0x86>
		ptr->iCnt_OverFlow++;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	88db      	ldrh	r3, [r3, #6]
 800065c:	3301      	adds	r3, #1
 800065e:	b29a      	uxth	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	80da      	strh	r2, [r3, #6]
		if (ptr->iCnt_OverFlow > 50000)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	88db      	ldrh	r3, [r3, #6]
 8000668:	f24c 3250 	movw	r2, #50000	; 0xc350
 800066c:	4293      	cmp	r3, r2
 800066e:	d902      	bls.n	8000676 <DRV_RingBuffPtr__Input+0x5e>
			ptr->iCnt_OverFlow = 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	80da      	strh	r2, [r3, #6]
		if (ptr->iIndexIN == 0) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d106      	bne.n	800068c <DRV_RingBuffPtr__Input+0x74>
			ptr->iIndexOUT = iBufferSize - 1;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	3b01      	subs	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	805a      	strh	r2, [r3, #2]
 800068a:	e005      	b.n	8000698 <DRV_RingBuffPtr__Input+0x80>
		} else {
			ptr->iIndexOUT = ptr->iIndexIN - 1;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	3b01      	subs	r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	805a      	strh	r2, [r3, #2]
		}
		ptr->iCnt_Handle = 1;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	809a      	strh	r2, [r3, #4]
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <DRV_RingBuffPtr__Output>:

void DRV_RingBuffPtr__Output(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	if (ptr->iCnt_Handle) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d014      	beq.n	80006e4 <DRV_RingBuffPtr__Output+0x3c>
		ptr->iIndexOUT++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	805a      	strh	r2, [r3, #2]
		if (ptr->iIndexOUT >= iBufferSize)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	885b      	ldrh	r3, [r3, #2]
 80006ca:	461a      	mov	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d802      	bhi.n	80006d8 <DRV_RingBuffPtr__Output+0x30>
			ptr->iIndexOUT = 0;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	805a      	strh	r2, [r3, #2]
		ptr->iCnt_Handle--;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	889b      	ldrh	r3, [r3, #4]
 80006dc:	3b01      	subs	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	809a      	strh	r2, [r3, #4]
	}
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_CAN1_Init+0x9c>)
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_CAN1_Init+0xa0>)
 80006fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_CAN1_Init+0x9c>)
 80006fe:	2209      	movs	r2, #9
 8000700:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_CAN1_Init+0x9c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_CAN1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_CAN1_Init+0x9c>)
 8000710:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000714:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_CAN1_Init+0x9c>)
 8000718:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800071c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_CAN1_Init+0x9c>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_CAN1_Init+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_CAN1_Init+0x9c>)
 800072c:	2200      	movs	r2, #0
 800072e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_CAN1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_CAN1_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_CAN1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_CAN1_Init+0x9c>)
 8000744:	f003 fee6 	bl	8004514 <HAL_CAN_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800074e:	f001 f805 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 8000776:	230e      	movs	r3, #14
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_CAN1_Init+0x9c>)
 8000780:	f003 ffc4 	bl	800470c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000284 	.word	0x20000284
 8000790:	40006400 	.word	0x40006400

08000794 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <HAL_CAN_MspInit+0xbc>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d149      	bne.n	8000848 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007be:	61d3      	str	r3, [r2, #28]
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	4817      	ldr	r0, [pc, #92]	; (8000858 <HAL_CAN_MspInit+0xc4>)
 80007fa:	f004 ff25 	bl	8005648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4811      	ldr	r0, [pc, #68]	; (8000858 <HAL_CAN_MspInit+0xc4>)
 8000814:	f004 ff18 	bl	8005648 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2014      	movs	r0, #20
 800081e:	f004 fd9a 	bl	8005356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000822:	2014      	movs	r0, #20
 8000824:	f004 fdb3 	bl	800538e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2015      	movs	r0, #21
 800082e:	f004 fd92 	bl	8005356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000832:	2015      	movs	r0, #21
 8000834:	f004 fdab 	bl	800538e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2016      	movs	r0, #22
 800083e:	f004 fd8a 	bl	8005356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000842:	2016      	movs	r0, #22
 8000844:	f004 fda3 	bl	800538e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40006400 	.word	0x40006400
 8000854:	40021000 	.word	0x40021000
 8000858:	40010800 	.word	0x40010800

0800085c <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	//timeStampSend();6
//	testFlag_1 = true;
	EVCU_setData_i.dataID = 0;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <EVCU_setData_write+0x70>)
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
	EVCU_setData_i.fixSetS.bit.mode = targetMode;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <EVCU_setData_write+0x74>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	b2d9      	uxtb	r1, r3
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <EVCU_setData_write+0x70>)
 8000878:	7893      	ldrb	r3, [r2, #2]
 800087a:	f361 0301 	bfi	r3, r1, #0, #2
 800087e:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <EVCU_setData_write+0x78>)
 8000882:	7819      	ldrb	r1, [r3, #0]
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <EVCU_setData_write+0x70>)
 8000886:	7893      	ldrb	r3, [r2, #2]
 8000888:	f361 0382 	bfi	r3, r1, #2, #1
 800088c:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <EVCU_setData_write+0x7c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <EVCU_setData_write+0x70>)
 800089c:	7893      	ldrb	r3, [r2, #2]
 800089e:	f361 03c5 	bfi	r3, r1, #3, #3
 80008a2:	7093      	strb	r3, [r2, #2]
	//EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <EVCU_setData_write+0x70>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <EVCU_setData_write+0x70>)
 80008b4:	7892      	ldrb	r2, [r2, #2]
 80008b6:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <EVCU_setData_write+0x80>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4908      	ldr	r1, [pc, #32]	; (80008e0 <EVCU_setData_write+0x84>)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <EVCU_setData_write+0x88>)
 80008c0:	f004 f848 	bl	8004954 <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200002ac 	.word	0x200002ac
 80008d0:	20000333 	.word	0x20000333
 80008d4:	200002bb 	.word	0x200002bb
 80008d8:	2000000b 	.word	0x2000000b
 80008dc:	20000af0 	.word	0x20000af0
 80008e0:	20000a88 	.word	0x20000a88
 80008e4:	20000284 	.word	0x20000284

080008e8 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <EVCU_getData_read_40+0x124>)
 80008fc:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3301      	adds	r3, #1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	10db      	asrs	r3, r3, #3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <EVCU_getData_read_40+0x128>)
 8000910:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	109b      	asrs	r3, r3, #2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <EVCU_getData_read_40+0x12c>)
 8000924:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3301      	adds	r3, #1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	105b      	asrs	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <EVCU_getData_read_40+0x130>)
 8000938:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3301      	adds	r3, #1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <EVCU_getData_read_40+0x134>)
 8000948:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3302      	adds	r3, #2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	09db      	lsrs	r3, r3, #7
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <EVCU_getData_read_40+0x138>)
 8000956:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3302      	adds	r3, #2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	119b      	asrs	r3, r3, #6
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <EVCU_getData_read_40+0x13c>)
 800096a:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3302      	adds	r3, #2
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	111b      	asrs	r3, r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <EVCU_getData_read_40+0x140>)
 800097e:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3302      	adds	r3, #2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	10db      	asrs	r3, r3, #3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <EVCU_getData_read_40+0x144>)
 8000992:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3302      	adds	r3, #2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	109b      	asrs	r3, r3, #2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <EVCU_getData_read_40+0x148>)
 80009a6:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3303      	adds	r3, #3
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <EVCU_getData_read_40+0x14c>)
 80009c0:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3305      	adds	r3, #5
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <EVCU_getData_read_40+0x150>)
 80009cc:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3307      	adds	r3, #7
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3306      	adds	r3, #6
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <EVCU_getData_read_40+0x154>)
 80009e8:	801a      	strh	r2, [r3, #0]
	if (starupMode) {
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <EVCU_getData_read_40+0x158>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <EVCU_getData_read_40+0x118>
		starupMode = false;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <EVCU_getData_read_40+0x158>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <EVCU_getData_read_40+0x140>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <EVCU_getData_read_40+0x15c>)
 80009fe:	701a      	strb	r2, [r3, #0]
	}


}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000314 	.word	0x20000314
 8000a10:	20000316 	.word	0x20000316
 8000a14:	20000317 	.word	0x20000317
 8000a18:	20000318 	.word	0x20000318
 8000a1c:	20000319 	.word	0x20000319
 8000a20:	2000031a 	.word	0x2000031a
 8000a24:	2000031b 	.word	0x2000031b
 8000a28:	2000031c 	.word	0x2000031c
 8000a2c:	20000349 	.word	0x20000349
 8000a30:	2000031e 	.word	0x2000031e
 8000a34:	20000312 	.word	0x20000312
 8000a38:	20000300 	.word	0x20000300
 8000a3c:	2000030c 	.word	0x2000030c
 8000a40:	2000000e 	.word	0x2000000e
 8000a44:	20000332 	.word	0x20000332

08000a48 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d129      	bne.n	8000aac <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b83      	ldr	r3, [pc, #524]	; (8000c74 <EVCU_getData_read_41+0x22c>)
 8000a66:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	111b      	asrs	r3, r3, #4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b7f      	ldr	r3, [pc, #508]	; (8000c78 <EVCU_getData_read_41+0x230>)
 8000a7a:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	119b      	asrs	r3, r3, #6
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <EVCU_getData_read_41+0x234>)
 8000a8e:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	09db      	lsrs	r3, r3, #7
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b79      	ldr	r3, [pc, #484]	; (8000c80 <EVCU_getData_read_41+0x238>)
 8000a9c:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	099b      	lsrs	r3, r3, #6
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b76      	ldr	r3, [pc, #472]	; (8000c84 <EVCU_getData_read_41+0x23c>)
 8000aaa:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d120      	bne.n	8000af6 <EVCU_getData_read_41+0xae>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3303      	adds	r3, #3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3302      	adds	r3, #2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	061b      	lsls	r3, r3, #24
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000adc:	4b6a      	ldr	r3, [pc, #424]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000ade:	601a      	str	r2, [r3, #0]
		distance.range = 10 *canRX[5];
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3305      	adds	r3, #5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b65      	ldr	r3, [pc, #404]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000af4:	80da      	strh	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d127      	bne.n	8000b4e <EVCU_getData_read_41+0x106>

		soc_value = canRX[1];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	785a      	ldrb	r2, [r3, #1]
 8000b02:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <EVCU_getData_read_41+0x244>)
 8000b04:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	789a      	ldrb	r2, [r3, #2]
 8000b0a:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <EVCU_getData_read_41+0x248>)
 8000b0c:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	78da      	ldrb	r2, [r3, #3]
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <EVCU_getData_read_41+0x24c>)
 8000b14:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3305      	adds	r3, #5
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3304      	adds	r3, #4
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b5a      	ldr	r3, [pc, #360]	; (8000c98 <EVCU_getData_read_41+0x250>)
 8000b30:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3307      	adds	r3, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3306      	adds	r3, #6
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <EVCU_getData_read_41+0x254>)
 8000b4c:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d11a      	bne.n	8000b8c <EVCU_getData_read_41+0x144>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3302      	adds	r3, #2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3301      	adds	r3, #1
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <EVCU_getData_read_41+0x258>)
 8000b70:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3304      	adds	r3, #4
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <EVCU_getData_read_41+0x25c>)
 8000b8a:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d11b      	bne.n	8000bcc <EVCU_getData_read_41+0x184>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3302      	adds	r3, #2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000bae:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3305      	adds	r3, #5
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000bca:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	d129      	bne.n	8000c28 <EVCU_getData_read_41+0x1e0>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000bee:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000c0a:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3306      	adds	r3, #6
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3305      	adds	r3, #5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000c26:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d11b      	bne.n	8000c68 <EVCU_getData_read_41+0x220>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3302      	adds	r3, #2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000c4a:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3303      	adds	r3, #3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000c66:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	2000031f 	.word	0x2000031f
 8000c78:	20000320 	.word	0x20000320
 8000c7c:	20000321 	.word	0x20000321
 8000c80:	20000000 	.word	0x20000000
 8000c84:	2000031d 	.word	0x2000031d
 8000c88:	200002d8 	.word	0x200002d8
 8000c8c:	20000304 	.word	0x20000304
 8000c90:	20000305 	.word	0x20000305
 8000c94:	2000030e 	.word	0x2000030e
 8000c98:	2000030a 	.word	0x2000030a
 8000c9c:	20000308 	.word	0x20000308
 8000ca0:	20000306 	.word	0x20000306
 8000ca4:	20000310 	.word	0x20000310
 8000ca8:	200002e8 	.word	0x200002e8

08000cac <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d12d      	bne.n	8000d18 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	785a      	ldrb	r2, [r3, #1]
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000cc2:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000cde:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3305      	adds	r3, #5
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3306      	adds	r3, #6
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000cfa:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3307      	adds	r3, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3306      	adds	r3, #6
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d16:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d121      	bne.n	8000d64 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	785a      	ldrb	r2, [r3, #1]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d26:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3302      	adds	r3, #2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d42:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d4a:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d52:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d5a:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d62:	73da      	strb	r2, [r3, #15]
	}
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	200002f0 	.word	0x200002f0

08000d74 <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000d78:	4b83      	ldr	r3, [pc, #524]	; (8000f88 <setError+0x214>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d13a      	bne.n	8000df6 <setError+0x82>
		switch (err_error) {
 8000d80:	4b82      	ldr	r3, [pc, #520]	; (8000f8c <setError+0x218>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d026      	beq.n	8000dd6 <setError+0x62>
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	dc36      	bgt.n	8000dfa <setError+0x86>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <setError+0x22>
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d010      	beq.n	8000db6 <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000d94:	e031      	b.n	8000dfa <setError+0x86>
			error_on = true;
 8000d96:	4b7e      	ldr	r3, [pc, #504]	; (8000f90 <setError+0x21c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d9c:	4b7d      	ldr	r3, [pc, #500]	; (8000f94 <setError+0x220>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000da2:	4b7d      	ldr	r3, [pc, #500]	; (8000f98 <setError+0x224>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000da8:	4b7c      	ldr	r3, [pc, #496]	; (8000f9c <setError+0x228>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dae:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <setError+0x22c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
			break;
 8000db4:	e022      	b.n	8000dfc <setError+0x88>
			error_on = true;
 8000db6:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <setError+0x21c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dbc:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <setError+0x220>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000dc2:	4b75      	ldr	r3, [pc, #468]	; (8000f98 <setError+0x224>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000dc8:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <setError+0x228>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dce:	4b74      	ldr	r3, [pc, #464]	; (8000fa0 <setError+0x22c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
			break;
 8000dd4:	e012      	b.n	8000dfc <setError+0x88>
			error_on = false;
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <setError+0x21c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <setError+0x220>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000de2:	4b6d      	ldr	r3, [pc, #436]	; (8000f98 <setError+0x224>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000de8:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <setError+0x228>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000dee:	4b6c      	ldr	r3, [pc, #432]	; (8000fa0 <setError+0x22c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
			break;
 8000df4:	e002      	b.n	8000dfc <setError+0x88>
		}
	}
 8000df6:	bf00      	nop
 8000df8:	e000      	b.n	8000dfc <setError+0x88>
			break;
 8000dfa:	bf00      	nop
	if (err_device == 1) { //BMS
 8000dfc:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <setError+0x214>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f040 80bb 	bne.w	8000f7c <setError+0x208>
		switch (err_error) {
 8000e06:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <setError+0x218>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	f200 80a6 	bhi.w	8000f5c <setError+0x1e8>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <setError+0xa4>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e3d 	.word	0x08000e3d
 8000e1c:	08000e5d 	.word	0x08000e5d
 8000e20:	08000e7d 	.word	0x08000e7d
 8000e24:	08000e9d 	.word	0x08000e9d
 8000e28:	08000ebd 	.word	0x08000ebd
 8000e2c:	08000edd 	.word	0x08000edd
 8000e30:	08000efd 	.word	0x08000efd
 8000e34:	08000f1d 	.word	0x08000f1d
 8000e38:	08000f3d 	.word	0x08000f3d
		case 0: //Over_Discharge_Current
			error_on = true;
 8000e3c:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <setError+0x21c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000e42:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <setError+0x220>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <setError+0x224>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000e4e:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <setError+0x228>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000e54:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <setError+0x22c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000e5a:	e090      	b.n	8000f7e <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000e5c:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <setError+0x21c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <setError+0x220>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <setError+0x224>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <setError+0x228>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <setError+0x22c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000e7a:	e080      	b.n	8000f7e <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <setError+0x21c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <setError+0x220>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <setError+0x224>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <setError+0x228>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <setError+0x22c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000e9a:	e070      	b.n	8000f7e <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <setError+0x21c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <setError+0x220>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <setError+0x224>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <setError+0x228>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <setError+0x22c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000eba:	e060      	b.n	8000f7e <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <setError+0x21c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <setError+0x220>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <setError+0x224>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <setError+0x228>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <setError+0x22c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000eda:	e050      	b.n	8000f7e <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <setError+0x21c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <setError+0x220>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <setError+0x224>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <setError+0x228>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <setError+0x22c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000efa:	e040      	b.n	8000f7e <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <setError+0x21c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <setError+0x220>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <setError+0x224>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <setError+0x228>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <setError+0x22c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000f1a:	e030      	b.n	8000f7e <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <setError+0x21c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <setError+0x220>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <setError+0x224>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <setError+0x228>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <setError+0x22c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000f3a:	e020      	b.n	8000f7e <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <setError+0x21c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <setError+0x220>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <setError+0x224>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <setError+0x228>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <setError+0x22c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000f5a:	e010      	b.n	8000f7e <setError+0x20a>
		default:
			error_on = false;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <setError+0x21c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <setError+0x220>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <setError+0x224>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <setError+0x228>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <setError+0x22c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e000      	b.n	8000f7e <setError+0x20a>
		}
	}
 8000f7c:	bf00      	nop
	//_errorSelection = true;
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000320 	.word	0x20000320
 8000f8c:	2000031f 	.word	0x2000031f
 8000f90:	2000033e 	.word	0x2000033e
 8000f94:	2000033f 	.word	0x2000033f
 8000f98:	20000340 	.word	0x20000340
 8000f9c:	20000341 	.word	0x20000341
 8000fa0:	20000342 	.word	0x20000342

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a39      	ldr	r2, [pc, #228]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a33      	ldr	r2, [pc, #204]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_GPIO_Init+0x118>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_GPIO_Init+0x118>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_GPIO_Init+0x118>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <MX_GPIO_Init+0x118>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2103      	movs	r1, #3
 800101c:	4828      	ldr	r0, [pc, #160]	; (80010c0 <MX_GPIO_Init+0x11c>)
 800101e:	f004 fcae 	bl	800597e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8001022:	2303      	movs	r3, #3
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4821      	ldr	r0, [pc, #132]	; (80010c0 <MX_GPIO_Init+0x11c>)
 800103a:	f004 fb05 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin;
 800103e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <MX_GPIO_Init+0x120>)
 8001054:	f004 faf8 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN9_Pin|IN10_Pin
 8001058:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800105c:	613b      	str	r3, [r7, #16]
                          |IN11_Pin|IN12_Pin|IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x11c>)
 800106e:	f004 faeb 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN8_Pin|IN1_Pin;
 8001072:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <MX_GPIO_Init+0x124>)
 8001088:	f004 fade 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Btn_Int_1_Pin|Btn_Int_2_Pin;
 800108c:	23c0      	movs	r3, #192	; 0xc0
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_GPIO_Init+0x128>)
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <MX_GPIO_Init+0x124>)
 80010a0:	f004 fad2 	bl	8005648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2017      	movs	r0, #23
 80010aa:	f004 f954 	bl	8005356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ae:	2017      	movs	r0, #23
 80010b0:	f004 f96d 	bl	800538e <HAL_NVIC_EnableIRQ>

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	10110000 	.word	0x10110000

080010d0 <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4851      	ldr	r0, [pc, #324]	; (8001220 <getInputs+0x150>)
 80010da:	f004 fc39 	bl	8005950 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <getInputs+0x154>)
 80010e8:	7813      	ldrb	r3, [r2, #0]
 80010ea:	f361 0300 	bfi	r3, r1, #0, #1
 80010ee:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	484c      	ldr	r0, [pc, #304]	; (8001228 <getInputs+0x158>)
 80010f6:	f004 fc2b 	bl	8005950 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2d9      	uxtb	r1, r3
 8001102:	4a48      	ldr	r2, [pc, #288]	; (8001224 <getInputs+0x154>)
 8001104:	7813      	ldrb	r3, [r2, #0]
 8001106:	f361 0341 	bfi	r3, r1, #1, #1
 800110a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 800110c:	2108      	movs	r1, #8
 800110e:	4846      	ldr	r0, [pc, #280]	; (8001228 <getInputs+0x158>)
 8001110:	f004 fc1e 	bl	8005950 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	4a41      	ldr	r2, [pc, #260]	; (8001224 <getInputs+0x154>)
 800111e:	7813      	ldrb	r3, [r2, #0]
 8001120:	f361 0382 	bfi	r3, r1, #2, #1
 8001124:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8001126:	2104      	movs	r1, #4
 8001128:	483f      	ldr	r0, [pc, #252]	; (8001228 <getInputs+0x158>)
 800112a:	f004 fc11 	bl	8005950 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <getInputs+0x154>)
 8001138:	7813      	ldrb	r3, [r2, #0]
 800113a:	f361 03c3 	bfi	r3, r1, #3, #1
 800113e:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8001140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001144:	4839      	ldr	r0, [pc, #228]	; (800122c <getInputs+0x15c>)
 8001146:	f004 fc03 	bl	8005950 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2d9      	uxtb	r1, r3
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <getInputs+0x154>)
 8001154:	7813      	ldrb	r3, [r2, #0]
 8001156:	f361 1304 	bfi	r3, r1, #4, #1
 800115a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 800115c:	2120      	movs	r1, #32
 800115e:	4833      	ldr	r0, [pc, #204]	; (800122c <getInputs+0x15c>)
 8001160:	f004 fbf6 	bl	8005950 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	b2d9      	uxtb	r1, r3
 800116c:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <getInputs+0x154>)
 800116e:	7813      	ldrb	r3, [r2, #0]
 8001170:	f361 1345 	bfi	r3, r1, #5, #1
 8001174:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8001176:	2110      	movs	r1, #16
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <getInputs+0x15c>)
 800117a:	f004 fbe9 	bl	8005950 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b2d9      	uxtb	r1, r3
 8001186:	4a27      	ldr	r2, [pc, #156]	; (8001224 <getInputs+0x154>)
 8001188:	7813      	ldrb	r3, [r2, #0]
 800118a:	f361 1386 	bfi	r3, r1, #6, #1
 800118e:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8001190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001194:	4822      	ldr	r0, [pc, #136]	; (8001220 <getInputs+0x150>)
 8001196:	f004 fbdb 	bl	8005950 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	b2d9      	uxtb	r1, r3
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <getInputs+0x154>)
 80011a4:	7813      	ldrb	r3, [r2, #0]
 80011a6:	f361 13c7 	bfi	r3, r1, #7, #1
 80011aa:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <getInputs+0x15c>)
 80011b0:	f004 fbce 	bl	8005950 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <getInputs+0x154>)
 80011be:	7853      	ldrb	r3, [r2, #1]
 80011c0:	f361 0300 	bfi	r3, r1, #0, #1
 80011c4:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <getInputs+0x15c>)
 80011ca:	f004 fbc1 	bl	8005950 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2d9      	uxtb	r1, r3
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <getInputs+0x154>)
 80011d8:	7853      	ldrb	r3, [r2, #1]
 80011da:	f361 0341 	bfi	r3, r1, #1, #1
 80011de:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 80011e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <getInputs+0x15c>)
 80011e6:	f004 fbb3 	bl	8005950 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <getInputs+0x154>)
 80011f4:	7853      	ldrb	r3, [r2, #1]
 80011f6:	f361 0382 	bfi	r3, r1, #2, #1
 80011fa:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <getInputs+0x15c>)
 8001202:	f004 fba5 	bl	8005950 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <getInputs+0x154>)
 8001210:	7853      	ldrb	r3, [r2, #1]
 8001212:	f361 03c3 	bfi	r3, r1, #3, #1
 8001216:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001218:	f000 f8ae 	bl	8001378 <buttonOkay>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010c00 	.word	0x40010c00
 8001224:	200002b4 	.word	0x200002b4
 8001228:	40010800 	.word	0x40010800
 800122c:	40011000 	.word	0x40011000

08001230 <setInputs>:


#ifdef TestBench
void setInputs() {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
//		door = true;
//		HAL_Delay(50);
//	}


	if (gpio.buttonInputs.bit.in7) //pageUp
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <setInputs+0x11c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d011      	beq.n	8001266 <setInputs+0x36>
	{
		buttonCounterForward++;
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <setInputs+0x120>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <setInputs+0x120>)
 800124c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <setInputs+0x120>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d803      	bhi.n	800125e <setInputs+0x2e>
			forward = true;
 8001256:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <setInputs+0x124>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e006      	b.n	800126c <setInputs+0x3c>
		}
		else {
			forward = false;
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <setInputs+0x124>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e002      	b.n	800126c <setInputs+0x3c>
		}
	} else {
		buttonCounterForward = 0;
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <setInputs+0x120>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in5) //pageDown
 800126c:	4b37      	ldr	r3, [pc, #220]	; (800134c <setInputs+0x11c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d011      	beq.n	800129e <setInputs+0x6e>
	{
		buttonCounterBackward++;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <setInputs+0x128>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <setInputs+0x128>)
 8001284:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <setInputs+0x128>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d803      	bhi.n	8001296 <setInputs+0x66>
			backward = true;
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <setInputs+0x12c>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e006      	b.n	80012a4 <setInputs+0x74>
		}
		else {
			backward = false;
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <setInputs+0x12c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <setInputs+0x74>
		}
	} else {
		buttonCounterBackward = 0;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <setInputs+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in8) //back
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <setInputs+0x11c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d011      	beq.n	80012d6 <setInputs+0xa6>
	{
		buttonCounterBack++;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <setInputs+0x130>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <setInputs+0x130>)
 80012bc:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <setInputs+0x130>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d803      	bhi.n	80012ce <setInputs+0x9e>
			back = true;
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <setInputs+0x134>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e006      	b.n	80012dc <setInputs+0xac>
		}
		else {
			back = false;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <setInputs+0x134>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e002      	b.n	80012dc <setInputs+0xac>
		}
	}
	else
	{
		buttonCounterBack = 0;
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <setInputs+0x130>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //mode //After fixing the okay button change mode to okay
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <setInputs+0x11c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00d      	beq.n	8001306 <setInputs+0xd6>
	{
		buttonCounterMode++;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <setInputs+0x138>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <setInputs+0x138>)
 80012f4:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <setInputs+0x138>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d806      	bhi.n	800130c <setInputs+0xdc>
			mode = true;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <setInputs+0x13c>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e002      	b.n	800130c <setInputs+0xdc>
			//mode = false;
		//}
	}
	else
	{
		buttonCounterMode = 0;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <setInputs+0x138>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6 == 1) //okay
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <setInputs+0x11c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d011      	beq.n	800133e <setInputs+0x10e>
	{
		buttonCounterOkay++;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <setInputs+0x140>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <setInputs+0x140>)
 8001324:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <setInputs+0x140>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d803      	bhi.n	8001336 <setInputs+0x106>
			okay = true;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <setInputs+0x144>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 8001334:	e006      	b.n	8001344 <setInputs+0x114>
			okay = false;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <setInputs+0x144>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	e002      	b.n	8001344 <setInputs+0x114>
		buttonCounterOkay = 0;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <setInputs+0x140>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	200002b4 	.word	0x200002b4
 8001350:	20000a82 	.word	0x20000a82
 8001354:	200002b8 	.word	0x200002b8
 8001358:	20000a83 	.word	0x20000a83
 800135c:	200002b9 	.word	0x200002b9
 8001360:	20000a84 	.word	0x20000a84
 8001364:	200002be 	.word	0x200002be
 8001368:	20000a86 	.word	0x20000a86
 800136c:	200002bd 	.word	0x200002bd
 8001370:	20000a85 	.word	0x20000a85
 8001374:	200002ba 	.word	0x200002ba

08001378 <buttonOkay>:

void buttonOkay(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in6 == 1) {
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <buttonOkay+0x54>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <buttonOkay+0x20>
		buttonCounterLongPress++;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <buttonOkay+0x58>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <buttonOkay+0x58>)
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e005      	b.n	80013a4 <buttonOkay+0x2c>
	} else {
		buttonCounterLongPress = 0;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <buttonOkay+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
		okay = false;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <buttonOkay+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <buttonOkay+0x58>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <buttonOkay+0x60>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d308      	bcc.n	80013c2 <buttonOkay+0x4a>
		longpress = true;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <buttonOkay+0x64>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
		okay = false;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <buttonOkay+0x5c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <buttonOkay+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	}

}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200002b4 	.word	0x200002b4
 80013d0:	20000a81 	.word	0x20000a81
 80013d4:	200002ba 	.word	0x200002ba
 80013d8:	20000012 	.word	0x20000012
 80013dc:	200002bc 	.word	0x200002bc

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f003 f810 	bl	8004408 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f003 f86e 	bl	80044cc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f8ac 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f7ff fdd6 	bl	8000fa4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80013f8:	f7ff f97a 	bl	80006f0 <MX_CAN1_Init>
  MX_TIM2_Init();
 80013fc:	f001 fd3e 	bl	8002e7c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001400:	f002 fe90 	bl	8004124 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 8001404:	4b44      	ldr	r3, [pc, #272]	; (8001518 <main+0x138>)
 8001406:	2208      	movs	r2, #8
 8001408:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <main+0x138>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <main+0x138>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <main+0x138>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 800141c:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <main+0x138>)
 800141e:	2242      	movs	r2, #66	; 0x42
 8001420:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <main+0x138>)
 8001424:	2200      	movs	r2, #0
 8001426:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <main+0x13c>)
 800142a:	22f3      	movs	r2, #243	; 0xf3
 800142c:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <main+0x140>)
 8001430:	2208      	movs	r2, #8
 8001432:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <main+0x140>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <main+0x140>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8001440:	4b37      	ldr	r3, [pc, #220]	; (8001520 <main+0x140>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <main+0x140>)
 8001448:	2252      	movs	r2, #82	; 0x52
 800144a:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 800144c:	4b34      	ldr	r3, [pc, #208]	; (8001520 <main+0x140>)
 800144e:	2200      	movs	r2, #0
 8001450:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <main+0x144>)
 8001454:	22f3      	movs	r2, #243	; 0xf3
 8001456:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 8001458:	2208      	movs	r2, #8
 800145a:	2100      	movs	r1, #0
 800145c:	4832      	ldr	r0, [pc, #200]	; (8001528 <main+0x148>)
 800145e:	f006 f993 	bl	8007788 <memset>
	memset(strDATA2, 0, 10);
 8001462:	220a      	movs	r2, #10
 8001464:	2100      	movs	r1, #0
 8001466:	4831      	ldr	r0, [pc, #196]	; (800152c <main+0x14c>)
 8001468:	f006 f98e 	bl	8007788 <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <main+0x148>)
 800146e:	225a      	movs	r2, #90	; 0x5a
 8001470:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <main+0x148>)
 8001474:	22a5      	movs	r2, #165	; 0xa5
 8001476:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <main+0x148>)
 800147a:	2205      	movs	r2, #5
 800147c:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <main+0x148>)
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <main+0x14c>)
 8001486:	225a      	movs	r2, #90	; 0x5a
 8001488:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <main+0x14c>)
 800148c:	22a5      	movs	r2, #165	; 0xa5
 800148e:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <main+0x14c>)
 8001492:	2207      	movs	r2, #7
 8001494:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <main+0x14c>)
 8001498:	2282      	movs	r2, #130	; 0x82
 800149a:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <main+0x150>)
 800149e:	f003 fa15 	bl	80048cc <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014a2:	2102      	movs	r1, #2
 80014a4:	4822      	ldr	r0, [pc, #136]	; (8001530 <main+0x150>)
 80014a6:	f003 fc40 	bl	8004d2a <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <main+0x154>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 80014b0:	4821      	ldr	r0, [pc, #132]	; (8001538 <main+0x158>)
 80014b2:	f005 f85f 	bl	8006574 <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <main+0x15c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <main+0x15c>)
 80014c0:	701a      	strb	r2, [r3, #0]
		counter2++;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <main+0x160>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <main+0x160>)
 80014cc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80014ce:	200a      	movs	r0, #10
 80014d0:	f002 fffc 	bl	80044cc <HAL_Delay>

		if (gpioSetFlag) {
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <main+0x164>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <main+0x110>
			getInputs();
 80014dc:	f7ff fdf8 	bl	80010d0 <getInputs>
			setInputs();
 80014e0:	f7ff fea6 	bl	8001230 <setInputs>
			gpioSetFlag = false;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <main+0x164>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			//mainStateMachine();
			counter = 0;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <main+0x15c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

		}
		if (counter2>5) {
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <main+0x160>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d902      	bls.n	80014fe <main+0x11e>
			//transmit();
			counter2=0;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <main+0x160>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
		}
		if (timeout.timeout_0_5s == true) {
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <main+0x168>)
 8001500:	795b      	ldrb	r3, [r3, #5]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0d6      	beq.n	80014b6 <main+0xd6>
			if (counter2 >= 10) {
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <main+0x160>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d9d2      	bls.n	80014b6 <main+0xd6>
				//transmit();
				counter2 = 0;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <main+0x160>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
		counter++;
 8001516:	e7ce      	b.n	80014b6 <main+0xd6>
 8001518:	20000a88 	.word	0x20000a88
 800151c:	20000afc 	.word	0x20000afc
 8001520:	20000abc 	.word	0x20000abc
 8001524:	20000014 	.word	0x20000014
 8001528:	200002c4 	.word	0x200002c4
 800152c:	200002cc 	.word	0x200002cc
 8001530:	20000284 	.word	0x20000284
 8001534:	2000036c 	.word	0x2000036c
 8001538:	20000b14 	.word	0x20000b14
 800153c:	20000b0c 	.word	0x20000b0c
 8001540:	20000b0d 	.word	0x20000b0d
 8001544:	20000b10 	.word	0x20000b10
 8001548:	20000b5c 	.word	0x20000b5c

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	2238      	movs	r2, #56	; 0x38
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 f914 	bl	8007788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800156e:	2301      	movs	r3, #1
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001584:	2302      	movs	r3, #2
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800158e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fa37 	bl	8005a10 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x60>
  {
    Error_Handler();
 80015a8:	f000 f8d8 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2302      	movs	r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fd38 	bl	800603c <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015d2:	f000 f8c3 	bl	800175c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <SystemClock_Config+0x98>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	3750      	adds	r7, #80	; 0x50
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	42420070 	.word	0x42420070

080015e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	can_Counter++;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015fa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2101      	movs	r1, #1
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001602:	f004 f9bc 	bl	800597e <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f003 fa7b 	bl	8004b08 <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b40      	cmp	r3, #64	; 0x40
 8001618:	d106      	bne.n	8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001624:	f7ff f960 	bl	80008e8 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b41      	cmp	r3, #65	; 0x41
 800162e:	d106      	bne.n	800163e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800163a:	f7ff fa05 	bl	8000a48 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b43      	cmp	r3, #67	; 0x43
 8001644:	d106      	bne.n	8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001650:	f7ff fb2c 	bl	8000cac <EVCU_getData_read_43>
	}
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000b0e 	.word	0x20000b0e
 8001660:	40011000 	.word	0x40011000
 8001664:	20000af4 	.word	0x20000af4
 8001668:	20000aa0 	.word	0x20000aa0

0800166c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	counter2++;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800167e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2102      	movs	r1, #2
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8001686:	f004 f97a 	bl	800597e <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800168e:	2101      	movs	r1, #1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f003 fa39 	bl	8004b08 <HAL_CAN_GetRxMessage>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000b0d 	.word	0x20000b0d
 80016a4:	40011000 	.word	0x40011000
 80016a8:	20000b04 	.word	0x20000b04
 80016ac:	20000ad4 	.word	0x20000ad4

080016b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x20>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
	}
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	200002b6 	.word	0x200002b6
 80016d4:	200002b7 	.word	0x200002b7

080016d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016e2:	f001 fc3b 	bl	8002f5c <tick_count>
	gpioSetFlag = true;//50ms
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
	mainStateMachine();
 80016ec:	f001 f81a 	bl	8002724 <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 80016f0:	2101      	movs	r1, #1
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016f4:	f004 f95b 	bl	80059ae <HAL_GPIO_TogglePin>
	timCounter++;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001702:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 8001704:	f001 fc98 	bl	8003038 <transmit>
	PollingRoutine();
 8001708:	f7fe ff10 	bl	800052c <PollingRoutine>
	//gpioSetFlag = true;

	if (timeout.timeout_1s == true) {
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_TIM_PeriodElapsedCallback+0x44>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001718:	f7ff f8a0 	bl	800085c <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000b5c 	.word	0x20000b5c
 8001728:	20000b10 	.word	0x20000b10
 800172c:	40011000 	.word	0x40011000
 8001730:	20000b0f 	.word	0x20000b0f
 8001734:	20000afc 	.word	0x20000afc

08001738 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_UART_TxCpltCallback+0x20>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d101      	bne.n	8001750 <HAL_UART_TxCpltCallback+0x18>
		PollingRoutine();
 800174c:	f7fe feee 	bl	800052c <PollingRoutine>
	}


}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000b70 	.word	0x20000b70

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <navigation>:
#include <menu.h>


void navigation(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 800176c:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <navigation+0x284>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d103      	bne.n	800177c <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 8001774:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <navigation+0x288>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e002      	b.n	8001782 <navigation+0x1a>
	} else {
		_navigation = false;
 800177c:	4b9c      	ldr	r3, [pc, #624]	; (80019f0 <navigation+0x288>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	}



	switch (currentPage) {
 8001782:	4b9c      	ldr	r3, [pc, #624]	; (80019f4 <navigation+0x28c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b07      	cmp	r3, #7
 800178a:	f200 8121 	bhi.w	80019d0 <navigation+0x268>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <navigation+0x2c>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017b5 	.word	0x080017b5
 8001798:	0800181d 	.word	0x0800181d
 800179c:	0800188b 	.word	0x0800188b
 80017a0:	080018f7 	.word	0x080018f7
 80017a4:	080019d1 	.word	0x080019d1
 80017a8:	080019d1 	.word	0x080019d1
 80017ac:	080019d1 	.word	0x080019d1
 80017b0:	0800196d 	.word	0x0800196d
	case front:
		front_mainPage();
 80017b4:	f000 f936 	bl	8001a24 <front_mainPage>
		if (currentStateSM == driving_state) {
 80017b8:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <navigation+0x290>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d105      	bne.n	80017ce <navigation+0x66>
			_realTimeData = true;
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <navigation+0x294>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80017c8:	4b8d      	ldr	r3, [pc, #564]	; (8001a00 <navigation+0x298>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
			//_testPage = true;
		}
		if (currentPage != previousPage) {
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <navigation+0x28c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <navigation+0x29c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	429a      	cmp	r2, r3
 80017dc:	f000 80fa 	beq.w	80019d4 <navigation+0x26c>
			previousPage = front;
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <navigation+0x29c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <navigation+0x2a0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80017ec:	4b83      	ldr	r3, [pc, #524]	; (80019fc <navigation+0x294>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80017f2:	4b83      	ldr	r3, [pc, #524]	; (8001a00 <navigation+0x298>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80017f8:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <navigation+0x290>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d102      	bne.n	8001808 <navigation+0xa0>
				_transmit_Function = 4;
 8001802:	4b82      	ldr	r3, [pc, #520]	; (8001a0c <navigation+0x2a4>)
 8001804:	2204      	movs	r2, #4
 8001806:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001808:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <navigation+0x290>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80e0 	bne.w	80019d4 <navigation+0x26c>
				_transmit_Function = 1;
 8001814:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <navigation+0x2a4>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 800181a:	e0db      	b.n	80019d4 <navigation+0x26c>
	case trip:
		_Trip_Summary_Page = true;
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <navigation+0x2a8>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
		trip_mainPage();
 8001822:	f000 f959 	bl	8001ad8 <trip_mainPage>
		if (currentStateSM == driving_state) {
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <navigation+0x290>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <navigation+0xd4>
			_realTimeData = true;
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <navigation+0x294>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <navigation+0x298>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 800183c:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <navigation+0x28c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <navigation+0x29c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	429a      	cmp	r2, r3
 800184a:	f000 80c5 	beq.w	80019d8 <navigation+0x270>
			previousPage = trip;
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <navigation+0x29c>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <navigation+0x2a0>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 800185a:	4b68      	ldr	r3, [pc, #416]	; (80019fc <navigation+0x294>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001860:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <navigation+0x298>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <navigation+0x290>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <navigation+0x10e>
				_transmit_Function = 4;
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <navigation+0x2a4>)
 8001872:	2204      	movs	r2, #4
 8001874:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <navigation+0x290>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 80ab 	bne.w	80019d8 <navigation+0x270>
				_transmit_Function = 1;
 8001882:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <navigation+0x2a4>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001888:	e0a6      	b.n	80019d8 <navigation+0x270>
	case after_charge:
		_After_Charge_Page = true;
 800188a:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <navigation+0x2ac>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
		after_charge_mainPage();
 8001890:	f000 f978 	bl	8001b84 <after_charge_mainPage>
		if (currentStateSM == driving_state) {
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <navigation+0x290>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d105      	bne.n	80018aa <navigation+0x142>
			_realTimeData = true;
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <navigation+0x294>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <navigation+0x298>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <navigation+0x28c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <navigation+0x29c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	429a      	cmp	r2, r3
 80018b8:	f000 8090 	beq.w	80019dc <navigation+0x274>
			previousPage = after_charge;
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <navigation+0x29c>)
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80018c2:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <navigation+0x2a0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <navigation+0x294>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <navigation+0x298>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80018d4:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <navigation+0x290>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <navigation+0x17c>
				_transmit_Function = 4;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <navigation+0x2a4>)
 80018e0:	2204      	movs	r2, #4
 80018e2:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <navigation+0x290>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d176      	bne.n	80019dc <navigation+0x274>
				_transmit_Function = 1;
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <navigation+0x2a4>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80018f4:	e072      	b.n	80019dc <navigation+0x274>
	case info:
		_Battery_Info_Page = false;
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <navigation+0x2b0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
		_Motor_Info_Page = false;
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <navigation+0x2b4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		_Inverter_Info_Page = false;
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <navigation+0x2b8>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
		info_mainPage();
 8001908:	f000 f984 	bl	8001c14 <info_mainPage>
		if (currentStateSM == driving_state) {
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <navigation+0x290>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <navigation+0x1ba>
			_realTimeData = true;
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <navigation+0x294>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <navigation+0x298>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <navigation+0x28c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <navigation+0x29c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	429a      	cmp	r2, r3
 8001930:	d056      	beq.n	80019e0 <navigation+0x278>
			previousPage = info;
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <navigation+0x29c>)
 8001934:	2203      	movs	r2, #3
 8001936:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <navigation+0x2a0>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <navigation+0x294>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <navigation+0x298>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <navigation+0x290>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d102      	bne.n	800195a <navigation+0x1f2>
				_transmit_Function = 4;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <navigation+0x2a4>)
 8001956:	2204      	movs	r2, #4
 8001958:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <navigation+0x290>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d13d      	bne.n	80019e0 <navigation+0x278>
				_transmit_Function = 1;
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <navigation+0x2a4>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800196a:	e039      	b.n	80019e0 <navigation+0x278>
	case settings:
		settings_mainPage();
 800196c:	f000 fac2 	bl	8001ef4 <settings_mainPage>
		if (currentStateSM == driving_state) {
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <navigation+0x290>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <navigation+0x21e>
			_realTimeData = true;
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <navigation+0x294>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <navigation+0x298>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <navigation+0x28c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <navigation+0x29c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	429a      	cmp	r2, r3
 8001994:	d026      	beq.n	80019e4 <navigation+0x27c>
			previousPage = settings;
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <navigation+0x29c>)
 8001998:	2207      	movs	r2, #7
 800199a:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <navigation+0x2a0>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <navigation+0x294>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <navigation+0x298>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <navigation+0x290>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <navigation+0x256>
				_transmit_Function = 4;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <navigation+0x2a4>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <navigation+0x290>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10d      	bne.n	80019e4 <navigation+0x27c>
				_transmit_Function = 1;
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <navigation+0x2a4>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80019ce:	e009      	b.n	80019e4 <navigation+0x27c>
	default:
		break;
 80019d0:	bf00      	nop
 80019d2:	e008      	b.n	80019e6 <navigation+0x27e>
		break;
 80019d4:	bf00      	nop
 80019d6:	e006      	b.n	80019e6 <navigation+0x27e>
		break;
 80019d8:	bf00      	nop
 80019da:	e004      	b.n	80019e6 <navigation+0x27e>
		break;
 80019dc:	bf00      	nop
 80019de:	e002      	b.n	80019e6 <navigation+0x27e>
		break;
 80019e0:	bf00      	nop
 80019e2:	e000      	b.n	80019e6 <navigation+0x27e>
		break;
 80019e4:	bf00      	nop
	}

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000316 	.word	0x20000316
 80019f0:	2000034b 	.word	0x2000034b
 80019f4:	2000032a 	.word	0x2000032a
 80019f8:	2000032c 	.word	0x2000032c
 80019fc:	2000034c 	.word	0x2000034c
 8001a00:	2000034e 	.word	0x2000034e
 8001a04:	2000032b 	.word	0x2000032b
 8001a08:	2000034d 	.word	0x2000034d
 8001a0c:	20000369 	.word	0x20000369
 8001a10:	20000361 	.word	0x20000361
 8001a14:	20000360 	.word	0x20000360
 8001a18:	20000362 	.word	0x20000362
 8001a1c:	20000363 	.word	0x20000363
 8001a20:	20000364 	.word	0x20000364

08001a24 <front_mainPage>:

void front_mainPage(void) {
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	if (page_entry) {
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <front_mainPage+0x8c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <front_mainPage+0x24>
		page_entry = false;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <front_mainPage+0x8c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <front_mainPage+0x90>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <front_mainPage+0x94>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <front_mainPage+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <front_mainPage+0x9c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <front_mainPage+0xa0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <front_mainPage+0xa4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00f      	beq.n	8001a7c <front_mainPage+0x58>
		currentPage = trip;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <front_mainPage+0xa8>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <front_mainPage+0x8c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <front_mainPage+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <front_mainPage+0xac>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <front_mainPage+0xb0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
		return;
 8001a7a:	e016      	b.n	8001aaa <front_mainPage+0x86>
	}

	if (backward == true) {
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <front_mainPage+0xac>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d012      	beq.n	8001aaa <front_mainPage+0x86>
		backward = false;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <front_mainPage+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
		currentPage = settings;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <front_mainPage+0xa8>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <front_mainPage+0x8c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <front_mainPage+0xa4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <front_mainPage+0xb0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <front_mainPage+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
		return;
 8001aa8:	bf00      	nop
	}
}
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	2000034f 	.word	0x2000034f
 8001ab8:	20000359 	.word	0x20000359
 8001abc:	2000035a 	.word	0x2000035a
 8001ac0:	2000036d 	.word	0x2000036d
 8001ac4:	2000036e 	.word	0x2000036e
 8001ac8:	200002b8 	.word	0x200002b8
 8001acc:	2000032a 	.word	0x2000032a
 8001ad0:	200002b9 	.word	0x200002b9
 8001ad4:	20000331 	.word	0x20000331

08001ad8 <trip_mainPage>:

void trip_mainPage(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <trip_mainPage+0x88>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <trip_mainPage+0x12>
		page_entry = false;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <trip_mainPage+0x88>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <trip_mainPage+0x8c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <trip_mainPage+0x26>
		tripreset = true;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <trip_mainPage+0x90>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
		longpress = false;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <trip_mainPage+0x8c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <trip_mainPage+0x94>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <trip_mainPage+0x98>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
	trip_reset();
 8001b0a:	f002 fc45 	bl	8004398 <trip_reset>

	if (forward == true) {
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <trip_mainPage+0x9c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00f      	beq.n	8001b36 <trip_mainPage+0x5e>

		currentPage = after_charge;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <trip_mainPage+0xa0>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <trip_mainPage+0x88>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <trip_mainPage+0x9c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <trip_mainPage+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <trip_mainPage+0xa8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
		return;
 8001b34:	e013      	b.n	8001b5e <trip_mainPage+0x86>
	}

	if (backward == true) {
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <trip_mainPage+0xa4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00f      	beq.n	8001b5e <trip_mainPage+0x86>

		currentPage = front;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <trip_mainPage+0xa0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <trip_mainPage+0x88>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <trip_mainPage+0x9c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <trip_mainPage+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <trip_mainPage+0xa8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		return;
 8001b5c:	bf00      	nop
	}
}
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000010 	.word	0x20000010
 8001b64:	200002bc 	.word	0x200002bc
 8001b68:	200002bb 	.word	0x200002bb
 8001b6c:	2000036d 	.word	0x2000036d
 8001b70:	2000036e 	.word	0x2000036e
 8001b74:	200002b8 	.word	0x200002b8
 8001b78:	2000032a 	.word	0x2000032a
 8001b7c:	200002b9 	.word	0x200002b9
 8001b80:	20000331 	.word	0x20000331

08001b84 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <after_charge_mainPage+0x12>
		page_entry = false;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <after_charge_mainPage+0x78>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <after_charge_mainPage+0x7c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <after_charge_mainPage+0x80>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00f      	beq.n	8001bca <after_charge_mainPage+0x46>

		currentPage = info;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <after_charge_mainPage+0x84>)
 8001bac:	2203      	movs	r2, #3
 8001bae:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <after_charge_mainPage+0x80>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <after_charge_mainPage+0x88>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <after_charge_mainPage+0x8c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
		return;
 8001bc8:	e013      	b.n	8001bf2 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <after_charge_mainPage+0x88>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00f      	beq.n	8001bf2 <after_charge_mainPage+0x6e>
		currentPage = trip;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <after_charge_mainPage+0x84>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <after_charge_mainPage+0x80>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <after_charge_mainPage+0x88>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <after_charge_mainPage+0x8c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
		return;
 8001bf0:	bf00      	nop
	}
}
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	2000036d 	.word	0x2000036d
 8001c00:	2000036e 	.word	0x2000036e
 8001c04:	200002b8 	.word	0x200002b8
 8001c08:	2000032a 	.word	0x2000032a
 8001c0c:	200002b9 	.word	0x200002b9
 8001c10:	20000331 	.word	0x20000331

08001c14 <info_mainPage>:

void info_mainPage(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001c18:	4ba5      	ldr	r3, [pc, #660]	; (8001eb0 <info_mainPage+0x29c>)
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001c1e:	4ba5      	ldr	r3, [pc, #660]	; (8001eb4 <info_mainPage+0x2a0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001c24:	4ba4      	ldr	r3, [pc, #656]	; (8001eb8 <info_mainPage+0x2a4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f083 0301 	eor.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <info_mainPage+0x36>
		if (okay == true) {
 8001c32:	4ba2      	ldr	r3, [pc, #648]	; (8001ebc <info_mainPage+0x2a8>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8110 	beq.w	8001e5c <info_mainPage+0x248>
			inInfoBat = true;
 8001c3c:	4b9e      	ldr	r3, [pc, #632]	; (8001eb8 <info_mainPage+0x2a4>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001c42:	4b9e      	ldr	r3, [pc, #632]	; (8001ebc <info_mainPage+0x2a8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e108      	b.n	8001e5c <info_mainPage+0x248>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 8001c4a:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <info_mainPage+0x2ac>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00f      	beq.n	8001c72 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001c52:	4b9c      	ldr	r3, [pc, #624]	; (8001ec4 <info_mainPage+0x2b0>)
 8001c54:	2204      	movs	r2, #4
 8001c56:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001c58:	4b9b      	ldr	r3, [pc, #620]	; (8001ec8 <info_mainPage+0x2b4>)
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 8001c5e:	4b9b      	ldr	r3, [pc, #620]	; (8001ecc <info_mainPage+0x2b8>)
 8001c60:	2205      	movs	r2, #5
 8001c62:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001c64:	4b96      	ldr	r3, [pc, #600]	; (8001ec0 <info_mainPage+0x2ac>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 8001c6a:	2004      	movs	r0, #4
 8001c6c:	f001 ff40 	bl	8003af0 <vehicleInfo_UI>
 8001c70:	e00c      	b.n	8001c8c <info_mainPage+0x78>
		} else {
			if (buttonPressed) {
 8001c72:	4b97      	ldr	r3, [pc, #604]	; (8001ed0 <info_mainPage+0x2bc>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <info_mainPage+0x78>
				vehicleInfo_UI(currentMenu);
 8001c7a:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <info_mainPage+0x2b0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 ff35 	bl	8003af0 <vehicleInfo_UI>
				buttonPressed = false;
 8001c86:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <info_mainPage+0x2bc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (forward == true) {
 8001c8c:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <info_mainPage+0x2c0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d062      	beq.n	8001d5a <info_mainPage+0x146>
			buttonPressed = true;
 8001c94:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <info_mainPage+0x2bc>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001c9a:	4b8a      	ldr	r3, [pc, #552]	; (8001ec4 <info_mainPage+0x2b0>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d11a      	bne.n	8001cda <info_mainPage+0xc6>
 8001ca4:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <info_mainPage+0x2b4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d115      	bne.n	8001cda <info_mainPage+0xc6>
				_Battery_Info_Page = true;
 8001cae:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <info_mainPage+0x2c4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001cb4:	4b89      	ldr	r3, [pc, #548]	; (8001edc <info_mainPage+0x2c8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <info_mainPage+0x2cc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

				currentMenu = infobat;
 8001cc0:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <info_mainPage+0x2b0>)
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001cc6:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <info_mainPage+0x2b4>)
 8001cc8:	2206      	movs	r2, #6
 8001cca:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <info_mainPage+0x2b8>)
 8001cce:	2205      	movs	r2, #5
 8001cd0:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001cd2:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <info_mainPage+0x2c0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
				return;
 8001cd8:	e0e9      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 8001cda:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <info_mainPage+0x2b0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11a      	bne.n	8001d1a <info_mainPage+0x106>
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <info_mainPage+0x2b4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d115      	bne.n	8001d1a <info_mainPage+0x106>
				_Battery_Info_Page = false;
 8001cee:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <info_mainPage+0x2c4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = true;
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <info_mainPage+0x2c8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <info_mainPage+0x2cc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

				currentMenu = infomot;
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d02:	2205      	movs	r2, #5
 8001d04:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <info_mainPage+0x2b8>)
 8001d0e:	2206      	movs	r2, #6
 8001d10:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <info_mainPage+0x2c0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
				return;
 8001d18:	e0c9      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d11a      	bne.n	8001d5a <info_mainPage+0x146>
 8001d24:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d115      	bne.n	8001d5a <info_mainPage+0x146>
				_Battery_Info_Page = false;
 8001d2e:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <info_mainPage+0x2c4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <info_mainPage+0x2c8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = true;
 8001d3a:	4b69      	ldr	r3, [pc, #420]	; (8001ee0 <info_mainPage+0x2cc>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]

				currentMenu = infoinv;
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d42:	2206      	movs	r2, #6
 8001d44:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001d46:	4b60      	ldr	r3, [pc, #384]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d48:	2205      	movs	r2, #5
 8001d4a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <info_mainPage+0x2b8>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <info_mainPage+0x2c0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
				return;
 8001d58:	e0a9      	b.n	8001eae <info_mainPage+0x29a>
			}

		}

		if (backward == true) {
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <info_mainPage+0x2d0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d062      	beq.n	8001e28 <info_mainPage+0x214>
			buttonPressed = true;
 8001d62:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <info_mainPage+0x2bc>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001d68:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d11a      	bne.n	8001da8 <info_mainPage+0x194>
 8001d72:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <info_mainPage+0x2b8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d115      	bne.n	8001da8 <info_mainPage+0x194>
				_Battery_Info_Page = false;
 8001d7c:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <info_mainPage+0x2c4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <info_mainPage+0x2c8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = true;
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <info_mainPage+0x2cc>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]

				currentMenu = infoinv;
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d90:	2206      	movs	r2, #6
 8001d92:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <info_mainPage+0x2b8>)
 8001d96:	2204      	movs	r2, #4
 8001d98:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <info_mainPage+0x2d0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
				return;
 8001da6:	e082      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <info_mainPage+0x2b0>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d11a      	bne.n	8001de8 <info_mainPage+0x1d4>
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <info_mainPage+0x2b8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d115      	bne.n	8001de8 <info_mainPage+0x1d4>
				_Battery_Info_Page = false;
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <info_mainPage+0x2c4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = true;
 8001dc2:	4b46      	ldr	r3, [pc, #280]	; (8001edc <info_mainPage+0x2c8>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001dc8:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <info_mainPage+0x2cc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]

				currentMenu = infomot;
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <info_mainPage+0x2b0>)
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <info_mainPage+0x2b8>)
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <info_mainPage+0x2b4>)
 8001ddc:	2204      	movs	r2, #4
 8001dde:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <info_mainPage+0x2d0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
				return;
 8001de6:	e062      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <info_mainPage+0x2b0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d11a      	bne.n	8001e28 <info_mainPage+0x214>
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <info_mainPage+0x2b8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d115      	bne.n	8001e28 <info_mainPage+0x214>
				_Battery_Info_Page = true;
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <info_mainPage+0x2c4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <info_mainPage+0x2c8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <info_mainPage+0x2cc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]

				currentMenu = infobat;
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <info_mainPage+0x2b0>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <info_mainPage+0x2b8>)
 8001e16:	2205      	movs	r2, #5
 8001e18:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <info_mainPage+0x2b4>)
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <info_mainPage+0x2d0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
				return;
 8001e26:	e042      	b.n	8001eae <info_mainPage+0x29a>
			}
		}

		if (back == true) {
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <info_mainPage+0x2d4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03d      	beq.n	8001eac <info_mainPage+0x298>
			_Battery_Info_Page = true;
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <info_mainPage+0x2c4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
			_Motor_Info_Page = false;
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <info_mainPage+0x2c8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
			_Inverter_Info_Page = false;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <info_mainPage+0x2cc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]

			page_entry = true;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <info_mainPage+0x2ac>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <info_mainPage+0x2a4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
			back = false;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <info_mainPage+0x2d4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <info_mainPage+0x2d8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001e5a:	e027      	b.n	8001eac <info_mainPage+0x298>
	}

	if (forward == true) {
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <info_mainPage+0x2c0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <info_mainPage+0x270>
		currentPage = settings;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <info_mainPage+0x2dc>)
 8001e66:	2207      	movs	r2, #7
 8001e68:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <info_mainPage+0x2ac>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <info_mainPage+0x2c0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <info_mainPage+0x2d0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <info_mainPage+0x2d8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
		return;
 8001e82:	e014      	b.n	8001eae <info_mainPage+0x29a>
	}

	if (backward == true) {
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <info_mainPage+0x2d0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <info_mainPage+0x29a>
		currentPage = after_charge;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <info_mainPage+0x2dc>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <info_mainPage+0x2ac>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <info_mainPage+0x2c0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <info_mainPage+0x2d0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <info_mainPage+0x2d8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		return;
 8001eaa:	e000      	b.n	8001eae <info_mainPage+0x29a>
		return;
 8001eac:	bf00      	nop
	}
}
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000036d 	.word	0x2000036d
 8001eb4:	2000036e 	.word	0x2000036e
 8001eb8:	200002c0 	.word	0x200002c0
 8001ebc:	200002ba 	.word	0x200002ba
 8001ec0:	20000010 	.word	0x20000010
 8001ec4:	2000000b 	.word	0x2000000b
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	2000000d 	.word	0x2000000d
 8001ed0:	20000365 	.word	0x20000365
 8001ed4:	200002b8 	.word	0x200002b8
 8001ed8:	20000362 	.word	0x20000362
 8001edc:	20000363 	.word	0x20000363
 8001ee0:	20000364 	.word	0x20000364
 8001ee4:	200002b9 	.word	0x200002b9
 8001ee8:	200002be 	.word	0x200002be
 8001eec:	20000331 	.word	0x20000331
 8001ef0:	2000032a 	.word	0x2000032a

08001ef4 <settings_mainPage>:

void settings_mainPage(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

	//selection_UI(front);
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <settings_mainPage+0x258>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001efe:	4b94      	ldr	r3, [pc, #592]	; (8002150 <settings_mainPage+0x25c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]

	if (!(inSettings)) {
 8001f04:	4b93      	ldr	r3, [pc, #588]	; (8002154 <settings_mainPage+0x260>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <settings_mainPage+0x3c>
		selection_UI(front);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f001 fefa 	bl	8003d0c <selection_UI>
		if (okay == true) {
 8001f18:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <settings_mainPage+0x264>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8161 	beq.w	80021e4 <settings_mainPage+0x2f0>
			inSettings = true;
 8001f22:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <settings_mainPage+0x260>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <settings_mainPage+0x264>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e159      	b.n	80021e4 <settings_mainPage+0x2f0>
		}
	} else {
		if (page_entry == true) {
 8001f30:	4b8a      	ldr	r3, [pc, #552]	; (800215c <settings_mainPage+0x268>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <settings_mainPage+0x62>
			currentMenu = vehicleMenu;
 8001f38:	4b89      	ldr	r3, [pc, #548]	; (8002160 <settings_mainPage+0x26c>)
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	701a      	strb	r2, [r3, #0]
			previousMenuForward = errorsMenu;
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <settings_mainPage+0x270>)
 8001f40:	220b      	movs	r2, #11
 8001f42:	701a      	strb	r2, [r3, #0]
			previousMenuBack = systemMenu;
 8001f44:	4b88      	ldr	r3, [pc, #544]	; (8002168 <settings_mainPage+0x274>)
 8001f46:	2209      	movs	r2, #9
 8001f48:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <settings_mainPage+0x278>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001f50:	4b82      	ldr	r3, [pc, #520]	; (800215c <settings_mainPage+0x268>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
		}
		if(menuCounter>2)
 8001f56:	4b86      	ldr	r3, [pc, #536]	; (8002170 <settings_mainPage+0x27c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d90f      	bls.n	8001f7e <settings_mainPage+0x8a>
		{
			if (_menuChanged) {
 8001f5e:	4b83      	ldr	r3, [pc, #524]	; (800216c <settings_mainPage+0x278>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <settings_mainPage+0x84>
				_menuChanged = false;
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <settings_mainPage+0x278>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
				selection_UI(currentMenu);
 8001f6c:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <settings_mainPage+0x26c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 feca 	bl	8003d0c <selection_UI>
			}
			menuCounter = 0;
 8001f78:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <settings_mainPage+0x27c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		}


		if (!(menuAccess)) {
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <settings_mainPage+0x280>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 810c 	beq.w	80021a6 <settings_mainPage+0x2b2>
			menuCounter++;
 8001f8e:	4b78      	ldr	r3, [pc, #480]	; (8002170 <settings_mainPage+0x27c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <settings_mainPage+0x27c>)
 8001f98:	701a      	strb	r2, [r3, #0]
			if (forward == true) {
 8001f9a:	4b77      	ldr	r3, [pc, #476]	; (8002178 <settings_mainPage+0x284>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d067      	beq.n	8002072 <settings_mainPage+0x17e>
//				currentMenu--;
//				if (currentMenu <= 7) {
//					currentMenu = errorsMenu;
//				}
				if (currentMenu == errorsMenu && previousMenuBack == vehicleMenu) {
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <settings_mainPage+0x26c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b0b      	cmp	r3, #11
 8001faa:	d114      	bne.n	8001fd6 <settings_mainPage+0xe2>
 8001fac:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <settings_mainPage+0x274>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d10f      	bne.n	8001fd6 <settings_mainPage+0xe2>
					currentMenu = bluetoothMenu;
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <settings_mainPage+0x26c>)
 8001fb8:	220a      	movs	r2, #10
 8001fba:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001fbc:	4b69      	ldr	r3, [pc, #420]	; (8002164 <settings_mainPage+0x270>)
 8001fbe:	2209      	movs	r2, #9
 8001fc0:	701a      	strb	r2, [r3, #0]
					previousMenuBack = errorsMenu;
 8001fc2:	4b69      	ldr	r3, [pc, #420]	; (8002168 <settings_mainPage+0x274>)
 8001fc4:	220b      	movs	r2, #11
 8001fc6:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <settings_mainPage+0x278>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001fce:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <settings_mainPage+0x284>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
					return;
 8001fd4:	e131      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == vehicleMenu && previousMenuBack == systemMenu) {
 8001fd6:	4b62      	ldr	r3, [pc, #392]	; (8002160 <settings_mainPage+0x26c>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d114      	bne.n	800200a <settings_mainPage+0x116>
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <settings_mainPage+0x274>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d10f      	bne.n	800200a <settings_mainPage+0x116>
					currentMenu = errorsMenu;
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <settings_mainPage+0x26c>)
 8001fec:	220b      	movs	r2, #11
 8001fee:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <settings_mainPage+0x270>)
 8001ff2:	220a      	movs	r2, #10
 8001ff4:	701a      	strb	r2, [r3, #0]
					previousMenuBack = vehicleMenu;
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <settings_mainPage+0x274>)
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	; (800216c <settings_mainPage+0x278>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
					forward = false;
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <settings_mainPage+0x284>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
					return;
 8002008:	e117      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == systemMenu && previousMenuBack == bluetoothMenu) {
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <settings_mainPage+0x26c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b09      	cmp	r3, #9
 8002012:	d114      	bne.n	800203e <settings_mainPage+0x14a>
 8002014:	4b54      	ldr	r3, [pc, #336]	; (8002168 <settings_mainPage+0x274>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d10f      	bne.n	800203e <settings_mainPage+0x14a>
					currentMenu = vehicleMenu;
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <settings_mainPage+0x26c>)
 8002020:	2208      	movs	r2, #8
 8002022:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <settings_mainPage+0x270>)
 8002026:	220b      	movs	r2, #11
 8002028:	701a      	strb	r2, [r3, #0]
					previousMenuBack = systemMenu;
 800202a:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <settings_mainPage+0x274>)
 800202c:	2209      	movs	r2, #9
 800202e:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <settings_mainPage+0x278>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
					forward = false;
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <settings_mainPage+0x284>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
					return;
 800203c:	e0fd      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == bluetoothMenu && previousMenuBack == errorsMenu) {
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <settings_mainPage+0x26c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d114      	bne.n	8002072 <settings_mainPage+0x17e>
 8002048:	4b47      	ldr	r3, [pc, #284]	; (8002168 <settings_mainPage+0x274>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b0b      	cmp	r3, #11
 8002050:	d10f      	bne.n	8002072 <settings_mainPage+0x17e>
					currentMenu = systemMenu;
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <settings_mainPage+0x26c>)
 8002054:	2209      	movs	r2, #9
 8002056:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <settings_mainPage+0x270>)
 800205a:	2208      	movs	r2, #8
 800205c:	701a      	strb	r2, [r3, #0]
					previousMenuBack = bluetoothMenu;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <settings_mainPage+0x274>)
 8002060:	220a      	movs	r2, #10
 8002062:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <settings_mainPage+0x278>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
					forward = false;
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <settings_mainPage+0x284>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
					return;
 8002070:	e0e3      	b.n	800223a <settings_mainPage+0x346>
				}
			}

			if (backward == true) {
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <settings_mainPage+0x288>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8082 	beq.w	8002180 <settings_mainPage+0x28c>
//				currentMenu++;
//				if (currentMenu >= 12) {
//					currentMenu = vehicleMenu;
//				}
				if (currentMenu == vehicleMenu && previousMenuForward == errorsMenu) {
 800207c:	4b38      	ldr	r3, [pc, #224]	; (8002160 <settings_mainPage+0x26c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b08      	cmp	r3, #8
 8002084:	d114      	bne.n	80020b0 <settings_mainPage+0x1bc>
 8002086:	4b37      	ldr	r3, [pc, #220]	; (8002164 <settings_mainPage+0x270>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b0b      	cmp	r3, #11
 800208e:	d10f      	bne.n	80020b0 <settings_mainPage+0x1bc>
					currentMenu = systemMenu;
 8002090:	4b33      	ldr	r3, [pc, #204]	; (8002160 <settings_mainPage+0x26c>)
 8002092:	2209      	movs	r2, #9
 8002094:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <settings_mainPage+0x270>)
 8002098:	2208      	movs	r2, #8
 800209a:	701a      	strb	r2, [r3, #0]

					previousMenuBack = bluetoothMenu;
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <settings_mainPage+0x274>)
 800209e:	220a      	movs	r2, #10
 80020a0:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <settings_mainPage+0x278>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
					backward = false;
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <settings_mainPage+0x288>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
					return;
 80020ae:	e0c4      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == errorsMenu && previousMenuForward == bluetoothMenu) {
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <settings_mainPage+0x26c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b0b      	cmp	r3, #11
 80020b8:	d114      	bne.n	80020e4 <settings_mainPage+0x1f0>
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <settings_mainPage+0x270>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d10f      	bne.n	80020e4 <settings_mainPage+0x1f0>
					currentMenu = vehicleMenu;
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <settings_mainPage+0x26c>)
 80020c6:	2208      	movs	r2, #8
 80020c8:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <settings_mainPage+0x270>)
 80020cc:	220b      	movs	r2, #11
 80020ce:	701a      	strb	r2, [r3, #0]

					previousMenuBack = systemMenu;
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <settings_mainPage+0x274>)
 80020d2:	2209      	movs	r2, #9
 80020d4:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 80020d6:	4b25      	ldr	r3, [pc, #148]	; (800216c <settings_mainPage+0x278>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
					backward = false;
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <settings_mainPage+0x288>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
					return;
 80020e2:	e0aa      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == bluetoothMenu && previousMenuForward == systemMenu) {
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <settings_mainPage+0x26c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d114      	bne.n	8002118 <settings_mainPage+0x224>
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <settings_mainPage+0x270>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d10f      	bne.n	8002118 <settings_mainPage+0x224>
					currentMenu = errorsMenu;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <settings_mainPage+0x26c>)
 80020fa:	220b      	movs	r2, #11
 80020fc:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <settings_mainPage+0x270>)
 8002100:	220a      	movs	r2, #10
 8002102:	701a      	strb	r2, [r3, #0]

					previousMenuBack = vehicleMenu;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <settings_mainPage+0x274>)
 8002106:	2208      	movs	r2, #8
 8002108:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <settings_mainPage+0x278>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
					backward = false;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <settings_mainPage+0x288>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
					return;
 8002116:	e090      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == systemMenu && previousMenuForward == vehicleMenu) {
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <settings_mainPage+0x26c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b09      	cmp	r3, #9
 8002120:	d12e      	bne.n	8002180 <settings_mainPage+0x28c>
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <settings_mainPage+0x270>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b08      	cmp	r3, #8
 800212a:	d129      	bne.n	8002180 <settings_mainPage+0x28c>
					currentMenu = bluetoothMenu;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <settings_mainPage+0x26c>)
 800212e:	220a      	movs	r2, #10
 8002130:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <settings_mainPage+0x270>)
 8002134:	2209      	movs	r2, #9
 8002136:	701a      	strb	r2, [r3, #0]

					previousMenuBack = errorsMenu;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <settings_mainPage+0x274>)
 800213a:	220b      	movs	r2, #11
 800213c:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <settings_mainPage+0x278>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
					backward = false;
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <settings_mainPage+0x288>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
					return;
 800214a:	e076      	b.n	800223a <settings_mainPage+0x346>
 800214c:	2000036d 	.word	0x2000036d
 8002150:	2000036e 	.word	0x2000036e
 8002154:	200002bf 	.word	0x200002bf
 8002158:	200002ba 	.word	0x200002ba
 800215c:	20000010 	.word	0x20000010
 8002160:	2000000b 	.word	0x2000000b
 8002164:	2000000d 	.word	0x2000000d
 8002168:	2000000c 	.word	0x2000000c
 800216c:	2000035b 	.word	0x2000035b
 8002170:	2000035c 	.word	0x2000035c
 8002174:	20000334 	.word	0x20000334
 8002178:	200002b8 	.word	0x200002b8
 800217c:	200002b9 	.word	0x200002b9
				}

			}
			if (back == true) {
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <settings_mainPage+0x348>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <settings_mainPage+0x2b2>
				page_entry = true;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <settings_mainPage+0x34c>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
				inSettings = false;
 800218e:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <settings_mainPage+0x350>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
				selection_UI(front);
 8002194:	2000      	movs	r0, #0
 8002196:	f001 fdb9 	bl	8003d0c <selection_UI>
				_menupage = 0;
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <settings_mainPage+0x354>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
				back = false;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <settings_mainPage+0x348>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
			}


		}
		switch (currentMenu) {
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <settings_mainPage+0x358>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3b08      	subs	r3, #8
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d816      	bhi.n	80021e0 <settings_mainPage+0x2ec>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <settings_mainPage+0x2c4>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021cf 	.word	0x080021cf
 80021c0:	080021d5 	.word	0x080021d5
 80021c4:	080021db 	.word	0x080021db
		case vehicleMenu:
			vehicle_page();
 80021c8:	f000 f84a 	bl	8002260 <vehicle_page>
			break;
 80021cc:	e009      	b.n	80021e2 <settings_mainPage+0x2ee>
		case systemMenu:
			system_page();
 80021ce:	f000 f893 	bl	80022f8 <system_page>
			break;
 80021d2:	e006      	b.n	80021e2 <settings_mainPage+0x2ee>
		case bluetoothMenu:
			bluetooth_page();
 80021d4:	f000 fa0e 	bl	80025f4 <bluetooth_page>
			break;
 80021d8:	e003      	b.n	80021e2 <settings_mainPage+0x2ee>
		case errorsMenu:
			errors_page();
 80021da:	f000 fa57 	bl	800268c <errors_page>
			break;
 80021de:	e000      	b.n	80021e2 <settings_mainPage+0x2ee>
		default:
			break;
 80021e0:	bf00      	nop
		}


		return;
 80021e2:	e02a      	b.n	800223a <settings_mainPage+0x346>
	}

	if (forward == true) {
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <settings_mainPage+0x35c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d012      	beq.n	8002212 <settings_mainPage+0x31e>
		currentPage = front;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <settings_mainPage+0x360>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <settings_mainPage+0x34c>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
		forward = false;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <settings_mainPage+0x35c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <settings_mainPage+0x354>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <settings_mainPage+0x364>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
		backward = false;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <settings_mainPage+0x368>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		return;
 8002210:	e013      	b.n	800223a <settings_mainPage+0x346>
	}

	if (backward == true) {
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <settings_mainPage+0x368>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00f      	beq.n	800223a <settings_mainPage+0x346>
		currentPage = info;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <settings_mainPage+0x360>)
 800221c:	2203      	movs	r2, #3
 800221e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <settings_mainPage+0x34c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		forward = false;
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <settings_mainPage+0x35c>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <settings_mainPage+0x354>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <settings_mainPage+0x368>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
		return;
 8002238:	bf00      	nop
	}

}
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200002be 	.word	0x200002be
 8002240:	20000010 	.word	0x20000010
 8002244:	200002bf 	.word	0x200002bf
 8002248:	20000331 	.word	0x20000331
 800224c:	2000000b 	.word	0x2000000b
 8002250:	200002b8 	.word	0x200002b8
 8002254:	2000032a 	.word	0x2000032a
 8002258:	2000036e 	.word	0x2000036e
 800225c:	200002b9 	.word	0x200002b9

08002260 <vehicle_page>:

void vehicle_page(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <vehicle_page+0x7c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <vehicle_page+0x34>
		if (okay == true) {
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <vehicle_page+0x80>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d02e      	beq.n	80022d8 <vehicle_page+0x78>
			menuAccess = true;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <vehicle_page+0x84>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <vehicle_page+0x7c>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <vehicle_page+0x88>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
			okay = false;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <vehicle_page+0x80>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			return;
 8002292:	e021      	b.n	80022d8 <vehicle_page+0x78>
		}
	} else {
		if (subMenuCounter>2) {
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <vehicle_page+0x8c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d909      	bls.n	80022b0 <vehicle_page+0x50>
			if (inTheMenu) {
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <vehicle_page+0x88>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <vehicle_page+0x4a>
				inTheMenu = false;
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <vehicle_page+0x88>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
				//settings_UI(vehicleMenu);
			}
			subMenuCounter = 0;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <vehicle_page+0x8c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(vehicleMenu,10);
 80022b0:	210a      	movs	r1, #10
 80022b2:	2008      	movs	r0, #8
 80022b4:	f001 fc7e 	bl	8003bb4 <settings_UI>


		if (back == true) {
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <vehicle_page+0x90>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <vehicle_page+0x78>
			menuAccess = false;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <vehicle_page+0x84>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <vehicle_page+0x7c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <vehicle_page+0x94>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
			back = false;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <vehicle_page+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000335 	.word	0x20000335
 80022e0:	200002ba 	.word	0x200002ba
 80022e4:	20000334 	.word	0x20000334
 80022e8:	2000033d 	.word	0x2000033d
 80022ec:	2000035d 	.word	0x2000035d
 80022f0:	200002be 	.word	0x200002be
 80022f4:	2000035b 	.word	0x2000035b

080022f8 <system_page>:
void system_page(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <system_page+0x1a0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <system_page+0x48>
		if (okay == true) {
 800230a:	4b64      	ldr	r3, [pc, #400]	; (800249c <system_page+0x1a4>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8142 	beq.w	8002598 <system_page+0x2a0>
			menuAccess = true;
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <system_page+0x1a8>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <system_page+0x1a0>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8002320:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <system_page+0x1ac>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <system_page+0x1a4>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
			currentSubMenu = 0;
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <system_page+0x1b0>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
			previousSubMenuBack = 1;
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <system_page+0x1b4>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
			previousSubMenuForward = 1;
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <system_page+0x1b8>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			return;
 800233e:	e13b      	b.n	80025b8 <system_page+0x2c0>
		}
	} else {
		if (subMenuCounter>2) {
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <system_page+0x1bc>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d909      	bls.n	800235c <system_page+0x64>
			if (inTheMenu) {
 8002348:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <system_page+0x1ac>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <system_page+0x5e>
				inTheMenu = false;
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <system_page+0x1ac>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
				//settings_UI(systemMenu);
			}
			subMenuCounter = 0;
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <system_page+0x1bc>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(systemMenu,currentSubMenu);
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <system_page+0x1b0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	2009      	movs	r0, #9
 8002366:	f001 fc25 	bl	8003bb4 <settings_UI>
		//Time Settings Menu
		if (!inTimeSettings) {
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <system_page+0x1c0>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d06f      	beq.n	8002458 <system_page+0x160>
			if (forward == true) {
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <system_page+0x1c4>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02d      	beq.n	80023dc <system_page+0xe4>

				if (currentSubMenu == 0 && previousSubMenuBack == 1) {
 8002380:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <system_page+0x1b0>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d111      	bne.n	80023ae <system_page+0xb6>
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <system_page+0x1b4>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10c      	bne.n	80023ae <system_page+0xb6>
					currentSubMenu = 1;
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <system_page+0x1b0>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <system_page+0x1b8>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 0;
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <system_page+0x1b4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 80023a6:	4b45      	ldr	r3, [pc, #276]	; (80024bc <system_page+0x1c4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
					return;
 80023ac:	e104      	b.n	80025b8 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuBack == 0) {
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <system_page+0x1b0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d111      	bne.n	80023dc <system_page+0xe4>
 80023b8:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <system_page+0x1b4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <system_page+0xe4>
					currentSubMenu = 0;
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <system_page+0x1b0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <system_page+0x1b8>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 1;
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <system_page+0x1b4>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <system_page+0x1c4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
					return;
 80023da:	e0ed      	b.n	80025b8 <system_page+0x2c0>
				}
			}
			if (backward == true) {
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <system_page+0x1c8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02d      	beq.n	8002440 <system_page+0x148>
				if (currentSubMenu == 0 && previousSubMenuForward == 1) {
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <system_page+0x1b0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d111      	bne.n	8002412 <system_page+0x11a>
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <system_page+0x1b8>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10c      	bne.n	8002412 <system_page+0x11a>
					currentSubMenu = 1;
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <system_page+0x1b0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <system_page+0x1b8>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 0;
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <system_page+0x1b4>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <system_page+0x1c8>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
					return;
 8002410:	e0d2      	b.n	80025b8 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuForward == 0) {
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <system_page+0x1b0>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d111      	bne.n	8002440 <system_page+0x148>
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <system_page+0x1b8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <system_page+0x148>
					currentSubMenu = 0;
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <system_page+0x1b0>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <system_page+0x1b8>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 1;
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <system_page+0x1b4>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <system_page+0x1c8>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
					return;
 800243e:	e0bb      	b.n	80025b8 <system_page+0x2c0>
				}

			}
			if (okay) {
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <system_page+0x1a4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a7 	beq.w	8002598 <system_page+0x2a0>
				inTimeSettings = true;
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <system_page+0x1c0>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
				okay = false;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <system_page+0x1a4>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
				return;
 8002456:	e0af      	b.n	80025b8 <system_page+0x2c0>
			}

		}
		else
		{
			if (okay) {
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <system_page+0x1a4>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d033      	beq.n	80024c8 <system_page+0x1d0>
				okay = false;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <system_page+0x1a4>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <system_page+0x1cc>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <system_page+0x186>
					currentSubMenu = vpCounter;
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <system_page+0x1cc>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <system_page+0x1b0>)
 8002474:	701a      	strb	r2, [r3, #0]
					vpCounter = 4;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <system_page+0x1cc>)
 8002478:	2204      	movs	r2, #4
 800247a:	701a      	strb	r2, [r3, #0]
					return;
 800247c:	e09c      	b.n	80025b8 <system_page+0x2c0>
				}
				if (vpCounter == 4) {
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <system_page+0x1cc>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d120      	bne.n	80024c8 <system_page+0x1d0>
					currentSubMenu = vpCounter;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <system_page+0x1cc>)
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <system_page+0x1b0>)
 800248c:	701a      	strb	r2, [r3, #0]
					vpCounter = 3;
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <system_page+0x1cc>)
 8002490:	2203      	movs	r2, #3
 8002492:	701a      	strb	r2, [r3, #0]
					return;
 8002494:	e090      	b.n	80025b8 <system_page+0x2c0>
 8002496:	bf00      	nop
 8002498:	20000336 	.word	0x20000336
 800249c:	200002ba 	.word	0x200002ba
 80024a0:	20000334 	.word	0x20000334
 80024a4:	2000033d 	.word	0x2000033d
 80024a8:	2000032e 	.word	0x2000032e
 80024ac:	2000032f 	.word	0x2000032f
 80024b0:	20000330 	.word	0x20000330
 80024b4:	2000035d 	.word	0x2000035d
 80024b8:	20000337 	.word	0x20000337
 80024bc:	200002b8 	.word	0x200002b8
 80024c0:	200002b9 	.word	0x200002b9
 80024c4:	20000011 	.word	0x20000011
				}
			}
			if (forward) {
 80024c8:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <system_page+0x2c4>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <system_page+0x206>
			forward = false;
 80024d0:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <system_page+0x2c4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <system_page+0x2c8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d105      	bne.n	80024ea <system_page+0x1f2>
					timerSetValueH++;
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <system_page+0x2cc>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <system_page+0x2cc>)
 80024e8:	701a      	strb	r2, [r3, #0]
				}
				if (vpCounter == 4) {
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <system_page+0x2c8>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d105      	bne.n	80024fe <system_page+0x206>
					timerSetValueMin++;
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <system_page+0x2d0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <system_page+0x2d0>)
 80024fc:	701a      	strb	r2, [r3, #0]
				}
			}

			if (backward) {
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <system_page+0x2d4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d024      	beq.n	8002550 <system_page+0x258>
			backward = false;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <system_page+0x2d4>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			if (vpCounter == 3) {
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <system_page+0x2c8>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d105      	bne.n	8002520 <system_page+0x228>
				timerSetValueH--;
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <system_page+0x2cc>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	3b01      	subs	r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <system_page+0x2cc>)
 800251e:	701a      	strb	r2, [r3, #0]
			}
			if (vpCounter == 4) {
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <system_page+0x2c8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d105      	bne.n	8002534 <system_page+0x23c>
				timerSetValueMin--;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <system_page+0x2d0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <system_page+0x2d0>)
 8002532:	701a      	strb	r2, [r3, #0]
			}

				if (timerSetValueH == 0) {
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <system_page+0x2cc>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <system_page+0x24a>
					timerSetValueH = 23;
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <system_page+0x2cc>)
 800253e:	2217      	movs	r2, #23
 8002540:	701a      	strb	r2, [r3, #0]
				}
				if (timerSetValueMin == 0) {
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <system_page+0x2d0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <system_page+0x258>
					timerSetValueMin = 59;
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <system_page+0x2d0>)
 800254c:	223b      	movs	r2, #59	; 0x3b
 800254e:	701a      	strb	r2, [r3, #0]
				}
			}

			if (timerSetValueH > 24) {
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <system_page+0x2cc>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b18      	cmp	r3, #24
 8002556:	d902      	bls.n	800255e <system_page+0x266>
				timerSetValueH = 0;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <system_page+0x2cc>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
			}

			if (timerSetValueMin > 60) {
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <system_page+0x2d0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b3c      	cmp	r3, #60	; 0x3c
 8002564:	d902      	bls.n	800256c <system_page+0x274>
				timerSetValueMin = 0;
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <system_page+0x2d0>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			}


			if (back) {
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <system_page+0x2d8>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d011      	beq.n	8002598 <system_page+0x2a0>
				inTimeSettings = false;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <system_page+0x2dc>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
				//Trasmit time
				currentSubMenu = 0;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <system_page+0x2e0>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
				previousSubMenuForward = 1;
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <system_page+0x2e4>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
				previousSubMenuBack = 1;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <system_page+0x2e8>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
				timeChanged = true;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <system_page+0x2ec>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
				back = false;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <system_page+0x2d8>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
//		} else {
//
//		}
	}

	if (back == true) {
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <system_page+0x2d8>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <system_page+0x2c0>
		menuAccess = false;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <system_page+0x2f0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <system_page+0x2f4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
		_menuChanged = true;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <system_page+0x2f8>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
		back = false;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <system_page+0x2d8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]

	}
}
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200002b8 	.word	0x200002b8
 80025c0:	20000011 	.word	0x20000011
 80025c4:	20000338 	.word	0x20000338
 80025c8:	20000339 	.word	0x20000339
 80025cc:	200002b9 	.word	0x200002b9
 80025d0:	200002be 	.word	0x200002be
 80025d4:	20000337 	.word	0x20000337
 80025d8:	2000032e 	.word	0x2000032e
 80025dc:	20000330 	.word	0x20000330
 80025e0:	2000032f 	.word	0x2000032f
 80025e4:	2000033a 	.word	0x2000033a
 80025e8:	20000334 	.word	0x20000334
 80025ec:	20000336 	.word	0x20000336
 80025f0:	2000035b 	.word	0x2000035b

080025f4 <bluetooth_page>:

void bluetooth_page(void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <bluetooth_page+0x7c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <bluetooth_page+0x34>
		if (okay == true) {
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <bluetooth_page+0x80>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02e      	beq.n	800266c <bluetooth_page+0x78>
			menuAccess = true;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <bluetooth_page+0x84>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <bluetooth_page+0x7c>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <bluetooth_page+0x88>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <bluetooth_page+0x80>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8002626:	e021      	b.n	800266c <bluetooth_page+0x78>
		if (subMenuCounter>2) {
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <bluetooth_page+0x8c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d909      	bls.n	8002644 <bluetooth_page+0x50>
			if (inTheMenu) {
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <bluetooth_page+0x88>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <bluetooth_page+0x4a>
				inTheMenu = false;
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <bluetooth_page+0x88>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <bluetooth_page+0x8c>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
		settings_UI(bluetoothMenu,10);
 8002644:	210a      	movs	r1, #10
 8002646:	200a      	movs	r0, #10
 8002648:	f001 fab4 	bl	8003bb4 <settings_UI>
		if (back == true) {
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <bluetooth_page+0x90>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <bluetooth_page+0x78>
			menuAccess = false;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <bluetooth_page+0x84>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <bluetooth_page+0x7c>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <bluetooth_page+0x94>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
			back = false;
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <bluetooth_page+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000033b 	.word	0x2000033b
 8002674:	200002ba 	.word	0x200002ba
 8002678:	20000334 	.word	0x20000334
 800267c:	2000033d 	.word	0x2000033d
 8002680:	2000035d 	.word	0x2000035d
 8002684:	200002be 	.word	0x200002be
 8002688:	2000035b 	.word	0x2000035b

0800268c <errors_page>:
void errors_page(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <errors_page+0x7c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <errors_page+0x34>
		if (okay == true) {
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <errors_page+0x80>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02e      	beq.n	8002704 <errors_page+0x78>
			menuAccess = true;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <errors_page+0x84>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <errors_page+0x7c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <errors_page+0x88>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
			okay = false;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <errors_page+0x80>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 80026be:	e021      	b.n	8002704 <errors_page+0x78>
		if (subMenuCounter>2) {
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <errors_page+0x8c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d909      	bls.n	80026dc <errors_page+0x50>
			if (inTheMenu) {
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <errors_page+0x88>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <errors_page+0x4a>
				inTheMenu = false;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <errors_page+0x88>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <errors_page+0x8c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
		settings_UI(errorsMenu,10);
 80026dc:	210a      	movs	r1, #10
 80026de:	200b      	movs	r0, #11
 80026e0:	f001 fa68 	bl	8003bb4 <settings_UI>
		if (back == true) {
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <errors_page+0x90>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <errors_page+0x78>
			menuAccess = false;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <errors_page+0x84>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <errors_page+0x7c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <errors_page+0x94>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
			back = false;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <errors_page+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	2000033c 	.word	0x2000033c
 800270c:	200002ba 	.word	0x200002ba
 8002710:	20000334 	.word	0x20000334
 8002714:	2000033d 	.word	0x2000033d
 8002718:	2000035d 	.word	0x2000035d
 800271c:	200002be 	.word	0x200002be
 8002720:	2000035b 	.word	0x2000035b

08002724 <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <mainStateMachine+0x44>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b03      	cmp	r3, #3
 8002730:	d816      	bhi.n	8002760 <mainStateMachine+0x3c>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <mainStateMachine+0x14>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	0800274f 	.word	0x0800274f
 8002740:	08002755 	.word	0x08002755
 8002744:	0800275b 	.word	0x0800275b
	case startingup_state:
		startUpState();
 8002748:	f000 f810 	bl	800276c <startUpState>
		break;
 800274c:	e009      	b.n	8002762 <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 800274e:	f000 f8e3 	bl	8002918 <driveState>
		break;
 8002752:	e006      	b.n	8002762 <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 8002754:	f000 f982 	bl	8002a5c <chargeState>
		break;
 8002758:	e003      	b.n	8002762 <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 800275a:	f000 f9fd 	bl	8002b58 <errorState>
		break;
 800275e:	e000      	b.n	8002762 <mainStateMachine+0x3e>
	default:
		break;
 8002760:	bf00      	nop
	}
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000032c 	.word	0x2000032c

0800276c <startUpState>:

void startUpState(void) {
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0

	dataCounter++;
 8002770:	4b4c      	ldr	r3, [pc, #304]	; (80028a4 <startUpState+0x138>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <startUpState+0x138>)
 800277a:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 800277c:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <startUpState+0x13c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d018      	beq.n	80027b6 <startUpState+0x4a>
		state_entry = false;
 8002784:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <startUpState+0x13c>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <startUpState+0x140>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 8002790:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <startUpState+0x144>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <startUpState+0x148>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
		_modeSelection = 2;//Clear Mode
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <startUpState+0x14c>)
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
		_setDriverPage = false;
 80027a2:	4b46      	ldr	r3, [pc, #280]	; (80028bc <startUpState+0x150>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80027a8:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <startUpState+0x154>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <startUpState+0x4a>
			_errorSetIcon = false;
 80027b0:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <startUpState+0x158>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
		}
	}


	if (err_error != 0) {
 80027b6:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <startUpState+0x15c>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <startUpState+0x80>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <startUpState+0x154>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d16a      	bne.n	800289c <startUpState+0x130>
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <startUpState+0x160>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <startUpState+0x164>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d064      	beq.n	800289c <startUpState+0x130>
			currentStateSM = Error_state;
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <startUpState+0x168>)
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 80027d8:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <startUpState+0x16c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <startUpState+0x13c>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 80027e4:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <startUpState+0x170>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 80027ea:	e057      	b.n	800289c <startUpState+0x130>
	}

	if (currentstate == 4) {
 80027ec:	4b3c      	ldr	r3, [pc, #240]	; (80028e0 <startUpState+0x174>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d109      	bne.n	8002808 <startUpState+0x9c>
		currentStateSM = charging_state;
 80027f4:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <startUpState+0x168>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 80027fa:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <startUpState+0x16c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002800:	4b29      	ldr	r3, [pc, #164]	; (80028a8 <startUpState+0x13c>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
		return;
 8002806:	e04c      	b.n	80028a2 <startUpState+0x136>
	}
	_oneTimeData = true;
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <startUpState+0x178>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
	if (accessory == 1) {
 800280e:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <startUpState+0x17c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d112      	bne.n	800283c <startUpState+0xd0>
		navigation(); //enable navigation in Accessory Mode
 8002816:	f7fe ffa7 	bl	8001768 <navigation>
		//_modeSelection = 2;//Clear Mode
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <startUpState+0x154>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02b      	beq.n	800287a <startUpState+0x10e>
			entry = true;
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <startUpState+0x180>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
			startup = true;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <startUpState+0x184>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
			checklit = true;
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <startUpState+0x188>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <startUpState+0x18c>)
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e01e      	b.n	800287a <startUpState+0x10e>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 800283c:	4b2f      	ldr	r3, [pc, #188]	; (80028fc <startUpState+0x190>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <startUpState+0x194>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <startUpState+0x198>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
		//currentMode = mode_evcu;
		currentPage = front;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <startUpState+0x140>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]

		if (dataCounter > 2) {
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <startUpState+0x138>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d905      	bls.n	8002868 <startUpState+0xfc>
			_realTimeData = true;
 800285c:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <startUpState+0x19c>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
			dataCounter = 0;
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <startUpState+0x138>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
		}


		inInfoBat = false;
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <startUpState+0x1a0>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
		inSettings = false;
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <startUpState+0x1a4>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]

		_trasmitGlobal = Disengage_Page;
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <startUpState+0x148>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		//_modeSelection = 2;//Clear Mode
	}

	//StartingUp Transmit flag
	_startingUp = true;
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <startUpState+0x18c>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]

	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <startUpState+0x1a8>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10b      	bne.n	80028a0 <startUpState+0x134>
		return;
	}

	currentStateSM = driving_state;
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <startUpState+0x168>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <startUpState+0x16c>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
	//_modeSelection = true;
	if (readytodrive == 1) {

	}
	state_entry = true;
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <startUpState+0x13c>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e002      	b.n	80028a2 <startUpState+0x136>
		return; //Will exit from the function
 800289c:	bf00      	nop
 800289e:	e000      	b.n	80028a2 <startUpState+0x136>
		return;
 80028a0:	bf00      	nop
}
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000b11 	.word	0x20000b11
 80028a8:	2000000f 	.word	0x2000000f
 80028ac:	2000032a 	.word	0x2000032a
 80028b0:	200002ba 	.word	0x200002ba
 80028b4:	2000036e 	.word	0x2000036e
 80028b8:	2000034f 	.word	0x2000034f
 80028bc:	2000034d 	.word	0x2000034d
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000353 	.word	0x20000353
 80028c8:	2000031f 	.word	0x2000031f
 80028cc:	20000004 	.word	0x20000004
 80028d0:	20000324 	.word	0x20000324
 80028d4:	2000032c 	.word	0x2000032c
 80028d8:	2000032d 	.word	0x2000032d
 80028dc:	20000354 	.word	0x20000354
 80028e0:	20000314 	.word	0x20000314
 80028e4:	2000034e 	.word	0x2000034e
 80028e8:	20000316 	.word	0x20000316
 80028ec:	20000009 	.word	0x20000009
 80028f0:	20000008 	.word	0x20000008
 80028f4:	2000000a 	.word	0x2000000a
 80028f8:	2000034a 	.word	0x2000034a
 80028fc:	200002b8 	.word	0x200002b8
 8002900:	200002b9 	.word	0x200002b9
 8002904:	2000034b 	.word	0x2000034b
 8002908:	2000034c 	.word	0x2000034c
 800290c:	200002c0 	.word	0x200002c0
 8002910:	200002bf 	.word	0x200002bf
 8002914:	20000317 	.word	0x20000317

08002918 <driveState>:

void driveState(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	if (state_entry) {
 800291c:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <driveState+0xec>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d021      	beq.n	8002968 <driveState+0x50>
		state_entry = false;
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <driveState+0xec>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 800292a:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <driveState+0xf0>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <driveState+0xf4>)
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <driveState+0xf8>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <driveState+0xfc>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
		_drivePageSet = front;
 8002942:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <driveState+0x100>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
		///////////////////////
		_gearChanged = true;
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <driveState+0x104>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
		_modeSelection = 1;
 800294e:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <driveState+0x108>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
		modeIcon = true;
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <driveState+0x10c>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 800295a:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <driveState+0x110>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <driveState+0x50>
			_errorSetIcon = false;
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <driveState+0x114>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
		}
	}
	dataCounter++;
 8002968:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <driveState+0xfc>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <driveState+0xfc>)
 8002972:	701a      	strb	r2, [r3, #0]
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8002974:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <driveState+0x110>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d112      	bne.n	80029a2 <driveState+0x8a>
 800297c:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <driveState+0x118>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <driveState+0x11c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d00c      	beq.n	80029a2 <driveState+0x8a>
		currentStateSM = Error_state;
 8002988:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <driveState+0x120>)
 800298a:	2203      	movs	r2, #3
 800298c:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <driveState+0x124>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <driveState+0xec>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <driveState+0x128>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
		return;
 80029a0:	e02e      	b.n	8002a00 <driveState+0xe8>
	}

	if (accessory == 1) {
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <driveState+0x12c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d109      	bne.n	80029be <driveState+0xa6>
		currentStateSM = startingup_state;
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <driveState+0x120>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <driveState+0x124>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <driveState+0xec>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
		return;
 80029bc:	e020      	b.n	8002a00 <driveState+0xe8>
	}

	if (currentstate == 2) {
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <driveState+0x130>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d102      	bne.n	80029cc <driveState+0xb4>
		evcuMode();
 80029c6:	f001 fc47 	bl	8004258 <evcuMode>
 80029ca:	e002      	b.n	80029d2 <driveState+0xba>
	}
	else
	{
		mode = false;
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <driveState+0x134>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 80029d2:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <driveState+0x138>)
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <driveState+0x130>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d006      	beq.n	80029ec <driveState+0xd4>
		_gearChanged = true;
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <driveState+0x104>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <driveState+0x130>)
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <driveState+0x138>)
 80029ea:	701a      	strb	r2, [r3, #0]
	}

	navigation();
 80029ec:	f7fe febc 	bl	8001768 <navigation>

//	if (_modeChanged) {
//		//modeSelection(currentMode);	//This should be called using a flag _modeSelection
//		_modeSelection = true;
//	}
	if (rtn) { //rtn True when there is a error
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <driveState+0x13c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <driveState+0xe8>
		_allowNavigation = true;
 80029f8:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <driveState+0x140>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
		return;
 80029fe:	bf00      	nop
	}
}
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000000f 	.word	0x2000000f
 8002a08:	2000032a 	.word	0x2000032a
 8002a0c:	20000302 	.word	0x20000302
 8002a10:	2000036e 	.word	0x2000036e
 8002a14:	20000b11 	.word	0x20000b11
 8002a18:	2000036d 	.word	0x2000036d
 8002a1c:	2000035a 	.word	0x2000035a
 8002a20:	2000034f 	.word	0x2000034f
 8002a24:	20000346 	.word	0x20000346
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000353 	.word	0x20000353
 8002a30:	20000004 	.word	0x20000004
 8002a34:	20000324 	.word	0x20000324
 8002a38:	2000032c 	.word	0x2000032c
 8002a3c:	2000032d 	.word	0x2000032d
 8002a40:	20000354 	.word	0x20000354
 8002a44:	20000316 	.word	0x20000316
 8002a48:	20000314 	.word	0x20000314
 8002a4c:	200002bd 	.word	0x200002bd
 8002a50:	20000315 	.word	0x20000315
 8002a54:	20000329 	.word	0x20000329
 8002a58:	20000350 	.word	0x20000350

08002a5c <chargeState>:

void chargeState(void) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	if (state_entry) {
 8002a60:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <chargeState+0xc0>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00f      	beq.n	8002a88 <chargeState+0x2c>
		state_entry = false;
 8002a68:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <chargeState+0xc0>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <chargeState+0xc4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <chargeState+0xc8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <chargeState+0xcc>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <chargeState+0x2c>
			_errorSetIcon = false;
 8002a82:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <chargeState+0xd0>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <chargeState+0xd4>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <chargeState+0xd8>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <chargeState+0xdc>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <chargeState+0xe0>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d009      	beq.n	8002ab6 <chargeState+0x5a>
		currentStateSM = startingup_state;
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <chargeState+0xe4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002aa8:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <chargeState+0xe8>)
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <chargeState+0xc0>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
		return;
 8002ab4:	e02e      	b.n	8002b14 <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <chargeState+0xcc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d113      	bne.n	8002ae6 <chargeState+0x8a>
		currentStateSM = Error_state;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <chargeState+0xe4>)
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <chargeState+0xe8>)
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <chargeState+0xc0>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <chargeState+0xec>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <chargeState+0xcc>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <chargeState+0xb6>
			_errorSetIcon = false;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <chargeState+0xd0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
		}
		return;
 8002ae4:	e015      	b.n	8002b12 <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <chargeState+0xf0>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d106      	bne.n	8002afc <chargeState+0xa0>
		_chargeComplete = true;
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <chargeState+0xf4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <chargeState+0xf8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
		return;
 8002afa:	e00b      	b.n	8002b14 <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <chargeState+0xf8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <chargeState+0xf8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e000      	b.n	8002b14 <chargeState+0xb8>
		return;
 8002b12:	bf00      	nop
	}

}
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000000f 	.word	0x2000000f
 8002b20:	2000036e 	.word	0x2000036e
 8002b24:	2000034a 	.word	0x2000034a
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000353 	.word	0x20000353
 8002b30:	20000355 	.word	0x20000355
 8002b34:	2000034c 	.word	0x2000034c
 8002b38:	2000034e 	.word	0x2000034e
 8002b3c:	20000314 	.word	0x20000314
 8002b40:	2000032c 	.word	0x2000032c
 8002b44:	2000032d 	.word	0x2000032d
 8002b48:	20000354 	.word	0x20000354
 8002b4c:	20000348 	.word	0x20000348
 8002b50:	20000357 	.word	0x20000357
 8002b54:	20000356 	.word	0x20000356

08002b58 <errorState>:

void errorState(void) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0

	if (state_entry) {
 8002b5c:	4b63      	ldr	r3, [pc, #396]	; (8002cec <errorState+0x194>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01b      	beq.n	8002b9c <errorState+0x44>
		state_entry = false;
 8002b64:	4b61      	ldr	r3, [pc, #388]	; (8002cec <errorState+0x194>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 8002b6a:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <errorState+0x198>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
		error_check = true;
 8002b70:	4b60      	ldr	r3, [pc, #384]	; (8002cf4 <errorState+0x19c>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 8002b76:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <errorState+0x1a0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
		rtn = true;
 8002b7c:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <errorState+0x1a4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002b82:	4b5f      	ldr	r3, [pc, #380]	; (8002d00 <errorState+0x1a8>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 8002b88:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <errorState+0x1ac>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002b8e:	4b5e      	ldr	r3, [pc, #376]	; (8002d08 <errorState+0x1b0>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <errorState+0x44>
			_errorSetIcon = false;
 8002b96:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <errorState+0x1b4>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 8002b9c:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <errorState+0x1b8>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]

	setError();
 8002ba2:	f7fe f8e7 	bl	8000d74 <setError>

	_errorSetPopup = true; //Transmit pop-up
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <errorState+0x1bc>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 8002bac:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <errorState+0x1b4>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 8002bb2:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <errorState+0x1c0>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 8002bb8:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <errorState+0x1c4>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <errorState+0x74>
		_errorSetPopup = false;
 8002bc0:	4b54      	ldr	r3, [pc, #336]	; (8002d14 <errorState+0x1bc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <errorState+0x1c0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 8002bcc:	f001 fb44 	bl	8004258 <evcuMode>

	if (previousStateSM == driving_state) {
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <errorState+0x1c8>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d123      	bne.n	8002c22 <errorState+0xca>
		modeSelection(currentMode);
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <errorState+0x1cc>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f9af 	bl	8003f44 <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <errorState+0x1d0>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <errorState+0xca>
			err_previous = err_fullerror;
 8002bee:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <errorState+0x1d4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <errorState+0x1d8>)
 8002bf4:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 8002bf6:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <errorState+0x1dc>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002bfc:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <errorState+0x1c8>)
 8002bfe:	2203      	movs	r2, #3
 8002c00:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002c02:	4b3a      	ldr	r3, [pc, #232]	; (8002cec <errorState+0x194>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002c08:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <errorState+0x1d0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <errorState+0x1bc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <errorState+0x1c0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <errorState+0x1c4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
			return;
 8002c20:	e063      	b.n	8002cea <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <errorState+0x1c8>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d10d      	bne.n	8002c48 <errorState+0xf0>
 8002c2c:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <errorState+0x19c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <errorState+0xf0>
		charge_error = true;
 8002c34:	4b40      	ldr	r3, [pc, #256]	; (8002d38 <errorState+0x1e0>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002c3a:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <errorState+0x194>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 8002c40:	200f      	movs	r0, #15
 8002c42:	f000 ff7f 	bl	8003b44 <charging_UI>
		return;
 8002c46:	e050      	b.n	8002cea <errorState+0x192>
	}

	if (accessory == 1) {
 8002c48:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <errorState+0x1e4>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d110      	bne.n	8002c72 <errorState+0x11a>
		err_previous = err_fullerror;
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <errorState+0x1d4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a36      	ldr	r2, [pc, #216]	; (8002d30 <errorState+0x1d8>)
 8002c56:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <errorState+0x1dc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <errorState+0x1c8>)
 8002c60:	2203      	movs	r2, #3
 8002c62:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <errorState+0x194>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <errorState+0x1bc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 8002c70:	e03b      	b.n	8002cea <errorState+0x192>
	}

	if (okay) {
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <errorState+0x1d0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <errorState+0x140>
		okay = false;
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <errorState+0x1d0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <errorState+0x1a0>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <errorState+0x1bc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <errorState+0x1c0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <errorState+0x1c4>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 8002c98:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <errorState+0x1a4>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d024      	beq.n	8002cea <errorState+0x192>
		if (err_State_Navigation) {
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <errorState+0x1a0>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 8002ca8:	f7fe fd5e 	bl	8001768 <navigation>
			_errorSetPopup = false;
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <errorState+0x1bc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <errorState+0x1c0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 8002cb8:	e016      	b.n	8002ce8 <errorState+0x190>
			if (mode) {
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <errorState+0x1e8>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00f      	beq.n	8002ce2 <errorState+0x18a>
				mode = false;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <errorState+0x1e8>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <errorState+0x1bc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <errorState+0x1c0>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <errorState+0x1cc>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f932 	bl	8003f44 <modeSelection>
		return;
 8002ce0:	e002      	b.n	8002ce8 <errorState+0x190>
				_errorSetCode = true;
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <errorState+0x1c0>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	701a      	strb	r2, [r3, #0]
		return;
 8002ce8:	bf00      	nop
	}
}
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000000f 	.word	0x2000000f
 8002cf0:	2000032a 	.word	0x2000032a
 8002cf4:	20000344 	.word	0x20000344
 8002cf8:	20000328 	.word	0x20000328
 8002cfc:	20000329 	.word	0x20000329
 8002d00:	20000356 	.word	0x20000356
 8002d04:	2000036e 	.word	0x2000036e
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	20000353 	.word	0x20000353
 8002d10:	2000034c 	.word	0x2000034c
 8002d14:	20000351 	.word	0x20000351
 8002d18:	20000352 	.word	0x20000352
 8002d1c:	20000354 	.word	0x20000354
 8002d20:	2000032d 	.word	0x2000032d
 8002d24:	20000332 	.word	0x20000332
 8002d28:	200002ba 	.word	0x200002ba
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	20000324 	.word	0x20000324
 8002d34:	2000032c 	.word	0x2000032c
 8002d38:	20000347 	.word	0x20000347
 8002d3c:	20000316 	.word	0x20000316
 8002d40:	200002bd 	.word	0x200002bd

08002d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_MspInit+0x5c>)
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_MspInit+0x5c>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6193      	str	r3, [r2, #24]
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_MspInit+0x5c>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <HAL_MspInit+0x5c>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4a0e      	ldr	r2, [pc, #56]	; (8002da0 <HAL_MspInit+0x5c>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61d3      	str	r3, [r2, #28]
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_MspInit+0x5c>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_MspInit+0x60>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_MspInit+0x60>)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40010000 	.word	0x40010000

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dac:	e7fe      	b.n	8002dac <NMI_Handler+0x4>

08002dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db2:	e7fe      	b.n	8002db2 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <MemManage_Handler+0x4>

08002dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dee:	f001 fb51 	bl	8004494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <CAN1_RX0_IRQHandler+0x10>)
 8002dfe:	f001 ffb9 	bl	8004d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000284 	.word	0x20000284

08002e0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <CAN1_RX1_IRQHandler+0x10>)
 8002e12:	f001 ffaf 	bl	8004d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000284 	.word	0x20000284

08002e20 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <CAN1_SCE_IRQHandler+0x10>)
 8002e26:	f001 ffa5 	bl	8004d74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000284 	.word	0x20000284

08002e34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 8002e38:	2040      	movs	r0, #64	; 0x40
 8002e3a:	f002 fdd1 	bl	80059e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 8002e3e:	2080      	movs	r0, #128	; 0x80
 8002e40:	f002 fdce 	bl	80059e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <TIM2_IRQHandler+0x10>)
 8002e4e:	f003 fbeb 	bl	8006628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000b14 	.word	0x20000b14

08002e5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <USART3_IRQHandler+0x10>)
 8002e62:	f004 f86f 	bl	8006f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000b70 	.word	0x20000b70

08002e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e90:	463b      	mov	r3, r7
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e98:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ea2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002eb0:	2264      	movs	r2, #100	; 0x64
 8002eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb4:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ec0:	4813      	ldr	r0, [pc, #76]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ec2:	f003 fb07 	bl	80064d4 <HAL_TIM_Base_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ecc:	f7fe fc46 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002ede:	f003 fcab 	bl	8006838 <HAL_TIM_ConfigClockSource>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002ee8:	f7fe fc38 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_TIM2_Init+0x94>)
 8002efa:	f003 fe87 	bl	8006c0c <HAL_TIMEx_MasterConfigSynchronization>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f04:	f7fe fc2a 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f08:	bf00      	nop
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000b14 	.word	0x20000b14

08002f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f24:	d113      	bne.n	8002f4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <HAL_TIM_Base_MspInit+0x44>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <HAL_TIM_Base_MspInit+0x44>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_TIM_Base_MspInit+0x44>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	201c      	movs	r0, #28
 8002f44:	f002 fa07 	bl	8005356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f48:	201c      	movs	r0, #28
 8002f4a:	f002 fa20 	bl	800538e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000

08002f5c <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d054      	beq.n	8003024 <tick_count+0xc8>
 8002f7a:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d854      	bhi.n	800302c <tick_count+0xd0>
 8002f82:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002f86:	d049      	beq.n	800301c <tick_count+0xc0>
 8002f88:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002f8c:	d84e      	bhi.n	800302c <tick_count+0xd0>
 8002f8e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002f92:	d03f      	beq.n	8003014 <tick_count+0xb8>
 8002f94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002f98:	d848      	bhi.n	800302c <tick_count+0xd0>
 8002f9a:	2bc8      	cmp	r3, #200	; 0xc8
 8002f9c:	d036      	beq.n	800300c <tick_count+0xb0>
 8002f9e:	2bc8      	cmp	r3, #200	; 0xc8
 8002fa0:	d844      	bhi.n	800302c <tick_count+0xd0>
 8002fa2:	2ba0      	cmp	r3, #160	; 0xa0
 8002fa4:	d02e      	beq.n	8003004 <tick_count+0xa8>
 8002fa6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fa8:	d840      	bhi.n	800302c <tick_count+0xd0>
 8002faa:	2b78      	cmp	r3, #120	; 0x78
 8002fac:	d026      	beq.n	8002ffc <tick_count+0xa0>
 8002fae:	2b78      	cmp	r3, #120	; 0x78
 8002fb0:	d83c      	bhi.n	800302c <tick_count+0xd0>
 8002fb2:	2b50      	cmp	r3, #80	; 0x50
 8002fb4:	d01e      	beq.n	8002ff4 <tick_count+0x98>
 8002fb6:	2b50      	cmp	r3, #80	; 0x50
 8002fb8:	d838      	bhi.n	800302c <tick_count+0xd0>
 8002fba:	2b28      	cmp	r3, #40	; 0x28
 8002fbc:	d016      	beq.n	8002fec <tick_count+0x90>
 8002fbe:	2b28      	cmp	r3, #40	; 0x28
 8002fc0:	d834      	bhi.n	800302c <tick_count+0xd0>
 8002fc2:	2b14      	cmp	r3, #20
 8002fc4:	d00e      	beq.n	8002fe4 <tick_count+0x88>
 8002fc6:	2b14      	cmp	r3, #20
 8002fc8:	d830      	bhi.n	800302c <tick_count+0xd0>
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d002      	beq.n	8002fd4 <tick_count+0x78>
 8002fce:	2b0a      	cmp	r3, #10
 8002fd0:	d004      	beq.n	8002fdc <tick_count+0x80>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 8002fd2:	e02b      	b.n	800302c <tick_count+0xd0>
			timer_ptr->timeout_50ms = true;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	711a      	strb	r2, [r3, #4]
			break;
 8002fda:	e028      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_0_5s = true;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	715a      	strb	r2, [r3, #5]
			break;
 8002fe2:	e024      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_1s = true;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	719a      	strb	r2, [r3, #6]
			break;
 8002fea:	e020      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_2s = true;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	71da      	strb	r2, [r3, #7]
			break;
 8002ff2:	e01c      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_4s = true;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	721a      	strb	r2, [r3, #8]
			break;
 8002ffa:	e018      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_6s = true;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	725a      	strb	r2, [r3, #9]
			break;
 8003002:	e014      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_8s = true;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	729a      	strb	r2, [r3, #10]
			break;
 800300a:	e010      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_10s = true;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	72da      	strb	r2, [r3, #11]
			break;
 8003012:	e00c      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_15s = true;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	731a      	strb	r2, [r3, #12]
			break;
 800301a:	e008      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_30s = true;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	735a      	strb	r2, [r3, #13]
			break;
 8003022:	e004      	b.n	800302e <tick_count+0xd2>
			timer_ptr->timeout_5m = true;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	739a      	strb	r2, [r3, #14]
			break;
 800302a:	e000      	b.n	800302e <tick_count+0xd2>
			break;
 800302c:	bf00      	nop
	}
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	_transmit_Function++;
 800303c:	4b63      	ldr	r3, [pc, #396]	; (80031cc <transmit+0x194>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b61      	ldr	r3, [pc, #388]	; (80031cc <transmit+0x194>)
 8003046:	701a      	strb	r2, [r3, #0]
	//if (_transmit_Function == 1) {
		if (_realTimeData) {
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <transmit+0x198>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <transmit+0x22>
			realTimeData();
 8003050:	f000 fabc 	bl	80035cc <realTimeData>
			_realTimeData = false;
 8003054:	4b5e      	ldr	r3, [pc, #376]	; (80031d0 <transmit+0x198>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
			//return;
		}
	//}

	//if (_transmit_Function == 1) {
		if (_oneTimeData) {
 800305a:	4b5e      	ldr	r3, [pc, #376]	; (80031d4 <transmit+0x19c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <transmit+0x34>
			oneTimeData();
 8003062:	f000 fba7 	bl	80037b4 <oneTimeData>
			_oneTimeData = false;
 8003066:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <transmit+0x19c>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
			//return;
	//	}
	}

	//if (_transmit_Function == 2) {
		if (_startingUp) {
 800306c:	4b5a      	ldr	r3, [pc, #360]	; (80031d8 <transmit+0x1a0>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <transmit+0x46>
			_startingUp = false;
 8003074:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <transmit+0x1a0>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
			startingUp();
 800307a:	f000 f8d3 	bl	8003224 <startingUp>
			//return;
		}
	//}

	//if (_transmit_Function == 3) {
		if (_gearChanged) {
 800307e:	4b57      	ldr	r3, [pc, #348]	; (80031dc <transmit+0x1a4>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <transmit+0x5a>
			_gearChanged = false;
 8003086:	4b55      	ldr	r3, [pc, #340]	; (80031dc <transmit+0x1a4>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 800308c:	f001 f812 	bl	80040b4 <gearUpdate>
			return;
 8003090:	e09b      	b.n	80031ca <transmit+0x192>
		}
	//}

	//if (_transmit_Function == 4) {
		//_transmit_Function = 0;
		if (_modeSelection == 1 && currentstate == 2) {
 8003092:	4b53      	ldr	r3, [pc, #332]	; (80031e0 <transmit+0x1a8>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10d      	bne.n	80030b6 <transmit+0x7e>
 800309a:	4b52      	ldr	r3, [pc, #328]	; (80031e4 <transmit+0x1ac>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d109      	bne.n	80030b6 <transmit+0x7e>
			modeSelection(currentMode);
 80030a2:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <transmit+0x1b0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 ff4b 	bl	8003f44 <modeSelection>
			_modeSelection = 0;
 80030ae:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <transmit+0x1a8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
			return;
 80030b4:	e089      	b.n	80031ca <transmit+0x192>
		}
		if (_modeSelection == 2) {
 80030b6:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <transmit+0x1a8>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d105      	bne.n	80030ca <transmit+0x92>
			_modeSelection = 0;
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <transmit+0x1a8>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
			modeSelection(modeCleared);
 80030c4:	2004      	movs	r0, #4
 80030c6:	f000 ff3d 	bl	8003f44 <modeSelection>

		}
	//}

	//if (_transmit_Function == 5) {
		if (currentStateSM == driving_state && _setDriverPage == true && !_setPoup) {
 80030ca:	4b48      	ldr	r3, [pc, #288]	; (80031ec <transmit+0x1b4>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d114      	bne.n	80030fe <transmit+0xc6>
 80030d4:	4b46      	ldr	r3, [pc, #280]	; (80031f0 <transmit+0x1b8>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <transmit+0xc6>
 80030dc:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <transmit+0x1bc>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <transmit+0xc6>
			_setDriverPage = false;
 80030ea:	4b41      	ldr	r3, [pc, #260]	; (80031f0 <transmit+0x1b8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
			drivePageSetter(_drivePageSet);
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <transmit+0x1c0>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f944 	bl	8003384 <drivePageSetter>
			return;
 80030fc:	e065      	b.n	80031ca <transmit+0x192>
		}

	//}

	if (_transmit_Function == 6) {
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <transmit+0x194>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b06      	cmp	r3, #6
 8003104:	d122      	bne.n	800314c <transmit+0x114>
		_transmit_Function = 0;
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <transmit+0x194>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
		popUpCounter++;
 800310c:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <transmit+0x1c4>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	b2da      	uxtb	r2, r3
 8003114:	4b39      	ldr	r3, [pc, #228]	; (80031fc <transmit+0x1c4>)
 8003116:	701a      	strb	r2, [r3, #0]
		if (popUpCounter > 3) {
 8003118:	4b38      	ldr	r3, [pc, #224]	; (80031fc <transmit+0x1c4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d90c      	bls.n	800313a <transmit+0x102>
			popUpCounter = 0;
 8003120:	4b36      	ldr	r3, [pc, #216]	; (80031fc <transmit+0x1c4>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
			popUpNumber = 0;
 8003126:	4b36      	ldr	r3, [pc, #216]	; (8003200 <transmit+0x1c8>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
			if (inPopup) {
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <transmit+0x1cc>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <transmit+0x102>
				_setPoup = true;
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <transmit+0x1bc>)
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
			}
		}
		//_setPoup and Popup Number should be set from else where
		if (_setPoup) {
 800313a:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <transmit+0x1bc>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d004      	beq.n	800314c <transmit+0x114>
			_setPoup = false;
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <transmit+0x1bc>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
			//HAL_UART_AbortTransmit(&huart3);
			popUpHandler();
 8003148:	f000 ff68 	bl	800401c <popUpHandler>
		}

	}

	if (_errorSetIcon) {
 800314c:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <transmit+0x1d0>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <transmit+0x120>
		errorIcon();
 8003154:	f000 fe1c 	bl	8003d90 <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 8003158:	4b2c      	ldr	r3, [pc, #176]	; (800320c <transmit+0x1d4>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <transmit+0x13e>
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <transmit+0x1d8>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <transmit+0x13e>
		errorCode();
 800316e:	f000 fe8b 	bl	8003e88 <errorCode>
		errorPopup();
 8003172:	f000 fe71 	bl	8003e58 <errorPopup>
	}

	if (_charingState) {
 8003176:	4b27      	ldr	r3, [pc, #156]	; (8003214 <transmit+0x1dc>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d025      	beq.n	80031ca <transmit+0x192>
		_charingState = false;
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <transmit+0x1dc>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
		if (_transmit_Function == 3) {
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <transmit+0x194>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d102      	bne.n	8003192 <transmit+0x15a>
			_transmit_Function = 0;
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <transmit+0x194>)
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
		}

		if (_chargingUI) {
 8003192:	4b21      	ldr	r3, [pc, #132]	; (8003218 <transmit+0x1e0>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <transmit+0x176>
			charging_UI(charging_ui);
 800319a:	200d      	movs	r0, #13
 800319c:	f000 fcd2 	bl	8003b44 <charging_UI>
			_chargingUI = false;
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <transmit+0x1e0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
			_trasmitGlobal = 2;
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <transmit+0x1e4>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]
			return;
 80031ac:	e00d      	b.n	80031ca <transmit+0x192>
		}
		if (_chargeComplete) {
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <transmit+0x1e8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <transmit+0x192>
			charging_UI(chargingcomp_ui);
 80031b6:	200e      	movs	r0, #14
 80031b8:	f000 fcc4 	bl	8003b44 <charging_UI>
			_chargeComplete = false;
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <transmit+0x1e8>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
			_trasmitGlobal = 3;
 80031c2:	4b16      	ldr	r3, [pc, #88]	; (800321c <transmit+0x1e4>)
 80031c4:	2203      	movs	r2, #3
 80031c6:	701a      	strb	r2, [r3, #0]
			return;
 80031c8:	bf00      	nop
		}
	}
}
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000369 	.word	0x20000369
 80031d0:	2000034c 	.word	0x2000034c
 80031d4:	2000034e 	.word	0x2000034e
 80031d8:	2000034a 	.word	0x2000034a
 80031dc:	2000035a 	.word	0x2000035a
 80031e0:	2000034f 	.word	0x2000034f
 80031e4:	20000314 	.word	0x20000314
 80031e8:	20000332 	.word	0x20000332
 80031ec:	2000032c 	.word	0x2000032c
 80031f0:	2000034d 	.word	0x2000034d
 80031f4:	2000035f 	.word	0x2000035f
 80031f8:	2000036d 	.word	0x2000036d
 80031fc:	2000036a 	.word	0x2000036a
 8003200:	2000036b 	.word	0x2000036b
 8003204:	20000013 	.word	0x20000013
 8003208:	20000353 	.word	0x20000353
 800320c:	20000351 	.word	0x20000351
 8003210:	20000354 	.word	0x20000354
 8003214:	20000355 	.word	0x20000355
 8003218:	20000356 	.word	0x20000356
 800321c:	2000036e 	.word	0x2000036e
 8003220:	20000357 	.word	0x20000357

08003224 <startingUp>:

void startingUp(void) {
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0

	if (error_check) {
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <startingUp+0x104>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <startingUp+0x1c>
		if (err_State_Navigation == true) {
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <startingUp+0x108>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <startingUp+0x1c>
			SysError_Shutdown_Page;
 8003238:	210a      	movs	r1, #10
 800323a:	483d      	ldr	r0, [pc, #244]	; (8003330 <startingUp+0x10c>)
 800323c:	f7fd f97c 	bl	8000538 <SaveToUART_TxBuffer>
		}
	}

	if (entry == true) {
 8003240:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <startingUp+0x110>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01e      	beq.n	8003286 <startingUp+0x62>
		if (_navigation) {
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <startingUp+0x114>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d016      	beq.n	800327e <startingUp+0x5a>
			if (_trasmitGlobal == MainMenuPages) {
 8003250:	4b3a      	ldr	r3, [pc, #232]	; (800333c <startingUp+0x118>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d106      	bne.n	8003268 <startingUp+0x44>
				drivePageSetter(_drivePageSet);
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <startingUp+0x11c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f88f 	bl	8003384 <drivePageSetter>
				return;
 8003266:	e05d      	b.n	8003324 <startingUp+0x100>
			}
			_trasmitGlobal = MainMenuPages;
 8003268:	4b34      	ldr	r3, [pc, #208]	; (800333c <startingUp+0x118>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 800326e:	210a      	movs	r1, #10
 8003270:	4834      	ldr	r0, [pc, #208]	; (8003344 <startingUp+0x120>)
 8003272:	f7fd f961 	bl	8000538 <SaveToUART_TxBuffer>
			_navigation = false;
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <startingUp+0x114>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
			return;
 800327c:	e052      	b.n	8003324 <startingUp+0x100>
		}
//		if (_trasmitGlobal == PressBrakePage && warning == 0) {
//			return;
//		}
//		_trasmitGlobal = PressBrakePage;
		Press_Brake_Page;
 800327e:	210a      	movs	r1, #10
 8003280:	4831      	ldr	r0, [pc, #196]	; (8003348 <startingUp+0x124>)
 8003282:	f7fd f959 	bl	8000538 <SaveToUART_TxBuffer>
	}

	if (start == 1) {
 8003286:	4b31      	ldr	r3, [pc, #196]	; (800334c <startingUp+0x128>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d132      	bne.n	80032f4 <startingUp+0xd0>
		entry = false;
 800328e:	4b29      	ldr	r3, [pc, #164]	; (8003334 <startingUp+0x110>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 8003294:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <startingUp+0x12c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <startingUp+0x7e>
			//bootAnimation();
			checklit = false;
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <startingUp+0x12c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 80032a2:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <startingUp+0x130>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d112      	bne.n	80032d0 <startingUp+0xac>
			ReadytoDrive_ON_Icon;
 80032aa:	2108      	movs	r1, #8
 80032ac:	482a      	ldr	r0, [pc, #168]	; (8003358 <startingUp+0x134>)
 80032ae:	f7fd f943 	bl	8000538 <SaveToUART_TxBuffer>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 80032b2:	4b2a      	ldr	r3, [pc, #168]	; (800335c <startingUp+0x138>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <startingUp+0xb4>
				ReadytoDrive_Page;
 80032ba:	210a      	movs	r1, #10
 80032bc:	4828      	ldr	r0, [pc, #160]	; (8003360 <startingUp+0x13c>)
 80032be:	f7fd f93b 	bl	8000538 <SaveToUART_TxBuffer>
				_testPage = true;
 80032c2:	4b28      	ldr	r3, [pc, #160]	; (8003364 <startingUp+0x140>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
				startup = false;
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <startingUp+0x138>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e003      	b.n	80032d8 <startingUp+0xb4>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 80032d0:	210a      	movs	r1, #10
 80032d2:	4825      	ldr	r0, [pc, #148]	; (8003368 <startingUp+0x144>)
 80032d4:	f7fd f930 	bl	8000538 <SaveToUART_TxBuffer>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 80032d8:	4b24      	ldr	r3, [pc, #144]	; (800336c <startingUp+0x148>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d104      	bne.n	80032ea <startingUp+0xc6>
			Charge_Connection_Error_Popup_ON;
 80032e0:	2108      	movs	r1, #8
 80032e2:	4823      	ldr	r0, [pc, #140]	; (8003370 <startingUp+0x14c>)
 80032e4:	f7fd f928 	bl	8000538 <SaveToUART_TxBuffer>
 80032e8:	e01c      	b.n	8003324 <startingUp+0x100>
		} else {
			Charge_Connection_Error_Popup_OFF;
 80032ea:	2108      	movs	r1, #8
 80032ec:	4821      	ldr	r0, [pc, #132]	; (8003374 <startingUp+0x150>)
 80032ee:	f7fd f923 	bl	8000538 <SaveToUART_TxBuffer>
 80032f2:	e017      	b.n	8003324 <startingUp+0x100>
//		if (mode) {
//			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
//			//Final: Mode Change unavailable before ignition
//			mode = false;
//		}
		if (warning == 1) {
 80032f4:	4b20      	ldr	r3, [pc, #128]	; (8003378 <startingUp+0x154>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d103      	bne.n	8003304 <startingUp+0xe0>
			Press_Brake_Page;
 80032fc:	210a      	movs	r1, #10
 80032fe:	4812      	ldr	r0, [pc, #72]	; (8003348 <startingUp+0x124>)
 8003300:	f7fd f91a 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (warning == 2) {
 8003304:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <startingUp+0x154>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d103      	bne.n	8003314 <startingUp+0xf0>
			Mild_Error_ON_Icon;
 800330c:	2108      	movs	r1, #8
 800330e:	481b      	ldr	r0, [pc, #108]	; (800337c <startingUp+0x158>)
 8003310:	f7fd f912 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (warning == 3) {
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <startingUp+0x154>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d103      	bne.n	8003324 <startingUp+0x100>
			Gear_Error_Page;
 800331c:	210a      	movs	r1, #10
 800331e:	4818      	ldr	r0, [pc, #96]	; (8003380 <startingUp+0x15c>)
 8003320:	f7fd f90a 	bl	8000538 <SaveToUART_TxBuffer>

		}
	}

}
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000344 	.word	0x20000344
 800332c:	20000328 	.word	0x20000328
 8003330:	200000f0 	.word	0x200000f0
 8003334:	20000009 	.word	0x20000009
 8003338:	2000034b 	.word	0x2000034b
 800333c:	2000036e 	.word	0x2000036e
 8003340:	2000036d 	.word	0x2000036d
 8003344:	20000030 	.word	0x20000030
 8003348:	2000003c 	.word	0x2000003c
 800334c:	20000318 	.word	0x20000318
 8003350:	2000000a 	.word	0x2000000a
 8003354:	20000317 	.word	0x20000317
 8003358:	200001a0 	.word	0x200001a0
 800335c:	20000008 	.word	0x20000008
 8003360:	20000060 	.word	0x20000060
 8003364:	2000035e 	.word	0x2000035e
 8003368:	20000054 	.word	0x20000054
 800336c:	20000349 	.word	0x20000349
 8003370:	20000250 	.word	0x20000250
 8003374:	20000258 	.word	0x20000258
 8003378:	2000031d 	.word	0x2000031d
 800337c:	20000180 	.word	0x20000180
 8003380:	20000048 	.word	0x20000048

08003384 <drivePageSetter>:


uint8_t drivePageTransmit = 0;


void drivePageSetter(uitype_t page) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 800338e:	4b79      	ldr	r3, [pc, #484]	; (8003574 <drivePageSetter+0x1f0>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b77      	ldr	r3, [pc, #476]	; (8003574 <drivePageSetter+0x1f0>)
 8003398:	701a      	strb	r2, [r3, #0]
	switch (page) {
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	2b07      	cmp	r3, #7
 800339e:	f200 80db 	bhi.w	8003558 <drivePageSetter+0x1d4>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <drivePageSetter+0x24>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033c9 	.word	0x080033c9
 80033ac:	080034f9 	.word	0x080034f9
 80033b0:	08003511 	.word	0x08003511
 80033b4:	08003529 	.word	0x08003529
 80033b8:	08003559 	.word	0x08003559
 80033bc:	08003559 	.word	0x08003559
 80033c0:	08003559 	.word	0x08003559
 80033c4:	08003541 	.word	0x08003541
	case front:
		//Checking for Errors
		if (error_check) {
 80033c8:	4b6b      	ldr	r3, [pc, #428]	; (8003578 <drivePageSetter+0x1f4>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d065      	beq.n	800349c <drivePageSetter+0x118>
			if (accessory == 1) {
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <drivePageSetter+0x1f8>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d11a      	bne.n	800340e <drivePageSetter+0x8a>
				if (drivePageTransmit == 1) {
 80033d8:	4b66      	ldr	r3, [pc, #408]	; (8003574 <drivePageSetter+0x1f0>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d103      	bne.n	80033e8 <drivePageSetter+0x64>
					ReadytoDrive_OFF_Icon;
 80033e0:	2108      	movs	r1, #8
 80033e2:	4867      	ldr	r0, [pc, #412]	; (8003580 <drivePageSetter+0x1fc>)
 80033e4:	f7fd f8a8 	bl	8000538 <SaveToUART_TxBuffer>
				}
				if (drivePageTransmit == 2) {
 80033e8:	4b62      	ldr	r3, [pc, #392]	; (8003574 <drivePageSetter+0x1f0>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d103      	bne.n	80033f8 <drivePageSetter+0x74>
					ModeClear_Icon;
 80033f0:	2108      	movs	r1, #8
 80033f2:	4864      	ldr	r0, [pc, #400]	; (8003584 <drivePageSetter+0x200>)
 80033f4:	f7fd f8a0 	bl	8000538 <SaveToUART_TxBuffer>
				}
				if (drivePageTransmit == 3) {
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <drivePageSetter+0x1f0>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d106      	bne.n	800340e <drivePageSetter+0x8a>
					PowerLimitON_Icon;
 8003400:	2108      	movs	r1, #8
 8003402:	4861      	ldr	r0, [pc, #388]	; (8003588 <drivePageSetter+0x204>)
 8003404:	f7fd f898 	bl	8000538 <SaveToUART_TxBuffer>
					drivePageTransmit = 0;
 8003408:	4b5a      	ldr	r3, [pc, #360]	; (8003574 <drivePageSetter+0x1f0>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 800340e:	4b5f      	ldr	r3, [pc, #380]	; (800358c <drivePageSetter+0x208>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <drivePageSetter+0xa8>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 8003416:	4b57      	ldr	r3, [pc, #348]	; (8003574 <drivePageSetter+0x1f0>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d106      	bne.n	800342c <drivePageSetter+0xa8>
					SysError_Shutdown_Page;
 800341e:	210a      	movs	r1, #10
 8003420:	485b      	ldr	r0, [pc, #364]	; (8003590 <drivePageSetter+0x20c>)
 8003422:	f7fd f889 	bl	8000538 <SaveToUART_TxBuffer>
					drivePageTransmit = 0;
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <drivePageSetter+0x1f0>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 800342c:	4b59      	ldr	r3, [pc, #356]	; (8003594 <drivePageSetter+0x210>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 8092 	bne.w	800355c <drivePageSetter+0x1d8>
				if (shutdown == 1) {
 8003438:	4b57      	ldr	r3, [pc, #348]	; (8003598 <drivePageSetter+0x214>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10a      	bne.n	8003456 <drivePageSetter+0xd2>
					if (drivePageTransmit == 1) {
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <drivePageSetter+0x1f0>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <drivePageSetter+0xd2>
						SysError_StopDrive_Page;
 8003448:	210a      	movs	r1, #10
 800344a:	4854      	ldr	r0, [pc, #336]	; (800359c <drivePageSetter+0x218>)
 800344c:	f7fd f874 	bl	8000538 <SaveToUART_TxBuffer>
						drivePageTransmit = 0;
 8003450:	4b48      	ldr	r3, [pc, #288]	; (8003574 <drivePageSetter+0x1f0>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 8003456:	4b50      	ldr	r3, [pc, #320]	; (8003598 <drivePageSetter+0x214>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d17e      	bne.n	800355c <drivePageSetter+0x1d8>
					if (mode) {
 800345e:	4b50      	ldr	r3, [pc, #320]	; (80035a0 <drivePageSetter+0x21c>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00e      	beq.n	8003484 <drivePageSetter+0x100>
						if (drivePageTransmit == 1) {
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <drivePageSetter+0x1f0>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d106      	bne.n	800347c <drivePageSetter+0xf8>
							ModeChangeOFF_Page;
 800346e:	2108      	movs	r1, #8
 8003470:	484c      	ldr	r0, [pc, #304]	; (80035a4 <drivePageSetter+0x220>)
 8003472:	f7fd f861 	bl	8000538 <SaveToUART_TxBuffer>
							drivePageTransmit = 0;
 8003476:	4b3f      	ldr	r3, [pc, #252]	; (8003574 <drivePageSetter+0x1f0>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 800347c:	4b48      	ldr	r3, [pc, #288]	; (80035a0 <drivePageSetter+0x21c>)
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, testData_Page, sizeof(testData_Page), HAL_MAX_DELAY);
				//drivePageTransmit = 0;
				//}
			}
		}
		break;
 8003482:	e06b      	b.n	800355c <drivePageSetter+0x1d8>
						if (drivePageTransmit == 1) {
 8003484:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <drivePageSetter+0x1f0>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d167      	bne.n	800355c <drivePageSetter+0x1d8>
							SysError_StopDrive_Page;
 800348c:	210a      	movs	r1, #10
 800348e:	4843      	ldr	r0, [pc, #268]	; (800359c <drivePageSetter+0x218>)
 8003490:	f7fd f852 	bl	8000538 <SaveToUART_TxBuffer>
							drivePageTransmit = 0;
 8003494:	4b37      	ldr	r3, [pc, #220]	; (8003574 <drivePageSetter+0x1f0>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
		break;
 800349a:	e05f      	b.n	800355c <drivePageSetter+0x1d8>
			if (accessory == 1) {
 800349c:	4b37      	ldr	r3, [pc, #220]	; (800357c <drivePageSetter+0x1f8>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d11a      	bne.n	80034da <drivePageSetter+0x156>
				if (drivePageTransmit == 1) {
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <drivePageSetter+0x1f0>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d103      	bne.n	80034b4 <drivePageSetter+0x130>
					ReadytoDrive_OFF_Icon;
 80034ac:	2108      	movs	r1, #8
 80034ae:	4834      	ldr	r0, [pc, #208]	; (8003580 <drivePageSetter+0x1fc>)
 80034b0:	f7fd f842 	bl	8000538 <SaveToUART_TxBuffer>
				if (drivePageTransmit == 2) {
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <drivePageSetter+0x1f0>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d103      	bne.n	80034c4 <drivePageSetter+0x140>
					ModeClear_Icon;
 80034bc:	2108      	movs	r1, #8
 80034be:	4831      	ldr	r0, [pc, #196]	; (8003584 <drivePageSetter+0x200>)
 80034c0:	f7fd f83a 	bl	8000538 <SaveToUART_TxBuffer>
				if (drivePageTransmit == 3) {
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <drivePageSetter+0x1f0>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d106      	bne.n	80034da <drivePageSetter+0x156>
					Disengage_KillSwitch_Page;
 80034cc:	210a      	movs	r1, #10
 80034ce:	4836      	ldr	r0, [pc, #216]	; (80035a8 <drivePageSetter+0x224>)
 80034d0:	f7fd f832 	bl	8000538 <SaveToUART_TxBuffer>
					drivePageTransmit = 0;
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <drivePageSetter+0x1f0>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	701a      	strb	r2, [r3, #0]
			if (_testPage) {
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <drivePageSetter+0x228>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03c      	beq.n	800355c <drivePageSetter+0x1d8>
				_testPage = false;
 80034e2:	4b32      	ldr	r3, [pc, #200]	; (80035ac <drivePageSetter+0x228>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, testData_Page, sizeof(testData_Page), HAL_MAX_DELAY);
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	220a      	movs	r2, #10
 80034ee:	4930      	ldr	r1, [pc, #192]	; (80035b0 <drivePageSetter+0x22c>)
 80034f0:	4830      	ldr	r0, [pc, #192]	; (80035b4 <drivePageSetter+0x230>)
 80034f2:	f003 fc50 	bl	8006d96 <HAL_UART_Transmit>
		break;
 80034f6:	e031      	b.n	800355c <drivePageSetter+0x1d8>
	case trip:
		if (_menupage == 1) {
 80034f8:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <drivePageSetter+0x234>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d02f      	beq.n	8003560 <drivePageSetter+0x1dc>
			return;
		}
		_menupage = 1;
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <drivePageSetter+0x234>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 8003506:	210a      	movs	r1, #10
 8003508:	482c      	ldr	r0, [pc, #176]	; (80035bc <drivePageSetter+0x238>)
 800350a:	f7fd f815 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 800350e:	e02e      	b.n	800356e <drivePageSetter+0x1ea>
	case after_charge:
		if (_menupage == 2) {
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <drivePageSetter+0x234>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d025      	beq.n	8003564 <drivePageSetter+0x1e0>
			return;
		}
		_menupage = 2;
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <drivePageSetter+0x234>)
 800351a:	2202      	movs	r2, #2
 800351c:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 800351e:	210a      	movs	r1, #10
 8003520:	4827      	ldr	r0, [pc, #156]	; (80035c0 <drivePageSetter+0x23c>)
 8003522:	f7fd f809 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003526:	e022      	b.n	800356e <drivePageSetter+0x1ea>
	case info:
		if (_menupage == 3) {
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <drivePageSetter+0x234>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b03      	cmp	r3, #3
 800352e:	d01b      	beq.n	8003568 <drivePageSetter+0x1e4>
			return;
		}
		_menupage = 3;
 8003530:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <drivePageSetter+0x234>)
 8003532:	2203      	movs	r2, #3
 8003534:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 8003536:	210a      	movs	r1, #10
 8003538:	4822      	ldr	r0, [pc, #136]	; (80035c4 <drivePageSetter+0x240>)
 800353a:	f7fc fffd 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 800353e:	e016      	b.n	800356e <drivePageSetter+0x1ea>
	case settings:
		if (_menupage == 4) {
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <drivePageSetter+0x234>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d011      	beq.n	800356c <drivePageSetter+0x1e8>
			return;
		}
		_menupage = 4;
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <drivePageSetter+0x234>)
 800354a:	2204      	movs	r2, #4
 800354c:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 800354e:	210a      	movs	r1, #10
 8003550:	481d      	ldr	r0, [pc, #116]	; (80035c8 <drivePageSetter+0x244>)
 8003552:	f7fc fff1 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003556:	e00a      	b.n	800356e <drivePageSetter+0x1ea>
	default:
		break;
 8003558:	bf00      	nop
 800355a:	e008      	b.n	800356e <drivePageSetter+0x1ea>
		break;
 800355c:	bf00      	nop
 800355e:	e006      	b.n	800356e <drivePageSetter+0x1ea>
			return;
 8003560:	bf00      	nop
 8003562:	e004      	b.n	800356e <drivePageSetter+0x1ea>
			return;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <drivePageSetter+0x1ea>
			return;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <drivePageSetter+0x1ea>
			return;
 800356c:	bf00      	nop

	}

}
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000b6c 	.word	0x20000b6c
 8003578:	20000344 	.word	0x20000344
 800357c:	20000316 	.word	0x20000316
 8003580:	200001a8 	.word	0x200001a8
 8003584:	200001e8 	.word	0x200001e8
 8003588:	20000190 	.word	0x20000190
 800358c:	20000328 	.word	0x20000328
 8003590:	200000f0 	.word	0x200000f0
 8003594:	2000032c 	.word	0x2000032c
 8003598:	2000031e 	.word	0x2000031e
 800359c:	200000fc 	.word	0x200000fc
 80035a0:	200002bd 	.word	0x200002bd
 80035a4:	20000248 	.word	0x20000248
 80035a8:	20000030 	.word	0x20000030
 80035ac:	2000035e 	.word	0x2000035e
 80035b0:	20000144 	.word	0x20000144
 80035b4:	20000b70 	.word	0x20000b70
 80035b8:	20000331 	.word	0x20000331
 80035bc:	2000006c 	.word	0x2000006c
 80035c0:	20000078 	.word	0x20000078
 80035c4:	20000084 	.word	0x20000084
 80035c8:	200000b4 	.word	0x200000b4

080035cc <realTimeData>:


void realTimeData(void) { //Realtime updatable data sending
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
// Priority Level 1
	priorityLevel1_counter++;
 80035d0:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <realTimeData+0x1bc>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	3301      	adds	r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b6b      	ldr	r3, [pc, #428]	; (8003788 <realTimeData+0x1bc>)
 80035da:	701a      	strb	r2, [r3, #0]
//Speed
	if (priorityLevel1_counter == 1) {
 80035dc:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <realTimeData+0x1bc>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d115      	bne.n	8003610 <realTimeData+0x44>
		strDATA[4] = 0x11; //
 80035e4:	4b69      	ldr	r3, [pc, #420]	; (800378c <realTimeData+0x1c0>)
 80035e6:	2211      	movs	r2, #17
 80035e8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x00; //
 80035ea:	4b68      	ldr	r3, [pc, #416]	; (800378c <realTimeData+0x1c0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (test_speed & 0xFF);
 80035f0:	4b67      	ldr	r3, [pc, #412]	; (8003790 <realTimeData+0x1c4>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4b65      	ldr	r3, [pc, #404]	; (800378c <realTimeData+0x1c0>)
 80035f8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (test_speed >> 8);
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <realTimeData+0x1c4>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <realTimeData+0x1c0>)
 8003606:	719a      	strb	r2, [r3, #6]
#ifdef Queue
		SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 8003608:	2108      	movs	r1, #8
 800360a:	4860      	ldr	r0, [pc, #384]	; (800378c <realTimeData+0x1c0>)
 800360c:	f7fc ff94 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//RPM
	if (priorityLevel1_counter == 2) {
 8003610:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <realTimeData+0x1bc>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d115      	bne.n	8003644 <realTimeData+0x78>
		strDATA[4] = 0x12;
 8003618:	4b5c      	ldr	r3, [pc, #368]	; (800378c <realTimeData+0x1c0>)
 800361a:	2212      	movs	r2, #18
 800361c:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 800361e:	4b5b      	ldr	r3, [pc, #364]	; (800378c <realTimeData+0x1c0>)
 8003620:	2250      	movs	r2, #80	; 0x50
 8003622:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (rpm_meter & 0xFF);
 8003624:	4b5b      	ldr	r3, [pc, #364]	; (8003794 <realTimeData+0x1c8>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <realTimeData+0x1c0>)
 800362c:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (rpm_meter >> 8);
 800362e:	4b59      	ldr	r3, [pc, #356]	; (8003794 <realTimeData+0x1c8>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b29b      	uxth	r3, r3
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b54      	ldr	r3, [pc, #336]	; (800378c <realTimeData+0x1c0>)
 800363a:	719a      	strb	r2, [r3, #6]
#ifdef Queue
		SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 800363c:	2108      	movs	r1, #8
 800363e:	4853      	ldr	r0, [pc, #332]	; (800378c <realTimeData+0x1c0>)
 8003640:	f7fc ff7a 	bl	8000538 <SaveToUART_TxBuffer>
//Power Bar
	if (priorityLevel1_counter == 3) {
		//powerMeter();
	}
//DC Current
	if (priorityLevel1_counter == 4) {
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <realTimeData+0x1bc>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b04      	cmp	r3, #4
 800364a:	f040 809a 	bne.w	8003782 <realTimeData+0x1b6>
		priorityLevel1_counter = 0;
 800364e:	4b4e      	ldr	r3, [pc, #312]	; (8003788 <realTimeData+0x1bc>)
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
		realTime_counter++;
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <realTimeData+0x1cc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <realTimeData+0x1cc>)
 800365e:	701a      	strb	r2, [r3, #0]
		if (realTime_counter == 1) {
 8003660:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <realTimeData+0x1cc>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d122      	bne.n	80036ae <realTimeData+0xe2>
			if (currentstate == 4) {
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <realTimeData+0x1d0>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d106      	bne.n	800367e <realTimeData+0xb2>
				strDATA[4] = 0x12;
 8003670:	4b46      	ldr	r3, [pc, #280]	; (800378c <realTimeData+0x1c0>)
 8003672:	2212      	movs	r2, #18
 8003674:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x80;
 8003676:	4b45      	ldr	r3, [pc, #276]	; (800378c <realTimeData+0x1c0>)
 8003678:	2280      	movs	r2, #128	; 0x80
 800367a:	715a      	strb	r2, [r3, #5]
 800367c:	e005      	b.n	800368a <realTimeData+0xbe>
			} else {
				strDATA[4] = 0x12;
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <realTimeData+0x1c0>)
 8003680:	2212      	movs	r2, #18
 8003682:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x30;
 8003684:	4b41      	ldr	r3, [pc, #260]	; (800378c <realTimeData+0x1c0>)
 8003686:	2230      	movs	r2, #48	; 0x30
 8003688:	715a      	strb	r2, [r3, #5]
			}
			strDATA[6] = (dc_current >> 8);
 800368a:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <realTimeData+0x1d4>)
 800368c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003690:	121b      	asrs	r3, r3, #8
 8003692:	b21b      	sxth	r3, r3
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <realTimeData+0x1c0>)
 8003698:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (dc_current & 0xFF);
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <realTimeData+0x1d4>)
 800369c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	4b3a      	ldr	r3, [pc, #232]	; (800378c <realTimeData+0x1c0>)
 80036a4:	71da      	strb	r2, [r3, #7]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 80036a6:	2108      	movs	r1, #8
 80036a8:	4838      	ldr	r0, [pc, #224]	; (800378c <realTimeData+0x1c0>)
 80036aa:	f7fc ff45 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
		}

//Lowest Cell Voltage
		if (realTime_counter == 2) {
 80036ae:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <realTimeData+0x1cc>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d115      	bne.n	80036e2 <realTimeData+0x116>
			strDATA[4] = 0x12;
 80036b6:	4b35      	ldr	r3, [pc, #212]	; (800378c <realTimeData+0x1c0>)
 80036b8:	2212      	movs	r2, #18
 80036ba:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x20;
 80036bc:	4b33      	ldr	r3, [pc, #204]	; (800378c <realTimeData+0x1c0>)
 80036be:	2220      	movs	r2, #32
 80036c0:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (lcell_voltage & 0xFF);
 80036c2:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <realTimeData+0x1d8>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b30      	ldr	r3, [pc, #192]	; (800378c <realTimeData+0x1c0>)
 80036ca:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (lcell_voltage >> 8);
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <realTimeData+0x1d8>)
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4b2d      	ldr	r3, [pc, #180]	; (800378c <realTimeData+0x1c0>)
 80036d8:	719a      	strb	r2, [r3, #6]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 80036da:	2108      	movs	r1, #8
 80036dc:	482b      	ldr	r0, [pc, #172]	; (800378c <realTimeData+0x1c0>)
 80036de:	f7fc ff2b 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
		}

////Trip
		if (realTime_counter == 3) {
 80036e2:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <realTimeData+0x1cc>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d121      	bne.n	800372e <realTimeData+0x162>
			strDATA2[4] = 0x11;
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <realTimeData+0x1dc>)
 80036ec:	2211      	movs	r2, #17
 80036ee:	711a      	strb	r2, [r3, #4]
			strDATA2[5] = 0x40;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <realTimeData+0x1dc>)
 80036f2:	2240      	movs	r2, #64	; 0x40
 80036f4:	715a      	strb	r2, [r3, #5]
			strDATA2[9] = (distance.trip & 0xFF);
 80036f6:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <realTimeData+0x1e0>)
 80036f8:	889b      	ldrh	r3, [r3, #4]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <realTimeData+0x1dc>)
 80036fe:	725a      	strb	r2, [r3, #9]
			strDATA2[8] = (distance.trip >> 8);
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <realTimeData+0x1e0>)
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	b29b      	uxth	r3, r3
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <realTimeData+0x1dc>)
 800370c:	721a      	strb	r2, [r3, #8]
			strDATA2[7] = (distance.trip >> 16);
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <realTimeData+0x1e0>)
 8003710:	889b      	ldrh	r3, [r3, #4]
 8003712:	141b      	asrs	r3, r3, #16
 8003714:	b2da      	uxtb	r2, r3
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <realTimeData+0x1dc>)
 8003718:	71da      	strb	r2, [r3, #7]
			strDATA2[6] = (distance.trip >> 24);
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <realTimeData+0x1e0>)
 800371c:	889b      	ldrh	r3, [r3, #4]
 800371e:	161b      	asrs	r3, r3, #24
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <realTimeData+0x1dc>)
 8003724:	719a      	strb	r2, [r3, #6]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 8003726:	2108      	movs	r1, #8
 8003728:	4818      	ldr	r0, [pc, #96]	; (800378c <realTimeData+0x1c0>)
 800372a:	f7fc ff05 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA2;
#endif
		}
//Power
		if (realTime_counter == 4) {
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <realTimeData+0x1cc>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b04      	cmp	r3, #4
 8003734:	d125      	bne.n	8003782 <realTimeData+0x1b6>
			realTime_counter = 0;
 8003736:	4b18      	ldr	r3, [pc, #96]	; (8003798 <realTimeData+0x1cc>)
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
			if (currentstate == 4) {
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <realTimeData+0x1d0>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d106      	bne.n	8003752 <realTimeData+0x186>
				strDATA[4] = 0x12;
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <realTimeData+0x1c0>)
 8003746:	2212      	movs	r2, #18
 8003748:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x60;
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <realTimeData+0x1c0>)
 800374c:	2260      	movs	r2, #96	; 0x60
 800374e:	715a      	strb	r2, [r3, #5]
 8003750:	e005      	b.n	800375e <realTimeData+0x192>
			} else {
				strDATA[4] = 0x11;
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <realTimeData+0x1c0>)
 8003754:	2211      	movs	r2, #17
 8003756:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x70;
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <realTimeData+0x1c0>)
 800375a:	2270      	movs	r2, #112	; 0x70
 800375c:	715a      	strb	r2, [r3, #5]
			}
			strDATA[7] = (power & 0xFF);
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <realTimeData+0x1e4>)
 8003760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <realTimeData+0x1c0>)
 8003768:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (power >> 8);
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <realTimeData+0x1e4>)
 800376c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003770:	121b      	asrs	r3, r3, #8
 8003772:	b21b      	sxth	r3, r3
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <realTimeData+0x1c0>)
 8003778:	719a      	strb	r2, [r3, #6]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 800377a:	2108      	movs	r1, #8
 800377c:	4803      	ldr	r0, [pc, #12]	; (800378c <realTimeData+0x1c0>)
 800377e:	f7fc fedb 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif
		}
	}
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000367 	.word	0x20000367
 800378c:	200002c4 	.word	0x200002c4
 8003790:	20000300 	.word	0x20000300
 8003794:	2000030c 	.word	0x2000030c
 8003798:	20000366 	.word	0x20000366
 800379c:	20000314 	.word	0x20000314
 80037a0:	20000310 	.word	0x20000310
 80037a4:	2000030a 	.word	0x2000030a
 80037a8:	200002cc 	.word	0x200002cc
 80037ac:	200002d8 	.word	0x200002d8
 80037b0:	20000312 	.word	0x20000312

080037b4 <oneTimeData>:


void oneTimeData(void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

// Priority Level 2
	priorityLevel2_counter++;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	; (8003834 <oneTimeData+0x80>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	4b1c      	ldr	r3, [pc, #112]	; (8003834 <oneTimeData+0x80>)
 80037c2:	701a      	strb	r2, [r3, #0]
	} else {
		//DriveUnit_ON_Icon;
	}

//ODO
	if (priorityLevel2_counter == 1) {
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <oneTimeData+0x80>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d124      	bne.n	8003816 <oneTimeData+0x62>
		if (realTime_counter == 2) {
 80037cc:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <oneTimeData+0x84>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d120      	bne.n	8003816 <oneTimeData+0x62>
			strDATA2[4] = 0x11;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <oneTimeData+0x88>)
 80037d6:	2211      	movs	r2, #17
 80037d8:	711a      	strb	r2, [r3, #4]
			strDATA2[5] = 0x20;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <oneTimeData+0x88>)
 80037dc:	2220      	movs	r2, #32
 80037de:	715a      	strb	r2, [r3, #5]
			strDATA2[9] = (distance.ODO & 0xFF);
 80037e0:	4b17      	ldr	r3, [pc, #92]	; (8003840 <oneTimeData+0x8c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <oneTimeData+0x88>)
 80037e8:	725a      	strb	r2, [r3, #9]
			strDATA2[8] = (distance.ODO >> 8);
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <oneTimeData+0x8c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <oneTimeData+0x88>)
 80037f4:	721a      	strb	r2, [r3, #8]
			strDATA2[7] = (distance.ODO >> 16);
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <oneTimeData+0x8c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <oneTimeData+0x88>)
 8003800:	71da      	strb	r2, [r3, #7]
			strDATA2[6] = (distance.ODO >> 24);
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <oneTimeData+0x8c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	0e1b      	lsrs	r3, r3, #24
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <oneTimeData+0x88>)
 800380c:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA2,sizeof(strDATA2));
 800380e:	210a      	movs	r1, #10
 8003810:	480a      	ldr	r0, [pc, #40]	; (800383c <oneTimeData+0x88>)
 8003812:	f7fc fe91 	bl	8000538 <SaveToUART_TxBuffer>
#endif
		}
	}

//Pack voltage
	if (priorityLevel2_counter == 2) {
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <oneTimeData+0x80>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d12c      	bne.n	8003878 <oneTimeData+0xc4>
		if (currentstate == 4) {
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <oneTimeData+0x90>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d112      	bne.n	800384c <oneTimeData+0x98>
			strDATA[4] = 0x12;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <oneTimeData+0x94>)
 8003828:	2212      	movs	r2, #18
 800382a:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <oneTimeData+0x94>)
 800382e:	2210      	movs	r2, #16
 8003830:	715a      	strb	r2, [r3, #5]
 8003832:	e011      	b.n	8003858 <oneTimeData+0xa4>
 8003834:	20000368 	.word	0x20000368
 8003838:	20000366 	.word	0x20000366
 800383c:	200002cc 	.word	0x200002cc
 8003840:	200002d8 	.word	0x200002d8
 8003844:	20000314 	.word	0x20000314
 8003848:	200002c4 	.word	0x200002c4
		} else {
			strDATA[4] = 0x12;
 800384c:	4b9d      	ldr	r3, [pc, #628]	; (8003ac4 <oneTimeData+0x310>)
 800384e:	2212      	movs	r2, #18
 8003850:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 8003852:	4b9c      	ldr	r3, [pc, #624]	; (8003ac4 <oneTimeData+0x310>)
 8003854:	2210      	movs	r2, #16
 8003856:	715a      	strb	r2, [r3, #5]
		}
		strDATA[7] = (pack_voltage & 0xFF);
 8003858:	4b9b      	ldr	r3, [pc, #620]	; (8003ac8 <oneTimeData+0x314>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b99      	ldr	r3, [pc, #612]	; (8003ac4 <oneTimeData+0x310>)
 8003860:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (pack_voltage >> 8);
 8003862:	4b99      	ldr	r3, [pc, #612]	; (8003ac8 <oneTimeData+0x314>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	b29b      	uxth	r3, r3
 800386a:	b2da      	uxtb	r2, r3
 800386c:	4b95      	ldr	r3, [pc, #596]	; (8003ac4 <oneTimeData+0x310>)
 800386e:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003870:	2108      	movs	r1, #8
 8003872:	4894      	ldr	r0, [pc, #592]	; (8003ac4 <oneTimeData+0x310>)
 8003874:	f7fc fe60 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//Highest Cell Voltage
	if (priorityLevel2_counter == 3) {
 8003878:	4b94      	ldr	r3, [pc, #592]	; (8003acc <oneTimeData+0x318>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d115      	bne.n	80038ac <oneTimeData+0xf8>
		strDATA[4] = 0x12;
 8003880:	4b90      	ldr	r3, [pc, #576]	; (8003ac4 <oneTimeData+0x310>)
 8003882:	2212      	movs	r2, #18
 8003884:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 8003886:	4b8f      	ldr	r3, [pc, #572]	; (8003ac4 <oneTimeData+0x310>)
 8003888:	2270      	movs	r2, #112	; 0x70
 800388a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (hcell_voltage & 0xFF);
 800388c:	4b90      	ldr	r3, [pc, #576]	; (8003ad0 <oneTimeData+0x31c>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	4b8c      	ldr	r3, [pc, #560]	; (8003ac4 <oneTimeData+0x310>)
 8003894:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (hcell_voltage >> 8);
 8003896:	4b8e      	ldr	r3, [pc, #568]	; (8003ad0 <oneTimeData+0x31c>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	b29b      	uxth	r3, r3
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <oneTimeData+0x310>)
 80038a2:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80038a4:	2108      	movs	r1, #8
 80038a6:	4887      	ldr	r0, [pc, #540]	; (8003ac4 <oneTimeData+0x310>)
 80038a8:	f7fc fe46 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//Estimated Range
	if (priorityLevel2_counter == 4) {
 80038ac:	4b87      	ldr	r3, [pc, #540]	; (8003acc <oneTimeData+0x318>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d115      	bne.n	80038e0 <oneTimeData+0x12c>
		strDATA[4] = 0x11;
 80038b4:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <oneTimeData+0x310>)
 80038b6:	2211      	movs	r2, #17
 80038b8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 80038ba:	4b82      	ldr	r3, [pc, #520]	; (8003ac4 <oneTimeData+0x310>)
 80038bc:	2230      	movs	r2, #48	; 0x30
 80038be:	715a      	strb	r2, [r3, #5]
		//strDATA[7] = uint32_t(distance.range);
		//strDATA[6] = 0;
		strDATA[7] = (distance.range & 0xFF);
 80038c0:	4b84      	ldr	r3, [pc, #528]	; (8003ad4 <oneTimeData+0x320>)
 80038c2:	88db      	ldrh	r3, [r3, #6]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <oneTimeData+0x310>)
 80038c8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.range >> 8);
 80038ca:	4b82      	ldr	r3, [pc, #520]	; (8003ad4 <oneTimeData+0x320>)
 80038cc:	88db      	ldrh	r3, [r3, #6]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <oneTimeData+0x310>)
 80038d6:	719a      	strb	r2, [r3, #6]
		//strDATA[7] = (distance.range >> 16);
		//strDATA[6] = (distance.range >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80038d8:	2108      	movs	r1, #8
 80038da:	487a      	ldr	r0, [pc, #488]	; (8003ac4 <oneTimeData+0x310>)
 80038dc:	f7fc fe2c 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//Range
	if (priorityLevel2_counter == 5) {
 80038e0:	4b7a      	ldr	r3, [pc, #488]	; (8003acc <oneTimeData+0x318>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b05      	cmp	r3, #5
 80038e6:	d111      	bne.n	800390c <oneTimeData+0x158>
		strDATA[4] = 0x11;
 80038e8:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <oneTimeData+0x310>)
 80038ea:	2211      	movs	r2, #17
 80038ec:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 80038ee:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <oneTimeData+0x310>)
 80038f0:	2230      	movs	r2, #48	; 0x30
 80038f2:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.range);
 80038f4:	4b77      	ldr	r3, [pc, #476]	; (8003ad4 <oneTimeData+0x320>)
 80038f6:	88db      	ldrh	r3, [r3, #6]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b72      	ldr	r3, [pc, #456]	; (8003ac4 <oneTimeData+0x310>)
 80038fc:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 80038fe:	4b71      	ldr	r3, [pc, #452]	; (8003ac4 <oneTimeData+0x310>)
 8003900:	2200      	movs	r2, #0
 8003902:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003904:	2108      	movs	r1, #8
 8003906:	486f      	ldr	r0, [pc, #444]	; (8003ac4 <oneTimeData+0x310>)
 8003908:	f7fc fe16 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif
	}
//SOC - Battery Percentage
	if (priorityLevel2_counter == 6) {
 800390c:	4b6f      	ldr	r3, [pc, #444]	; (8003acc <oneTimeData+0x318>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b06      	cmp	r3, #6
 8003912:	d110      	bne.n	8003936 <oneTimeData+0x182>
		strDATA[4] = 0x11;
 8003914:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <oneTimeData+0x310>)
 8003916:	2211      	movs	r2, #17
 8003918:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x10;
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <oneTimeData+0x310>)
 800391c:	2210      	movs	r2, #16
 800391e:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soc_value);
 8003920:	4b6d      	ldr	r3, [pc, #436]	; (8003ad8 <oneTimeData+0x324>)
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <oneTimeData+0x310>)
 8003926:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8003928:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <oneTimeData+0x310>)
 800392a:	2200      	movs	r2, #0
 800392c:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 800392e:	2108      	movs	r1, #8
 8003930:	4864      	ldr	r0, [pc, #400]	; (8003ac4 <oneTimeData+0x310>)
 8003932:	f7fc fe01 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (priorityLevel2_counter == 7) {
		//batteryBar();
	}
	//AVG SPEED
	if (priorityLevel2_counter == 8) {
 8003936:	4b65      	ldr	r3, [pc, #404]	; (8003acc <oneTimeData+0x318>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b08      	cmp	r3, #8
 800393c:	d118      	bne.n	8003970 <oneTimeData+0x1bc>
		priorityLevel2_counter = 0;
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <oneTimeData+0x318>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
		strDATA[4] = 0x11;
 8003944:	4b5f      	ldr	r3, [pc, #380]	; (8003ac4 <oneTimeData+0x310>)
 8003946:	2211      	movs	r2, #17
 8003948:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x52;
 800394a:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <oneTimeData+0x310>)
 800394c:	2252      	movs	r2, #82	; 0x52
 800394e:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.tripAvgSpeed & 0xFF);
 8003950:	4b60      	ldr	r3, [pc, #384]	; (8003ad4 <oneTimeData+0x320>)
 8003952:	891b      	ldrh	r3, [r3, #8]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <oneTimeData+0x310>)
 8003958:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.tripAvgSpeed >> 8);
 800395a:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <oneTimeData+0x320>)
 800395c:	891b      	ldrh	r3, [r3, #8]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	b29b      	uxth	r3, r3
 8003962:	b2da      	uxtb	r2, r3
 8003964:	4b57      	ldr	r3, [pc, #348]	; (8003ac4 <oneTimeData+0x310>)
 8003966:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003968:	2108      	movs	r1, #8
 800396a:	4856      	ldr	r0, [pc, #344]	; (8003ac4 <oneTimeData+0x310>)
 800396c:	f7fc fde4 	bl	8000538 <SaveToUART_TxBuffer>



// Priority Level 3

	if (_After_Charge_Page) {
 8003970:	4b5a      	ldr	r3, [pc, #360]	; (8003adc <oneTimeData+0x328>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05a      	beq.n	8003a2e <oneTimeData+0x27a>
		_After_Charge_Page = false;
 8003978:	4b58      	ldr	r3, [pc, #352]	; (8003adc <oneTimeData+0x328>)
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
		//After charge trip
		strDATA[4] = 0x11;
 800397e:	4b51      	ldr	r3, [pc, #324]	; (8003ac4 <oneTimeData+0x310>)
 8003980:	2211      	movs	r2, #17
 8003982:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x62;
 8003984:	4b4f      	ldr	r3, [pc, #316]	; (8003ac4 <oneTimeData+0x310>)
 8003986:	2262      	movs	r2, #98	; 0x62
 8003988:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.trip & 0xFF);
 800398a:	4b55      	ldr	r3, [pc, #340]	; (8003ae0 <oneTimeData+0x32c>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <oneTimeData+0x310>)
 8003992:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.trip >> 8);
 8003994:	4b52      	ldr	r3, [pc, #328]	; (8003ae0 <oneTimeData+0x32c>)
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	b29b      	uxth	r3, r3
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <oneTimeData+0x310>)
 80039a0:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.trip >> 16);
		//	strDATA[6] = (afterChargeData.trip >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80039a2:	2108      	movs	r1, #8
 80039a4:	4847      	ldr	r0, [pc, #284]	; (8003ac4 <oneTimeData+0x310>)
 80039a6:	f7fc fdc7 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

		// After charge average speed
		strDATA[4] = 0x11;
 80039aa:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <oneTimeData+0x310>)
 80039ac:	2211      	movs	r2, #17
 80039ae:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x58;
 80039b0:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <oneTimeData+0x310>)
 80039b2:	2258      	movs	r2, #88	; 0x58
 80039b4:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.avarage_Speed & 0xFF);
 80039b6:	4b4a      	ldr	r3, [pc, #296]	; (8003ae0 <oneTimeData+0x32c>)
 80039b8:	885b      	ldrh	r3, [r3, #2]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <oneTimeData+0x310>)
 80039be:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.avarage_Speed >> 8);
 80039c0:	4b47      	ldr	r3, [pc, #284]	; (8003ae0 <oneTimeData+0x32c>)
 80039c2:	885b      	ldrh	r3, [r3, #2]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <oneTimeData+0x310>)
 80039cc:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.avarage_Speed >> 16);
		//	strDATA[6] = (afterChargeData.avarage_Speed >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80039ce:	2108      	movs	r1, #8
 80039d0:	483c      	ldr	r0, [pc, #240]	; (8003ac4 <oneTimeData+0x310>)
 80039d2:	f7fc fdb1 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

		// After Charge Economy
		strDATA[4] = 0x11;
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <oneTimeData+0x310>)
 80039d8:	2211      	movs	r2, #17
 80039da:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x56;
 80039dc:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <oneTimeData+0x310>)
 80039de:	2256      	movs	r2, #86	; 0x56
 80039e0:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.economy & 0xFF);
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <oneTimeData+0x32c>)
 80039e4:	889b      	ldrh	r3, [r3, #4]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <oneTimeData+0x310>)
 80039ea:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.economy >> 8);
 80039ec:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <oneTimeData+0x32c>)
 80039ee:	889b      	ldrh	r3, [r3, #4]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <oneTimeData+0x310>)
 80039f8:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.economy >> 16);
		//	strDATA[6] = (afterChargeData.economy >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80039fa:	2108      	movs	r1, #8
 80039fc:	4831      	ldr	r0, [pc, #196]	; (8003ac4 <oneTimeData+0x310>)
 80039fe:	f7fc fd9b 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

		// After charge Power
		strDATA[4] = 0x11;
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <oneTimeData+0x310>)
 8003a04:	2211      	movs	r2, #17
 8003a06:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 8003a08:	4b2e      	ldr	r3, [pc, #184]	; (8003ac4 <oneTimeData+0x310>)
 8003a0a:	2260      	movs	r2, #96	; 0x60
 8003a0c:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.power & 0xFF);
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <oneTimeData+0x32c>)
 8003a10:	88db      	ldrh	r3, [r3, #6]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <oneTimeData+0x310>)
 8003a16:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.power >> 8);
 8003a18:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <oneTimeData+0x32c>)
 8003a1a:	88db      	ldrh	r3, [r3, #6]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <oneTimeData+0x310>)
 8003a24:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.power >> 16);
		//	strDATA[6] = (afterChargeData.power >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003a26:	2108      	movs	r1, #8
 8003a28:	4826      	ldr	r0, [pc, #152]	; (8003ac4 <oneTimeData+0x310>)
 8003a2a:	f7fc fd85 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif
	}

	if (_Trip_Summary_Page) {
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <oneTimeData+0x330>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02e      	beq.n	8003a94 <oneTimeData+0x2e0>
		_Trip_Summary_Page = false;
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <oneTimeData+0x330>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
		//Trip Economy -------VP
		strDATA[4] = 0x11;
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <oneTimeData+0x310>)
 8003a3e:	2211      	movs	r2, #17
 8003a40:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <oneTimeData+0x310>)
 8003a44:	2250      	movs	r2, #80	; 0x50
 8003a46:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Economy & 0xFF);
 8003a48:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <oneTimeData+0x320>)
 8003a4a:	895b      	ldrh	r3, [r3, #10]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <oneTimeData+0x310>)
 8003a50:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Economy >> 8);
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <oneTimeData+0x320>)
 8003a54:	895b      	ldrh	r3, [r3, #10]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <oneTimeData+0x310>)
 8003a5e:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (distance.trip_Economy >> 16);
		//	strDATA[6] = (distance.trip_Economy >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003a60:	2108      	movs	r1, #8
 8003a62:	4818      	ldr	r0, [pc, #96]	; (8003ac4 <oneTimeData+0x310>)
 8003a64:	f7fc fd68 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif

		//Trip Power----------VP

		strDATA[4] = 0x11;
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <oneTimeData+0x310>)
 8003a6a:	2211      	movs	r2, #17
 8003a6c:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x54;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <oneTimeData+0x310>)
 8003a70:	2254      	movs	r2, #84	; 0x54
 8003a72:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Power & 0xFF);
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <oneTimeData+0x320>)
 8003a76:	899b      	ldrh	r3, [r3, #12]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <oneTimeData+0x310>)
 8003a7c:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Power >> 8);
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <oneTimeData+0x320>)
 8003a80:	899b      	ldrh	r3, [r3, #12]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <oneTimeData+0x310>)
 8003a8a:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (distance.trip_Power >> 16);
		//	strDATA[6] = (distance.trip_Power >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003a8c:	2108      	movs	r1, #8
 8003a8e:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <oneTimeData+0x310>)
 8003a90:	f7fc fd52 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif

	}

	if (_Battery_Info_Page) {
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <oneTimeData+0x334>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <oneTimeData+0x30a>
		//SOH Battery Health
		strDATA[4] = 0x11;
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <oneTimeData+0x310>)
 8003a9e:	2211      	movs	r2, #17
 8003aa0:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x66;
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <oneTimeData+0x310>)
 8003aa4:	2266      	movs	r2, #102	; 0x66
 8003aa6:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soh_value);
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <oneTimeData+0x338>)
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <oneTimeData+0x310>)
 8003aae:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <oneTimeData+0x310>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <oneTimeData+0x310>)
 8003aba:	f7fc fd3d 	bl	8000538 <SaveToUART_TxBuffer>
//	transferCount++;
//	if (transferCount >= 9) {
//		transferCount = 1;
//	}

}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200002c4 	.word	0x200002c4
 8003ac8:	20000306 	.word	0x20000306
 8003acc:	20000368 	.word	0x20000368
 8003ad0:	20000308 	.word	0x20000308
 8003ad4:	200002d8 	.word	0x200002d8
 8003ad8:	20000304 	.word	0x20000304
 8003adc:	20000360 	.word	0x20000360
 8003ae0:	200002e8 	.word	0x200002e8
 8003ae4:	20000361 	.word	0x20000361
 8003ae8:	20000362 	.word	0x20000362
 8003aec:	20000305 	.word	0x20000305

08003af0 <vehicleInfo_UI>:



void vehicleInfo_UI(uitype_t InfoUI) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d010      	beq.n	8003b22 <vehicleInfo_UI+0x32>
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	dc13      	bgt.n	8003b2c <vehicleInfo_UI+0x3c>
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d002      	beq.n	8003b0e <vehicleInfo_UI+0x1e>
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d005      	beq.n	8003b18 <vehicleInfo_UI+0x28>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 8003b0c:	e00e      	b.n	8003b2c <vehicleInfo_UI+0x3c>
		Battery_Info_Page;
 8003b0e:	210a      	movs	r1, #10
 8003b10:	4809      	ldr	r0, [pc, #36]	; (8003b38 <vehicleInfo_UI+0x48>)
 8003b12:	f7fc fd11 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b16:	e00a      	b.n	8003b2e <vehicleInfo_UI+0x3e>
		Motor_Info_Page;
 8003b18:	210a      	movs	r1, #10
 8003b1a:	4808      	ldr	r0, [pc, #32]	; (8003b3c <vehicleInfo_UI+0x4c>)
 8003b1c:	f7fc fd0c 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b20:	e005      	b.n	8003b2e <vehicleInfo_UI+0x3e>
		Inverter_Info_Page;
 8003b22:	210a      	movs	r1, #10
 8003b24:	4806      	ldr	r0, [pc, #24]	; (8003b40 <vehicleInfo_UI+0x50>)
 8003b26:	f7fc fd07 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b2a:	e000      	b.n	8003b2e <vehicleInfo_UI+0x3e>
		break;
 8003b2c:	bf00      	nop
	}
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000090 	.word	0x20000090
 8003b3c:	2000009c 	.word	0x2000009c
 8003b40:	200000a8 	.word	0x200000a8

08003b44 <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	2b0f      	cmp	r3, #15
 8003b52:	d010      	beq.n	8003b76 <charging_UI+0x32>
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	dc1b      	bgt.n	8003b90 <charging_UI+0x4c>
 8003b58:	2b0d      	cmp	r3, #13
 8003b5a:	d002      	beq.n	8003b62 <charging_UI+0x1e>
 8003b5c:	2b0e      	cmp	r3, #14
 8003b5e:	d005      	beq.n	8003b6c <charging_UI+0x28>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 8003b60:	e016      	b.n	8003b90 <charging_UI+0x4c>
		Charging_Page;
 8003b62:	210a      	movs	r1, #10
 8003b64:	480e      	ldr	r0, [pc, #56]	; (8003ba0 <charging_UI+0x5c>)
 8003b66:	f7fc fce7 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b6a:	e014      	b.n	8003b96 <charging_UI+0x52>
		ChargeComplete_Page;
 8003b6c:	210a      	movs	r1, #10
 8003b6e:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <charging_UI+0x60>)
 8003b70:	f7fc fce2 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b74:	e00f      	b.n	8003b96 <charging_UI+0x52>
		Charge_Error_Page;
 8003b76:	210a      	movs	r1, #10
 8003b78:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <charging_UI+0x64>)
 8003b7a:	f7fc fcdd 	bl	8000538 <SaveToUART_TxBuffer>
		if (charge_error) {
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <charging_UI+0x68>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <charging_UI+0x50>
			Charge_Connection_Error_Popup_ON;
 8003b86:	2108      	movs	r1, #8
 8003b88:	4809      	ldr	r0, [pc, #36]	; (8003bb0 <charging_UI+0x6c>)
 8003b8a:	f7fc fcd5 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b8e:	e001      	b.n	8003b94 <charging_UI+0x50>
		break;
 8003b90:	bf00      	nop
 8003b92:	e000      	b.n	8003b96 <charging_UI+0x52>
		break;
 8003b94:	bf00      	nop
	}
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000108 	.word	0x20000108
 8003ba4:	20000114 	.word	0x20000114
 8003ba8:	20000120 	.word	0x20000120
 8003bac:	20000347 	.word	0x20000347
 8003bb0:	20000250 	.word	0x20000250

08003bb4 <settings_UI>:

void settings_UI(uitype_t SettingsMenu, uint8_t selectedOption) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	71fb      	strb	r3, [r7, #7]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71bb      	strb	r3, [r7, #6]
	switch (SettingsMenu) {
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	3b08      	subs	r3, #8
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d87a      	bhi.n	8003cc2 <settings_UI+0x10e>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <settings_UI+0x20>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003bef 	.word	0x08003bef
 8003bdc:	08003ca9 	.word	0x08003ca9
 8003be0:	08003cb3 	.word	0x08003cb3
	case vehicleMenu:
		General_Menu_Page;
 8003be4:	210a      	movs	r1, #10
 8003be6:	483a      	ldr	r0, [pc, #232]	; (8003cd0 <settings_UI+0x11c>)
 8003be8:	f7fc fca6 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003bec:	e06c      	b.n	8003cc8 <settings_UI+0x114>
	case systemMenu:
		System_Menu_Page;
 8003bee:	210a      	movs	r1, #10
 8003bf0:	4838      	ldr	r0, [pc, #224]	; (8003cd4 <settings_UI+0x120>)
 8003bf2:	f7fc fca1 	bl	8000538 <SaveToUART_TxBuffer>
		if(timeChanged)
 8003bf6:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <settings_UI+0x124>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <settings_UI+0x6e>
		{
			timeChanged = false;
 8003bfe:	4b36      	ldr	r3, [pc, #216]	; (8003cd8 <settings_UI+0x124>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
			timeSet[11] = timerSetValueH;
 8003c04:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <settings_UI+0x128>)
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <settings_UI+0x12c>)
 8003c0a:	72da      	strb	r2, [r3, #11]
			timeSet[12] = timerSetValueMin;
 8003c0c:	4b35      	ldr	r3, [pc, #212]	; (8003ce4 <settings_UI+0x130>)
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <settings_UI+0x12c>)
 8003c12:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart3, timeSet, sizeof(timeSet), HAL_MAX_DELAY);
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	220e      	movs	r2, #14
 8003c1a:	4931      	ldr	r1, [pc, #196]	; (8003ce0 <settings_UI+0x12c>)
 8003c1c:	4832      	ldr	r0, [pc, #200]	; (8003ce8 <settings_UI+0x134>)
 8003c1e:	f003 f8ba 	bl	8006d96 <HAL_UART_Transmit>
		}
		if(selectedOption == 0) {
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <settings_UI+0x88>
			TimeSetting_Button;
 8003c28:	2108      	movs	r1, #8
 8003c2a:	4830      	ldr	r0, [pc, #192]	; (8003cec <settings_UI+0x138>)
 8003c2c:	f7fc fc84 	bl	8000538 <SaveToUART_TxBuffer>
			BrightnessSetting_Button_OFF;
 8003c30:	2108      	movs	r1, #8
 8003c32:	482f      	ldr	r0, [pc, #188]	; (8003cf0 <settings_UI+0x13c>)
 8003c34:	f7fc fc80 	bl	8000538 <SaveToUART_TxBuffer>

			selectedOption = 10;
 8003c38:	230a      	movs	r3, #10
 8003c3a:	71bb      	strb	r3, [r7, #6]
		}
		if(selectedOption == 1)
 8003c3c:	79bb      	ldrb	r3, [r7, #6]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d109      	bne.n	8003c56 <settings_UI+0xa2>
		{
			BrightnessSetting_Button;
 8003c42:	2108      	movs	r1, #8
 8003c44:	482b      	ldr	r0, [pc, #172]	; (8003cf4 <settings_UI+0x140>)
 8003c46:	f7fc fc77 	bl	8000538 <SaveToUART_TxBuffer>
			TimeSetting_Button_OFF;
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	482a      	ldr	r0, [pc, #168]	; (8003cf8 <settings_UI+0x144>)
 8003c4e:	f7fc fc73 	bl	8000538 <SaveToUART_TxBuffer>
			selectedOption = 10;
 8003c52:	230a      	movs	r3, #10
 8003c54:	71bb      	strb	r3, [r7, #6]
		}
		if (selectedOption == 4) {
 8003c56:	79bb      	ldrb	r3, [r7, #6]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d110      	bne.n	8003c7e <settings_UI+0xca>
			strDATA[4] = 0x13;
 8003c5c:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <settings_UI+0x148>)
 8003c5e:	2213      	movs	r2, #19
 8003c60:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x22;
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <settings_UI+0x148>)
 8003c64:	2222      	movs	r2, #34	; 0x22
 8003c66:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <settings_UI+0x148>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueH);
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <settings_UI+0x128>)
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <settings_UI+0x148>)
 8003c74:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 8003c76:	2108      	movs	r1, #8
 8003c78:	4820      	ldr	r0, [pc, #128]	; (8003cfc <settings_UI+0x148>)
 8003c7a:	f7fc fc5d 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (selectedOption == 3) {
 8003c7e:	79bb      	ldrb	r3, [r7, #6]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d120      	bne.n	8003cc6 <settings_UI+0x112>
			strDATA[4] = 0x13;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <settings_UI+0x148>)
 8003c86:	2213      	movs	r2, #19
 8003c88:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x21;
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <settings_UI+0x148>)
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <settings_UI+0x148>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueMin);
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <settings_UI+0x130>)
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <settings_UI+0x148>)
 8003c9c:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	4816      	ldr	r0, [pc, #88]	; (8003cfc <settings_UI+0x148>)
 8003ca2:	f7fc fc49 	bl	8000538 <SaveToUART_TxBuffer>
		}

		break;
 8003ca6:	e00e      	b.n	8003cc6 <settings_UI+0x112>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 8003ca8:	210a      	movs	r1, #10
 8003caa:	4815      	ldr	r0, [pc, #84]	; (8003d00 <settings_UI+0x14c>)
 8003cac:	f7fc fc44 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003cb0:	e00a      	b.n	8003cc8 <settings_UI+0x114>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 8003cb2:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <settings_UI+0x150>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 8003cb8:	210a      	movs	r1, #10
 8003cba:	4813      	ldr	r0, [pc, #76]	; (8003d08 <settings_UI+0x154>)
 8003cbc:	f7fc fc3c 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003cc0:	e002      	b.n	8003cc8 <settings_UI+0x114>
	default:
		break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <settings_UI+0x114>
		break;
 8003cc6:	bf00      	nop
	}
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200000c0 	.word	0x200000c0
 8003cd4:	200000cc 	.word	0x200000cc
 8003cd8:	2000033a 	.word	0x2000033a
 8003cdc:	20000338 	.word	0x20000338
 8003ce0:	20000020 	.word	0x20000020
 8003ce4:	20000339 	.word	0x20000339
 8003ce8:	20000b70 	.word	0x20000b70
 8003cec:	20000218 	.word	0x20000218
 8003cf0:	20000230 	.word	0x20000230
 8003cf4:	20000228 	.word	0x20000228
 8003cf8:	20000220 	.word	0x20000220
 8003cfc:	200002c4 	.word	0x200002c4
 8003d00:	200000d8 	.word	0x200000d8
 8003d04:	20000343 	.word	0x20000343
 8003d08:	200000e4 	.word	0x200000e4

08003d0c <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 8003d16:	210a      	movs	r1, #10
 8003d18:	4817      	ldr	r0, [pc, #92]	; (8003d78 <selection_UI+0x6c>)
 8003d1a:	f7fc fc0d 	bl	8000538 <SaveToUART_TxBuffer>
	switch (SettingsMenu) {
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	3b08      	subs	r3, #8
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d81e      	bhi.n	8003d64 <selection_UI+0x58>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <selection_UI+0x20>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d47 	.word	0x08003d47
 8003d34:	08003d51 	.word	0x08003d51
 8003d38:	08003d5b 	.word	0x08003d5b
	case vehicleMenu:
		Vehicle_Button;
 8003d3c:	2108      	movs	r1, #8
 8003d3e:	480f      	ldr	r0, [pc, #60]	; (8003d7c <selection_UI+0x70>)
 8003d40:	f7fc fbfa 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d44:	e013      	b.n	8003d6e <selection_UI+0x62>
	case systemMenu:
		System_Button;
 8003d46:	2108      	movs	r1, #8
 8003d48:	480d      	ldr	r0, [pc, #52]	; (8003d80 <selection_UI+0x74>)
 8003d4a:	f7fc fbf5 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d4e:	e00e      	b.n	8003d6e <selection_UI+0x62>
	case bluetoothMenu:
		Bluetooth_Button;
 8003d50:	2108      	movs	r1, #8
 8003d52:	480c      	ldr	r0, [pc, #48]	; (8003d84 <selection_UI+0x78>)
 8003d54:	f7fc fbf0 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d58:	e009      	b.n	8003d6e <selection_UI+0x62>
	case errorsMenu:
		Error_Button;
 8003d5a:	2108      	movs	r1, #8
 8003d5c:	480a      	ldr	r0, [pc, #40]	; (8003d88 <selection_UI+0x7c>)
 8003d5e:	f7fc fbeb 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d62:	e004      	b.n	8003d6e <selection_UI+0x62>
	default:
		NO_Button;
 8003d64:	2108      	movs	r1, #8
 8003d66:	4809      	ldr	r0, [pc, #36]	; (8003d8c <selection_UI+0x80>)
 8003d68:	f7fc fbe6 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d6c:	bf00      	nop
	}
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200000b4 	.word	0x200000b4
 8003d7c:	200001f0 	.word	0x200001f0
 8003d80:	200001f8 	.word	0x200001f8
 8003d84:	20000200 	.word	0x20000200
 8003d88:	20000208 	.word	0x20000208
 8003d8c:	20000210 	.word	0x20000210

08003d90 <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0

	if (error_on == true) {
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <errorIcon+0x8c>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d004      	beq.n	8003da6 <errorIcon+0x16>
		Error_ON_Icon;
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	4820      	ldr	r0, [pc, #128]	; (8003e20 <errorIcon+0x90>)
 8003da0:	f7fc fbca 	bl	8000538 <SaveToUART_TxBuffer>
 8003da4:	e003      	b.n	8003dae <errorIcon+0x1e>
	} else {
		Error_OFF_Icon;
 8003da6:	2108      	movs	r1, #8
 8003da8:	481e      	ldr	r0, [pc, #120]	; (8003e24 <errorIcon+0x94>)
 8003daa:	f7fc fbc5 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (milderror_on == true) {
 8003dae:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <errorIcon+0x98>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <errorIcon+0x30>
		Mild_Error_ON_Icon;
 8003db6:	2108      	movs	r1, #8
 8003db8:	481c      	ldr	r0, [pc, #112]	; (8003e2c <errorIcon+0x9c>)
 8003dba:	f7fc fbbd 	bl	8000538 <SaveToUART_TxBuffer>
 8003dbe:	e003      	b.n	8003dc8 <errorIcon+0x38>
	} else {
		Mild_Error_OFF_Icon;
 8003dc0:	2108      	movs	r1, #8
 8003dc2:	481b      	ldr	r0, [pc, #108]	; (8003e30 <errorIcon+0xa0>)
 8003dc4:	f7fc fbb8 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (service_on == true) {
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <errorIcon+0xa4>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d004      	beq.n	8003dda <errorIcon+0x4a>
		Service_Error_ON_Icon;
 8003dd0:	2108      	movs	r1, #8
 8003dd2:	4819      	ldr	r0, [pc, #100]	; (8003e38 <errorIcon+0xa8>)
 8003dd4:	f7fc fbb0 	bl	8000538 <SaveToUART_TxBuffer>
 8003dd8:	e003      	b.n	8003de2 <errorIcon+0x52>
	} else {
		Service_Error_OFF_Icon;
 8003dda:	2108      	movs	r1, #8
 8003ddc:	4817      	ldr	r0, [pc, #92]	; (8003e3c <errorIcon+0xac>)
 8003dde:	f7fc fbab 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (bat_temp_high == true) {
 8003de2:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <errorIcon+0xb0>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <errorIcon+0x64>
		Battery_High_Temp_Popup_ON;
 8003dea:	2108      	movs	r1, #8
 8003dec:	4815      	ldr	r0, [pc, #84]	; (8003e44 <errorIcon+0xb4>)
 8003dee:	f7fc fba3 	bl	8000538 <SaveToUART_TxBuffer>
 8003df2:	e003      	b.n	8003dfc <errorIcon+0x6c>
	} else {
		Battery_High_Temp_Popup_OFF;
 8003df4:	2108      	movs	r1, #8
 8003df6:	4814      	ldr	r0, [pc, #80]	; (8003e48 <errorIcon+0xb8>)
 8003df8:	f7fc fb9e 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (aux_low_on == true) {
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <errorIcon+0xbc>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <errorIcon+0x7e>
		Battery_ON_Icon;
 8003e04:	2108      	movs	r1, #8
 8003e06:	4812      	ldr	r0, [pc, #72]	; (8003e50 <errorIcon+0xc0>)
 8003e08:	f7fc fb96 	bl	8000538 <SaveToUART_TxBuffer>
	} else {
		Battery_OFF_Icon;
	}
}
 8003e0c:	e003      	b.n	8003e16 <errorIcon+0x86>
		Battery_OFF_Icon;
 8003e0e:	2108      	movs	r1, #8
 8003e10:	4810      	ldr	r0, [pc, #64]	; (8003e54 <errorIcon+0xc4>)
 8003e12:	f7fc fb91 	bl	8000538 <SaveToUART_TxBuffer>
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000033e 	.word	0x2000033e
 8003e20:	20000160 	.word	0x20000160
 8003e24:	20000168 	.word	0x20000168
 8003e28:	2000033f 	.word	0x2000033f
 8003e2c:	20000180 	.word	0x20000180
 8003e30:	20000188 	.word	0x20000188
 8003e34:	20000340 	.word	0x20000340
 8003e38:	20000170 	.word	0x20000170
 8003e3c:	20000178 	.word	0x20000178
 8003e40:	20000341 	.word	0x20000341
 8003e44:	20000238 	.word	0x20000238
 8003e48:	20000240 	.word	0x20000240
 8003e4c:	20000342 	.word	0x20000342
 8003e50:	20000150 	.word	0x20000150
 8003e54:	20000158 	.word	0x20000158

08003e58 <errorPopup>:

void errorPopup(void) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <errorPopup+0x24>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d104      	bne.n	8003e6e <errorPopup+0x16>
		SystemError_Critical_Popup;
 8003e64:	210a      	movs	r1, #10
 8003e66:	4806      	ldr	r0, [pc, #24]	; (8003e80 <errorPopup+0x28>)
 8003e68:	f7fc fb66 	bl	8000538 <SaveToUART_TxBuffer>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 8003e6c:	e003      	b.n	8003e76 <errorPopup+0x1e>
		SystemError_Mild_Popup_Page;
 8003e6e:	210a      	movs	r1, #10
 8003e70:	4804      	ldr	r0, [pc, #16]	; (8003e84 <errorPopup+0x2c>)
 8003e72:	f7fc fb61 	bl	8000538 <SaveToUART_TxBuffer>
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000321 	.word	0x20000321
 8003e80:	20000138 	.word	0x20000138
 8003e84:	2000012c 	.word	0x2000012c

08003e88 <errorCode>:

void errorCode(void) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 8003e8c:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <errorCode+0xac>)
 8003e8e:	2211      	movs	r2, #17
 8003e90:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 8003e92:	4b28      	ldr	r3, [pc, #160]	; (8003f34 <errorCode+0xac>)
 8003e94:	2294      	movs	r2, #148	; 0x94
 8003e96:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003e98:	4b26      	ldr	r3, [pc, #152]	; (8003f34 <errorCode+0xac>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 8003e9e:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <errorCode+0xb0>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <errorCode+0xac>)
 8003ea4:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003ea6:	2108      	movs	r1, #8
 8003ea8:	4822      	ldr	r0, [pc, #136]	; (8003f34 <errorCode+0xac>)
 8003eaa:	f7fc fb45 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Critical
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <errorCode+0xac>)
 8003eb0:	2211      	movs	r2, #17
 8003eb2:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <errorCode+0xac>)
 8003eb6:	2297      	movs	r2, #151	; 0x97
 8003eb8:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003eba:	2108      	movs	r1, #8
 8003ebc:	481d      	ldr	r0, [pc, #116]	; (8003f34 <errorCode+0xac>)
 8003ebe:	f7fc fb3b 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Mild
 8003ec2:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <errorCode+0xac>)
 8003ec4:	2211      	movs	r2, #17
 8003ec6:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <errorCode+0xac>)
 8003eca:	2295      	movs	r2, #149	; 0x95
 8003ecc:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003ece:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <errorCode+0xac>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <errorCode+0xb4>)
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <errorCode+0xac>)
 8003eda:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003edc:	2108      	movs	r1, #8
 8003ede:	4815      	ldr	r0, [pc, #84]	; (8003f34 <errorCode+0xac>)
 8003ee0:	f7fc fb2a 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Critical
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <errorCode+0xac>)
 8003ee6:	2211      	movs	r2, #17
 8003ee8:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <errorCode+0xac>)
 8003eec:	2298      	movs	r2, #152	; 0x98
 8003eee:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003ef0:	2108      	movs	r1, #8
 8003ef2:	4810      	ldr	r0, [pc, #64]	; (8003f34 <errorCode+0xac>)
 8003ef4:	f7fc fb20 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Mild
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <errorCode+0xac>)
 8003efa:	2211      	movs	r2, #17
 8003efc:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <errorCode+0xac>)
 8003f00:	2296      	movs	r2, #150	; 0x96
 8003f02:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <errorCode+0xac>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <errorCode+0xb8>)
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <errorCode+0xac>)
 8003f10:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003f12:	2108      	movs	r1, #8
 8003f14:	4807      	ldr	r0, [pc, #28]	; (8003f34 <errorCode+0xac>)
 8003f16:	f7fc fb0f 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Critical
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <errorCode+0xac>)
 8003f1c:	2211      	movs	r2, #17
 8003f1e:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <errorCode+0xac>)
 8003f22:	2299      	movs	r2, #153	; 0x99
 8003f24:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003f26:	2108      	movs	r1, #8
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <errorCode+0xac>)
 8003f2a:	f7fc fb05 	bl	8000538 <SaveToUART_TxBuffer>

}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	200002c4 	.word	0x200002c4
 8003f38:	2000031f 	.word	0x2000031f
 8003f3c:	20000320 	.word	0x20000320
 8003f40:	20000321 	.word	0x20000321

08003f44 <modeSelection>:

void modeSelection(uimode_t currentMode) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
//	if (!_modeChanged) {
//		drivePageSetter(currentPage);
//	}
	if (currentMode == modeCleared) {
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d104      	bne.n	8003f5e <modeSelection+0x1a>
		ModeClear_Icon;
 8003f54:	2108      	movs	r1, #8
 8003f56:	4828      	ldr	r0, [pc, #160]	; (8003ff8 <modeSelection+0xb4>)
 8003f58:	f7fc faee 	bl	8000538 <SaveToUART_TxBuffer>
		return;
 8003f5c:	e048      	b.n	8003ff0 <modeSelection+0xac>
//	if (mode_count > 15) {
//		rtn = true;
//		mode_count = 0;
//	}

	switch (currentMode) {
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d02b      	beq.n	8003fbc <modeSelection+0x78>
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	dc3c      	bgt.n	8003fe2 <modeSelection+0x9e>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <modeSelection+0x2e>
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d00c      	beq.n	8003f8a <modeSelection+0x46>
			//SportMode_Popup;
			_modeChanged = false;
		}
		break;
	default:
		break;
 8003f70:	e037      	b.n	8003fe2 <modeSelection+0x9e>
		if (modeIcon) {
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <modeSelection+0xb8>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d035      	beq.n	8003fe6 <modeSelection+0xa2>
			NormalMode_Icon;
 8003f7a:	2108      	movs	r1, #8
 8003f7c:	4820      	ldr	r0, [pc, #128]	; (8004000 <modeSelection+0xbc>)
 8003f7e:	f7fc fadb 	bl	8000538 <SaveToUART_TxBuffer>
			modeIcon = false;
 8003f82:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <modeSelection+0xb8>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
		break;
 8003f88:	e02d      	b.n	8003fe6 <modeSelection+0xa2>
		if (mode_evcu == 1) {
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <modeSelection+0xc0>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d104      	bne.n	8003f9c <modeSelection+0x58>
			PowerLimitON_Icon;
 8003f92:	2108      	movs	r1, #8
 8003f94:	481c      	ldr	r0, [pc, #112]	; (8004008 <modeSelection+0xc4>)
 8003f96:	f7fc facf 	bl	8000538 <SaveToUART_TxBuffer>
 8003f9a:	e003      	b.n	8003fa4 <modeSelection+0x60>
			PowerLimitOFF_Icon;
 8003f9c:	2108      	movs	r1, #8
 8003f9e:	481b      	ldr	r0, [pc, #108]	; (800400c <modeSelection+0xc8>)
 8003fa0:	f7fc faca 	bl	8000538 <SaveToUART_TxBuffer>
		if (modeIcon) {
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <modeSelection+0xb8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01e      	beq.n	8003fea <modeSelection+0xa6>
			modeIcon = false;
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <modeSelection+0xb8>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
			EcoMode_Icon;
 8003fb2:	2108      	movs	r1, #8
 8003fb4:	4816      	ldr	r0, [pc, #88]	; (8004010 <modeSelection+0xcc>)
 8003fb6:	f7fc fabf 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003fba:	e016      	b.n	8003fea <modeSelection+0xa6>
		if (modeIcon) {
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <modeSelection+0xb8>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <modeSelection+0x8e>
			modeIcon = false;
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <modeSelection+0xb8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 8003fca:	2108      	movs	r1, #8
 8003fcc:	4811      	ldr	r0, [pc, #68]	; (8004014 <modeSelection+0xd0>)
 8003fce:	f7fc fab3 	bl	8000538 <SaveToUART_TxBuffer>
		if (_modeChanged) {
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <modeSelection+0xd4>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <modeSelection+0xaa>
			_modeChanged = false;
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <modeSelection+0xd4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
		break;
 8003fe0:	e005      	b.n	8003fee <modeSelection+0xaa>
		break;
 8003fe2:	bf00      	nop
 8003fe4:	e004      	b.n	8003ff0 <modeSelection+0xac>
		break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <modeSelection+0xac>
		break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <modeSelection+0xac>
		break;
 8003fee:	bf00      	nop
	}
}
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200001e8 	.word	0x200001e8
 8003ffc:	20000346 	.word	0x20000346
 8004000:	200001d8 	.word	0x200001d8
 8004004:	2000031c 	.word	0x2000031c
 8004008:	20000190 	.word	0x20000190
 800400c:	20000198 	.word	0x20000198
 8004010:	200001d0 	.word	0x200001d0
 8004014:	200001e0 	.word	0x200001e0
 8004018:	20000358 	.word	0x20000358

0800401c <popUpHandler>:

void popUpHandler(void) {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	//Set popup priority Here

	switch (popUpNumber) {
 8004020:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <popUpHandler+0x84>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b05      	cmp	r3, #5
 8004026:	d837      	bhi.n	8004098 <popUpHandler+0x7c>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <popUpHandler+0x14>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004049 	.word	0x08004049
 8004034:	08004059 	.word	0x08004059
 8004038:	08004069 	.word	0x08004069
 800403c:	08004079 	.word	0x08004079
 8004040:	08004089 	.word	0x08004089
 8004044:	08004099 	.word	0x08004099
	case 0:
		//popUp_OFF;
		Battery_High_Temp_Popup_OFF;
 8004048:	2108      	movs	r1, #8
 800404a:	4816      	ldr	r0, [pc, #88]	; (80040a4 <popUpHandler+0x88>)
 800404c:	f7fc fa74 	bl	8000538 <SaveToUART_TxBuffer>
		inPopup = false;
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <popUpHandler+0x8c>)
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
		break;
 8004056:	e020      	b.n	800409a <popUpHandler+0x7e>
	case 1:
		//NormalMode_Popup;
		Battery_High_Temp_Popup_ON;
 8004058:	2108      	movs	r1, #8
 800405a:	4814      	ldr	r0, [pc, #80]	; (80040ac <popUpHandler+0x90>)
 800405c:	f7fc fa6c 	bl	8000538 <SaveToUART_TxBuffer>
		inPopup = true;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <popUpHandler+0x8c>)
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
		break;
 8004066:	e018      	b.n	800409a <popUpHandler+0x7e>
	case 2:
		//EcoMode_Popup;
		Battery_High_Temp_Popup_ON;
 8004068:	2108      	movs	r1, #8
 800406a:	4810      	ldr	r0, [pc, #64]	; (80040ac <popUpHandler+0x90>)
 800406c:	f7fc fa64 	bl	8000538 <SaveToUART_TxBuffer>
		inPopup = true;
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <popUpHandler+0x8c>)
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
		break;
 8004076:	e010      	b.n	800409a <popUpHandler+0x7e>
	case 3:
		//SportMode_Popup;
		Battery_High_Temp_Popup_ON;
 8004078:	2108      	movs	r1, #8
 800407a:	480c      	ldr	r0, [pc, #48]	; (80040ac <popUpHandler+0x90>)
 800407c:	f7fc fa5c 	bl	8000538 <SaveToUART_TxBuffer>
		inPopup = true;
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <popUpHandler+0x8c>)
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
		break;
 8004086:	e008      	b.n	800409a <popUpHandler+0x7e>
	case 4:
		ModeChangeOFF_Page;
 8004088:	2108      	movs	r1, #8
 800408a:	4809      	ldr	r0, [pc, #36]	; (80040b0 <popUpHandler+0x94>)
 800408c:	f7fc fa54 	bl	8000538 <SaveToUART_TxBuffer>
		inPopup = true;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <popUpHandler+0x8c>)
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]
		break;
 8004096:	e000      	b.n	800409a <popUpHandler+0x7e>
	case 5:
		//ModeChangeOFF_Page;
		break;

	default:
		break;
 8004098:	bf00      	nop
	}

}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000036b 	.word	0x2000036b
 80040a4:	20000240 	.word	0x20000240
 80040a8:	20000013 	.word	0x20000013
 80040ac:	20000238 	.word	0x20000238
 80040b0:	20000248 	.word	0x20000248

080040b4 <gearUpdate>:
	}

}


void gearUpdate(void) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <gearUpdate+0x58>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d103      	bne.n	80040c8 <gearUpdate+0x14>
		Gear_Neutral_Icon;
 80040c0:	2108      	movs	r1, #8
 80040c2:	4813      	ldr	r0, [pc, #76]	; (8004110 <gearUpdate+0x5c>)
 80040c4:	f7fc fa38 	bl	8000538 <SaveToUART_TxBuffer>
	}

	if (currentstate == 2) {
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <gearUpdate+0x58>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d103      	bne.n	80040d8 <gearUpdate+0x24>
		Gear_Drive_Icon;
 80040d0:	2108      	movs	r1, #8
 80040d2:	4810      	ldr	r0, [pc, #64]	; (8004114 <gearUpdate+0x60>)
 80040d4:	f7fc fa30 	bl	8000538 <SaveToUART_TxBuffer>
	}

	if (currentstate == 3) {
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <gearUpdate+0x58>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d103      	bne.n	80040e8 <gearUpdate+0x34>
		Gear_Reverse_Icon;
 80040e0:	2108      	movs	r1, #8
 80040e2:	480d      	ldr	r0, [pc, #52]	; (8004118 <gearUpdate+0x64>)
 80040e4:	f7fc fa28 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (_gearCleared || currentstate == 0) {
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <gearUpdate+0x68>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <gearUpdate+0x44>
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <gearUpdate+0x58>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <gearUpdate+0x52>
		Gear_Clear_Icon;
 80040f8:	2108      	movs	r1, #8
 80040fa:	4809      	ldr	r0, [pc, #36]	; (8004120 <gearUpdate+0x6c>)
 80040fc:	f7fc fa1c 	bl	8000538 <SaveToUART_TxBuffer>
		_gearCleared = false;
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <gearUpdate+0x68>)
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
	}

}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000314 	.word	0x20000314
 8004110:	200001b8 	.word	0x200001b8
 8004114:	200001c0 	.word	0x200001c0
 8004118:	200001b0 	.word	0x200001b0
 800411c:	20000359 	.word	0x20000359
 8004120:	200001c8 	.word	0x200001c8

08004124 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004128:	4b11      	ldr	r3, [pc, #68]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 800412a:	4a12      	ldr	r2, [pc, #72]	; (8004174 <MX_USART3_UART_Init+0x50>)
 800412c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 8004130:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004134:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004136:	4b0e      	ldr	r3, [pc, #56]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 800414a:	220c      	movs	r2, #12
 800414c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 8004150:	2200      	movs	r2, #0
 8004152:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 8004156:	2200      	movs	r2, #0
 8004158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800415a:	4805      	ldr	r0, [pc, #20]	; (8004170 <MX_USART3_UART_Init+0x4c>)
 800415c:	f002 fdce 	bl	8006cfc <HAL_UART_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004166:	f7fd faf9 	bl	800175c <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000b70 	.word	0x20000b70
 8004174:	40004800 	.word	0x40004800

08004178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a20      	ldr	r2, [pc, #128]	; (8004214 <HAL_UART_MspInit+0x9c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d139      	bne.n	800420c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <HAL_UART_MspInit+0xa0>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <HAL_UART_MspInit+0xa0>)
 800419e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a2:	61d3      	str	r3, [r2, #28]
 80041a4:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <HAL_UART_MspInit+0xa0>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_UART_MspInit+0xa0>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_UART_MspInit+0xa0>)
 80041b6:	f043 0308 	orr.w	r3, r3, #8
 80041ba:	6193      	str	r3, [r2, #24]
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_UART_MspInit+0xa0>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ce:	2302      	movs	r3, #2
 80041d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041d2:	2303      	movs	r3, #3
 80041d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	f107 0310 	add.w	r3, r7, #16
 80041da:	4619      	mov	r1, r3
 80041dc:	480f      	ldr	r0, [pc, #60]	; (800421c <HAL_UART_MspInit+0xa4>)
 80041de:	f001 fa33 	bl	8005648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f0:	f107 0310 	add.w	r3, r7, #16
 80041f4:	4619      	mov	r1, r3
 80041f6:	4809      	ldr	r0, [pc, #36]	; (800421c <HAL_UART_MspInit+0xa4>)
 80041f8:	f001 fa26 	bl	8005648 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	2027      	movs	r0, #39	; 0x27
 8004202:	f001 f8a8 	bl	8005356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004206:	2027      	movs	r0, #39	; 0x27
 8004208:	f001 f8c1 	bl	800538e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800420c:	bf00      	nop
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40004800 	.word	0x40004800
 8004218:	40021000 	.word	0x40021000
 800421c:	40010c00 	.word	0x40010c00

08004220 <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 8004224:	4b09      	ldr	r3, [pc, #36]	; (800424c <check_ack+0x2c>)
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <check_ack+0x30>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	429a      	cmp	r2, r3
 8004230:	d103      	bne.n	800423a <check_ack+0x1a>
		modeChangeOK = true;
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <check_ack+0x34>)
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e002      	b.n	8004240 <check_ack+0x20>
	} else {
		modeChangeOK = false;
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <check_ack+0x34>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 8004240:	4b04      	ldr	r3, [pc, #16]	; (8004254 <check_ack+0x34>)
 8004242:	781b      	ldrb	r3, [r3, #0]
}
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr
 800424c:	2000031c 	.word	0x2000031c
 8004250:	20000333 	.word	0x20000333
 8004254:	20000345 	.word	0x20000345

08004258 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <evcuMode+0x11c>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d16b      	bne.n	800433c <evcuMode+0xe4>
 8004264:	4b44      	ldr	r3, [pc, #272]	; (8004378 <evcuMode+0x120>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d067      	beq.n	800433c <evcuMode+0xe4>
		if (currentMode == ecoMode) {
 800426c:	4b43      	ldr	r3, [pc, #268]	; (800437c <evcuMode+0x124>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d11a      	bne.n	80042ac <evcuMode+0x54>
			//Set Normal Mode
			targetMode = normalMode;
 8004276:	4b42      	ldr	r3, [pc, #264]	; (8004380 <evcuMode+0x128>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 800427c:	f7ff ffd0 	bl	8004220 <check_ack>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d05a      	beq.n	800433c <evcuMode+0xe4>
				currentMode = normalMode;
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <evcuMode+0x124>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
				mode = false;
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <evcuMode+0x120>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004292:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <evcuMode+0x12c>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 1;
 8004298:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <evcuMode+0x130>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <evcuMode+0x134>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <evcuMode+0x138>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e047      	b.n	800433c <evcuMode+0xe4>
			}
		} else if (currentMode == normalMode) {
 80042ac:	4b33      	ldr	r3, [pc, #204]	; (800437c <evcuMode+0x124>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d11d      	bne.n	80042f2 <evcuMode+0x9a>
			//Set Sports Mode
			targetMode = sportMode;
 80042b6:	4b32      	ldr	r3, [pc, #200]	; (8004380 <evcuMode+0x128>)
 80042b8:	2203      	movs	r2, #3
 80042ba:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 80042bc:	f7ff ffb0 	bl	8004220 <check_ack>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d03a      	beq.n	800433c <evcuMode+0xe4>
				currentMode = sportMode;
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <evcuMode+0x124>)
 80042c8:	2203      	movs	r2, #3
 80042ca:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 80042cc:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <evcuMode+0x12c>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 3;
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <evcuMode+0x130>)
 80042d4:	2203      	movs	r2, #3
 80042d6:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 80042d8:	4b2c      	ldr	r3, [pc, #176]	; (800438c <evcuMode+0x134>)
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
				mode = false;
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <evcuMode+0x120>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <evcuMode+0x138>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <evcuMode+0x13c>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e024      	b.n	800433c <evcuMode+0xe4>
			}
		} else if (currentMode == sportMode) {
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <evcuMode+0x124>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d11f      	bne.n	800433c <evcuMode+0xe4>
			//Set Eco Mode
			targetMode = ecoMode;
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <evcuMode+0x128>)
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004302:	f7ff ff8d 	bl	8004220 <check_ack>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d017      	beq.n	800433c <evcuMode+0xe4>
				currentMode = ecoMode;
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <evcuMode+0x124>)
 800430e:	2202      	movs	r2, #2
 8004310:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <evcuMode+0x120>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <evcuMode+0x12c>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 2;
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <evcuMode+0x130>)
 8004320:	2202      	movs	r2, #2
 8004322:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <evcuMode+0x134>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
				rtn = false;
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <evcuMode+0x138>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004330:	4b18      	ldr	r3, [pc, #96]	; (8004394 <evcuMode+0x13c>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <evcuMode+0x124>)
 8004338:	2202      	movs	r2, #2
 800433a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <evcuMode+0x11c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d115      	bne.n	8004370 <evcuMode+0x118>
		currentMode = ecoMode;
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <evcuMode+0x124>)
 8004346:	2202      	movs	r2, #2
 8004348:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <evcuMode+0x128>)
 800434c:	2202      	movs	r2, #2
 800434e:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <evcuMode+0x120>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <evcuMode+0x118>
			mode = false;
 8004358:	4b07      	ldr	r3, [pc, #28]	; (8004378 <evcuMode+0x120>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
			_modeSelection = 1;
 800435e:	4b0b      	ldr	r3, [pc, #44]	; (800438c <evcuMode+0x134>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
			modeIcon = true;
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <evcuMode+0x12c>)
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
			rtn = false;
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <evcuMode+0x138>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000031b 	.word	0x2000031b
 8004378:	200002bd 	.word	0x200002bd
 800437c:	20000332 	.word	0x20000332
 8004380:	20000333 	.word	0x20000333
 8004384:	20000346 	.word	0x20000346
 8004388:	2000036b 	.word	0x2000036b
 800438c:	2000034f 	.word	0x2000034f
 8004390:	20000329 	.word	0x20000329
 8004394:	20000345 	.word	0x20000345

08004398 <trip_reset>:

void trip_reset(void){
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <trip_reset+0x1c>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <trip_reset+0x12>
		tripreset = false;
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <trip_reset+0x20>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	2000031a 	.word	0x2000031a
 80043b8:	200002bb 	.word	0x200002bb

080043bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043bc:	480c      	ldr	r0, [pc, #48]	; (80043f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043be:	490d      	ldr	r1, [pc, #52]	; (80043f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c4:	e002      	b.n	80043cc <LoopCopyDataInit>

080043c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ca:	3304      	adds	r3, #4

080043cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043d0:	d3f9      	bcc.n	80043c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043d2:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043d4:	4c0a      	ldr	r4, [pc, #40]	; (8004400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d8:	e001      	b.n	80043de <LoopFillZerobss>

080043da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043dc:	3204      	adds	r2, #4

080043de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043e0:	d3fb      	bcc.n	80043da <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043e2:	f7fe fd45 	bl	8002e70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043e6:	f003 f99d 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043ea:	f7fc fff9 	bl	80013e0 <main>
  bx lr
 80043ee:	4770      	bx	lr
  ldr r0, =_sdata
 80043f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043f4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80043f8:	080077f8 	.word	0x080077f8
  ldr r2, =_sbss
 80043fc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8004400:	20000bb8 	.word	0x20000bb8

08004404 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004404:	e7fe      	b.n	8004404 <ADC1_2_IRQHandler>
	...

08004408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800440c:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_Init+0x28>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a07      	ldr	r2, [pc, #28]	; (8004430 <HAL_Init+0x28>)
 8004412:	f043 0310 	orr.w	r3, r3, #16
 8004416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004418:	2003      	movs	r0, #3
 800441a:	f000 ff91 	bl	8005340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800441e:	200f      	movs	r0, #15
 8004420:	f000 f808 	bl	8004434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004424:	f7fe fc8e 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40022000 	.word	0x40022000

08004434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_InitTick+0x54>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_InitTick+0x58>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4619      	mov	r1, r3
 8004446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800444a:	fbb3 f3f1 	udiv	r3, r3, r1
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	4618      	mov	r0, r3
 8004454:	f000 ffa9 	bl	80053aa <HAL_SYSTICK_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00e      	b.n	8004480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d80a      	bhi.n	800447e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004468:	2200      	movs	r2, #0
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f000 ff71 	bl	8005356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004474:	4a06      	ldr	r2, [pc, #24]	; (8004490 <HAL_InitTick+0x5c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	2000001c 	.word	0x2000001c
 800448c:	20000264 	.word	0x20000264
 8004490:	20000260 	.word	0x20000260

08004494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_IncTick+0x1c>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <HAL_IncTick+0x20>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	4a03      	ldr	r2, [pc, #12]	; (80044b4 <HAL_IncTick+0x20>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr
 80044b0:	20000264 	.word	0x20000264
 80044b4:	20000bb4 	.word	0x20000bb4

080044b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return uwTick;
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <HAL_GetTick+0x10>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	20000bb4 	.word	0x20000bb4

080044cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_GetTick>
 80044d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d005      	beq.n	80044f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_Delay+0x44>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044f2:	bf00      	nop
 80044f4:	f7ff ffe0 	bl	80044b8 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	429a      	cmp	r2, r3
 8004502:	d8f7      	bhi.n	80044f4 <HAL_Delay+0x28>
  {
  }
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000264 	.word	0x20000264

08004514 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0ed      	b.n	8004702 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc f92e 	bl	8000794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004548:	f7ff ffb6 	bl	80044b8 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800454e:	e012      	b.n	8004576 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004550:	f7ff ffb2 	bl	80044b8 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b0a      	cmp	r3, #10
 800455c:	d90b      	bls.n	8004576 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2205      	movs	r2, #5
 800456e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0c5      	b.n	8004702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0e5      	beq.n	8004550 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0202 	bic.w	r2, r2, #2
 8004592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004594:	f7ff ff90 	bl	80044b8 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800459a:	e012      	b.n	80045c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800459c:	f7ff ff8c 	bl	80044b8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b0a      	cmp	r3, #10
 80045a8:	d90b      	bls.n	80045c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2205      	movs	r2, #5
 80045ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e09f      	b.n	8004702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7e1b      	ldrb	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d108      	bne.n	80045ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e007      	b.n	80045fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7e5b      	ldrb	r3, [r3, #25]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d108      	bne.n	8004614 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e007      	b.n	8004624 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7e9b      	ldrb	r3, [r3, #26]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d108      	bne.n	800463e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0220 	orr.w	r2, r2, #32
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e007      	b.n	800464e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0220 	bic.w	r2, r2, #32
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7edb      	ldrb	r3, [r3, #27]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d108      	bne.n	8004668 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0210 	bic.w	r2, r2, #16
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0210 	orr.w	r2, r2, #16
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	7f1b      	ldrb	r3, [r3, #28]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d108      	bne.n	8004692 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e007      	b.n	80046a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0208 	bic.w	r2, r2, #8
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7f5b      	ldrb	r3, [r3, #29]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d108      	bne.n	80046bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0204 	orr.w	r2, r2, #4
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e007      	b.n	80046cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0204 	bic.w	r2, r2, #4
 80046ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	ea42 0103 	orr.w	r1, r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004722:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d003      	beq.n	8004732 <HAL_CAN_ConfigFilter+0x26>
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	2b02      	cmp	r3, #2
 800472e:	f040 80be 	bne.w	80048ae <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004734:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800474c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	431a      	orrs	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2201      	movs	r2, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	401a      	ands	r2, r3
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d123      	bne.n	80047dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3248      	adds	r2, #72	; 0x48
 80047bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047d2:	6979      	ldr	r1, [r7, #20]
 80047d4:	3348      	adds	r3, #72	; 0x48
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	440b      	add	r3, r1
 80047da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d122      	bne.n	800482a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004804:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	3248      	adds	r2, #72	; 0x48
 800480a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800481e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	3348      	adds	r3, #72	; 0x48
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	43db      	mvns	r3, r3
 800483c:	401a      	ands	r2, r3
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004844:	e007      	b.n	8004856 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	431a      	orrs	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	43db      	mvns	r3, r3
 8004868:	401a      	ands	r2, r3
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004870:	e007      	b.n	8004882 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	431a      	orrs	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	431a      	orrs	r2, r3
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048a0:	f023 0201 	bic.w	r2, r3, #1
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e006      	b.n	80048bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40006400 	.word	0x40006400

080048cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d12e      	bne.n	800493e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048f8:	f7ff fdde 	bl	80044b8 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80048fe:	e012      	b.n	8004926 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004900:	f7ff fdda 	bl	80044b8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b0a      	cmp	r3, #10
 800490c:	d90b      	bls.n	8004926 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2205      	movs	r2, #5
 800491e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e012      	b.n	800494c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e006      	b.n	800494c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004968:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004972:	7ffb      	ldrb	r3, [r7, #31]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d003      	beq.n	8004980 <HAL_CAN_AddTxMessage+0x2c>
 8004978:	7ffb      	ldrb	r3, [r7, #31]
 800497a:	2b02      	cmp	r3, #2
 800497c:	f040 80b8 	bne.w	8004af0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004990:	2b00      	cmp	r3, #0
 8004992:	d105      	bne.n	80049a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80a0 	beq.w	8004ae0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	0e1b      	lsrs	r3, r3, #24
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d907      	bls.n	80049c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e09e      	b.n	8004afe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80049c0:	2201      	movs	r2, #1
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	409a      	lsls	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10d      	bne.n	80049ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049dc:	68f9      	ldr	r1, [r7, #12]
 80049de:	6809      	ldr	r1, [r1, #0]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	3318      	adds	r3, #24
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	440b      	add	r3, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e00f      	b.n	8004a0e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3318      	adds	r3, #24
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	440b      	add	r3, r1
 8004a0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	3318      	adds	r3, #24
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3304      	adds	r3, #4
 8004a20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	7d1b      	ldrb	r3, [r3, #20]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d111      	bne.n	8004a4e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	3318      	adds	r3, #24
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	6811      	ldr	r1, [r2, #0]
 8004a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3318      	adds	r3, #24
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	440b      	add	r3, r1
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3307      	adds	r3, #7
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	061a      	lsls	r2, r3, #24
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3306      	adds	r3, #6
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3305      	adds	r3, #5
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	3204      	adds	r2, #4
 8004a6e:	7812      	ldrb	r2, [r2, #0]
 8004a70:	4610      	mov	r0, r2
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	ea43 0200 	orr.w	r2, r3, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	440b      	add	r3, r1
 8004a80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004a84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3303      	adds	r3, #3
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	061a      	lsls	r2, r3, #24
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3302      	adds	r3, #2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	6811      	ldr	r1, [r2, #0]
 8004aac:	ea43 0200 	orr.w	r2, r3, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004aba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	6811      	ldr	r1, [r2, #0]
 8004ace:	f043 0201 	orr.w	r2, r3, #1
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	3318      	adds	r3, #24
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	440b      	add	r3, r1
 8004ada:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e00e      	b.n	8004afe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e006      	b.n	8004afe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3724      	adds	r7, #36	; 0x24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d003      	beq.n	8004b2c <HAL_CAN_GetRxMessage+0x24>
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	f040 80f3 	bne.w	8004d12 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d116      	bne.n	8004b6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0e7      	b.n	8004d20 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0d8      	b.n	8004d20 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	331b      	adds	r3, #27
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	4413      	add	r3, r2
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0204 	and.w	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	331b      	adds	r3, #27
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	4413      	add	r3, r2
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	0d5b      	lsrs	r3, r3, #21
 8004b9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e00b      	b.n	8004bbe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	331b      	adds	r3, #27
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	4413      	add	r3, r2
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	08db      	lsrs	r3, r3, #3
 8004bb6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	331b      	adds	r3, #27
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	4413      	add	r3, r2
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0202 	and.w	r2, r3, #2
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	331b      	adds	r3, #27
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	4413      	add	r3, r2
 8004be0:	3304      	adds	r3, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 020f 	and.w	r2, r3, #15
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	331b      	adds	r3, #27
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	331b      	adds	r3, #27
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	4413      	add	r3, r2
 8004c10:	3304      	adds	r3, #4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	0a1a      	lsrs	r2, r3, #8
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0c1a      	lsrs	r2, r3, #16
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	3302      	adds	r3, #2
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	0e1a      	lsrs	r2, r3, #24
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	3303      	adds	r3, #3
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	3304      	adds	r3, #4
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0a1a      	lsrs	r2, r3, #8
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	3305      	adds	r3, #5
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	0c1a      	lsrs	r2, r3, #16
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	3306      	adds	r3, #6
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e1a      	lsrs	r2, r3, #24
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	3307      	adds	r3, #7
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d108      	bne.n	8004cfe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0220 	orr.w	r2, r2, #32
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	e007      	b.n	8004d0e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0220 	orr.w	r2, r2, #32
 8004d0c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e006      	b.n	8004d20 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d3a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d002      	beq.n	8004d48 <HAL_CAN_ActivateNotification+0x1e>
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d109      	bne.n	8004d5c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6959      	ldr	r1, [r3, #20]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e006      	b.n	8004d6a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b08a      	sub	sp, #40	; 0x28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d07c      	beq.n	8004eb4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d023      	beq.n	8004e0c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f983 	bl	80050e2 <HAL_CAN_TxMailbox0CompleteCallback>
 8004ddc:	e016      	b.n	8004e0c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
 8004df0:	e00c      	b.n	8004e0c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	e002      	b.n	8004e0c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f986 	bl	8005118 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d024      	beq.n	8004e60 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f962 	bl	80050f4 <HAL_CAN_TxMailbox1CompleteCallback>
 8004e30:	e016      	b.n	8004e60 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
 8004e44:	e00c      	b.n	8004e60 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
 8004e58:	e002      	b.n	8004e60 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f965 	bl	800512a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d024      	beq.n	8004eb4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f941 	bl	8005106 <HAL_CAN_TxMailbox2CompleteCallback>
 8004e84:	e016      	b.n	8004eb4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d004      	beq.n	8004e9a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
 8004e98:	e00c      	b.n	8004eb4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004eac:	e002      	b.n	8004eb4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f944 	bl	800513c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f92a 	bl	800514e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d009      	beq.n	8004f18 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fb68 	bl	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00c      	beq.n	8004f3c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d006      	beq.n	8004f5e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2208      	movs	r2, #8
 8004f56:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f901 	bl	8005160 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d009      	beq.n	8004f7c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fb78 	bl	800166c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2210      	movs	r2, #16
 8004f96:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f8ea 	bl	8005172 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2208      	movs	r2, #8
 8004fb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f8e2 	bl	8005184 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d07b      	beq.n	80050c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d072      	beq.n	80050ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	f043 0302 	orr.w	r3, r3, #2
 800500a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	f043 0304 	orr.w	r3, r3, #4
 8005026:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502e:	2b00      	cmp	r3, #0
 8005030:	d043      	beq.n	80050ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005038:	2b00      	cmp	r3, #0
 800503a:	d03e      	beq.n	80050ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005042:	2b60      	cmp	r3, #96	; 0x60
 8005044:	d02b      	beq.n	800509e <HAL_CAN_IRQHandler+0x32a>
 8005046:	2b60      	cmp	r3, #96	; 0x60
 8005048:	d82e      	bhi.n	80050a8 <HAL_CAN_IRQHandler+0x334>
 800504a:	2b50      	cmp	r3, #80	; 0x50
 800504c:	d022      	beq.n	8005094 <HAL_CAN_IRQHandler+0x320>
 800504e:	2b50      	cmp	r3, #80	; 0x50
 8005050:	d82a      	bhi.n	80050a8 <HAL_CAN_IRQHandler+0x334>
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d019      	beq.n	800508a <HAL_CAN_IRQHandler+0x316>
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d826      	bhi.n	80050a8 <HAL_CAN_IRQHandler+0x334>
 800505a:	2b30      	cmp	r3, #48	; 0x30
 800505c:	d010      	beq.n	8005080 <HAL_CAN_IRQHandler+0x30c>
 800505e:	2b30      	cmp	r3, #48	; 0x30
 8005060:	d822      	bhi.n	80050a8 <HAL_CAN_IRQHandler+0x334>
 8005062:	2b10      	cmp	r3, #16
 8005064:	d002      	beq.n	800506c <HAL_CAN_IRQHandler+0x2f8>
 8005066:	2b20      	cmp	r3, #32
 8005068:	d005      	beq.n	8005076 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800506a:	e01d      	b.n	80050a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f043 0308 	orr.w	r3, r3, #8
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005074:	e019      	b.n	80050aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	f043 0310 	orr.w	r3, r3, #16
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800507e:	e014      	b.n	80050aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	f043 0320 	orr.w	r3, r3, #32
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005088:	e00f      	b.n	80050aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005092:	e00a      	b.n	80050aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800509c:	e005      	b.n	80050aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050a6:	e000      	b.n	80050aa <HAL_CAN_IRQHandler+0x336>
            break;
 80050a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2204      	movs	r2, #4
 80050c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f85e 	bl	8005196 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <__NVIC_SetPriorityGrouping+0x44>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051c4:	4013      	ands	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051da:	4a04      	ldr	r2, [pc, #16]	; (80051ec <__NVIC_SetPriorityGrouping+0x44>)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	60d3      	str	r3, [r2, #12]
}
 80051e0:	bf00      	nop
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	e000ed00 	.word	0xe000ed00

080051f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <__NVIC_GetPriorityGrouping+0x18>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f003 0307 	and.w	r3, r3, #7
}
 80051fe:	4618      	mov	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	2b00      	cmp	r3, #0
 800521c:	db0b      	blt.n	8005236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	f003 021f 	and.w	r2, r3, #31
 8005224:	4906      	ldr	r1, [pc, #24]	; (8005240 <__NVIC_EnableIRQ+0x34>)
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2001      	movs	r0, #1
 800522e:	fa00 f202 	lsl.w	r2, r0, r2
 8005232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	e000e100 	.word	0xe000e100

08005244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	6039      	str	r1, [r7, #0]
 800524e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005254:	2b00      	cmp	r3, #0
 8005256:	db0a      	blt.n	800526e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	490c      	ldr	r1, [pc, #48]	; (8005290 <__NVIC_SetPriority+0x4c>)
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	0112      	lsls	r2, r2, #4
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	440b      	add	r3, r1
 8005268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800526c:	e00a      	b.n	8005284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	4908      	ldr	r1, [pc, #32]	; (8005294 <__NVIC_SetPriority+0x50>)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	3b04      	subs	r3, #4
 800527c:	0112      	lsls	r2, r2, #4
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	440b      	add	r3, r1
 8005282:	761a      	strb	r2, [r3, #24]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	e000e100 	.word	0xe000e100
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	; 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f1c3 0307 	rsb	r3, r3, #7
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	bf28      	it	cs
 80052b6:	2304      	movcs	r3, #4
 80052b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	3304      	adds	r3, #4
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d902      	bls.n	80052c8 <NVIC_EncodePriority+0x30>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3b03      	subs	r3, #3
 80052c6:	e000      	b.n	80052ca <NVIC_EncodePriority+0x32>
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43da      	mvns	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	401a      	ands	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e0:	f04f 31ff 	mov.w	r1, #4294967295
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	43d9      	mvns	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f0:	4313      	orrs	r3, r2
         );
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3b01      	subs	r3, #1
 8005308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800530c:	d301      	bcc.n	8005312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800530e:	2301      	movs	r3, #1
 8005310:	e00f      	b.n	8005332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <SysTick_Config+0x40>)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3b01      	subs	r3, #1
 8005318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800531a:	210f      	movs	r1, #15
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	f7ff ff90 	bl	8005244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <SysTick_Config+0x40>)
 8005326:	2200      	movs	r2, #0
 8005328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800532a:	4b04      	ldr	r3, [pc, #16]	; (800533c <SysTick_Config+0x40>)
 800532c:	2207      	movs	r2, #7
 800532e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	e000e010 	.word	0xe000e010

08005340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff2d 	bl	80051a8 <__NVIC_SetPriorityGrouping>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	4603      	mov	r3, r0
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005368:	f7ff ff42 	bl	80051f0 <__NVIC_GetPriorityGrouping>
 800536c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	6978      	ldr	r0, [r7, #20]
 8005374:	f7ff ff90 	bl	8005298 <NVIC_EncodePriority>
 8005378:	4602      	mov	r2, r0
 800537a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff5f 	bl	8005244 <__NVIC_SetPriority>
}
 8005386:	bf00      	nop
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b082      	sub	sp, #8
 8005392:	af00      	add	r7, sp, #0
 8005394:	4603      	mov	r3, r0
 8005396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff ff35 	bl	800520c <__NVIC_EnableIRQ>
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ffa2 	bl	80052fc <SysTick_Config>
 80053b8:	4603      	mov	r3, r0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d008      	beq.n	80053ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2204      	movs	r2, #4
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e020      	b.n	800542c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 020e 	bic.w	r2, r2, #14
 80053f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005412:	2101      	movs	r1, #1
 8005414:	fa01 f202 	lsl.w	r2, r1, r2
 8005418:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr
	...

08005438 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2300      	movs	r3, #0
 8005442:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800544a:	2b02      	cmp	r3, #2
 800544c:	d005      	beq.n	800545a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2204      	movs	r2, #4
 8005452:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
 8005458:	e0d6      	b.n	8005608 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 020e 	bic.w	r2, r2, #14
 8005468:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	4b64      	ldr	r3, [pc, #400]	; (8005614 <HAL_DMA_Abort_IT+0x1dc>)
 8005482:	429a      	cmp	r2, r3
 8005484:	d958      	bls.n	8005538 <HAL_DMA_Abort_IT+0x100>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a63      	ldr	r2, [pc, #396]	; (8005618 <HAL_DMA_Abort_IT+0x1e0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04f      	beq.n	8005530 <HAL_DMA_Abort_IT+0xf8>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a61      	ldr	r2, [pc, #388]	; (800561c <HAL_DMA_Abort_IT+0x1e4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d048      	beq.n	800552c <HAL_DMA_Abort_IT+0xf4>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a60      	ldr	r2, [pc, #384]	; (8005620 <HAL_DMA_Abort_IT+0x1e8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d040      	beq.n	8005526 <HAL_DMA_Abort_IT+0xee>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a5e      	ldr	r2, [pc, #376]	; (8005624 <HAL_DMA_Abort_IT+0x1ec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d038      	beq.n	8005520 <HAL_DMA_Abort_IT+0xe8>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a5d      	ldr	r2, [pc, #372]	; (8005628 <HAL_DMA_Abort_IT+0x1f0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d030      	beq.n	800551a <HAL_DMA_Abort_IT+0xe2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a5b      	ldr	r2, [pc, #364]	; (800562c <HAL_DMA_Abort_IT+0x1f4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d028      	beq.n	8005514 <HAL_DMA_Abort_IT+0xdc>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a53      	ldr	r2, [pc, #332]	; (8005614 <HAL_DMA_Abort_IT+0x1dc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d020      	beq.n	800550e <HAL_DMA_Abort_IT+0xd6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a57      	ldr	r2, [pc, #348]	; (8005630 <HAL_DMA_Abort_IT+0x1f8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d019      	beq.n	800550a <HAL_DMA_Abort_IT+0xd2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a56      	ldr	r2, [pc, #344]	; (8005634 <HAL_DMA_Abort_IT+0x1fc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d012      	beq.n	8005506 <HAL_DMA_Abort_IT+0xce>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a54      	ldr	r2, [pc, #336]	; (8005638 <HAL_DMA_Abort_IT+0x200>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00a      	beq.n	8005500 <HAL_DMA_Abort_IT+0xc8>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a53      	ldr	r2, [pc, #332]	; (800563c <HAL_DMA_Abort_IT+0x204>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d102      	bne.n	80054fa <HAL_DMA_Abort_IT+0xc2>
 80054f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f8:	e01b      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 80054fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054fe:	e018      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 8005500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005504:	e015      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 8005506:	2310      	movs	r3, #16
 8005508:	e013      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 800550a:	2301      	movs	r3, #1
 800550c:	e011      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 800550e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005512:	e00e      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 8005514:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005518:	e00b      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 800551a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800551e:	e008      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 8005520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005524:	e005      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 8005526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800552a:	e002      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 800552c:	2310      	movs	r3, #16
 800552e:	e000      	b.n	8005532 <HAL_DMA_Abort_IT+0xfa>
 8005530:	2301      	movs	r3, #1
 8005532:	4a43      	ldr	r2, [pc, #268]	; (8005640 <HAL_DMA_Abort_IT+0x208>)
 8005534:	6053      	str	r3, [r2, #4]
 8005536:	e057      	b.n	80055e8 <HAL_DMA_Abort_IT+0x1b0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a36      	ldr	r2, [pc, #216]	; (8005618 <HAL_DMA_Abort_IT+0x1e0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d04f      	beq.n	80055e2 <HAL_DMA_Abort_IT+0x1aa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a35      	ldr	r2, [pc, #212]	; (800561c <HAL_DMA_Abort_IT+0x1e4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d048      	beq.n	80055de <HAL_DMA_Abort_IT+0x1a6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a33      	ldr	r2, [pc, #204]	; (8005620 <HAL_DMA_Abort_IT+0x1e8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d040      	beq.n	80055d8 <HAL_DMA_Abort_IT+0x1a0>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a32      	ldr	r2, [pc, #200]	; (8005624 <HAL_DMA_Abort_IT+0x1ec>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d038      	beq.n	80055d2 <HAL_DMA_Abort_IT+0x19a>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_DMA_Abort_IT+0x1f0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d030      	beq.n	80055cc <HAL_DMA_Abort_IT+0x194>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2f      	ldr	r2, [pc, #188]	; (800562c <HAL_DMA_Abort_IT+0x1f4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d028      	beq.n	80055c6 <HAL_DMA_Abort_IT+0x18e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <HAL_DMA_Abort_IT+0x1dc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d020      	beq.n	80055c0 <HAL_DMA_Abort_IT+0x188>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2b      	ldr	r2, [pc, #172]	; (8005630 <HAL_DMA_Abort_IT+0x1f8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d019      	beq.n	80055bc <HAL_DMA_Abort_IT+0x184>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a29      	ldr	r2, [pc, #164]	; (8005634 <HAL_DMA_Abort_IT+0x1fc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d012      	beq.n	80055b8 <HAL_DMA_Abort_IT+0x180>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a28      	ldr	r2, [pc, #160]	; (8005638 <HAL_DMA_Abort_IT+0x200>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00a      	beq.n	80055b2 <HAL_DMA_Abort_IT+0x17a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a26      	ldr	r2, [pc, #152]	; (800563c <HAL_DMA_Abort_IT+0x204>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d102      	bne.n	80055ac <HAL_DMA_Abort_IT+0x174>
 80055a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055aa:	e01b      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055b0:	e018      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055b6:	e015      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055b8:	2310      	movs	r3, #16
 80055ba:	e013      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055bc:	2301      	movs	r3, #1
 80055be:	e011      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c4:	e00e      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80055ca:	e00b      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d0:	e008      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055d6:	e005      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055dc:	e002      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055de:	2310      	movs	r3, #16
 80055e0:	e000      	b.n	80055e4 <HAL_DMA_Abort_IT+0x1ac>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4a17      	ldr	r2, [pc, #92]	; (8005644 <HAL_DMA_Abort_IT+0x20c>)
 80055e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	4798      	blx	r3
    } 
  }
  return status;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40020080 	.word	0x40020080
 8005618:	40020008 	.word	0x40020008
 800561c:	4002001c 	.word	0x4002001c
 8005620:	40020030 	.word	0x40020030
 8005624:	40020044 	.word	0x40020044
 8005628:	40020058 	.word	0x40020058
 800562c:	4002006c 	.word	0x4002006c
 8005630:	40020408 	.word	0x40020408
 8005634:	4002041c 	.word	0x4002041c
 8005638:	40020430 	.word	0x40020430
 800563c:	40020444 	.word	0x40020444
 8005640:	40020400 	.word	0x40020400
 8005644:	40020000 	.word	0x40020000

08005648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005648:	b480      	push	{r7}
 800564a:	b08b      	sub	sp, #44	; 0x2c
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005656:	2300      	movs	r3, #0
 8005658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800565a:	e169      	b.n	8005930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800565c:	2201      	movs	r2, #1
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	4013      	ands	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	f040 8158 	bne.w	800592a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	4a9a      	ldr	r2, [pc, #616]	; (80058e8 <HAL_GPIO_Init+0x2a0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d05e      	beq.n	8005742 <HAL_GPIO_Init+0xfa>
 8005684:	4a98      	ldr	r2, [pc, #608]	; (80058e8 <HAL_GPIO_Init+0x2a0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d875      	bhi.n	8005776 <HAL_GPIO_Init+0x12e>
 800568a:	4a98      	ldr	r2, [pc, #608]	; (80058ec <HAL_GPIO_Init+0x2a4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d058      	beq.n	8005742 <HAL_GPIO_Init+0xfa>
 8005690:	4a96      	ldr	r2, [pc, #600]	; (80058ec <HAL_GPIO_Init+0x2a4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d86f      	bhi.n	8005776 <HAL_GPIO_Init+0x12e>
 8005696:	4a96      	ldr	r2, [pc, #600]	; (80058f0 <HAL_GPIO_Init+0x2a8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d052      	beq.n	8005742 <HAL_GPIO_Init+0xfa>
 800569c:	4a94      	ldr	r2, [pc, #592]	; (80058f0 <HAL_GPIO_Init+0x2a8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d869      	bhi.n	8005776 <HAL_GPIO_Init+0x12e>
 80056a2:	4a94      	ldr	r2, [pc, #592]	; (80058f4 <HAL_GPIO_Init+0x2ac>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d04c      	beq.n	8005742 <HAL_GPIO_Init+0xfa>
 80056a8:	4a92      	ldr	r2, [pc, #584]	; (80058f4 <HAL_GPIO_Init+0x2ac>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d863      	bhi.n	8005776 <HAL_GPIO_Init+0x12e>
 80056ae:	4a92      	ldr	r2, [pc, #584]	; (80058f8 <HAL_GPIO_Init+0x2b0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d046      	beq.n	8005742 <HAL_GPIO_Init+0xfa>
 80056b4:	4a90      	ldr	r2, [pc, #576]	; (80058f8 <HAL_GPIO_Init+0x2b0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d85d      	bhi.n	8005776 <HAL_GPIO_Init+0x12e>
 80056ba:	2b12      	cmp	r3, #18
 80056bc:	d82a      	bhi.n	8005714 <HAL_GPIO_Init+0xcc>
 80056be:	2b12      	cmp	r3, #18
 80056c0:	d859      	bhi.n	8005776 <HAL_GPIO_Init+0x12e>
 80056c2:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <HAL_GPIO_Init+0x80>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	08005743 	.word	0x08005743
 80056cc:	0800571d 	.word	0x0800571d
 80056d0:	0800572f 	.word	0x0800572f
 80056d4:	08005771 	.word	0x08005771
 80056d8:	08005777 	.word	0x08005777
 80056dc:	08005777 	.word	0x08005777
 80056e0:	08005777 	.word	0x08005777
 80056e4:	08005777 	.word	0x08005777
 80056e8:	08005777 	.word	0x08005777
 80056ec:	08005777 	.word	0x08005777
 80056f0:	08005777 	.word	0x08005777
 80056f4:	08005777 	.word	0x08005777
 80056f8:	08005777 	.word	0x08005777
 80056fc:	08005777 	.word	0x08005777
 8005700:	08005777 	.word	0x08005777
 8005704:	08005777 	.word	0x08005777
 8005708:	08005777 	.word	0x08005777
 800570c:	08005725 	.word	0x08005725
 8005710:	08005739 	.word	0x08005739
 8005714:	4a79      	ldr	r2, [pc, #484]	; (80058fc <HAL_GPIO_Init+0x2b4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800571a:	e02c      	b.n	8005776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	623b      	str	r3, [r7, #32]
          break;
 8005722:	e029      	b.n	8005778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	3304      	adds	r3, #4
 800572a:	623b      	str	r3, [r7, #32]
          break;
 800572c:	e024      	b.n	8005778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	3308      	adds	r3, #8
 8005734:	623b      	str	r3, [r7, #32]
          break;
 8005736:	e01f      	b.n	8005778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	330c      	adds	r3, #12
 800573e:	623b      	str	r3, [r7, #32]
          break;
 8005740:	e01a      	b.n	8005778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800574a:	2304      	movs	r3, #4
 800574c:	623b      	str	r3, [r7, #32]
          break;
 800574e:	e013      	b.n	8005778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d105      	bne.n	8005764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005758:	2308      	movs	r3, #8
 800575a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	611a      	str	r2, [r3, #16]
          break;
 8005762:	e009      	b.n	8005778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005764:	2308      	movs	r3, #8
 8005766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	615a      	str	r2, [r3, #20]
          break;
 800576e:	e003      	b.n	8005778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005770:	2300      	movs	r3, #0
 8005772:	623b      	str	r3, [r7, #32]
          break;
 8005774:	e000      	b.n	8005778 <HAL_GPIO_Init+0x130>
          break;
 8005776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2bff      	cmp	r3, #255	; 0xff
 800577c:	d801      	bhi.n	8005782 <HAL_GPIO_Init+0x13a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	e001      	b.n	8005786 <HAL_GPIO_Init+0x13e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3304      	adds	r3, #4
 8005786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2bff      	cmp	r3, #255	; 0xff
 800578c:	d802      	bhi.n	8005794 <HAL_GPIO_Init+0x14c>
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	e002      	b.n	800579a <HAL_GPIO_Init+0x152>
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	3b08      	subs	r3, #8
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	210f      	movs	r1, #15
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	fa01 f303 	lsl.w	r3, r1, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	401a      	ands	r2, r3
 80057ac:	6a39      	ldr	r1, [r7, #32]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	fa01 f303 	lsl.w	r3, r1, r3
 80057b4:	431a      	orrs	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 80b1 	beq.w	800592a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80057c8:	4b4d      	ldr	r3, [pc, #308]	; (8005900 <HAL_GPIO_Init+0x2b8>)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	4a4c      	ldr	r2, [pc, #304]	; (8005900 <HAL_GPIO_Init+0x2b8>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6193      	str	r3, [r2, #24]
 80057d4:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <HAL_GPIO_Init+0x2b8>)
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80057e0:	4a48      	ldr	r2, [pc, #288]	; (8005904 <HAL_GPIO_Init+0x2bc>)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	089b      	lsrs	r3, r3, #2
 80057e6:	3302      	adds	r3, #2
 80057e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	220f      	movs	r2, #15
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4013      	ands	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a40      	ldr	r2, [pc, #256]	; (8005908 <HAL_GPIO_Init+0x2c0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <HAL_GPIO_Init+0x1ec>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3f      	ldr	r2, [pc, #252]	; (800590c <HAL_GPIO_Init+0x2c4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00d      	beq.n	8005830 <HAL_GPIO_Init+0x1e8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <HAL_GPIO_Init+0x2c8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <HAL_GPIO_Init+0x1e4>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3d      	ldr	r2, [pc, #244]	; (8005914 <HAL_GPIO_Init+0x2cc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d101      	bne.n	8005828 <HAL_GPIO_Init+0x1e0>
 8005824:	2303      	movs	r3, #3
 8005826:	e006      	b.n	8005836 <HAL_GPIO_Init+0x1ee>
 8005828:	2304      	movs	r3, #4
 800582a:	e004      	b.n	8005836 <HAL_GPIO_Init+0x1ee>
 800582c:	2302      	movs	r3, #2
 800582e:	e002      	b.n	8005836 <HAL_GPIO_Init+0x1ee>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_GPIO_Init+0x1ee>
 8005834:	2300      	movs	r3, #0
 8005836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005838:	f002 0203 	and.w	r2, r2, #3
 800583c:	0092      	lsls	r2, r2, #2
 800583e:	4093      	lsls	r3, r2
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005846:	492f      	ldr	r1, [pc, #188]	; (8005904 <HAL_GPIO_Init+0x2bc>)
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	089b      	lsrs	r3, r3, #2
 800584c:	3302      	adds	r3, #2
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d006      	beq.n	800586e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005860:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	492c      	ldr	r1, [pc, #176]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]
 800586c:	e006      	b.n	800587c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800586e:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	43db      	mvns	r3, r3
 8005876:	4928      	ldr	r1, [pc, #160]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 8005878:	4013      	ands	r3, r2
 800587a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d006      	beq.n	8005896 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005888:	4b23      	ldr	r3, [pc, #140]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4922      	ldr	r1, [pc, #136]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
 8005894:	e006      	b.n	80058a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005896:	4b20      	ldr	r3, [pc, #128]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	43db      	mvns	r3, r3
 800589e:	491e      	ldr	r1, [pc, #120]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	4918      	ldr	r1, [pc, #96]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	608b      	str	r3, [r1, #8]
 80058bc:	e006      	b.n	80058cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058be:	4b16      	ldr	r3, [pc, #88]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	43db      	mvns	r3, r3
 80058c6:	4914      	ldr	r1, [pc, #80]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d021      	beq.n	800591c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	490e      	ldr	r1, [pc, #56]	; (8005918 <HAL_GPIO_Init+0x2d0>)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60cb      	str	r3, [r1, #12]
 80058e4:	e021      	b.n	800592a <HAL_GPIO_Init+0x2e2>
 80058e6:	bf00      	nop
 80058e8:	10320000 	.word	0x10320000
 80058ec:	10310000 	.word	0x10310000
 80058f0:	10220000 	.word	0x10220000
 80058f4:	10210000 	.word	0x10210000
 80058f8:	10120000 	.word	0x10120000
 80058fc:	10110000 	.word	0x10110000
 8005900:	40021000 	.word	0x40021000
 8005904:	40010000 	.word	0x40010000
 8005908:	40010800 	.word	0x40010800
 800590c:	40010c00 	.word	0x40010c00
 8005910:	40011000 	.word	0x40011000
 8005914:	40011400 	.word	0x40011400
 8005918:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_GPIO_Init+0x304>)
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	43db      	mvns	r3, r3
 8005924:	4909      	ldr	r1, [pc, #36]	; (800594c <HAL_GPIO_Init+0x304>)
 8005926:	4013      	ands	r3, r2
 8005928:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	3301      	adds	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	fa22 f303 	lsr.w	r3, r2, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	f47f ae8e 	bne.w	800565c <HAL_GPIO_Init+0x14>
  }
}
 8005940:	bf00      	nop
 8005942:	bf00      	nop
 8005944:	372c      	adds	r7, #44	; 0x2c
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr
 800594c:	40010400 	.word	0x40010400

08005950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005968:	2301      	movs	r3, #1
 800596a:	73fb      	strb	r3, [r7, #15]
 800596c:	e001      	b.n	8005972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800596e:	2300      	movs	r3, #0
 8005970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr

0800597e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	807b      	strh	r3, [r7, #2]
 800598a:	4613      	mov	r3, r2
 800598c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800598e:	787b      	ldrb	r3, [r7, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005994:	887a      	ldrh	r2, [r7, #2]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800599a:	e003      	b.n	80059a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	041a      	lsls	r2, r3, #16
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	611a      	str	r2, [r3, #16]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059c0:	887a      	ldrh	r2, [r7, #2]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4013      	ands	r3, r2
 80059c6:	041a      	lsls	r2, r3, #16
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	43d9      	mvns	r1, r3
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	400b      	ands	r3, r1
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	611a      	str	r2, [r3, #16]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	88fb      	ldrh	r3, [r7, #6]
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059f6:	4a05      	ldr	r2, [pc, #20]	; (8005a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fb fe56 	bl	80016b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40010400 	.word	0x40010400

08005a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e304      	b.n	800602c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8087 	beq.w	8005b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a30:	4b92      	ldr	r3, [pc, #584]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d00c      	beq.n	8005a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a3c:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 030c 	and.w	r3, r3, #12
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d112      	bne.n	8005a6e <HAL_RCC_OscConfig+0x5e>
 8005a48:	4b8c      	ldr	r3, [pc, #560]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d10b      	bne.n	8005a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a56:	4b89      	ldr	r3, [pc, #548]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d06c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x12c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d168      	bne.n	8005b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e2de      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a76:	d106      	bne.n	8005a86 <HAL_RCC_OscConfig+0x76>
 8005a78:	4b80      	ldr	r3, [pc, #512]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7f      	ldr	r2, [pc, #508]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e02e      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x98>
 8005a8e:	4b7b      	ldr	r3, [pc, #492]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7a      	ldr	r2, [pc, #488]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b78      	ldr	r3, [pc, #480]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a77      	ldr	r2, [pc, #476]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e01d      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCC_OscConfig+0xbc>
 8005ab2:	4b72      	ldr	r3, [pc, #456]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a71      	ldr	r2, [pc, #452]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4b6f      	ldr	r3, [pc, #444]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6e      	ldr	r2, [pc, #440]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e00b      	b.n	8005ae4 <HAL_RCC_OscConfig+0xd4>
 8005acc:	4b6b      	ldr	r3, [pc, #428]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6a      	ldr	r2, [pc, #424]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a67      	ldr	r2, [pc, #412]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d013      	beq.n	8005b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fe fce4 	bl	80044b8 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af4:	f7fe fce0 	bl	80044b8 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e292      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b06:	4b5d      	ldr	r3, [pc, #372]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0xe4>
 8005b12:	e014      	b.n	8005b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b14:	f7fe fcd0 	bl	80044b8 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b1c:	f7fe fccc 	bl	80044b8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b64      	cmp	r3, #100	; 0x64
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e27e      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b2e:	4b53      	ldr	r3, [pc, #332]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x10c>
 8005b3a:	e000      	b.n	8005b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d063      	beq.n	8005c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b56:	4b49      	ldr	r3, [pc, #292]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d11c      	bne.n	8005b9c <HAL_RCC_OscConfig+0x18c>
 8005b62:	4b46      	ldr	r3, [pc, #280]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b6e:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_RCC_OscConfig+0x176>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e252      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b86:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4939      	ldr	r1, [pc, #228]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9a:	e03a      	b.n	8005c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba4:	4b36      	ldr	r3, [pc, #216]	; (8005c80 <HAL_RCC_OscConfig+0x270>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fe fc85 	bl	80044b8 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bb2:	f7fe fc81 	bl	80044b8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e233      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd0:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4927      	ldr	r1, [pc, #156]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	600b      	str	r3, [r1, #0]
 8005be4:	e015      	b.n	8005c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x270>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fe fc64 	bl	80044b8 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf4:	f7fe fc60 	bl	80044b8 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e212      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d03a      	beq.n	8005c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d019      	beq.n	8005c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c26:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <HAL_RCC_OscConfig+0x274>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2c:	f7fe fc44 	bl	80044b8 <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c34:	f7fe fc40 	bl	80044b8 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e1f2      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_RCC_OscConfig+0x26c>)
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f000 fc20 	bl	8006498 <RCC_Delay>
 8005c58:	e01c      	b.n	8005c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <HAL_RCC_OscConfig+0x274>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c60:	f7fe fc2a 	bl	80044b8 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c66:	e00f      	b.n	8005c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c68:	f7fe fc26 	bl	80044b8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e1d8      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	42420000 	.word	0x42420000
 8005c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c88:	4b9b      	ldr	r3, [pc, #620]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e9      	bne.n	8005c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 80a6 	beq.w	8005dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca6:	4b94      	ldr	r3, [pc, #592]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10d      	bne.n	8005cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb2:	4b91      	ldr	r3, [pc, #580]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	4a90      	ldr	r2, [pc, #576]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	61d3      	str	r3, [r2, #28]
 8005cbe:	4b8e      	ldr	r3, [pc, #568]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cce:	4b8b      	ldr	r3, [pc, #556]	; (8005efc <HAL_RCC_OscConfig+0x4ec>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d118      	bne.n	8005d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cda:	4b88      	ldr	r3, [pc, #544]	; (8005efc <HAL_RCC_OscConfig+0x4ec>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a87      	ldr	r2, [pc, #540]	; (8005efc <HAL_RCC_OscConfig+0x4ec>)
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ce6:	f7fe fbe7 	bl	80044b8 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cee:	f7fe fbe3 	bl	80044b8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	; 0x64
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e195      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	4b7e      	ldr	r3, [pc, #504]	; (8005efc <HAL_RCC_OscConfig+0x4ec>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x312>
 8005d14:	4b78      	ldr	r3, [pc, #480]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	4a77      	ldr	r2, [pc, #476]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6213      	str	r3, [r2, #32]
 8005d20:	e02d      	b.n	8005d7e <HAL_RCC_OscConfig+0x36e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x334>
 8005d2a:	4b73      	ldr	r3, [pc, #460]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4a72      	ldr	r2, [pc, #456]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	6213      	str	r3, [r2, #32]
 8005d36:	4b70      	ldr	r3, [pc, #448]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	4a6f      	ldr	r2, [pc, #444]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d3c:	f023 0304 	bic.w	r3, r3, #4
 8005d40:	6213      	str	r3, [r2, #32]
 8005d42:	e01c      	b.n	8005d7e <HAL_RCC_OscConfig+0x36e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b05      	cmp	r3, #5
 8005d4a:	d10c      	bne.n	8005d66 <HAL_RCC_OscConfig+0x356>
 8005d4c:	4b6a      	ldr	r3, [pc, #424]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	4a69      	ldr	r2, [pc, #420]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	6213      	str	r3, [r2, #32]
 8005d58:	4b67      	ldr	r3, [pc, #412]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	4a66      	ldr	r2, [pc, #408]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	6213      	str	r3, [r2, #32]
 8005d64:	e00b      	b.n	8005d7e <HAL_RCC_OscConfig+0x36e>
 8005d66:	4b64      	ldr	r3, [pc, #400]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a63      	ldr	r2, [pc, #396]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	6213      	str	r3, [r2, #32]
 8005d72:	4b61      	ldr	r3, [pc, #388]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a60      	ldr	r2, [pc, #384]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d015      	beq.n	8005db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d86:	f7fe fb97 	bl	80044b8 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8c:	e00a      	b.n	8005da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8e:	f7fe fb93 	bl	80044b8 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e143      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005da4:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d0ee      	beq.n	8005d8e <HAL_RCC_OscConfig+0x37e>
 8005db0:	e014      	b.n	8005ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005db2:	f7fe fb81 	bl	80044b8 <HAL_GetTick>
 8005db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db8:	e00a      	b.n	8005dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dba:	f7fe fb7d 	bl	80044b8 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d901      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e12d      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dd0:	4b49      	ldr	r3, [pc, #292]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ee      	bne.n	8005dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005de2:	4b45      	ldr	r3, [pc, #276]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	4a44      	ldr	r2, [pc, #272]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dec:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 808c 	beq.w	8005f10 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005df8:	4b3f      	ldr	r3, [pc, #252]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d10e      	bne.n	8005e24 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005e06:	4b3c      	ldr	r3, [pc, #240]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d108      	bne.n	8005e24 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8005e12:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e103      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d14e      	bne.n	8005eca <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005e2c:	4b32      	ldr	r3, [pc, #200]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8005e38:	4b2f      	ldr	r3, [pc, #188]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0ef      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005e4c:	4b2c      	ldr	r3, [pc, #176]	; (8005f00 <HAL_RCC_OscConfig+0x4f0>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e52:	f7fe fb31 	bl	80044b8 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e5a:	f7fe fb2d 	bl	80044b8 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b64      	cmp	r3, #100	; 0x64
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e0df      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005e6c:	4b22      	ldr	r3, [pc, #136]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f0      	bne.n	8005e5a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8005e78:	4b1f      	ldr	r3, [pc, #124]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e84:	491c      	ldr	r1, [pc, #112]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4918      	ldr	r1, [pc, #96]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005e9c:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <HAL_RCC_OscConfig+0x4f0>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea2:	f7fe fb09 	bl	80044b8 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005eaa:	f7fe fb05 	bl	80044b8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b64      	cmp	r3, #100	; 0x64
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e0b7      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f0      	beq.n	8005eaa <HAL_RCC_OscConfig+0x49a>
 8005ec8:	e022      	b.n	8005f10 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a0a      	ldr	r2, [pc, #40]	; (8005ef8 <HAL_RCC_OscConfig+0x4e8>)
 8005ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <HAL_RCC_OscConfig+0x4f0>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fe faec 	bl	80044b8 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005ee2:	e00f      	b.n	8005f04 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ee4:	f7fe fae8 	bl	80044b8 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	; 0x64
 8005ef0:	d908      	bls.n	8005f04 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e09a      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40007000 	.word	0x40007000
 8005f00:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8005f04:	4b4b      	ldr	r3, [pc, #300]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e9      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8088 	beq.w	800602a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f1a:	4b46      	ldr	r3, [pc, #280]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b08      	cmp	r3, #8
 8005f24:	d068      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d14d      	bne.n	8005fca <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2e:	4b42      	ldr	r3, [pc, #264]	; (8006038 <HAL_RCC_OscConfig+0x628>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fe fac0 	bl	80044b8 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f3c:	f7fe fabc 	bl	80044b8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e06e      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f62:	d10f      	bne.n	8005f84 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005f64:	4b33      	ldr	r3, [pc, #204]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	4931      	ldr	r1, [pc, #196]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f72:	4b30      	ldr	r3, [pc, #192]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f023 020f 	bic.w	r2, r3, #15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	492d      	ldr	r1, [pc, #180]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	430b      	orrs	r3, r1
 8005f96:	4927      	ldr	r1, [pc, #156]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <HAL_RCC_OscConfig+0x628>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa2:	f7fe fa89 	bl	80044b8 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005faa:	f7fe fa85 	bl	80044b8 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e037      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fbc:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x59a>
 8005fc8:	e02f      	b.n	800602a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fca:	4b1b      	ldr	r3, [pc, #108]	; (8006038 <HAL_RCC_OscConfig+0x628>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd0:	f7fe fa72 	bl	80044b8 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd8:	f7fe fa6e 	bl	80044b8 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e020      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fea:	4b12      	ldr	r3, [pc, #72]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x5c8>
 8005ff6:	e018      	b.n	800602a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d101      	bne.n	8006004 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e013      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCC_OscConfig+0x624>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	429a      	cmp	r2, r3
 8006016:	d106      	bne.n	8006026 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d001      	beq.n	800602a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000
 8006038:	42420060 	.word	0x42420060

0800603c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0d0      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006050:	4b6a      	ldr	r3, [pc, #424]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d910      	bls.n	8006080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605e:	4b67      	ldr	r3, [pc, #412]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f023 0207 	bic.w	r2, r3, #7
 8006066:	4965      	ldr	r1, [pc, #404]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	4313      	orrs	r3, r2
 800606c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606e:	4b63      	ldr	r3, [pc, #396]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d001      	beq.n	8006080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0b8      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d020      	beq.n	80060ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006098:	4b59      	ldr	r3, [pc, #356]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4a58      	ldr	r2, [pc, #352]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060b0:	4b53      	ldr	r3, [pc, #332]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4a52      	ldr	r2, [pc, #328]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80060b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80060ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b50      	ldr	r3, [pc, #320]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	494d      	ldr	r1, [pc, #308]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d040      	beq.n	800615c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d107      	bne.n	80060f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e2:	4b47      	ldr	r3, [pc, #284]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d115      	bne.n	800611a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e07f      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d107      	bne.n	800610a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fa:	4b41      	ldr	r3, [pc, #260]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e073      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610a:	4b3d      	ldr	r3, [pc, #244]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e06b      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f023 0203 	bic.w	r2, r3, #3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4936      	ldr	r1, [pc, #216]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 8006128:	4313      	orrs	r3, r2
 800612a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800612c:	f7fe f9c4 	bl	80044b8 <HAL_GetTick>
 8006130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006132:	e00a      	b.n	800614a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006134:	f7fe f9c0 	bl	80044b8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e053      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614a:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f003 020c 	and.w	r2, r3, #12
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	429a      	cmp	r2, r3
 800615a:	d1eb      	bne.n	8006134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800615c:	4b27      	ldr	r3, [pc, #156]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d210      	bcs.n	800618c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616a:	4b24      	ldr	r3, [pc, #144]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 0207 	bic.w	r2, r3, #7
 8006172:	4922      	ldr	r1, [pc, #136]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617a:	4b20      	ldr	r3, [pc, #128]	; (80061fc <HAL_RCC_ClockConfig+0x1c0>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e032      	b.n	80061f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006198:	4b19      	ldr	r3, [pc, #100]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4916      	ldr	r1, [pc, #88]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d009      	beq.n	80061ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	490e      	ldr	r1, [pc, #56]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80061ca:	f000 f821 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80061ce:	4602      	mov	r2, r0
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_RCC_ClockConfig+0x1c4>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	490a      	ldr	r1, [pc, #40]	; (8006204 <HAL_RCC_ClockConfig+0x1c8>)
 80061dc:	5ccb      	ldrb	r3, [r1, r3]
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	4a09      	ldr	r2, [pc, #36]	; (8006208 <HAL_RCC_ClockConfig+0x1cc>)
 80061e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061e6:	4b09      	ldr	r3, [pc, #36]	; (800620c <HAL_RCC_ClockConfig+0x1d0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe f922 	bl	8004434 <HAL_InitTick>

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	40022000 	.word	0x40022000
 8006200:	40021000 	.word	0x40021000
 8006204:	080077d0 	.word	0x080077d0
 8006208:	2000001c 	.word	0x2000001c
 800620c:	20000260 	.word	0x20000260

08006210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	b09d      	sub	sp, #116	; 0x74
 8006216:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006218:	4b81      	ldr	r3, [pc, #516]	; (8006420 <HAL_RCC_GetSysClockFreq+0x210>)
 800621a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800621e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006220:	c407      	stmia	r4!, {r0, r1, r2}
 8006222:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006224:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <HAL_RCC_GetSysClockFreq+0x214>)
 8006226:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800622a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800622c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	667b      	str	r3, [r7, #100]	; 0x64
 8006234:	2300      	movs	r3, #0
 8006236:	663b      	str	r3, [r7, #96]	; 0x60
 8006238:	2300      	movs	r3, #0
 800623a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800623c:	2300      	movs	r3, #0
 800623e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	65bb      	str	r3, [r7, #88]	; 0x58
 8006248:	2300      	movs	r3, #0
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800624c:	4b76      	ldr	r3, [pc, #472]	; (8006428 <HAL_RCC_GetSysClockFreq+0x218>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006254:	f003 030c 	and.w	r3, r3, #12
 8006258:	2b04      	cmp	r3, #4
 800625a:	d002      	beq.n	8006262 <HAL_RCC_GetSysClockFreq+0x52>
 800625c:	2b08      	cmp	r3, #8
 800625e:	d003      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x58>
 8006260:	e0d4      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006262:	4b72      	ldr	r3, [pc, #456]	; (800642c <HAL_RCC_GetSysClockFreq+0x21c>)
 8006264:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006266:	e0d4      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800626a:	0c9b      	lsrs	r3, r3, #18
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	3340      	adds	r3, #64	; 0x40
 8006272:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006276:	4413      	add	r3, r2
 8006278:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800627c:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800627e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80b9 	beq.w	80063fc <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800628a:	4b67      	ldr	r3, [pc, #412]	; (8006428 <HAL_RCC_GetSysClockFreq+0x218>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	3340      	adds	r3, #64	; 0x40
 8006294:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006298:	4413      	add	r3, r2
 800629a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800629e:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80062a0:	4b61      	ldr	r3, [pc, #388]	; (8006428 <HAL_RCC_GetSysClockFreq+0x218>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8095 	beq.w	80063d8 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80062ae:	4b5e      	ldr	r3, [pc, #376]	; (8006428 <HAL_RCC_GetSysClockFreq+0x218>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	3301      	adds	r3, #1
 80062ba:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80062bc:	4b5a      	ldr	r3, [pc, #360]	; (8006428 <HAL_RCC_GetSysClockFreq+0x218>)
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	3302      	adds	r3, #2
 80062c8:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80062ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062cc:	2200      	movs	r2, #0
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	61fa      	str	r2, [r7, #28]
 80062d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d4:	2200      	movs	r2, #0
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80062de:	4622      	mov	r2, r4
 80062e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80062e4:	4684      	mov	ip, r0
 80062e6:	fb0c f202 	mul.w	r2, ip, r2
 80062ea:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80062ee:	468c      	mov	ip, r1
 80062f0:	4618      	mov	r0, r3
 80062f2:	4621      	mov	r1, r4
 80062f4:	4603      	mov	r3, r0
 80062f6:	fb03 f30c 	mul.w	r3, r3, ip
 80062fa:	4413      	add	r3, r2
 80062fc:	4602      	mov	r2, r0
 80062fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006300:	fba2 8901 	umull	r8, r9, r2, r1
 8006304:	444b      	add	r3, r9
 8006306:	4699      	mov	r9, r3
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	f04f 0000 	mov.w	r0, #0
 8006310:	f04f 0100 	mov.w	r1, #0
 8006314:	0159      	lsls	r1, r3, #5
 8006316:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800631a:	0150      	lsls	r0, r2, #5
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	ebb2 0508 	subs.w	r5, r2, r8
 8006324:	eb63 0609 	sbc.w	r6, r3, r9
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	f04f 0300 	mov.w	r3, #0
 8006330:	01b3      	lsls	r3, r6, #6
 8006332:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8006336:	01aa      	lsls	r2, r5, #6
 8006338:	ebb2 0a05 	subs.w	sl, r2, r5
 800633c:	eb63 0b06 	sbc.w	fp, r3, r6
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800634c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006354:	4692      	mov	sl, r2
 8006356:	469b      	mov	fp, r3
 8006358:	eb1a 0308 	adds.w	r3, sl, r8
 800635c:	603b      	str	r3, [r7, #0]
 800635e:	eb4b 0309 	adc.w	r3, fp, r9
 8006362:	607b      	str	r3, [r7, #4]
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006370:	4629      	mov	r1, r5
 8006372:	024b      	lsls	r3, r1, #9
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	4604      	mov	r4, r0
 800637a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800637e:	4601      	mov	r1, r0
 8006380:	024a      	lsls	r2, r1, #9
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006388:	2200      	movs	r2, #0
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	617a      	str	r2, [r7, #20]
 800638e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006390:	2200      	movs	r2, #0
 8006392:	60bb      	str	r3, [r7, #8]
 8006394:	60fa      	str	r2, [r7, #12]
 8006396:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800639a:	4622      	mov	r2, r4
 800639c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80063a0:	4645      	mov	r5, r8
 80063a2:	fb05 f202 	mul.w	r2, r5, r2
 80063a6:	464e      	mov	r6, r9
 80063a8:	4625      	mov	r5, r4
 80063aa:	461c      	mov	r4, r3
 80063ac:	4623      	mov	r3, r4
 80063ae:	fb03 f306 	mul.w	r3, r3, r6
 80063b2:	4413      	add	r3, r2
 80063b4:	4622      	mov	r2, r4
 80063b6:	4644      	mov	r4, r8
 80063b8:	fba2 2404 	umull	r2, r4, r2, r4
 80063bc:	627c      	str	r4, [r7, #36]	; 0x24
 80063be:	623a      	str	r2, [r7, #32]
 80063c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c2:	4413      	add	r3, r2
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
 80063c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ca:	f7f9 ff2b 	bl	8000224 <__aeabi_uldivmod>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4613      	mov	r3, r2
 80063d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d6:	e007      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80063d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063da:	4a14      	ldr	r2, [pc, #80]	; (800642c <HAL_RCC_GetSysClockFreq+0x21c>)
 80063dc:	fb03 f202 	mul.w	r2, r3, r2
 80063e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80063e8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80063ec:	461a      	mov	r2, r3
 80063ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063fa:	e004      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063fe:	4a0c      	ldr	r2, [pc, #48]	; (8006430 <HAL_RCC_GetSysClockFreq+0x220>)
 8006400:	fb02 f303 	mul.w	r3, r2, r3
 8006404:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8006406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006408:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 800640a:	e002      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <HAL_RCC_GetSysClockFreq+0x21c>)
 800640e:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8006414:	4618      	mov	r0, r3
 8006416:	3774      	adds	r7, #116	; 0x74
 8006418:	46bd      	mov	sp, r7
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	bf00      	nop
 8006420:	080077b0 	.word	0x080077b0
 8006424:	080077c0 	.word	0x080077c0
 8006428:	40021000 	.word	0x40021000
 800642c:	007a1200 	.word	0x007a1200
 8006430:	003d0900 	.word	0x003d0900

08006434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006438:	4b02      	ldr	r3, [pc, #8]	; (8006444 <HAL_RCC_GetHCLKFreq+0x10>)
 800643a:	681b      	ldr	r3, [r3, #0]
}
 800643c:	4618      	mov	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr
 8006444:	2000001c 	.word	0x2000001c

08006448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800644c:	f7ff fff2 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 8006450:	4602      	mov	r2, r0
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	0a1b      	lsrs	r3, r3, #8
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	4903      	ldr	r1, [pc, #12]	; (800646c <HAL_RCC_GetPCLK1Freq+0x24>)
 800645e:	5ccb      	ldrb	r3, [r1, r3]
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40021000 	.word	0x40021000
 800646c:	080077e0 	.word	0x080077e0

08006470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006474:	f7ff ffde 	bl	8006434 <HAL_RCC_GetHCLKFreq>
 8006478:	4602      	mov	r2, r0
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	0adb      	lsrs	r3, r3, #11
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	4903      	ldr	r1, [pc, #12]	; (8006494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006486:	5ccb      	ldrb	r3, [r1, r3]
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40021000 	.word	0x40021000
 8006494:	080077e0 	.word	0x080077e0

08006498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064a0:	4b0a      	ldr	r3, [pc, #40]	; (80064cc <RCC_Delay+0x34>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <RCC_Delay+0x38>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0a5b      	lsrs	r3, r3, #9
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064b4:	bf00      	nop
  }
  while (Delay --);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	60fa      	str	r2, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1f9      	bne.n	80064b4 <RCC_Delay+0x1c>
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	2000001c 	.word	0x2000001c
 80064d0:	10624dd3 	.word	0x10624dd3

080064d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e041      	b.n	800656a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fd0a 	bl	8002f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f000 fa78 	bl	8006a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	d001      	beq.n	800658c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e03f      	b.n	800660c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0201 	orr.w	r2, r2, #1
 80065a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1b      	ldr	r2, [pc, #108]	; (8006618 <HAL_TIM_Base_Start_IT+0xa4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_TIM_Base_Start_IT+0x62>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d00e      	beq.n	80065d6 <HAL_TIM_Base_Start_IT+0x62>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a17      	ldr	r2, [pc, #92]	; (800661c <HAL_TIM_Base_Start_IT+0xa8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_TIM_Base_Start_IT+0x62>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <HAL_TIM_Base_Start_IT+0xac>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIM_Base_Start_IT+0x62>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <HAL_TIM_Base_Start_IT+0xb0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d111      	bne.n	80065fa <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b06      	cmp	r3, #6
 80065e6:	d010      	beq.n	800660a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f8:	e007      	b.n	800660a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f042 0201 	orr.w	r2, r2, #1
 8006608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40000c00 	.word	0x40000c00

08006628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	d122      	bne.n	8006684 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b02      	cmp	r3, #2
 800664a:	d11b      	bne.n	8006684 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0202 	mvn.w	r2, #2
 8006654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f9b1 	bl	80069d2 <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f9a4 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f9b3 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b04      	cmp	r3, #4
 8006690:	d122      	bne.n	80066d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b04      	cmp	r3, #4
 800669e:	d11b      	bne.n	80066d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0204 	mvn.w	r2, #4
 80066a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f987 	bl	80069d2 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f97a 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f989 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d122      	bne.n	800672c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d11b      	bne.n	800672c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0208 	mvn.w	r2, #8
 80066fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2204      	movs	r2, #4
 8006702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f95d 	bl	80069d2 <HAL_TIM_IC_CaptureCallback>
 8006718:	e005      	b.n	8006726 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f950 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f95f 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0310 	and.w	r3, r3, #16
 8006736:	2b10      	cmp	r3, #16
 8006738:	d122      	bne.n	8006780 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b10      	cmp	r3, #16
 8006746:	d11b      	bne.n	8006780 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0210 	mvn.w	r2, #16
 8006750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2208      	movs	r2, #8
 8006756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f933 	bl	80069d2 <HAL_TIM_IC_CaptureCallback>
 800676c:	e005      	b.n	800677a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f926 	bl	80069c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f935 	bl	80069e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b01      	cmp	r3, #1
 800678c:	d10e      	bne.n	80067ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b01      	cmp	r3, #1
 800679a:	d107      	bne.n	80067ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0201 	mvn.w	r2, #1
 80067a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7fa ff96 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b80      	cmp	r3, #128	; 0x80
 80067b8:	d10e      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c4:	2b80      	cmp	r3, #128	; 0x80
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa89 	bl	8006cea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b40      	cmp	r3, #64	; 0x40
 80067e4:	d10e      	bne.n	8006804 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d107      	bne.n	8006804 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8f9 	bl	80069f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b20      	cmp	r3, #32
 8006810:	d10e      	bne.n	8006830 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b20      	cmp	r3, #32
 800681e:	d107      	bne.n	8006830 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0220 	mvn.w	r2, #32
 8006828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa54 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_TIM_ConfigClockSource+0x18>
 800684c:	2302      	movs	r3, #2
 800684e:	e0b3      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x180>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800686e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006876:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006888:	d03e      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0xd0>
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688e:	f200 8087 	bhi.w	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006896:	f000 8085 	beq.w	80069a4 <HAL_TIM_ConfigClockSource+0x16c>
 800689a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689e:	d87f      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068a0:	2b70      	cmp	r3, #112	; 0x70
 80068a2:	d01a      	beq.n	80068da <HAL_TIM_ConfigClockSource+0xa2>
 80068a4:	2b70      	cmp	r3, #112	; 0x70
 80068a6:	d87b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068a8:	2b60      	cmp	r3, #96	; 0x60
 80068aa:	d050      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x116>
 80068ac:	2b60      	cmp	r3, #96	; 0x60
 80068ae:	d877      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068b0:	2b50      	cmp	r3, #80	; 0x50
 80068b2:	d03c      	beq.n	800692e <HAL_TIM_ConfigClockSource+0xf6>
 80068b4:	2b50      	cmp	r3, #80	; 0x50
 80068b6:	d873      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	d058      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x136>
 80068bc:	2b40      	cmp	r3, #64	; 0x40
 80068be:	d86f      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068c0:	2b30      	cmp	r3, #48	; 0x30
 80068c2:	d064      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x156>
 80068c4:	2b30      	cmp	r3, #48	; 0x30
 80068c6:	d86b      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d060      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x156>
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d867      	bhi.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d05c      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x156>
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d05a      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80068d8:	e062      	b.n	80069a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6899      	ldr	r1, [r3, #8]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f000 f970 	bl	8006bce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	609a      	str	r2, [r3, #8]
      break;
 8006906:	e04e      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6899      	ldr	r1, [r3, #8]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f000 f959 	bl	8006bce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800692a:	609a      	str	r2, [r3, #8]
      break;
 800692c:	e03b      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	461a      	mov	r2, r3
 800693c:	f000 f8d0 	bl	8006ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2150      	movs	r1, #80	; 0x50
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f927 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 800694c:	e02b      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	461a      	mov	r2, r3
 800695c:	f000 f8ee 	bl	8006b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2160      	movs	r1, #96	; 0x60
 8006966:	4618      	mov	r0, r3
 8006968:	f000 f917 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 800696c:	e01b      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6859      	ldr	r1, [r3, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	f000 f8b0 	bl	8006ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2140      	movs	r1, #64	; 0x40
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f907 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 800698c:	e00b      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f000 f8fe 	bl	8006b9a <TIM_ITRx_SetConfig>
        break;
 800699e:	e002      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069a0:	bf00      	nop
 80069a2:	e000      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bc80      	pop	{r7}
 80069f4:	4770      	bx	lr

080069f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b083      	sub	sp, #12
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <TIM_Base_SetConfig+0xc8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00f      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d00b      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ad4 <TIM_Base_SetConfig+0xcc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d007      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a29      	ldr	r2, [pc, #164]	; (8006ad8 <TIM_Base_SetConfig+0xd0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0x38>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a28      	ldr	r2, [pc, #160]	; (8006adc <TIM_Base_SetConfig+0xd4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d108      	bne.n	8006a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <TIM_Base_SetConfig+0xc8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d00f      	beq.n	8006a7a <TIM_Base_SetConfig+0x72>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a60:	d00b      	beq.n	8006a7a <TIM_Base_SetConfig+0x72>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a1b      	ldr	r2, [pc, #108]	; (8006ad4 <TIM_Base_SetConfig+0xcc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <TIM_Base_SetConfig+0x72>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a1a      	ldr	r2, [pc, #104]	; (8006ad8 <TIM_Base_SetConfig+0xd0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_Base_SetConfig+0x72>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a19      	ldr	r2, [pc, #100]	; (8006adc <TIM_Base_SetConfig+0xd4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d108      	bne.n	8006a8c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <TIM_Base_SetConfig+0xc8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d103      	bne.n	8006ac0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	615a      	str	r2, [r3, #20]
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00

08006ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0201 	bic.w	r2, r3, #1
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 030a 	bic.w	r3, r3, #10
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	f023 0210 	bic.w	r2, r3, #16
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	031b      	lsls	r3, r3, #12
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	621a      	str	r2, [r3, #32]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f043 0307 	orr.w	r3, r3, #7
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b087      	sub	sp, #28
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
 8006bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006be8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	021a      	lsls	r2, r3, #8
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	609a      	str	r2, [r3, #8]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e04b      	b.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c70:	d00e      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40000800 	.word	0x40000800
 8006cd4:	40000c00 	.word	0x40000c00

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf2:	bf00      	nop
 8006cf4:	370c      	adds	r7, #12
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bc80      	pop	{r7}
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e03f      	b.n	8006d8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fd fa28 	bl	8004178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 fc61 	bl	8007608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695a      	ldr	r2, [r3, #20]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b08a      	sub	sp, #40	; 0x28
 8006d9a:	af02      	add	r7, sp, #8
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	603b      	str	r3, [r7, #0]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d17c      	bne.n	8006eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_UART_Transmit+0x2c>
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e075      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UART_Transmit+0x3e>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e06e      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2221      	movs	r2, #33	; 0x21
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dea:	f7fd fb65 	bl	80044b8 <HAL_GetTick>
 8006dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e04:	d108      	bne.n	8006e18 <HAL_UART_Transmit+0x82>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e003      	b.n	8006e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e28:	e02a      	b.n	8006e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2200      	movs	r2, #0
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa4c 	bl	80072d2 <UART_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e036      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10b      	bne.n	8006e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e007      	b.n	8006e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1cf      	bne.n	8006e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2140      	movs	r1, #64	; 0x40
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fa1c 	bl	80072d2 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e006      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006eb0:	2302      	movs	r3, #2
  }
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d130      	bne.n	8006f36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_UART_Transmit_IT+0x26>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e029      	b.n	8006f38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_UART_Transmit_IT+0x38>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e022      	b.n	8006f38 <HAL_UART_Transmit_IT+0x7e>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	88fa      	ldrh	r2, [r7, #6]
 8006f0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2221      	movs	r2, #33	; 0x21
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e000      	b.n	8006f38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006f36:	2302      	movs	r3, #2
  }
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d008      	beq.n	8006f96 <HAL_UART_IRQHandler+0x52>
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa90 	bl	80074b4 <UART_Receive_IT>
      return;
 8006f94:	e17b      	b.n	800728e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80b1 	beq.w	8007100 <HAL_UART_IRQHandler+0x1bc>
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x70>
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80a6 	beq.w	8007100 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x90>
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	f043 0201 	orr.w	r2, r3, #1
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <HAL_UART_IRQHandler+0xb0>
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	f043 0202 	orr.w	r2, r3, #2
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_UART_IRQHandler+0xd0>
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f043 0204 	orr.w	r2, r3, #4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <HAL_UART_IRQHandler+0xfa>
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <HAL_UART_IRQHandler+0xee>
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	f043 0208 	orr.w	r2, r3, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 811e 	beq.w	8007284 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_UART_IRQHandler+0x11e>
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa29 	bl	80074b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_UART_IRQHandler+0x146>
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d031      	beq.n	80070ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f96b 	bl	8007366 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d023      	beq.n	80070e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695a      	ldr	r2, [r3, #20]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d013      	beq.n	80070de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	4a76      	ldr	r2, [pc, #472]	; (8007294 <HAL_UART_IRQHandler+0x350>)
 80070bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe f9b8 	bl	8005438 <HAL_DMA_Abort_IT>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070dc:	e00e      	b.n	80070fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8e3 	bl	80072aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e4:	e00a      	b.n	80070fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f8df 	bl	80072aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ec:	e006      	b.n	80070fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f8db 	bl	80072aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80070fa:	e0c3      	b.n	8007284 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070fc:	bf00      	nop
    return;
 80070fe:	e0c1      	b.n	8007284 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	2b01      	cmp	r3, #1
 8007106:	f040 80a1 	bne.w	800724c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	f003 0310 	and.w	r3, r3, #16
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 809b 	beq.w	800724c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8095 	beq.w	800724c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d04e      	beq.n	80071e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007150:	8a3b      	ldrh	r3, [r7, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8098 	beq.w	8007288 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800715c:	8a3a      	ldrh	r2, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	f080 8092 	bcs.w	8007288 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8a3a      	ldrh	r2, [r7, #16]
 8007168:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2b20      	cmp	r3, #32
 8007172:	d02b      	beq.n	80071cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007182:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	695a      	ldr	r2, [r3, #20]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0210 	bic.w	r2, r2, #16
 80071c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe f8fb 	bl	80053c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	b29b      	uxth	r3, r3
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f86d 	bl	80072bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071e2:	e051      	b.n	8007288 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d047      	beq.n	800728c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80071fc:	8a7b      	ldrh	r3, [r7, #18]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d044      	beq.n	800728c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007210:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	695a      	ldr	r2, [r3, #20]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0210 	bic.w	r2, r2, #16
 800723e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007240:	8a7b      	ldrh	r3, [r7, #18]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f839 	bl	80072bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800724a:	e01f      	b.n	800728c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d008      	beq.n	8007268 <HAL_UART_IRQHandler+0x324>
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8c0 	bl	80073e6 <UART_Transmit_IT>
    return;
 8007266:	e012      	b.n	800728e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <HAL_UART_IRQHandler+0x34a>
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f901 	bl	8007484 <UART_EndTransmit_IT>
    return;
 8007282:	e004      	b.n	800728e <HAL_UART_IRQHandler+0x34a>
    return;
 8007284:	bf00      	nop
 8007286:	e002      	b.n	800728e <HAL_UART_IRQHandler+0x34a>
      return;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <HAL_UART_IRQHandler+0x34a>
      return;
 800728c:	bf00      	nop
  }
}
 800728e:	3728      	adds	r7, #40	; 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	080073bf 	.word	0x080073bf

08007298 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr

080072aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr

080072bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr

080072d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	4613      	mov	r3, r2
 80072e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e2:	e02c      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d028      	beq.n	800733e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <UART_WaitOnFlagUntilTimeout+0x30>
 80072f2:	f7fd f8e1 	bl	80044b8 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d21d      	bcs.n	800733e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007310:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e00f      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4013      	ands	r3, r2
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	bf0c      	ite	eq
 800734e:	2301      	moveq	r3, #1
 8007350:	2300      	movne	r3, #0
 8007352:	b2db      	uxtb	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	429a      	cmp	r2, r3
 800735a:	d0c3      	beq.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800737c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	2b01      	cmp	r3, #1
 8007394:	d107      	bne.n	80073a6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0210 	bic.w	r2, r2, #16
 80073a4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bc80      	pop	{r7}
 80073bc:	4770      	bx	lr

080073be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff ff66 	bl	80072aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b21      	cmp	r3, #33	; 0x21
 80073f8:	d13e      	bne.n	8007478 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d114      	bne.n	800742e <UART_Transmit_IT+0x48>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d110      	bne.n	800742e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007420:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	1c9a      	adds	r2, r3, #2
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	621a      	str	r2, [r3, #32]
 800742c:	e008      	b.n	8007440 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	1c59      	adds	r1, r3, #1
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6211      	str	r1, [r2, #32]
 8007438:	781a      	ldrb	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b29b      	uxth	r3, r3
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4619      	mov	r1, r3
 800744e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10f      	bne.n	8007474 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007462:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007472:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	e000      	b.n	800747a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007478:	2302      	movs	r3, #2
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7fa f947 	bl	8001738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b22      	cmp	r3, #34	; 0x22
 80074c6:	f040 8099 	bne.w	80075fc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d2:	d117      	bne.n	8007504 <UART_Receive_IT+0x50>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d113      	bne.n	8007504 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	629a      	str	r2, [r3, #40]	; 0x28
 8007502:	e026      	b.n	8007552 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007508:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007516:	d007      	beq.n	8007528 <UART_Receive_IT+0x74>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <UART_Receive_IT+0x82>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d106      	bne.n	8007536 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	b2da      	uxtb	r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	e008      	b.n	8007548 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007542:	b2da      	uxtb	r2, r3
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29b      	uxth	r3, r3
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	4619      	mov	r1, r3
 8007560:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007562:	2b00      	cmp	r3, #0
 8007564:	d148      	bne.n	80075f8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0220 	bic.w	r2, r2, #32
 8007574:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007584:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2220      	movs	r2, #32
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d123      	bne.n	80075ee <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0210 	bic.w	r2, r2, #16
 80075ba:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0310 	and.w	r3, r3, #16
 80075c6:	2b10      	cmp	r3, #16
 80075c8:	d10a      	bne.n	80075e0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fe68 	bl	80072bc <HAL_UARTEx_RxEventCallback>
 80075ec:	e002      	b.n	80075f4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff fe52 	bl	8007298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e002      	b.n	80075fe <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80075fc:	2302      	movs	r3, #2
  }
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007642:	f023 030c 	bic.w	r3, r3, #12
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	430b      	orrs	r3, r1
 800764e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2c      	ldr	r2, [pc, #176]	; (800771c <UART_SetConfig+0x114>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d103      	bne.n	8007678 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007670:	f7fe fefe 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	e002      	b.n	800767e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007678:	f7fe fee6 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 800767c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009a      	lsls	r2, r3, #2
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	4a22      	ldr	r2, [pc, #136]	; (8007720 <UART_SetConfig+0x118>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	0119      	lsls	r1, r3, #4
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009a      	lsls	r2, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80076b4:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <UART_SetConfig+0x118>)
 80076b6:	fba3 0302 	umull	r0, r3, r3, r2
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	2064      	movs	r0, #100	; 0x64
 80076be:	fb00 f303 	mul.w	r3, r0, r3
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	3332      	adds	r3, #50	; 0x32
 80076c8:	4a15      	ldr	r2, [pc, #84]	; (8007720 <UART_SetConfig+0x118>)
 80076ca:	fba2 2303 	umull	r2, r3, r2, r3
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076d4:	4419      	add	r1, r3
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009a      	lsls	r2, r3, #2
 80076e0:	441a      	add	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80076ec:	4b0c      	ldr	r3, [pc, #48]	; (8007720 <UART_SetConfig+0x118>)
 80076ee:	fba3 0302 	umull	r0, r3, r3, r2
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	2064      	movs	r0, #100	; 0x64
 80076f6:	fb00 f303 	mul.w	r3, r0, r3
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	011b      	lsls	r3, r3, #4
 80076fe:	3332      	adds	r3, #50	; 0x32
 8007700:	4a07      	ldr	r2, [pc, #28]	; (8007720 <UART_SetConfig+0x118>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	095b      	lsrs	r3, r3, #5
 8007708:	f003 020f 	and.w	r2, r3, #15
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	440a      	add	r2, r1
 8007712:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007714:	bf00      	nop
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40013800 	.word	0x40013800
 8007720:	51eb851f 	.word	0x51eb851f

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	2600      	movs	r6, #0
 8007728:	4d0c      	ldr	r5, [pc, #48]	; (800775c <__libc_init_array+0x38>)
 800772a:	4c0d      	ldr	r4, [pc, #52]	; (8007760 <__libc_init_array+0x3c>)
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	f000 f830 	bl	8007798 <_init>
 8007738:	2600      	movs	r6, #0
 800773a:	4d0a      	ldr	r5, [pc, #40]	; (8007764 <__libc_init_array+0x40>)
 800773c:	4c0a      	ldr	r4, [pc, #40]	; (8007768 <__libc_init_array+0x44>)
 800773e:	1b64      	subs	r4, r4, r5
 8007740:	10a4      	asrs	r4, r4, #2
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f855 3b04 	ldr.w	r3, [r5], #4
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f855 3b04 	ldr.w	r3, [r5], #4
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	080077f0 	.word	0x080077f0
 8007760:	080077f0 	.word	0x080077f0
 8007764:	080077f0 	.word	0x080077f0
 8007768:	080077f4 	.word	0x080077f4

0800776c <memcpy>:
 800776c:	440a      	add	r2, r1
 800776e:	4291      	cmp	r1, r2
 8007770:	f100 33ff 	add.w	r3, r0, #4294967295
 8007774:	d100      	bne.n	8007778 <memcpy+0xc>
 8007776:	4770      	bx	lr
 8007778:	b510      	push	{r4, lr}
 800777a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800777e:	4291      	cmp	r1, r2
 8007780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007784:	d1f9      	bne.n	800777a <memcpy+0xe>
 8007786:	bd10      	pop	{r4, pc}

08007788 <memset>:
 8007788:	4603      	mov	r3, r0
 800778a:	4402      	add	r2, r0
 800778c:	4293      	cmp	r3, r2
 800778e:	d100      	bne.n	8007792 <memset+0xa>
 8007790:	4770      	bx	lr
 8007792:	f803 1b01 	strb.w	r1, [r3], #1
 8007796:	e7f9      	b.n	800778c <memset+0x4>

08007798 <_init>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	bf00      	nop
 800779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779e:	bc08      	pop	{r3}
 80077a0:	469e      	mov	lr, r3
 80077a2:	4770      	bx	lr

080077a4 <_fini>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr
