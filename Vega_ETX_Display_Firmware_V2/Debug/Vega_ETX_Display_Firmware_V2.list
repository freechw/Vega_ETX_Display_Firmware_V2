
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000822c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008448  08008448  00020334  2**0
                  CONTENTS
  4 .ARM          00000008  08008448  08008448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008450  08008450  00020334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008450  08008450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08008458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000334  0800878c  00020334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800878c  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e4b  00000000  00000000  0002035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f44  00000000  00000000  000331a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  000360f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00037158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a00  00000000  00000000  00038040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170d0  00000000  00000000  0005aa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba55f  00000000  00000000  00071b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c06f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  0012c0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000334 	.word	0x20000334
 8000200:	00000000 	.word	0x00000000
 8000204:	080083f8 	.word	0x080083f8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000338 	.word	0x20000338
 8000220:	080083f8 	.word	0x080083f8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <MX_CAN1_Init+0xa0>)
 8000536:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800053a:	2209      	movs	r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800054c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000550:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000554:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000558:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000580:	f004 fa08 	bl	8004994 <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058a:	f001 f819 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_CAN1_Init+0x9c>)
 80005bc:	f004 fae6 	bl	8004b8c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000350 	.word	0x20000350
 80005cc:	40006400 	.word	0x40006400

080005d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <HAL_CAN_MspInit+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d149      	bne.n	8000684 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000636:	f005 fd87 	bl	8006148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000650:	f005 fd7a 	bl	8006148 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f005 f8bc 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f005 f8d5 	bl	800580e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2015      	movs	r0, #21
 800066a:	f005 f8b4 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800066e:	2015      	movs	r0, #21
 8000670:	f005 f8cd 	bl	800580e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2016      	movs	r0, #22
 800067a:	f005 f8ac 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800067e:	2016      	movs	r0, #22
 8000680:	f005 f8c5 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40006400 	.word	0x40006400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	//timeStampSend();6
//	testFlag_1 = true;
	EVCU_setData_i.dataID = 0;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <EVCU_setData_write+0x70>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
	EVCU_setData_i.fixSetS.bit.mode = targetMode;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <EVCU_setData_write+0x74>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	b2d9      	uxtb	r1, r3
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <EVCU_setData_write+0x70>)
 80006b4:	7893      	ldrb	r3, [r2, #2]
 80006b6:	f361 0301 	bfi	r3, r1, #0, #2
 80006ba:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <EVCU_setData_write+0x78>)
 80006be:	7819      	ldrb	r1, [r3, #0]
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <EVCU_setData_write+0x70>)
 80006c2:	7893      	ldrb	r3, [r2, #2]
 80006c4:	f361 0382 	bfi	r3, r1, #2, #1
 80006c8:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <EVCU_setData_write+0x7c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	b2d9      	uxtb	r1, r3
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <EVCU_setData_write+0x70>)
 80006d8:	7893      	ldrb	r3, [r2, #2]
 80006da:	f361 03c5 	bfi	r3, r1, #3, #3
 80006de:	7093      	strb	r3, [r2, #2]
	//EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <EVCU_setData_write+0x70>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <EVCU_setData_write+0x70>)
 80006f0:	7892      	ldrb	r2, [r2, #2]
 80006f2:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <EVCU_setData_write+0x80>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <EVCU_setData_write+0x84>)
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <EVCU_setData_write+0x88>)
 80006fc:	f004 fb6a 	bl	8004dd4 <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000378 	.word	0x20000378
 800070c:	200003ff 	.word	0x200003ff
 8000710:	20000387 	.word	0x20000387
 8000714:	2000000f 	.word	0x2000000f
 8000718:	200004a4 	.word	0x200004a4
 800071c:	2000043c 	.word	0x2000043c
 8000720:	20000350 	.word	0x20000350

08000724 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	091b      	lsrs	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <EVCU_getData_read_40+0x124>)
 8000738:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	10db      	asrs	r3, r3, #3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <EVCU_getData_read_40+0x128>)
 800074c:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	109b      	asrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <EVCU_getData_read_40+0x12c>)
 8000760:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <EVCU_getData_read_40+0x130>)
 8000774:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <EVCU_getData_read_40+0x134>)
 8000784:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3302      	adds	r3, #2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	09db      	lsrs	r3, r3, #7
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <EVCU_getData_read_40+0x138>)
 8000792:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3302      	adds	r3, #2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	119b      	asrs	r3, r3, #6
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <EVCU_getData_read_40+0x13c>)
 80007a6:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3302      	adds	r3, #2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	111b      	asrs	r3, r3, #4
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <EVCU_getData_read_40+0x140>)
 80007ba:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3302      	adds	r3, #2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	10db      	asrs	r3, r3, #3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <EVCU_getData_read_40+0x144>)
 80007ce:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3302      	adds	r3, #2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	109b      	asrs	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <EVCU_getData_read_40+0x148>)
 80007e2:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3304      	adds	r3, #4
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3303      	adds	r3, #3
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <EVCU_getData_read_40+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3305      	adds	r3, #5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <EVCU_getData_read_40+0x150>)
 8000808:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3307      	adds	r3, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3306      	adds	r3, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <EVCU_getData_read_40+0x154>)
 8000824:	801a      	strh	r2, [r3, #0]
	if (starupMode) {
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <EVCU_getData_read_40+0x158>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <EVCU_getData_read_40+0x118>
		starupMode = false;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <EVCU_getData_read_40+0x158>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <EVCU_getData_read_40+0x140>)
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <EVCU_getData_read_40+0x15c>)
 800083a:	701a      	strb	r2, [r3, #0]
	}


}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200003e0 	.word	0x200003e0
 800084c:	200003e2 	.word	0x200003e2
 8000850:	200003e3 	.word	0x200003e3
 8000854:	200003e4 	.word	0x200003e4
 8000858:	200003e5 	.word	0x200003e5
 800085c:	200003e6 	.word	0x200003e6
 8000860:	200003e7 	.word	0x200003e7
 8000864:	200003e8 	.word	0x200003e8
 8000868:	20000415 	.word	0x20000415
 800086c:	200003ea 	.word	0x200003ea
 8000870:	200003de 	.word	0x200003de
 8000874:	200003cc 	.word	0x200003cc
 8000878:	200003d8 	.word	0x200003d8
 800087c:	20000012 	.word	0x20000012
 8000880:	200003fe 	.word	0x200003fe

08000884 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b83      	ldr	r3, [pc, #524]	; (8000ab0 <EVCU_getData_read_41+0x22c>)
 80008a2:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	111b      	asrs	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b7f      	ldr	r3, [pc, #508]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 80008b6:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	119b      	asrs	r3, r3, #6
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b7b      	ldr	r3, [pc, #492]	; (8000ab8 <EVCU_getData_read_41+0x234>)
 80008ca:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	09db      	lsrs	r3, r3, #7
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b79      	ldr	r3, [pc, #484]	; (8000abc <EVCU_getData_read_41+0x238>)
 80008d8:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3302      	adds	r3, #2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	099b      	lsrs	r3, r3, #6
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b76      	ldr	r3, [pc, #472]	; (8000ac0 <EVCU_getData_read_41+0x23c>)
 80008e6:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d120      	bne.n	8000932 <EVCU_getData_read_41+0xae>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3304      	adds	r3, #4
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3303      	adds	r3, #3
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	431a      	orrs	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3302      	adds	r3, #2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	061b      	lsls	r3, r3, #24
 8000914:	4313      	orrs	r3, r2
 8000916:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000918:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 800091a:	601a      	str	r2, [r3, #0]
		distance.range = 10 *canRX[5];
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3305      	adds	r3, #5
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 8000930:	80da      	strh	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d127      	bne.n	800098a <EVCU_getData_read_41+0x106>

		soc_value = canRX[1];
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	785a      	ldrb	r2, [r3, #1]
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <EVCU_getData_read_41+0x244>)
 8000940:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	789a      	ldrb	r2, [r3, #2]
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <EVCU_getData_read_41+0x248>)
 8000948:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	78da      	ldrb	r2, [r3, #3]
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <EVCU_getData_read_41+0x24c>)
 8000950:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3305      	adds	r3, #5
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3304      	adds	r3, #4
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <EVCU_getData_read_41+0x250>)
 800096c:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3307      	adds	r3, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b21a      	sxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3306      	adds	r3, #6
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21b      	sxth	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b21b      	sxth	r3, r3
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <EVCU_getData_read_41+0x254>)
 8000988:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d11a      	bne.n	80009c8 <EVCU_getData_read_41+0x144>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3302      	adds	r3, #2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b21a      	sxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3301      	adds	r3, #1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <EVCU_getData_read_41+0x258>)
 80009ac:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3304      	adds	r3, #4
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3303      	adds	r3, #3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <EVCU_getData_read_41+0x25c>)
 80009c6:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d11b      	bne.n	8000a08 <EVCU_getData_read_41+0x184>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 80009ea:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3306      	adds	r3, #6
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3305      	adds	r3, #5
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 8000a06:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b05      	cmp	r3, #5
 8000a0e:	d129      	bne.n	8000a64 <EVCU_getData_read_41+0x1e0>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3302      	adds	r3, #2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000a2a:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3303      	adds	r3, #3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000a46:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3305      	adds	r3, #5
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000a62:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d11b      	bne.n	8000aa4 <EVCU_getData_read_41+0x220>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 8000a86:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3303      	adds	r3, #3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000aa2:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200003eb 	.word	0x200003eb
 8000ab4:	200003ec 	.word	0x200003ec
 8000ab8:	200003ed 	.word	0x200003ed
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	200003e9 	.word	0x200003e9
 8000ac4:	200003a4 	.word	0x200003a4
 8000ac8:	200003d0 	.word	0x200003d0
 8000acc:	200003d1 	.word	0x200003d1
 8000ad0:	200003da 	.word	0x200003da
 8000ad4:	200003d6 	.word	0x200003d6
 8000ad8:	200003d4 	.word	0x200003d4
 8000adc:	200003d2 	.word	0x200003d2
 8000ae0:	200003dc 	.word	0x200003dc
 8000ae4:	200003b4 	.word	0x200003b4

08000ae8 <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d12d      	bne.n	8000b54 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785a      	ldrb	r2, [r3, #1]
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000afe:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3303      	adds	r3, #3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b1a:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3305      	adds	r3, #5
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3306      	adds	r3, #6
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b36:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b52:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d121      	bne.n	8000ba0 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	785a      	ldrb	r2, [r3, #1]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b62:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3302      	adds	r3, #2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b7e:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	791a      	ldrb	r2, [r3, #4]
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b86:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	795a      	ldrb	r2, [r3, #5]
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b8e:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	799a      	ldrb	r2, [r3, #6]
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b96:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	79da      	ldrb	r2, [r3, #7]
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b9e:	73da      	strb	r2, [r3, #15]
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200003bc 	.word	0x200003bc

08000bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <MX_DMA_Init+0x38>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_DMA_Init+0x38>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	200c      	movs	r0, #12
 8000bd4:	f004 fdff 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f004 fe18 	bl	800580e <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000bf0:	4b83      	ldr	r3, [pc, #524]	; (8000e00 <setError+0x214>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d13a      	bne.n	8000c6e <setError+0x82>
		switch (err_error) {
 8000bf8:	4b82      	ldr	r3, [pc, #520]	; (8000e04 <setError+0x218>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d026      	beq.n	8000c4e <setError+0x62>
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	dc36      	bgt.n	8000c72 <setError+0x86>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <setError+0x22>
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d010      	beq.n	8000c2e <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000c0c:	e031      	b.n	8000c72 <setError+0x86>
			error_on = true;
 8000c0e:	4b7e      	ldr	r3, [pc, #504]	; (8000e08 <setError+0x21c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c14:	4b7d      	ldr	r3, [pc, #500]	; (8000e0c <setError+0x220>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c1a:	4b7d      	ldr	r3, [pc, #500]	; (8000e10 <setError+0x224>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c20:	4b7c      	ldr	r3, [pc, #496]	; (8000e14 <setError+0x228>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c26:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <setError+0x22c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			break;
 8000c2c:	e022      	b.n	8000c74 <setError+0x88>
			error_on = true;
 8000c2e:	4b76      	ldr	r3, [pc, #472]	; (8000e08 <setError+0x21c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c34:	4b75      	ldr	r3, [pc, #468]	; (8000e0c <setError+0x220>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c3a:	4b75      	ldr	r3, [pc, #468]	; (8000e10 <setError+0x224>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c40:	4b74      	ldr	r3, [pc, #464]	; (8000e14 <setError+0x228>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c46:	4b74      	ldr	r3, [pc, #464]	; (8000e18 <setError+0x22c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			break;
 8000c4c:	e012      	b.n	8000c74 <setError+0x88>
			error_on = false;
 8000c4e:	4b6e      	ldr	r3, [pc, #440]	; (8000e08 <setError+0x21c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c54:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <setError+0x220>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c5a:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <setError+0x224>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c60:	4b6c      	ldr	r3, [pc, #432]	; (8000e14 <setError+0x228>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <setError+0x22c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
			break;
 8000c6c:	e002      	b.n	8000c74 <setError+0x88>
		}
	}
 8000c6e:	bf00      	nop
 8000c70:	e000      	b.n	8000c74 <setError+0x88>
			break;
 8000c72:	bf00      	nop
	if (err_device == 1) { //BMS
 8000c74:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <setError+0x214>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	f040 80bb 	bne.w	8000df4 <setError+0x208>
		switch (err_error) {
 8000c7e:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <setError+0x218>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	f200 80a6 	bhi.w	8000dd4 <setError+0x1e8>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <setError+0xa4>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000cb5 	.word	0x08000cb5
 8000c94:	08000cd5 	.word	0x08000cd5
 8000c98:	08000cf5 	.word	0x08000cf5
 8000c9c:	08000d15 	.word	0x08000d15
 8000ca0:	08000d35 	.word	0x08000d35
 8000ca4:	08000d55 	.word	0x08000d55
 8000ca8:	08000d75 	.word	0x08000d75
 8000cac:	08000d95 	.word	0x08000d95
 8000cb0:	08000db5 	.word	0x08000db5
		case 0: //Over_Discharge_Current
			error_on = true;
 8000cb4:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <setError+0x21c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cba:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <setError+0x220>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cc0:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <setError+0x224>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cc6:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <setError+0x228>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000ccc:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <setError+0x22c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cd2:	e090      	b.n	8000df6 <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000cd4:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <setError+0x21c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <setError+0x220>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <setError+0x224>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000ce6:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <setError+0x228>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cec:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <setError+0x22c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cf2:	e080      	b.n	8000df6 <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <setError+0x21c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <setError+0x220>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d00:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <setError+0x224>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <setError+0x228>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <setError+0x22c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d12:	e070      	b.n	8000df6 <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <setError+0x21c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <setError+0x220>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <setError+0x224>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <setError+0x228>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <setError+0x22c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d32:	e060      	b.n	8000df6 <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <setError+0x21c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <setError+0x220>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d40:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <setError+0x224>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <setError+0x228>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <setError+0x22c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d52:	e050      	b.n	8000df6 <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <setError+0x21c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <setError+0x220>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <setError+0x224>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <setError+0x228>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <setError+0x22c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d72:	e040      	b.n	8000df6 <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <setError+0x21c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <setError+0x220>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <setError+0x224>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <setError+0x228>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <setError+0x22c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d92:	e030      	b.n	8000df6 <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <setError+0x21c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <setError+0x220>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <setError+0x224>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <setError+0x228>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <setError+0x22c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000db2:	e020      	b.n	8000df6 <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <setError+0x21c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <setError+0x220>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <setError+0x224>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <setError+0x228>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <setError+0x22c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000dd2:	e010      	b.n	8000df6 <setError+0x20a>
		default:
			error_on = false;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <setError+0x21c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <setError+0x220>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <setError+0x224>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <setError+0x228>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <setError+0x22c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
			break;
 8000df2:	e000      	b.n	8000df6 <setError+0x20a>
		}
	}
 8000df4:	bf00      	nop
	//_errorSelection = true;
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200003ec 	.word	0x200003ec
 8000e04:	200003eb 	.word	0x200003eb
 8000e08:	2000040a 	.word	0x2000040a
 8000e0c:	2000040b 	.word	0x2000040b
 8000e10:	2000040c 	.word	0x2000040c
 8000e14:	2000040d 	.word	0x2000040d
 8000e18:	2000040e 	.word	0x2000040e

08000e1c <MX_GPIO_Init>:
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a39      	ldr	r2, [pc, #228]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin | LED_2_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2103      	movs	r1, #3
 8000e94:	4828      	ldr	r0, [pc, #160]	; (8000f38 <MX_GPIO_Init+0x11c>)
 8000e96:	f005 faf2 	bl	800647e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PCPin PCPin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4821      	ldr	r0, [pc, #132]	; (8000f38 <MX_GPIO_Init+0x11c>)
 8000eb2:	f005 f949 	bl	8006148 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = IN4_Pin | IN3_Pin | IN2_Pin;
 8000eb6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000eba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <MX_GPIO_Init+0x120>)
 8000ecc:	f005 f93c 	bl	8006148 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin PCPin
	 PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = IN7_Pin | IN6_Pin | IN9_Pin | IN10_Pin | IN11_Pin
 8000ed0:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000ed4:	613b      	str	r3, [r7, #16]
			| IN12_Pin | IN5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_GPIO_Init+0x11c>)
 8000ee6:	f005 f92f 	bl	8006148 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = IN8_Pin | IN1_Pin;
 8000eea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <MX_GPIO_Init+0x124>)
 8000f00:	f005 f922 	bl	8006148 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = Btn_Int_1_Pin | Btn_Int_2_Pin;
 8000f04:	23c0      	movs	r3, #192	; 0xc0
 8000f06:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x128>)
 8000f0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <MX_GPIO_Init+0x124>)
 8000f18:	f005 f916 	bl	8006148 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2017      	movs	r0, #23
 8000f22:	f004 fc58 	bl	80057d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f26:	2017      	movs	r0, #23
 8000f28:	f004 fc71 	bl	800580e <HAL_NVIC_EnableIRQ>

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	10110000 	.word	0x10110000

08000f48 <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	4851      	ldr	r0, [pc, #324]	; (8001098 <getInputs+0x150>)
 8000f52:	f005 fa7d 	bl	8006450 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <getInputs+0x154>)
 8000f60:	7813      	ldrb	r3, [r2, #0]
 8000f62:	f361 0300 	bfi	r3, r1, #0, #1
 8000f66:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	484c      	ldr	r0, [pc, #304]	; (80010a0 <getInputs+0x158>)
 8000f6e:	f005 fa6f 	bl	8006450 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2d9      	uxtb	r1, r3
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <getInputs+0x154>)
 8000f7c:	7813      	ldrb	r3, [r2, #0]
 8000f7e:	f361 0341 	bfi	r3, r1, #1, #1
 8000f82:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 8000f84:	2108      	movs	r1, #8
 8000f86:	4846      	ldr	r0, [pc, #280]	; (80010a0 <getInputs+0x158>)
 8000f88:	f005 fa62 	bl	8006450 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2d9      	uxtb	r1, r3
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <getInputs+0x154>)
 8000f96:	7813      	ldrb	r3, [r2, #0]
 8000f98:	f361 0382 	bfi	r3, r1, #2, #1
 8000f9c:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	483f      	ldr	r0, [pc, #252]	; (80010a0 <getInputs+0x158>)
 8000fa2:	f005 fa55 	bl	8006450 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2d9      	uxtb	r1, r3
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <getInputs+0x154>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fb6:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4839      	ldr	r0, [pc, #228]	; (80010a4 <getInputs+0x15c>)
 8000fbe:	f005 fa47 	bl	8006450 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	4a34      	ldr	r2, [pc, #208]	; (800109c <getInputs+0x154>)
 8000fcc:	7813      	ldrb	r3, [r2, #0]
 8000fce:	f361 1304 	bfi	r3, r1, #4, #1
 8000fd2:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <getInputs+0x15c>)
 8000fd8:	f005 fa3a 	bl	8006450 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	4a2d      	ldr	r2, [pc, #180]	; (800109c <getInputs+0x154>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f361 1345 	bfi	r3, r1, #5, #1
 8000fec:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8000fee:	2110      	movs	r1, #16
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <getInputs+0x15c>)
 8000ff2:	f005 fa2d 	bl	8006450 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2d9      	uxtb	r1, r3
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <getInputs+0x154>)
 8001000:	7813      	ldrb	r3, [r2, #0]
 8001002:	f361 1386 	bfi	r3, r1, #6, #1
 8001006:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8001008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100c:	4822      	ldr	r0, [pc, #136]	; (8001098 <getInputs+0x150>)
 800100e:	f005 fa1f 	bl	8006450 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2d9      	uxtb	r1, r3
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <getInputs+0x154>)
 800101c:	7813      	ldrb	r3, [r2, #0]
 800101e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001022:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	481f      	ldr	r0, [pc, #124]	; (80010a4 <getInputs+0x15c>)
 8001028:	f005 fa12 	bl	8006450 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2d9      	uxtb	r1, r3
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <getInputs+0x154>)
 8001036:	7853      	ldrb	r3, [r2, #1]
 8001038:	f361 0300 	bfi	r3, r1, #0, #1
 800103c:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <getInputs+0x15c>)
 8001042:	f005 fa05 	bl	8006450 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <getInputs+0x154>)
 8001050:	7853      	ldrb	r3, [r2, #1]
 8001052:	f361 0341 	bfi	r3, r1, #1, #1
 8001056:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <getInputs+0x15c>)
 800105e:	f005 f9f7 	bl	8006450 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <getInputs+0x154>)
 800106c:	7853      	ldrb	r3, [r2, #1]
 800106e:	f361 0382 	bfi	r3, r1, #2, #1
 8001072:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <getInputs+0x15c>)
 800107a:	f005 f9e9 	bl	8006450 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <getInputs+0x154>)
 8001088:	7853      	ldrb	r3, [r2, #1]
 800108a:	f361 03c3 	bfi	r3, r1, #3, #1
 800108e:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001090:	f000 f8ae 	bl	80011f0 <buttonOkay>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010c00 	.word	0x40010c00
 800109c:	20000380 	.word	0x20000380
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40011000 	.word	0x40011000

080010a8 <setInputs>:

void setInputs() {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	//  3 - Okay
	//	4 - Back
	//	5 - Forward
	//	6 - Backward
	//	7 - Mode
	if (gpio.buttonInputs.bit.in7) //pageUp
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <setInputs+0x11c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d011      	beq.n	80010de <setInputs+0x36>
	{
		buttonCounterForward++;
 80010ba:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <setInputs+0x120>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <setInputs+0x120>)
 80010c4:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <setInputs+0x120>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d803      	bhi.n	80010d6 <setInputs+0x2e>
			forward = true;
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <setInputs+0x124>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e006      	b.n	80010e4 <setInputs+0x3c>
		}
		else {
			forward = false;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <setInputs+0x124>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e002      	b.n	80010e4 <setInputs+0x3c>
		}
	} else {
		buttonCounterForward = 0;
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <setInputs+0x120>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in5) //pageDown
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <setInputs+0x11c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d011      	beq.n	8001116 <setInputs+0x6e>
	{
		buttonCounterBackward++;
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <setInputs+0x128>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <setInputs+0x128>)
 80010fc:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <setInputs+0x128>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d803      	bhi.n	800110e <setInputs+0x66>
			backward = true;
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <setInputs+0x12c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e006      	b.n	800111c <setInputs+0x74>
		}
		else {
			backward = false;
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <setInputs+0x12c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e002      	b.n	800111c <setInputs+0x74>
		}
	} else {
		buttonCounterBackward = 0;
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <setInputs+0x128>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in8) //back
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <setInputs+0x11c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d011      	beq.n	800114e <setInputs+0xa6>
	{
		buttonCounterBack++;
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <setInputs+0x130>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <setInputs+0x130>)
 8001134:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <setInputs+0x130>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d803      	bhi.n	8001146 <setInputs+0x9e>
			back = true;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <setInputs+0x134>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <setInputs+0xac>
		}
		else {
			back = false;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <setInputs+0x134>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e002      	b.n	8001154 <setInputs+0xac>
		}
	}
	else
	{
		buttonCounterBack = 0;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <setInputs+0x130>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //mode //After fixing the okay button change mode to okay
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <setInputs+0x11c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00d      	beq.n	800117e <setInputs+0xd6>
	{
		buttonCounterMode++;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <setInputs+0x138>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <setInputs+0x138>)
 800116c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <setInputs+0x138>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d806      	bhi.n	8001184 <setInputs+0xdc>
			mode = true;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <setInputs+0x13c>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e002      	b.n	8001184 <setInputs+0xdc>
			//mode = false;
		//}
	}
	else
	{
		buttonCounterMode = 0;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <setInputs+0x138>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6 == 1) //okay
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <setInputs+0x11c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d011      	beq.n	80011b6 <setInputs+0x10e>
	{
		buttonCounterOkay++;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <setInputs+0x140>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <setInputs+0x140>)
 800119c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <setInputs+0x140>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d803      	bhi.n	80011ae <setInputs+0x106>
			okay = true;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <setInputs+0x144>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 80011ac:	e006      	b.n	80011bc <setInputs+0x114>
			okay = false;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <setInputs+0x144>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
}
 80011b4:	e002      	b.n	80011bc <setInputs+0x114>
		buttonCounterOkay = 0;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <setInputs+0x140>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000380 	.word	0x20000380
 80011c8:	20000436 	.word	0x20000436
 80011cc:	20000384 	.word	0x20000384
 80011d0:	20000437 	.word	0x20000437
 80011d4:	20000385 	.word	0x20000385
 80011d8:	20000438 	.word	0x20000438
 80011dc:	2000038a 	.word	0x2000038a
 80011e0:	2000043a 	.word	0x2000043a
 80011e4:	20000389 	.word	0x20000389
 80011e8:	20000439 	.word	0x20000439
 80011ec:	20000386 	.word	0x20000386

080011f0 <buttonOkay>:

void buttonOkay(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in6 == 1) {
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <buttonOkay+0x54>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <buttonOkay+0x20>
		buttonCounterLongPress++;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <buttonOkay+0x58>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <buttonOkay+0x58>)
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e005      	b.n	800121c <buttonOkay+0x2c>
	} else {
		buttonCounterLongPress = 0;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <buttonOkay+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		okay = false;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <buttonOkay+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <buttonOkay+0x58>)
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <buttonOkay+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d308      	bcc.n	800123a <buttonOkay+0x4a>
		longpress = true;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <buttonOkay+0x64>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
		okay = false;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <buttonOkay+0x5c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <buttonOkay+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	}

}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000380 	.word	0x20000380
 8001248:	20000435 	.word	0x20000435
 800124c:	20000386 	.word	0x20000386
 8001250:	20000016 	.word	0x20000016
 8001254:	20000388 	.word	0x20000388

08001258 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800125c:	f003 fb14 	bl	8004888 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f003 fb72 	bl	800494c <HAL_Delay>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001268:	f000 f8a4 	bl	80013b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_DMA_Init();
 800126c:	f7ff fca0 	bl	8000bb0 <MX_DMA_Init>
	MX_GPIO_Init();
 8001270:	f7ff fdd4 	bl	8000e1c <MX_GPIO_Init>
	MX_CAN1_Init();
 8001274:	f7ff f95a 	bl	800052c <MX_CAN1_Init>
	MX_TIM2_Init();
 8001278:	f001 fcd6 	bl	8002c28 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 800127c:	f003 f966 	bl	800454c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <main+0x128>)
 8001282:	2208      	movs	r2, #8
 8001284:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <main+0x128>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <main+0x128>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <main+0x128>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <main+0x128>)
 800129a:	2242      	movs	r2, #66	; 0x42
 800129c:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <main+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <main+0x12c>)
 80012a6:	22f3      	movs	r2, #243	; 0xf3
 80012a8:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <main+0x130>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <main+0x130>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x130>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <main+0x130>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <main+0x130>)
 80012c4:	2252      	movs	r2, #82	; 0x52
 80012c6:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <main+0x130>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <main+0x134>)
 80012d0:	22f3      	movs	r2, #243	; 0xf3
 80012d2:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 80012d4:	2208      	movs	r2, #8
 80012d6:	2100      	movs	r1, #0
 80012d8:	482d      	ldr	r0, [pc, #180]	; (8001390 <main+0x138>)
 80012da:	f007 f885 	bl	80083e8 <memset>
	memset(strDATA2, 0, 10);
 80012de:	220a      	movs	r2, #10
 80012e0:	2100      	movs	r1, #0
 80012e2:	482c      	ldr	r0, [pc, #176]	; (8001394 <main+0x13c>)
 80012e4:	f007 f880 	bl	80083e8 <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <main+0x138>)
 80012ea:	225a      	movs	r2, #90	; 0x5a
 80012ec:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <main+0x138>)
 80012f0:	22a5      	movs	r2, #165	; 0xa5
 80012f2:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <main+0x138>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <main+0x138>)
 80012fc:	2282      	movs	r2, #130	; 0x82
 80012fe:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <main+0x13c>)
 8001302:	225a      	movs	r2, #90	; 0x5a
 8001304:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <main+0x13c>)
 8001308:	22a5      	movs	r2, #165	; 0xa5
 800130a:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <main+0x13c>)
 800130e:	2207      	movs	r2, #7
 8001310:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <main+0x13c>)
 8001314:	2282      	movs	r2, #130	; 0x82
 8001316:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 8001318:	481f      	ldr	r0, [pc, #124]	; (8001398 <main+0x140>)
 800131a:	f003 fd17 	bl	8004d4c <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800131e:	2102      	movs	r1, #2
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <main+0x140>)
 8001322:	f003 ff42 	bl	80051aa <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <main+0x144>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 800132c:	481c      	ldr	r0, [pc, #112]	; (80013a0 <main+0x148>)
 800132e:	f005 fea1 	bl	8007074 <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <main+0x14c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <main+0x14c>)
 800133c:	701a      	strb	r2, [r3, #0]
		counter2++;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <main+0x150>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <main+0x150>)
 8001348:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(10);

		if (gpioSetFlag) {
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <main+0x154>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <main+0x10e>
			getInputs();
 8001352:	f7ff fdf9 	bl	8000f48 <getInputs>
			setInputs();
 8001356:	f7ff fea7 	bl	80010a8 <setInputs>
			gpioSetFlag = false;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <main+0x154>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
			//mainStateMachine();
			counter = 0;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <main+0x14c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]

		}
		if (timeout.timeout_0_5s == true) {
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <main+0x158>)
 8001368:	795b      	ldrb	r3, [r3, #5]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0e0      	beq.n	8001332 <main+0xda>
			if (counter2 >= 10) {
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <main+0x150>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d9dc      	bls.n	8001332 <main+0xda>
				//transmit();
				counter2 = 0;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <main+0x150>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
		counter++;
 800137e:	e7d8      	b.n	8001332 <main+0xda>
 8001380:	2000043c 	.word	0x2000043c
 8001384:	200004b0 	.word	0x200004b0
 8001388:	20000470 	.word	0x20000470
 800138c:	20000018 	.word	0x20000018
 8001390:	20000390 	.word	0x20000390
 8001394:	20000398 	.word	0x20000398
 8001398:	20000350 	.word	0x20000350
 800139c:	20000432 	.word	0x20000432
 80013a0:	200004c8 	.word	0x200004c8
 80013a4:	200004c0 	.word	0x200004c0
 80013a8:	200004c1 	.word	0x200004c1
 80013ac:	200004c4 	.word	0x200004c4
 80013b0:	20000510 	.word	0x20000510

080013b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	2238      	movs	r2, #56	; 0x38
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 f810 	bl	80083e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	4618      	mov	r0, r3
 8001406:	f005 f883 	bl	8006510 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x60>
		Error_Handler();
 8001410:	f000 f8d6 	bl	80015c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001424:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f005 fb84 	bl	8006b3c <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x8a>
		Error_Handler();
 800143a:	f000 f8c1 	bl	80015c0 <Error_Handler>
	}

	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <SystemClock_Config+0x98>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	3750      	adds	r7, #80	; 0x50
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	42420070 	.word	0x42420070

08001450 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	can_Counter++;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001462:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2101      	movs	r1, #1
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800146a:	f005 f808 	bl	800647e <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001472:	2100      	movs	r1, #0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f003 fd87 	bl	8004f88 <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b40      	cmp	r3, #64	; 0x40
 8001480:	d106      	bne.n	8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800148c:	f7ff f94a 	bl	8000724 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b41      	cmp	r3, #65	; 0x41
 8001496:	d106      	bne.n	80014a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80014a2:	f7ff f9ef 	bl	8000884 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b43      	cmp	r3, #67	; 0x43
 80014ac:	d106      	bne.n	80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80014b8:	f7ff fb16 	bl	8000ae8 <EVCU_getData_read_43>
	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200004c2 	.word	0x200004c2
 80014c8:	40011000 	.word	0x40011000
 80014cc:	200004a8 	.word	0x200004a8
 80014d0:	20000454 	.word	0x20000454

080014d4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	counter2++;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80014e6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2102      	movs	r1, #2
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80014ee:	f004 ffc6 	bl	800647e <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f003 fd45 	bl	8004f88 <HAL_CAN_GetRxMessage>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200004c1 	.word	0x200004c1
 800150c:	40011000 	.word	0x40011000
 8001510:	200004b8 	.word	0x200004b8
 8001514:	20000488 	.word	0x20000488

08001518 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_GPIO_EXTI_Callback+0x20>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_GPIO_EXTI_Callback+0x24>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
	}
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000382 	.word	0x20000382
 800153c:	20000383 	.word	0x20000383

08001540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800154a:	f001 fbdd 	bl	8002d08 <tick_count>
	gpioSetFlag = true;//50ms
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
	mainStateMachine();
 8001554:	f000 ffb2 	bl	80024bc <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 8001558:	2101      	movs	r1, #1
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800155c:	f004 ffa7 	bl	80064ae <HAL_GPIO_TogglePin>
	timCounter++;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800156a:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 800156c:	f001 fc3a 	bl	8002de4 <transmit>

	//gpioSetFlag = true;

	if (timeout.timeout_1s == true) {
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001572:	799b      	ldrb	r3, [r3, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <HAL_TIM_PeriodElapsedCallback+0x40>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800157c:	f7ff f88c 	bl	8000698 <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000510 	.word	0x20000510
 800158c:	200004c4 	.word	0x200004c4
 8001590:	40011000 	.word	0x40011000
 8001594:	200004c3 	.word	0x200004c3
 8001598:	200004b0 	.word	0x200004b0

0800159c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>
	...

080015cc <navigation>:
#include <menu.h>


void navigation(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 80015d0:	4b9b      	ldr	r3, [pc, #620]	; (8001840 <navigation+0x274>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d103      	bne.n	80015e0 <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 80015d8:	4b9a      	ldr	r3, [pc, #616]	; (8001844 <navigation+0x278>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	e002      	b.n	80015e6 <navigation+0x1a>
	} else {
		_navigation = false;
 80015e0:	4b98      	ldr	r3, [pc, #608]	; (8001844 <navigation+0x278>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
	}

	if (currentStateSM == driving_state) {
 80015e6:	4b98      	ldr	r3, [pc, #608]	; (8001848 <navigation+0x27c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d102      	bne.n	80015f6 <navigation+0x2a>
		_testPage = true;
 80015f0:	4b96      	ldr	r3, [pc, #600]	; (800184c <navigation+0x280>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	}

	switch (currentPage) {
 80015f6:	4b96      	ldr	r3, [pc, #600]	; (8001850 <navigation+0x284>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b07      	cmp	r3, #7
 80015fe:	f200 8112 	bhi.w	8001826 <navigation+0x25a>
 8001602:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <navigation+0x3c>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001629 	.word	0x08001629
 800160c:	08001691 	.word	0x08001691
 8001610:	080016f9 	.word	0x080016f9
 8001614:	0800175f 	.word	0x0800175f
 8001618:	08001827 	.word	0x08001827
 800161c:	08001827 	.word	0x08001827
 8001620:	08001827 	.word	0x08001827
 8001624:	080017c3 	.word	0x080017c3
	case front:
		front_mainPage();
 8001628:	f000 f91e 	bl	8001868 <front_mainPage>
		if (currentStateSM == driving_state) {
 800162c:	4b86      	ldr	r3, [pc, #536]	; (8001848 <navigation+0x27c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d105      	bne.n	8001642 <navigation+0x76>
			_realTimeData = true;
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <navigation+0x288>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800163c:	4b86      	ldr	r3, [pc, #536]	; (8001858 <navigation+0x28c>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001642:	4b83      	ldr	r3, [pc, #524]	; (8001850 <navigation+0x284>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b84      	ldr	r3, [pc, #528]	; (800185c <navigation+0x290>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	429a      	cmp	r2, r3
 8001650:	f000 80eb 	beq.w	800182a <navigation+0x25e>
			previousPage = front;
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <navigation+0x290>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <navigation+0x294>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001660:	4b7c      	ldr	r3, [pc, #496]	; (8001854 <navigation+0x288>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001666:	4b7c      	ldr	r3, [pc, #496]	; (8001858 <navigation+0x28c>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800166c:	4b76      	ldr	r3, [pc, #472]	; (8001848 <navigation+0x27c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d102      	bne.n	800167c <navigation+0xb0>
				_transmit_Function = 5;
 8001676:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <navigation+0x298>)
 8001678:	2205      	movs	r2, #5
 800167a:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800167c:	4b72      	ldr	r3, [pc, #456]	; (8001848 <navigation+0x27c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80d1 	bne.w	800182a <navigation+0x25e>
				_transmit_Function = 2;
 8001688:	4b76      	ldr	r3, [pc, #472]	; (8001864 <navigation+0x298>)
 800168a:	2202      	movs	r2, #2
 800168c:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 800168e:	e0cc      	b.n	800182a <navigation+0x25e>
	case trip:
		trip_mainPage();
 8001690:	f000 f944 	bl	800191c <trip_mainPage>
		if (currentStateSM == driving_state) {
 8001694:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <navigation+0x27c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <navigation+0xde>
			_realTimeData = true;
 800169e:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <navigation+0x288>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80016a4:	4b6c      	ldr	r3, [pc, #432]	; (8001858 <navigation+0x28c>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80016aa:	4b69      	ldr	r3, [pc, #420]	; (8001850 <navigation+0x284>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <navigation+0x290>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	429a      	cmp	r2, r3
 80016b8:	f000 80b9 	beq.w	800182e <navigation+0x262>
			previousPage = trip;
 80016bc:	4b67      	ldr	r3, [pc, #412]	; (800185c <navigation+0x290>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80016c2:	4b67      	ldr	r3, [pc, #412]	; (8001860 <navigation+0x294>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80016c8:	4b62      	ldr	r3, [pc, #392]	; (8001854 <navigation+0x288>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80016ce:	4b62      	ldr	r3, [pc, #392]	; (8001858 <navigation+0x28c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80016d4:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <navigation+0x27c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <navigation+0x118>
				_transmit_Function = 5;
 80016de:	4b61      	ldr	r3, [pc, #388]	; (8001864 <navigation+0x298>)
 80016e0:	2205      	movs	r2, #5
 80016e2:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80016e4:	4b58      	ldr	r3, [pc, #352]	; (8001848 <navigation+0x27c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 809f 	bne.w	800182e <navigation+0x262>
				_transmit_Function = 2;
 80016f0:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <navigation+0x298>)
 80016f2:	2202      	movs	r2, #2
 80016f4:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80016f6:	e09a      	b.n	800182e <navigation+0x262>
	case after_charge:
		after_charge_mainPage();
 80016f8:	f000 f966 	bl	80019c8 <after_charge_mainPage>
		if (currentStateSM == driving_state) {
 80016fc:	4b52      	ldr	r3, [pc, #328]	; (8001848 <navigation+0x27c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <navigation+0x146>
			_realTimeData = true;
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <navigation+0x288>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800170c:	4b52      	ldr	r3, [pc, #328]	; (8001858 <navigation+0x28c>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <navigation+0x284>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <navigation+0x290>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	429a      	cmp	r2, r3
 8001720:	f000 8087 	beq.w	8001832 <navigation+0x266>
			previousPage = after_charge;
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <navigation+0x290>)
 8001726:	2202      	movs	r2, #2
 8001728:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <navigation+0x294>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001730:	4b48      	ldr	r3, [pc, #288]	; (8001854 <navigation+0x288>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <navigation+0x28c>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <navigation+0x27c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d102      	bne.n	800174c <navigation+0x180>
				_transmit_Function = 5;
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <navigation+0x298>)
 8001748:	2205      	movs	r2, #5
 800174a:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800174c:	4b3e      	ldr	r3, [pc, #248]	; (8001848 <navigation+0x27c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d16d      	bne.n	8001832 <navigation+0x266>
				_transmit_Function = 2;
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <navigation+0x298>)
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800175c:	e069      	b.n	8001832 <navigation+0x266>
	case info:
		info_mainPage();
 800175e:	f000 f97b 	bl	8001a58 <info_mainPage>
		if (currentStateSM == driving_state) {
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <navigation+0x27c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <navigation+0x1ac>
			_realTimeData = true;
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <navigation+0x288>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <navigation+0x28c>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <navigation+0x284>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b37      	ldr	r3, [pc, #220]	; (800185c <navigation+0x290>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	429a      	cmp	r2, r3
 8001786:	d056      	beq.n	8001836 <navigation+0x26a>
			previousPage = info;
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <navigation+0x290>)
 800178a:	2203      	movs	r2, #3
 800178c:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800178e:	4b34      	ldr	r3, [pc, #208]	; (8001860 <navigation+0x294>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <navigation+0x288>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <navigation+0x28c>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80017a0:	4b29      	ldr	r3, [pc, #164]	; (8001848 <navigation+0x27c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <navigation+0x1e4>
				_transmit_Function = 5;
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <navigation+0x298>)
 80017ac:	2205      	movs	r2, #5
 80017ae:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80017b0:	4b25      	ldr	r3, [pc, #148]	; (8001848 <navigation+0x27c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d13d      	bne.n	8001836 <navigation+0x26a>
				_transmit_Function = 2;
 80017ba:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <navigation+0x298>)
 80017bc:	2202      	movs	r2, #2
 80017be:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80017c0:	e039      	b.n	8001836 <navigation+0x26a>
	case settings:
		settings_mainPage();
 80017c2:	f000 fa65 	bl	8001c90 <settings_mainPage>
		if (currentStateSM == driving_state) {
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <navigation+0x27c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <navigation+0x210>
			_realTimeData = true;
 80017d0:	4b20      	ldr	r3, [pc, #128]	; (8001854 <navigation+0x288>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <navigation+0x28c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <navigation+0x284>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <navigation+0x290>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d026      	beq.n	800183a <navigation+0x26e>
			previousPage = settings;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <navigation+0x290>)
 80017ee:	2207      	movs	r2, #7
 80017f0:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <navigation+0x294>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <navigation+0x288>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <navigation+0x28c>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <navigation+0x27c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d102      	bne.n	8001814 <navigation+0x248>
				_transmit_Function = 5;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <navigation+0x298>)
 8001810:	2205      	movs	r2, #5
 8001812:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <navigation+0x27c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <navigation+0x26e>
				_transmit_Function = 2;
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <navigation+0x298>)
 8001820:	2202      	movs	r2, #2
 8001822:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001824:	e009      	b.n	800183a <navigation+0x26e>
	default:
		break;
 8001826:	bf00      	nop
 8001828:	e008      	b.n	800183c <navigation+0x270>
		break;
 800182a:	bf00      	nop
 800182c:	e006      	b.n	800183c <navigation+0x270>
		break;
 800182e:	bf00      	nop
 8001830:	e004      	b.n	800183c <navigation+0x270>
		break;
 8001832:	bf00      	nop
 8001834:	e002      	b.n	800183c <navigation+0x270>
		break;
 8001836:	bf00      	nop
 8001838:	e000      	b.n	800183c <navigation+0x270>
		break;
 800183a:	bf00      	nop
	}

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200003e2 	.word	0x200003e2
 8001844:	20000418 	.word	0x20000418
 8001848:	200003f8 	.word	0x200003f8
 800184c:	2000042b 	.word	0x2000042b
 8001850:	200003f6 	.word	0x200003f6
 8001854:	20000419 	.word	0x20000419
 8001858:	2000041b 	.word	0x2000041b
 800185c:	200003f7 	.word	0x200003f7
 8001860:	2000041a 	.word	0x2000041a
 8001864:	2000042f 	.word	0x2000042f

08001868 <front_mainPage>:

void front_mainPage(void) {
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	if (page_entry) {
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <front_mainPage+0x8c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <front_mainPage+0x24>
		page_entry = false;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <front_mainPage+0x8c>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <front_mainPage+0x90>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <front_mainPage+0x94>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <front_mainPage+0x98>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <front_mainPage+0x9c>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <front_mainPage+0xa0>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]

	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 8001898:	4b1c      	ldr	r3, [pc, #112]	; (800190c <front_mainPage+0xa4>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00f      	beq.n	80018c0 <front_mainPage+0x58>
		currentPage = trip;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <front_mainPage+0xa8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <front_mainPage+0x8c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
		forward = false;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <front_mainPage+0xa4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
		backward = false;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <front_mainPage+0xac>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <front_mainPage+0xb0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
		return;
 80018be:	e016      	b.n	80018ee <front_mainPage+0x86>
	}

	if (backward == true) {
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <front_mainPage+0xac>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d012      	beq.n	80018ee <front_mainPage+0x86>
		backward = false;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <front_mainPage+0xac>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
		currentPage = settings;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <front_mainPage+0xa8>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <front_mainPage+0x8c>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
		forward = false;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <front_mainPage+0xa4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <front_mainPage+0xb0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <front_mainPage+0xa0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
		return;
 80018ec:	bf00      	nop
	}
}
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000014 	.word	0x20000014
 80018f8:	2000041c 	.word	0x2000041c
 80018fc:	20000426 	.word	0x20000426
 8001900:	20000427 	.word	0x20000427
 8001904:	20000433 	.word	0x20000433
 8001908:	20000434 	.word	0x20000434
 800190c:	20000384 	.word	0x20000384
 8001910:	200003f6 	.word	0x200003f6
 8001914:	20000385 	.word	0x20000385
 8001918:	200003fd 	.word	0x200003fd

0800191c <trip_mainPage>:

void trip_mainPage(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <trip_mainPage+0x88>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <trip_mainPage+0x12>
		page_entry = false;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <trip_mainPage+0x88>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <trip_mainPage+0x8c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d005      	beq.n	8001942 <trip_mainPage+0x26>
		tripreset = true;
 8001936:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <trip_mainPage+0x90>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
		longpress = false;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <trip_mainPage+0x8c>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 8001942:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <trip_mainPage+0x94>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <trip_mainPage+0x98>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
	trip_reset();
 800194e:	f002 ff63 	bl	8004818 <trip_reset>

	if (forward == true) {
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <trip_mainPage+0x9c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00f      	beq.n	800197a <trip_mainPage+0x5e>

		currentPage = after_charge;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <trip_mainPage+0xa0>)
 800195c:	2202      	movs	r2, #2
 800195e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <trip_mainPage+0x88>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <trip_mainPage+0x9c>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
		backward = false;
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <trip_mainPage+0xa4>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <trip_mainPage+0xa8>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		return;
 8001978:	e013      	b.n	80019a2 <trip_mainPage+0x86>
	}

	if (backward == true) {
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <trip_mainPage+0xa4>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00f      	beq.n	80019a2 <trip_mainPage+0x86>

		currentPage = front;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <trip_mainPage+0xa0>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <trip_mainPage+0x88>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
		forward = false;
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <trip_mainPage+0x9c>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <trip_mainPage+0xa4>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <trip_mainPage+0xa8>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
		return;
 80019a0:	bf00      	nop
	}
}
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000014 	.word	0x20000014
 80019a8:	20000388 	.word	0x20000388
 80019ac:	20000387 	.word	0x20000387
 80019b0:	20000433 	.word	0x20000433
 80019b4:	20000434 	.word	0x20000434
 80019b8:	20000384 	.word	0x20000384
 80019bc:	200003f6 	.word	0x200003f6
 80019c0:	20000385 	.word	0x20000385
 80019c4:	200003fd 	.word	0x200003fd

080019c8 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <after_charge_mainPage+0x74>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <after_charge_mainPage+0x12>
		page_entry = false;
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <after_charge_mainPage+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <after_charge_mainPage+0x78>)
 80019dc:	2202      	movs	r2, #2
 80019de:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <after_charge_mainPage+0x7c>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <after_charge_mainPage+0x80>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00f      	beq.n	8001a0e <after_charge_mainPage+0x46>

		currentPage = info;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <after_charge_mainPage+0x84>)
 80019f0:	2203      	movs	r2, #3
 80019f2:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <after_charge_mainPage+0x74>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
		forward = false;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <after_charge_mainPage+0x80>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <after_charge_mainPage+0x88>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <after_charge_mainPage+0x8c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
		return;
 8001a0c:	e013      	b.n	8001a36 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <after_charge_mainPage+0x88>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <after_charge_mainPage+0x6e>
		currentPage = trip;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <after_charge_mainPage+0x84>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <after_charge_mainPage+0x74>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <after_charge_mainPage+0x80>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a28:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <after_charge_mainPage+0x88>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <after_charge_mainPage+0x8c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
		return;
 8001a34:	bf00      	nop
	}
}
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000014 	.word	0x20000014
 8001a40:	20000433 	.word	0x20000433
 8001a44:	20000434 	.word	0x20000434
 8001a48:	20000384 	.word	0x20000384
 8001a4c:	200003f6 	.word	0x200003f6
 8001a50:	20000385 	.word	0x20000385
 8001a54:	200003fd 	.word	0x200003fd

08001a58 <info_mainPage>:

void info_mainPage(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001a5c:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <info_mainPage+0x204>)
 8001a5e:	2203      	movs	r2, #3
 8001a60:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001a62:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <info_mainPage+0x208>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001a68:	4b7e      	ldr	r3, [pc, #504]	; (8001c64 <info_mainPage+0x20c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <info_mainPage+0x36>
		if (okay == true) {
 8001a76:	4b7c      	ldr	r3, [pc, #496]	; (8001c68 <info_mainPage+0x210>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80c4 	beq.w	8001c08 <info_mainPage+0x1b0>
			inInfoBat = true;
 8001a80:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <info_mainPage+0x20c>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001a86:	4b78      	ldr	r3, [pc, #480]	; (8001c68 <info_mainPage+0x210>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	e0bc      	b.n	8001c08 <info_mainPage+0x1b0>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 8001a8e:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <info_mainPage+0x214>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001a96:	4b76      	ldr	r3, [pc, #472]	; (8001c70 <info_mainPage+0x218>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001a9c:	4b75      	ldr	r3, [pc, #468]	; (8001c74 <info_mainPage+0x21c>)
 8001a9e:	2206      	movs	r2, #6
 8001aa0:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 8001aa2:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <info_mainPage+0x220>)
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001aa8:	4b70      	ldr	r3, [pc, #448]	; (8001c6c <info_mainPage+0x214>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 8001aae:	2004      	movs	r0, #4
 8001ab0:	f001 fbee 	bl	8003290 <vehicleInfo_UI>
 8001ab4:	e005      	b.n	8001ac2 <info_mainPage+0x6a>
		} else {
			vehicleInfo_UI(currentMenu);
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <info_mainPage+0x218>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fbe7 	bl	8003290 <vehicleInfo_UI>
		}
		if (forward == true) {
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	; (8001c7c <info_mainPage+0x224>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d044      	beq.n	8001b54 <info_mainPage+0xfc>

			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001aca:	4b69      	ldr	r3, [pc, #420]	; (8001c70 <info_mainPage+0x218>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b06      	cmp	r3, #6
 8001ad2:	d111      	bne.n	8001af8 <info_mainPage+0xa0>
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <info_mainPage+0x21c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b05      	cmp	r3, #5
 8001adc:	d10c      	bne.n	8001af8 <info_mainPage+0xa0>
				currentMenu = infobat;
 8001ade:	4b64      	ldr	r3, [pc, #400]	; (8001c70 <info_mainPage+0x218>)
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001ae4:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <info_mainPage+0x21c>)
 8001ae6:	2206      	movs	r2, #6
 8001ae8:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001aea:	4b63      	ldr	r3, [pc, #396]	; (8001c78 <info_mainPage+0x220>)
 8001aec:	2205      	movs	r2, #5
 8001aee:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001af0:	4b62      	ldr	r3, [pc, #392]	; (8001c7c <info_mainPage+0x224>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
				return;
 8001af6:	e0b0      	b.n	8001c5a <info_mainPage+0x202>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 8001af8:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <info_mainPage+0x218>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d111      	bne.n	8001b26 <info_mainPage+0xce>
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <info_mainPage+0x21c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d10c      	bne.n	8001b26 <info_mainPage+0xce>
				currentMenu = infomot;
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <info_mainPage+0x218>)
 8001b0e:	2205      	movs	r2, #5
 8001b10:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001b12:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <info_mainPage+0x21c>)
 8001b14:	2204      	movs	r2, #4
 8001b16:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <info_mainPage+0x220>)
 8001b1a:	2206      	movs	r2, #6
 8001b1c:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001b1e:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <info_mainPage+0x224>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
				return;
 8001b24:	e099      	b.n	8001c5a <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 8001b26:	4b52      	ldr	r3, [pc, #328]	; (8001c70 <info_mainPage+0x218>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d111      	bne.n	8001b54 <info_mainPage+0xfc>
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <info_mainPage+0x21c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d10c      	bne.n	8001b54 <info_mainPage+0xfc>
				currentMenu = infoinv;
 8001b3a:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <info_mainPage+0x218>)
 8001b3c:	2206      	movs	r2, #6
 8001b3e:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <info_mainPage+0x21c>)
 8001b42:	2205      	movs	r2, #5
 8001b44:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <info_mainPage+0x220>)
 8001b48:	2204      	movs	r2, #4
 8001b4a:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <info_mainPage+0x224>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
				return;
 8001b52:	e082      	b.n	8001c5a <info_mainPage+0x202>
			}

		}

		if (backward == true) {
 8001b54:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <info_mainPage+0x228>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d044      	beq.n	8001be6 <info_mainPage+0x18e>
			//currentMenu--;
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001b5c:	4b44      	ldr	r3, [pc, #272]	; (8001c70 <info_mainPage+0x218>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d111      	bne.n	8001b8a <info_mainPage+0x132>
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <info_mainPage+0x220>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d10c      	bne.n	8001b8a <info_mainPage+0x132>
				currentMenu = infoinv;
 8001b70:	4b3f      	ldr	r3, [pc, #252]	; (8001c70 <info_mainPage+0x218>)
 8001b72:	2206      	movs	r2, #6
 8001b74:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001b76:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <info_mainPage+0x220>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001b7c:	4b3d      	ldr	r3, [pc, #244]	; (8001c74 <info_mainPage+0x21c>)
 8001b7e:	2205      	movs	r2, #5
 8001b80:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <info_mainPage+0x228>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
				return;
 8001b88:	e067      	b.n	8001c5a <info_mainPage+0x202>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <info_mainPage+0x218>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b06      	cmp	r3, #6
 8001b92:	d111      	bne.n	8001bb8 <info_mainPage+0x160>
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <info_mainPage+0x220>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d10c      	bne.n	8001bb8 <info_mainPage+0x160>
				currentMenu = infomot;
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <info_mainPage+0x218>)
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <info_mainPage+0x220>)
 8001ba6:	2206      	movs	r2, #6
 8001ba8:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001baa:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <info_mainPage+0x21c>)
 8001bac:	2204      	movs	r2, #4
 8001bae:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <info_mainPage+0x228>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
				return;
 8001bb6:	e050      	b.n	8001c5a <info_mainPage+0x202>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <info_mainPage+0x218>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d111      	bne.n	8001be6 <info_mainPage+0x18e>
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <info_mainPage+0x220>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b06      	cmp	r3, #6
 8001bca:	d10c      	bne.n	8001be6 <info_mainPage+0x18e>
				currentMenu = infobat;
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <info_mainPage+0x218>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <info_mainPage+0x220>)
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <info_mainPage+0x21c>)
 8001bda:	2206      	movs	r2, #6
 8001bdc:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <info_mainPage+0x228>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
				return;
 8001be4:	e039      	b.n	8001c5a <info_mainPage+0x202>
			}

		}

		if (back == true) {
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <info_mainPage+0x22c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d034      	beq.n	8001c58 <info_mainPage+0x200>
			page_entry = true;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <info_mainPage+0x214>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <info_mainPage+0x20c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
			back = false;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <info_mainPage+0x22c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <info_mainPage+0x230>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001c06:	e027      	b.n	8001c58 <info_mainPage+0x200>
	}

	if (forward == true) {
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <info_mainPage+0x224>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00f      	beq.n	8001c30 <info_mainPage+0x1d8>
		currentPage = settings;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <info_mainPage+0x234>)
 8001c12:	2207      	movs	r2, #7
 8001c14:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <info_mainPage+0x214>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <info_mainPage+0x224>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001c22:	4b17      	ldr	r3, [pc, #92]	; (8001c80 <info_mainPage+0x228>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <info_mainPage+0x230>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
		return;
 8001c2e:	e014      	b.n	8001c5a <info_mainPage+0x202>
	}

	if (backward == true) {
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <info_mainPage+0x228>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <info_mainPage+0x202>
		currentPage = after_charge;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <info_mainPage+0x234>)
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <info_mainPage+0x214>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <info_mainPage+0x224>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <info_mainPage+0x228>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <info_mainPage+0x230>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
		return;
 8001c56:	e000      	b.n	8001c5a <info_mainPage+0x202>
		return;
 8001c58:	bf00      	nop
	}
}
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000433 	.word	0x20000433
 8001c60:	20000434 	.word	0x20000434
 8001c64:	2000038c 	.word	0x2000038c
 8001c68:	20000386 	.word	0x20000386
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	2000000f 	.word	0x2000000f
 8001c74:	20000010 	.word	0x20000010
 8001c78:	20000011 	.word	0x20000011
 8001c7c:	20000384 	.word	0x20000384
 8001c80:	20000385 	.word	0x20000385
 8001c84:	2000038a 	.word	0x2000038a
 8001c88:	200003fd 	.word	0x200003fd
 8001c8c:	200003f6 	.word	0x200003f6

08001c90 <settings_mainPage>:

void settings_mainPage(void) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

	//selection_UI(front);
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001c94:	4b94      	ldr	r3, [pc, #592]	; (8001ee8 <settings_mainPage+0x258>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001c9a:	4b94      	ldr	r3, [pc, #592]	; (8001eec <settings_mainPage+0x25c>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]

	if (!(inSettings)) {
 8001ca0:	4b93      	ldr	r3, [pc, #588]	; (8001ef0 <settings_mainPage+0x260>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00e      	beq.n	8001ccc <settings_mainPage+0x3c>
		selection_UI(front);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 fc32 	bl	8003518 <selection_UI>
		if (okay == true) {
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <settings_mainPage+0x264>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8161 	beq.w	8001f80 <settings_mainPage+0x2f0>
			inSettings = true;
 8001cbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <settings_mainPage+0x260>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001cc4:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <settings_mainPage+0x264>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e159      	b.n	8001f80 <settings_mainPage+0x2f0>
		}
	} else {
		if (page_entry == true) {
 8001ccc:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <settings_mainPage+0x268>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00e      	beq.n	8001cf2 <settings_mainPage+0x62>
			currentMenu = vehicleMenu;
 8001cd4:	4b89      	ldr	r3, [pc, #548]	; (8001efc <settings_mainPage+0x26c>)
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	701a      	strb	r2, [r3, #0]
			previousMenuForward = errorsMenu;
 8001cda:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <settings_mainPage+0x270>)
 8001cdc:	220b      	movs	r2, #11
 8001cde:	701a      	strb	r2, [r3, #0]
			previousMenuBack = systemMenu;
 8001ce0:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <settings_mainPage+0x274>)
 8001ce2:	2209      	movs	r2, #9
 8001ce4:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <settings_mainPage+0x278>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001cec:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <settings_mainPage+0x268>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
		}
		if(menuCounter>2)
 8001cf2:	4b86      	ldr	r3, [pc, #536]	; (8001f0c <settings_mainPage+0x27c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d90f      	bls.n	8001d1a <settings_mainPage+0x8a>
		{
			if (_menuChanged) {
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <settings_mainPage+0x278>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <settings_mainPage+0x84>
				_menuChanged = false;
 8001d02:	4b81      	ldr	r3, [pc, #516]	; (8001f08 <settings_mainPage+0x278>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
				selection_UI(currentMenu);
 8001d08:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <settings_mainPage+0x26c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 fc02 	bl	8003518 <selection_UI>
			}
			menuCounter = 0;
 8001d14:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <settings_mainPage+0x27c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
		}


		if (!(menuAccess)) {
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	; (8001f10 <settings_mainPage+0x280>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	f083 0301 	eor.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 810c 	beq.w	8001f42 <settings_mainPage+0x2b2>
			menuCounter++;
 8001d2a:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <settings_mainPage+0x27c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4b76      	ldr	r3, [pc, #472]	; (8001f0c <settings_mainPage+0x27c>)
 8001d34:	701a      	strb	r2, [r3, #0]
			if (forward == true) {
 8001d36:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <settings_mainPage+0x284>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d067      	beq.n	8001e0e <settings_mainPage+0x17e>
//				currentMenu--;
//				if (currentMenu <= 7) {
//					currentMenu = errorsMenu;
//				}
				if (currentMenu == errorsMenu && previousMenuBack == vehicleMenu) {
 8001d3e:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <settings_mainPage+0x26c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b0b      	cmp	r3, #11
 8001d46:	d114      	bne.n	8001d72 <settings_mainPage+0xe2>
 8001d48:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <settings_mainPage+0x274>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d10f      	bne.n	8001d72 <settings_mainPage+0xe2>
					currentMenu = bluetoothMenu;
 8001d52:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <settings_mainPage+0x26c>)
 8001d54:	220a      	movs	r2, #10
 8001d56:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001d58:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <settings_mainPage+0x270>)
 8001d5a:	2209      	movs	r2, #9
 8001d5c:	701a      	strb	r2, [r3, #0]
					previousMenuBack = errorsMenu;
 8001d5e:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <settings_mainPage+0x274>)
 8001d60:	220b      	movs	r2, #11
 8001d62:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001d64:	4b68      	ldr	r3, [pc, #416]	; (8001f08 <settings_mainPage+0x278>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001d6a:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <settings_mainPage+0x284>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
					return;
 8001d70:	e12f      	b.n	8001fd2 <settings_mainPage+0x342>
				}
				if (currentMenu == vehicleMenu && previousMenuBack == systemMenu) {
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <settings_mainPage+0x26c>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d114      	bne.n	8001da6 <settings_mainPage+0x116>
 8001d7c:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <settings_mainPage+0x274>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b09      	cmp	r3, #9
 8001d84:	d10f      	bne.n	8001da6 <settings_mainPage+0x116>
					currentMenu = errorsMenu;
 8001d86:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <settings_mainPage+0x26c>)
 8001d88:	220b      	movs	r2, #11
 8001d8a:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001d8c:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <settings_mainPage+0x270>)
 8001d8e:	220a      	movs	r2, #10
 8001d90:	701a      	strb	r2, [r3, #0]
					previousMenuBack = vehicleMenu;
 8001d92:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <settings_mainPage+0x274>)
 8001d94:	2208      	movs	r2, #8
 8001d96:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001d98:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <settings_mainPage+0x278>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <settings_mainPage+0x284>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
					return;
 8001da4:	e115      	b.n	8001fd2 <settings_mainPage+0x342>
				}
				if (currentMenu == systemMenu && previousMenuBack == bluetoothMenu) {
 8001da6:	4b55      	ldr	r3, [pc, #340]	; (8001efc <settings_mainPage+0x26c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d114      	bne.n	8001dda <settings_mainPage+0x14a>
 8001db0:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <settings_mainPage+0x274>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b0a      	cmp	r3, #10
 8001db8:	d10f      	bne.n	8001dda <settings_mainPage+0x14a>
					currentMenu = vehicleMenu;
 8001dba:	4b50      	ldr	r3, [pc, #320]	; (8001efc <settings_mainPage+0x26c>)
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	; (8001f00 <settings_mainPage+0x270>)
 8001dc2:	220b      	movs	r2, #11
 8001dc4:	701a      	strb	r2, [r3, #0]
					previousMenuBack = systemMenu;
 8001dc6:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <settings_mainPage+0x274>)
 8001dc8:	2209      	movs	r2, #9
 8001dca:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <settings_mainPage+0x278>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001dd2:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <settings_mainPage+0x284>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
					return;
 8001dd8:	e0fb      	b.n	8001fd2 <settings_mainPage+0x342>
				}
				if (currentMenu == bluetoothMenu && previousMenuBack == errorsMenu) {
 8001dda:	4b48      	ldr	r3, [pc, #288]	; (8001efc <settings_mainPage+0x26c>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b0a      	cmp	r3, #10
 8001de2:	d114      	bne.n	8001e0e <settings_mainPage+0x17e>
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <settings_mainPage+0x274>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b0b      	cmp	r3, #11
 8001dec:	d10f      	bne.n	8001e0e <settings_mainPage+0x17e>
					currentMenu = systemMenu;
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <settings_mainPage+0x26c>)
 8001df0:	2209      	movs	r2, #9
 8001df2:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001df4:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <settings_mainPage+0x270>)
 8001df6:	2208      	movs	r2, #8
 8001df8:	701a      	strb	r2, [r3, #0]
					previousMenuBack = bluetoothMenu;
 8001dfa:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <settings_mainPage+0x274>)
 8001dfc:	220a      	movs	r2, #10
 8001dfe:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e00:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <settings_mainPage+0x278>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <settings_mainPage+0x284>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
					return;
 8001e0c:	e0e1      	b.n	8001fd2 <settings_mainPage+0x342>
				}
			}

			if (backward == true) {
 8001e0e:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <settings_mainPage+0x288>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8082 	beq.w	8001f1c <settings_mainPage+0x28c>
//				currentMenu++;
//				if (currentMenu >= 12) {
//					currentMenu = vehicleMenu;
//				}
				if (currentMenu == vehicleMenu && previousMenuForward == errorsMenu) {
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <settings_mainPage+0x26c>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	d114      	bne.n	8001e4c <settings_mainPage+0x1bc>
 8001e22:	4b37      	ldr	r3, [pc, #220]	; (8001f00 <settings_mainPage+0x270>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b0b      	cmp	r3, #11
 8001e2a:	d10f      	bne.n	8001e4c <settings_mainPage+0x1bc>
					currentMenu = systemMenu;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <settings_mainPage+0x26c>)
 8001e2e:	2209      	movs	r2, #9
 8001e30:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <settings_mainPage+0x270>)
 8001e34:	2208      	movs	r2, #8
 8001e36:	701a      	strb	r2, [r3, #0]

					previousMenuBack = bluetoothMenu;
 8001e38:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <settings_mainPage+0x274>)
 8001e3a:	220a      	movs	r2, #10
 8001e3c:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <settings_mainPage+0x278>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001e44:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <settings_mainPage+0x288>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
					return;
 8001e4a:	e0c2      	b.n	8001fd2 <settings_mainPage+0x342>
				}
				if (currentMenu == errorsMenu && previousMenuForward == bluetoothMenu) {
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <settings_mainPage+0x26c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b0b      	cmp	r3, #11
 8001e54:	d114      	bne.n	8001e80 <settings_mainPage+0x1f0>
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <settings_mainPage+0x270>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	d10f      	bne.n	8001e80 <settings_mainPage+0x1f0>
					currentMenu = vehicleMenu;
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <settings_mainPage+0x26c>)
 8001e62:	2208      	movs	r2, #8
 8001e64:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <settings_mainPage+0x270>)
 8001e68:	220b      	movs	r2, #11
 8001e6a:	701a      	strb	r2, [r3, #0]

					previousMenuBack = systemMenu;
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <settings_mainPage+0x274>)
 8001e6e:	2209      	movs	r2, #9
 8001e70:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <settings_mainPage+0x278>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <settings_mainPage+0x288>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
					return;
 8001e7e:	e0a8      	b.n	8001fd2 <settings_mainPage+0x342>
				}
				if (currentMenu == bluetoothMenu && previousMenuForward == systemMenu) {
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <settings_mainPage+0x26c>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b0a      	cmp	r3, #10
 8001e88:	d114      	bne.n	8001eb4 <settings_mainPage+0x224>
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <settings_mainPage+0x270>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d10f      	bne.n	8001eb4 <settings_mainPage+0x224>
					currentMenu = errorsMenu;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <settings_mainPage+0x26c>)
 8001e96:	220b      	movs	r2, #11
 8001e98:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <settings_mainPage+0x270>)
 8001e9c:	220a      	movs	r2, #10
 8001e9e:	701a      	strb	r2, [r3, #0]

					previousMenuBack = vehicleMenu;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <settings_mainPage+0x274>)
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <settings_mainPage+0x278>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <settings_mainPage+0x288>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
					return;
 8001eb2:	e08e      	b.n	8001fd2 <settings_mainPage+0x342>
				}
				if (currentMenu == systemMenu && previousMenuForward == vehicleMenu) {
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <settings_mainPage+0x26c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d12e      	bne.n	8001f1c <settings_mainPage+0x28c>
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <settings_mainPage+0x270>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d129      	bne.n	8001f1c <settings_mainPage+0x28c>
					currentMenu = bluetoothMenu;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <settings_mainPage+0x26c>)
 8001eca:	220a      	movs	r2, #10
 8001ecc:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <settings_mainPage+0x270>)
 8001ed0:	2209      	movs	r2, #9
 8001ed2:	701a      	strb	r2, [r3, #0]

					previousMenuBack = errorsMenu;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <settings_mainPage+0x274>)
 8001ed6:	220b      	movs	r2, #11
 8001ed8:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <settings_mainPage+0x278>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <settings_mainPage+0x288>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
					return;
 8001ee6:	e074      	b.n	8001fd2 <settings_mainPage+0x342>
 8001ee8:	20000433 	.word	0x20000433
 8001eec:	20000434 	.word	0x20000434
 8001ef0:	2000038b 	.word	0x2000038b
 8001ef4:	20000386 	.word	0x20000386
 8001ef8:	20000014 	.word	0x20000014
 8001efc:	2000000f 	.word	0x2000000f
 8001f00:	20000011 	.word	0x20000011
 8001f04:	20000010 	.word	0x20000010
 8001f08:	20000428 	.word	0x20000428
 8001f0c:	20000429 	.word	0x20000429
 8001f10:	20000400 	.word	0x20000400
 8001f14:	20000384 	.word	0x20000384
 8001f18:	20000385 	.word	0x20000385
				}

			}
			if (back == true) {
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <settings_mainPage+0x344>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00e      	beq.n	8001f42 <settings_mainPage+0x2b2>
				page_entry = true;
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <settings_mainPage+0x348>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
				inSettings = false;
 8001f2a:	4b2c      	ldr	r3, [pc, #176]	; (8001fdc <settings_mainPage+0x34c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
				selection_UI(front);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f001 faf1 	bl	8003518 <selection_UI>
				_menupage = 0;
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <settings_mainPage+0x350>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
				back = false;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <settings_mainPage+0x344>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
			}


		}
		switch (currentMenu) {
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <settings_mainPage+0x354>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	3b08      	subs	r3, #8
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d816      	bhi.n	8001f7c <settings_mainPage+0x2ec>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <settings_mainPage+0x2c4>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f6b 	.word	0x08001f6b
 8001f5c:	08001f71 	.word	0x08001f71
 8001f60:	08001f77 	.word	0x08001f77
		case vehicleMenu:
			vehicle_page();
 8001f64:	f000 f848 	bl	8001ff8 <vehicle_page>
			break;
 8001f68:	e009      	b.n	8001f7e <settings_mainPage+0x2ee>
		case systemMenu:
			system_page();
 8001f6a:	f000 f891 	bl	8002090 <system_page>
			break;
 8001f6e:	e006      	b.n	8001f7e <settings_mainPage+0x2ee>
		case bluetoothMenu:
			bluetooth_page();
 8001f70:	f000 fa0c 	bl	800238c <bluetooth_page>
			break;
 8001f74:	e003      	b.n	8001f7e <settings_mainPage+0x2ee>
		case errorsMenu:
			errors_page();
 8001f76:	f000 fa55 	bl	8002424 <errors_page>
			break;
 8001f7a:	e000      	b.n	8001f7e <settings_mainPage+0x2ee>
		default:
			break;
 8001f7c:	bf00      	nop
		}


		return;
 8001f7e:	e028      	b.n	8001fd2 <settings_mainPage+0x342>
	}

	if (forward == true) {
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <settings_mainPage+0x358>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d011      	beq.n	8001fac <settings_mainPage+0x31c>
		currentPage = front;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <settings_mainPage+0x35c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <settings_mainPage+0x348>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <settings_mainPage+0x358>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <settings_mainPage+0x350>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <settings_mainPage+0x360>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <settings_mainPage+0x364>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
	}

	if (backward == true) {
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <settings_mainPage+0x364>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <settings_mainPage+0x342>
		currentPage = info;
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <settings_mainPage+0x35c>)
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <settings_mainPage+0x348>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <settings_mainPage+0x358>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <settings_mainPage+0x350>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <settings_mainPage+0x364>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
	}

}
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000038a 	.word	0x2000038a
 8001fd8:	20000014 	.word	0x20000014
 8001fdc:	2000038b 	.word	0x2000038b
 8001fe0:	200003fd 	.word	0x200003fd
 8001fe4:	2000000f 	.word	0x2000000f
 8001fe8:	20000384 	.word	0x20000384
 8001fec:	200003f6 	.word	0x200003f6
 8001ff0:	20000434 	.word	0x20000434
 8001ff4:	20000385 	.word	0x20000385

08001ff8 <vehicle_page>:

void vehicle_page(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <vehicle_page+0x7c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d010      	beq.n	800202c <vehicle_page+0x34>
		if (okay == true) {
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <vehicle_page+0x80>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02e      	beq.n	8002070 <vehicle_page+0x78>
			menuAccess = true;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <vehicle_page+0x84>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <vehicle_page+0x7c>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <vehicle_page+0x88>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <vehicle_page+0x80>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 800202a:	e021      	b.n	8002070 <vehicle_page+0x78>
		if (subMenuCounter>2) {
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <vehicle_page+0x8c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d909      	bls.n	8002048 <vehicle_page+0x50>
			if (inTheMenu) {
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <vehicle_page+0x88>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <vehicle_page+0x4a>
				inTheMenu = false;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <vehicle_page+0x88>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <vehicle_page+0x8c>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
		settings_UI(vehicleMenu,10);
 8002048:	210a      	movs	r1, #10
 800204a:	2008      	movs	r0, #8
 800204c:	f001 f99a 	bl	8003384 <settings_UI>
		if (back == true) {
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <vehicle_page+0x90>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <vehicle_page+0x78>
			menuAccess = false;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <vehicle_page+0x84>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <vehicle_page+0x7c>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <vehicle_page+0x94>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
			back = false;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <vehicle_page+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000401 	.word	0x20000401
 8002078:	20000386 	.word	0x20000386
 800207c:	20000400 	.word	0x20000400
 8002080:	20000409 	.word	0x20000409
 8002084:	2000042a 	.word	0x2000042a
 8002088:	2000038a 	.word	0x2000038a
 800208c:	20000428 	.word	0x20000428

08002090 <system_page>:
void system_page(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 8002094:	4b66      	ldr	r3, [pc, #408]	; (8002230 <system_page+0x1a0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <system_page+0x48>
		if (okay == true) {
 80020a2:	4b64      	ldr	r3, [pc, #400]	; (8002234 <system_page+0x1a4>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8142 	beq.w	8002330 <system_page+0x2a0>
			menuAccess = true;
 80020ac:	4b62      	ldr	r3, [pc, #392]	; (8002238 <system_page+0x1a8>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <system_page+0x1a0>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80020b8:	4b60      	ldr	r3, [pc, #384]	; (800223c <system_page+0x1ac>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
			okay = false;
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <system_page+0x1a4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
			currentSubMenu = 0;
 80020c4:	4b5e      	ldr	r3, [pc, #376]	; (8002240 <system_page+0x1b0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
			previousSubMenuBack = 1;
 80020ca:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <system_page+0x1b4>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
			previousSubMenuForward = 1;
 80020d0:	4b5d      	ldr	r3, [pc, #372]	; (8002248 <system_page+0x1b8>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	e12b      	b.n	8002330 <system_page+0x2a0>
		}
	} else {
		if (subMenuCounter>2) {
 80020d8:	4b5c      	ldr	r3, [pc, #368]	; (800224c <system_page+0x1bc>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d909      	bls.n	80020f4 <system_page+0x64>
			if (inTheMenu) {
 80020e0:	4b56      	ldr	r3, [pc, #344]	; (800223c <system_page+0x1ac>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <system_page+0x5e>
				inTheMenu = false;
 80020e8:	4b54      	ldr	r3, [pc, #336]	; (800223c <system_page+0x1ac>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
				//settings_UI(systemMenu);
			}
			subMenuCounter = 0;
 80020ee:	4b57      	ldr	r3, [pc, #348]	; (800224c <system_page+0x1bc>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(systemMenu,currentSubMenu);
 80020f4:	4b52      	ldr	r3, [pc, #328]	; (8002240 <system_page+0x1b0>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4619      	mov	r1, r3
 80020fc:	2009      	movs	r0, #9
 80020fe:	f001 f941 	bl	8003384 <settings_UI>
		//Time Settings Menu
		if (!inTimeSettings) {
 8002102:	4b53      	ldr	r3, [pc, #332]	; (8002250 <system_page+0x1c0>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d06f      	beq.n	80021f0 <system_page+0x160>
			if (forward == true) {
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <system_page+0x1c4>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d02d      	beq.n	8002174 <system_page+0xe4>

				if (currentSubMenu == 0 && previousSubMenuBack == 1) {
 8002118:	4b49      	ldr	r3, [pc, #292]	; (8002240 <system_page+0x1b0>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d111      	bne.n	8002146 <system_page+0xb6>
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <system_page+0x1b4>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10c      	bne.n	8002146 <system_page+0xb6>
					currentSubMenu = 1;
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <system_page+0x1b0>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8002132:	4b45      	ldr	r3, [pc, #276]	; (8002248 <system_page+0x1b8>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 0;
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <system_page+0x1b4>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 800213e:	4b45      	ldr	r3, [pc, #276]	; (8002254 <system_page+0x1c4>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
					return;
 8002144:	e104      	b.n	8002350 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuBack == 0) {
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <system_page+0x1b0>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d111      	bne.n	8002174 <system_page+0xe4>
 8002150:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <system_page+0x1b4>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <system_page+0xe4>
					currentSubMenu = 0;
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <system_page+0x1b0>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <system_page+0x1b8>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 1;
 8002166:	4b37      	ldr	r3, [pc, #220]	; (8002244 <system_page+0x1b4>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 800216c:	4b39      	ldr	r3, [pc, #228]	; (8002254 <system_page+0x1c4>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
					return;
 8002172:	e0ed      	b.n	8002350 <system_page+0x2c0>
				}
			}
			if (backward == true) {
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <system_page+0x1c8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02d      	beq.n	80021d8 <system_page+0x148>
				if (currentSubMenu == 0 && previousSubMenuForward == 1) {
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <system_page+0x1b0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d111      	bne.n	80021aa <system_page+0x11a>
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <system_page+0x1b8>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10c      	bne.n	80021aa <system_page+0x11a>
					currentSubMenu = 1;
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <system_page+0x1b0>)
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <system_page+0x1b8>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 0;
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <system_page+0x1b4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <system_page+0x1c8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
					return;
 80021a8:	e0d2      	b.n	8002350 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuForward == 0) {
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <system_page+0x1b0>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d111      	bne.n	80021d8 <system_page+0x148>
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <system_page+0x1b8>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <system_page+0x148>
					currentSubMenu = 0;
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <system_page+0x1b0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <system_page+0x1b8>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 1;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <system_page+0x1b4>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <system_page+0x1c8>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
					return;
 80021d6:	e0bb      	b.n	8002350 <system_page+0x2c0>
				}

			}
			if (okay) {
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <system_page+0x1a4>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a7 	beq.w	8002330 <system_page+0x2a0>
				inTimeSettings = true;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <system_page+0x1c0>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
				okay = false;
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <system_page+0x1a4>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e09f      	b.n	8002330 <system_page+0x2a0>
			}

		}
		else
		{
			if (okay) {
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <system_page+0x1a4>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d033      	beq.n	8002260 <system_page+0x1d0>
				okay = false;
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <system_page+0x1a4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <system_page+0x1cc>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d107      	bne.n	8002216 <system_page+0x186>
					currentSubMenu = vpCounter;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <system_page+0x1cc>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <system_page+0x1b0>)
 800220c:	701a      	strb	r2, [r3, #0]
					vpCounter = 4;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <system_page+0x1cc>)
 8002210:	2204      	movs	r2, #4
 8002212:	701a      	strb	r2, [r3, #0]
					return;
 8002214:	e09c      	b.n	8002350 <system_page+0x2c0>
				}
				if (vpCounter == 4) {
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <system_page+0x1cc>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d120      	bne.n	8002260 <system_page+0x1d0>
					currentSubMenu = vpCounter;
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <system_page+0x1cc>)
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <system_page+0x1b0>)
 8002224:	701a      	strb	r2, [r3, #0]
					vpCounter = 3;
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <system_page+0x1cc>)
 8002228:	2203      	movs	r2, #3
 800222a:	701a      	strb	r2, [r3, #0]
					return;
 800222c:	e090      	b.n	8002350 <system_page+0x2c0>
 800222e:	bf00      	nop
 8002230:	20000402 	.word	0x20000402
 8002234:	20000386 	.word	0x20000386
 8002238:	20000400 	.word	0x20000400
 800223c:	20000409 	.word	0x20000409
 8002240:	200003fa 	.word	0x200003fa
 8002244:	200003fb 	.word	0x200003fb
 8002248:	200003fc 	.word	0x200003fc
 800224c:	2000042a 	.word	0x2000042a
 8002250:	20000403 	.word	0x20000403
 8002254:	20000384 	.word	0x20000384
 8002258:	20000385 	.word	0x20000385
 800225c:	20000015 	.word	0x20000015
				}
			}
			if (forward) {
 8002260:	4b3c      	ldr	r3, [pc, #240]	; (8002354 <system_page+0x2c4>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d016      	beq.n	8002296 <system_page+0x206>
			forward = false;
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <system_page+0x2c4>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 800226e:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <system_page+0x2c8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d105      	bne.n	8002282 <system_page+0x1f2>
					timerSetValueH++;
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <system_page+0x2cc>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b37      	ldr	r3, [pc, #220]	; (800235c <system_page+0x2cc>)
 8002280:	701a      	strb	r2, [r3, #0]
				}
				if (vpCounter == 4) {
 8002282:	4b35      	ldr	r3, [pc, #212]	; (8002358 <system_page+0x2c8>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d105      	bne.n	8002296 <system_page+0x206>
					timerSetValueMin++;
 800228a:	4b35      	ldr	r3, [pc, #212]	; (8002360 <system_page+0x2d0>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <system_page+0x2d0>)
 8002294:	701a      	strb	r2, [r3, #0]
				}
			}

			if (backward) {
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <system_page+0x2d4>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d024      	beq.n	80022e8 <system_page+0x258>
			backward = false;
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <system_page+0x2d4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
			if (vpCounter == 3) {
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <system_page+0x2c8>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d105      	bne.n	80022b8 <system_page+0x228>
				timerSetValueH--;
 80022ac:	4b2b      	ldr	r3, [pc, #172]	; (800235c <system_page+0x2cc>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <system_page+0x2cc>)
 80022b6:	701a      	strb	r2, [r3, #0]
			}
			if (vpCounter == 4) {
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <system_page+0x2c8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d105      	bne.n	80022cc <system_page+0x23c>
				timerSetValueMin--;
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <system_page+0x2d0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <system_page+0x2d0>)
 80022ca:	701a      	strb	r2, [r3, #0]
			}

				if (timerSetValueH == 0) {
 80022cc:	4b23      	ldr	r3, [pc, #140]	; (800235c <system_page+0x2cc>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <system_page+0x24a>
					timerSetValueH = 23;
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <system_page+0x2cc>)
 80022d6:	2217      	movs	r2, #23
 80022d8:	701a      	strb	r2, [r3, #0]
				}
				if (timerSetValueMin == 0) {
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <system_page+0x2d0>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <system_page+0x258>
					timerSetValueMin = 59;
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <system_page+0x2d0>)
 80022e4:	223b      	movs	r2, #59	; 0x3b
 80022e6:	701a      	strb	r2, [r3, #0]
				}
			}

			if (timerSetValueH > 24) {
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <system_page+0x2cc>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b18      	cmp	r3, #24
 80022ee:	d902      	bls.n	80022f6 <system_page+0x266>
				timerSetValueH = 0;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <system_page+0x2cc>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
			}

			if (timerSetValueMin > 60) {
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <system_page+0x2d0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b3c      	cmp	r3, #60	; 0x3c
 80022fc:	d902      	bls.n	8002304 <system_page+0x274>
				timerSetValueMin = 0;
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <system_page+0x2d0>)
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
			}


			if (back) {
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <system_page+0x2d8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d011      	beq.n	8002330 <system_page+0x2a0>
				inTimeSettings = false;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <system_page+0x2dc>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
				//Trasmit time
				currentSubMenu = 0;
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <system_page+0x2e0>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
				previousSubMenuForward = 1;
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <system_page+0x2e4>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
				previousSubMenuBack = 1;
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <system_page+0x2e8>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
				timeChanged = true;
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <system_page+0x2ec>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
				back = false;
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <system_page+0x2d8>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
//		} else {
//
//		}
	}

	if (back == true) {
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <system_page+0x2d8>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00b      	beq.n	8002350 <system_page+0x2c0>
		menuAccess = false;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <system_page+0x2f0>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <system_page+0x2f4>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
		_menuChanged = true;
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <system_page+0x2f8>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
		back = false;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <system_page+0x2d8>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]

	}
}
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000384 	.word	0x20000384
 8002358:	20000015 	.word	0x20000015
 800235c:	20000404 	.word	0x20000404
 8002360:	20000405 	.word	0x20000405
 8002364:	20000385 	.word	0x20000385
 8002368:	2000038a 	.word	0x2000038a
 800236c:	20000403 	.word	0x20000403
 8002370:	200003fa 	.word	0x200003fa
 8002374:	200003fc 	.word	0x200003fc
 8002378:	200003fb 	.word	0x200003fb
 800237c:	20000406 	.word	0x20000406
 8002380:	20000400 	.word	0x20000400
 8002384:	20000402 	.word	0x20000402
 8002388:	20000428 	.word	0x20000428

0800238c <bluetooth_page>:

void bluetooth_page(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 8002390:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <bluetooth_page+0x7c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <bluetooth_page+0x34>
		if (okay == true) {
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <bluetooth_page+0x80>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d02e      	beq.n	8002404 <bluetooth_page+0x78>
			menuAccess = true;
 80023a6:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <bluetooth_page+0x84>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <bluetooth_page+0x7c>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <bluetooth_page+0x88>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
			okay = false;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <bluetooth_page+0x80>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 80023be:	e021      	b.n	8002404 <bluetooth_page+0x78>
		if (subMenuCounter>2) {
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <bluetooth_page+0x8c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d909      	bls.n	80023dc <bluetooth_page+0x50>
			if (inTheMenu) {
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <bluetooth_page+0x88>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <bluetooth_page+0x4a>
				inTheMenu = false;
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <bluetooth_page+0x88>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <bluetooth_page+0x8c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
		settings_UI(bluetoothMenu,10);
 80023dc:	210a      	movs	r1, #10
 80023de:	200a      	movs	r0, #10
 80023e0:	f000 ffd0 	bl	8003384 <settings_UI>
		if (back == true) {
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <bluetooth_page+0x90>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <bluetooth_page+0x78>
			menuAccess = false;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <bluetooth_page+0x84>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <bluetooth_page+0x7c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <bluetooth_page+0x94>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
			back = false;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <bluetooth_page+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000407 	.word	0x20000407
 800240c:	20000386 	.word	0x20000386
 8002410:	20000400 	.word	0x20000400
 8002414:	20000409 	.word	0x20000409
 8002418:	2000042a 	.word	0x2000042a
 800241c:	2000038a 	.word	0x2000038a
 8002420:	20000428 	.word	0x20000428

08002424 <errors_page>:
void errors_page(void) {
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <errors_page+0x7c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f083 0301 	eor.w	r3, r3, #1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d010      	beq.n	8002458 <errors_page+0x34>
		if (okay == true) {
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <errors_page+0x80>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02e      	beq.n	800249c <errors_page+0x78>
			menuAccess = true;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <errors_page+0x84>)
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <errors_page+0x7c>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <errors_page+0x88>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <errors_page+0x80>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8002456:	e021      	b.n	800249c <errors_page+0x78>
		if (subMenuCounter>2) {
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <errors_page+0x8c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d909      	bls.n	8002474 <errors_page+0x50>
			if (inTheMenu) {
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <errors_page+0x88>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <errors_page+0x4a>
				inTheMenu = false;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <errors_page+0x88>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <errors_page+0x8c>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
		settings_UI(errorsMenu,10);
 8002474:	210a      	movs	r1, #10
 8002476:	200b      	movs	r0, #11
 8002478:	f000 ff84 	bl	8003384 <settings_UI>
		if (back == true) {
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <errors_page+0x90>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00b      	beq.n	800249c <errors_page+0x78>
			menuAccess = false;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <errors_page+0x84>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <errors_page+0x7c>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <errors_page+0x94>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
			back = false;
 8002496:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <errors_page+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000408 	.word	0x20000408
 80024a4:	20000386 	.word	0x20000386
 80024a8:	20000400 	.word	0x20000400
 80024ac:	20000409 	.word	0x20000409
 80024b0:	2000042a 	.word	0x2000042a
 80024b4:	2000038a 	.word	0x2000038a
 80024b8:	20000428 	.word	0x20000428

080024bc <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <mainStateMachine+0x44>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d816      	bhi.n	80024f8 <mainStateMachine+0x3c>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <mainStateMachine+0x14>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e7 	.word	0x080024e7
 80024d8:	080024ed 	.word	0x080024ed
 80024dc:	080024f3 	.word	0x080024f3
	case startingup_state:
		startUpState();
 80024e0:	f000 f810 	bl	8002504 <startUpState>
		break;
 80024e4:	e009      	b.n	80024fa <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 80024e6:	f000 f8e3 	bl	80026b0 <driveState>
		break;
 80024ea:	e006      	b.n	80024fa <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 80024ec:	f000 f982 	bl	80027f4 <chargeState>
		break;
 80024f0:	e003      	b.n	80024fa <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 80024f2:	f000 f9fd 	bl	80028f0 <errorState>
		break;
 80024f6:	e000      	b.n	80024fa <mainStateMachine+0x3e>
	default:
		break;
 80024f8:	bf00      	nop
	}
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200003f8 	.word	0x200003f8

08002504 <startUpState>:

void startUpState(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0

	dataCounter++;
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <startUpState+0x138>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b4a      	ldr	r3, [pc, #296]	; (800263c <startUpState+0x138>)
 8002512:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 8002514:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <startUpState+0x13c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d018      	beq.n	800254e <startUpState+0x4a>
		state_entry = false;
 800251c:	4b48      	ldr	r3, [pc, #288]	; (8002640 <startUpState+0x13c>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 8002522:	4b48      	ldr	r3, [pc, #288]	; (8002644 <startUpState+0x140>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <startUpState+0x144>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <startUpState+0x148>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
		_modeSelection = 2;//Clear Mode
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <startUpState+0x14c>)
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
		_setDriverPage = false;
 800253a:	4b46      	ldr	r3, [pc, #280]	; (8002654 <startUpState+0x150>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002540:	4b45      	ldr	r3, [pc, #276]	; (8002658 <startUpState+0x154>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <startUpState+0x4a>
			_errorSetIcon = false;
 8002548:	4b44      	ldr	r3, [pc, #272]	; (800265c <startUpState+0x158>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
		}
	}

	//	fillandTransmit();
	if (dataCounter > 3) {
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <startUpState+0x138>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d908      	bls.n	8002568 <startUpState+0x64>
		_oneTimeData = true;
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <startUpState+0x15c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
		_realTimeData = true;
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <startUpState+0x160>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 8002562:	4b36      	ldr	r3, [pc, #216]	; (800263c <startUpState+0x138>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
	}

	//	fillandTransmitCommon();


	if (err_error != 0) {
 8002568:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <startUpState+0x164>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <startUpState+0x9a>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <startUpState+0x154>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d15d      	bne.n	8002634 <startUpState+0x130>
 8002578:	4b3c      	ldr	r3, [pc, #240]	; (800266c <startUpState+0x168>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <startUpState+0x16c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d057      	beq.n	8002634 <startUpState+0x130>
			currentStateSM = Error_state;
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <startUpState+0x170>)
 8002586:	2203      	movs	r2, #3
 8002588:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <startUpState+0x174>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <startUpState+0x13c>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 8002596:	4b39      	ldr	r3, [pc, #228]	; (800267c <startUpState+0x178>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 800259c:	e04a      	b.n	8002634 <startUpState+0x130>
	}

	if (currentstate == 4) {
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <startUpState+0x17c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d109      	bne.n	80025ba <startUpState+0xb6>
		currentStateSM = charging_state;
 80025a6:	4b33      	ldr	r3, [pc, #204]	; (8002674 <startUpState+0x170>)
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 80025ac:	4b32      	ldr	r3, [pc, #200]	; (8002678 <startUpState+0x174>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <startUpState+0x13c>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
		return;
 80025b8:	e03f      	b.n	800263a <startUpState+0x136>
	}
	if (accessory == 1) {
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <startUpState+0x180>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d112      	bne.n	80025e8 <startUpState+0xe4>
		navigation(); //enable navigation in Accessory Mode
 80025c2:	f7ff f803 	bl	80015cc <navigation>
		//_modeSelection = 2;//Clear Mode
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <startUpState+0x154>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d021      	beq.n	8002612 <startUpState+0x10e>
			entry = true;
 80025ce:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <startUpState+0x184>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
			startup = true;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <startUpState+0x188>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
			checklit = true;
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <startUpState+0x18c>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <startUpState+0x190>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e014      	b.n	8002612 <startUpState+0x10e>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 80025e8:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <startUpState+0x194>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
		backward = false;
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <startUpState+0x198>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <startUpState+0x19c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
		//currentMode = mode_evcu;
		currentPage = front;
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <startUpState+0x140>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]

		inInfoBat = false;
 8002600:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <startUpState+0x1a0>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
		inSettings = false;
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <startUpState+0x1a4>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]

		_trasmitGlobal = Disengage_Page;
 800260c:	4b0f      	ldr	r3, [pc, #60]	; (800264c <startUpState+0x148>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
	}

	//StartingUp Transmit flag
	//Fill and Transmit
	//startingUp();
	_startingUp = true;
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <startUpState+0x190>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]

	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <startUpState+0x1a8>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10b      	bne.n	8002638 <startUpState+0x134>
		return;
	}

	currentStateSM = driving_state;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <startUpState+0x170>)
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <startUpState+0x174>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
	//_modeSelection = true;
	if (readytodrive == 1) {

	}
	state_entry = true;
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <startUpState+0x13c>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e002      	b.n	800263a <startUpState+0x136>
		return; //Will exit from the function
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <startUpState+0x136>
		return;
 8002638:	bf00      	nop
}
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200004c5 	.word	0x200004c5
 8002640:	20000013 	.word	0x20000013
 8002644:	200003f6 	.word	0x200003f6
 8002648:	20000386 	.word	0x20000386
 800264c:	20000434 	.word	0x20000434
 8002650:	2000041c 	.word	0x2000041c
 8002654:	2000041a 	.word	0x2000041a
 8002658:	20000000 	.word	0x20000000
 800265c:	20000420 	.word	0x20000420
 8002660:	2000041b 	.word	0x2000041b
 8002664:	20000419 	.word	0x20000419
 8002668:	200003eb 	.word	0x200003eb
 800266c:	20000004 	.word	0x20000004
 8002670:	200003f0 	.word	0x200003f0
 8002674:	200003f8 	.word	0x200003f8
 8002678:	200003f9 	.word	0x200003f9
 800267c:	20000421 	.word	0x20000421
 8002680:	200003e0 	.word	0x200003e0
 8002684:	200003e2 	.word	0x200003e2
 8002688:	2000000d 	.word	0x2000000d
 800268c:	2000000c 	.word	0x2000000c
 8002690:	2000000e 	.word	0x2000000e
 8002694:	20000417 	.word	0x20000417
 8002698:	20000384 	.word	0x20000384
 800269c:	20000385 	.word	0x20000385
 80026a0:	20000418 	.word	0x20000418
 80026a4:	2000038c 	.word	0x2000038c
 80026a8:	2000038b 	.word	0x2000038b
 80026ac:	200003e3 	.word	0x200003e3

080026b0 <driveState>:

void driveState(void) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	if (state_entry) {
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <driveState+0xec>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d021      	beq.n	8002700 <driveState+0x50>
		state_entry = false;
 80026bc:	4b37      	ldr	r3, [pc, #220]	; (800279c <driveState+0xec>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <driveState+0xf0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <driveState+0xf4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 80026ce:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <driveState+0xf8>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 80026d4:	4b35      	ldr	r3, [pc, #212]	; (80027ac <driveState+0xfc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
		_drivePageSet = front;
 80026da:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <driveState+0x100>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		///////////////////////
		//_oneTimeData = true;
		_gearChanged = true;
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <driveState+0x104>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
		_modeSelection = 1;
 80026e6:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <driveState+0x108>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
		modeIcon = true;
 80026ec:	4b33      	ldr	r3, [pc, #204]	; (80027bc <driveState+0x10c>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
		//_realTimeData = true;
		//////////////////////
		if (err_or_not != 0) {
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <driveState+0x110>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <driveState+0x50>
			_errorSetIcon = false;
 80026fa:	4b32      	ldr	r3, [pc, #200]	; (80027c4 <driveState+0x114>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
		}
	}
	dataCounter++;
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <driveState+0xfc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	b2da      	uxtb	r2, r3
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <driveState+0xfc>)
 800270a:	701a      	strb	r2, [r3, #0]
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <driveState+0x110>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d112      	bne.n	800273a <driveState+0x8a>
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <driveState+0x118>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <driveState+0x11c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d00c      	beq.n	800273a <driveState+0x8a>
		currentStateSM = Error_state;
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <driveState+0x120>)
 8002722:	2203      	movs	r2, #3
 8002724:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <driveState+0x124>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <driveState+0xec>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002732:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <driveState+0x128>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
		return;
 8002738:	e02e      	b.n	8002798 <driveState+0xe8>
	}

	if (accessory == 1) {
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <driveState+0x12c>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d109      	bne.n	8002756 <driveState+0xa6>
		currentStateSM = startingup_state;
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <driveState+0x120>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <driveState+0x124>)
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <driveState+0xec>)
 8002750:	2201      	movs	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
		return;
 8002754:	e020      	b.n	8002798 <driveState+0xe8>
	}

	if (currentstate == 2) {
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <driveState+0x130>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d102      	bne.n	8002764 <driveState+0xb4>
		evcuMode();
 800275e:	f001 ffbb 	bl	80046d8 <evcuMode>
 8002762:	e002      	b.n	800276a <driveState+0xba>
	}
	else
	{
		mode = false;
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <driveState+0x134>)
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <driveState+0x138>)
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <driveState+0x130>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d006      	beq.n	8002784 <driveState+0xd4>
		_gearChanged = true;
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <driveState+0x104>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <driveState+0x130>)
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <driveState+0x138>)
 8002782:	701a      	strb	r2, [r3, #0]
	}

	//fillandTransmitCommon();
	navigation();
 8002784:	f7fe ff22 	bl	80015cc <navigation>

//	if (_modeChanged) {
//		//modeSelection(currentMode);	//This should be called using a flag _modeSelection
//		_modeSelection = true;
//	}
	if (rtn) { //rtn True when there is a error
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <driveState+0x13c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <driveState+0xe8>
		_allowNavigation = true;
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <driveState+0x140>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
		return;
 8002796:	bf00      	nop
	}
}
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000013 	.word	0x20000013
 80027a0:	200003f6 	.word	0x200003f6
 80027a4:	200003ce 	.word	0x200003ce
 80027a8:	20000434 	.word	0x20000434
 80027ac:	200004c5 	.word	0x200004c5
 80027b0:	20000433 	.word	0x20000433
 80027b4:	20000427 	.word	0x20000427
 80027b8:	2000041c 	.word	0x2000041c
 80027bc:	20000412 	.word	0x20000412
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000420 	.word	0x20000420
 80027c8:	20000004 	.word	0x20000004
 80027cc:	200003f0 	.word	0x200003f0
 80027d0:	200003f8 	.word	0x200003f8
 80027d4:	200003f9 	.word	0x200003f9
 80027d8:	20000421 	.word	0x20000421
 80027dc:	200003e2 	.word	0x200003e2
 80027e0:	200003e0 	.word	0x200003e0
 80027e4:	20000389 	.word	0x20000389
 80027e8:	200003e1 	.word	0x200003e1
 80027ec:	200003f5 	.word	0x200003f5
 80027f0:	2000041d 	.word	0x2000041d

080027f4 <chargeState>:

void chargeState(void) {
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
	if (state_entry) {
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <chargeState+0xc0>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00f      	beq.n	8002820 <chargeState+0x2c>
		state_entry = false;
 8002800:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <chargeState+0xc0>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <chargeState+0xc4>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <chargeState+0xc8>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002812:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <chargeState+0xcc>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <chargeState+0x2c>
			_errorSetIcon = false;
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <chargeState+0xd0>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <chargeState+0xd4>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 8002826:	4b29      	ldr	r3, [pc, #164]	; (80028cc <chargeState+0xd8>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <chargeState+0xdc>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 8002832:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <chargeState+0xe0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d009      	beq.n	800284e <chargeState+0x5a>
		currentStateSM = startingup_state;
 800283a:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <chargeState+0xe4>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <chargeState+0xe8>)
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <chargeState+0xc0>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
		return;
 800284c:	e02e      	b.n	80028ac <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <chargeState+0xcc>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d113      	bne.n	800287e <chargeState+0x8a>
		currentStateSM = Error_state;
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <chargeState+0xe4>)
 8002858:	2203      	movs	r2, #3
 800285a:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <chargeState+0xe8>)
 800285e:	2202      	movs	r2, #2
 8002860:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <chargeState+0xc0>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <chargeState+0xec>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <chargeState+0xcc>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <chargeState+0xb6>
			_errorSetIcon = false;
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <chargeState+0xd0>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
		}
		return;
 800287c:	e015      	b.n	80028aa <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <chargeState+0xf0>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d106      	bne.n	8002894 <chargeState+0xa0>
		_chargeComplete = true;
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <chargeState+0xf4>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <chargeState+0xf8>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
		return;
 8002892:	e00b      	b.n	80028ac <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <chargeState+0xf8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	f083 0301 	eor.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <chargeState+0xf8>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e000      	b.n	80028ac <chargeState+0xb8>
		return;
 80028aa:	bf00      	nop
	}

}
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000013 	.word	0x20000013
 80028b8:	20000434 	.word	0x20000434
 80028bc:	20000417 	.word	0x20000417
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000420 	.word	0x20000420
 80028c8:	20000422 	.word	0x20000422
 80028cc:	20000419 	.word	0x20000419
 80028d0:	2000041b 	.word	0x2000041b
 80028d4:	200003e0 	.word	0x200003e0
 80028d8:	200003f8 	.word	0x200003f8
 80028dc:	200003f9 	.word	0x200003f9
 80028e0:	20000421 	.word	0x20000421
 80028e4:	20000414 	.word	0x20000414
 80028e8:	20000424 	.word	0x20000424
 80028ec:	20000423 	.word	0x20000423

080028f0 <errorState>:

void errorState(void) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0

	if (state_entry) {
 80028f4:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <errorState+0x194>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <errorState+0x44>
		state_entry = false;
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <errorState+0x194>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 8002902:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <errorState+0x198>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
		error_check = true;
 8002908:	4b60      	ldr	r3, [pc, #384]	; (8002a8c <errorState+0x19c>)
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 800290e:	4b60      	ldr	r3, [pc, #384]	; (8002a90 <errorState+0x1a0>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
		rtn = true;
 8002914:	4b5f      	ldr	r3, [pc, #380]	; (8002a94 <errorState+0x1a4>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 800291a:	4b5f      	ldr	r3, [pc, #380]	; (8002a98 <errorState+0x1a8>)
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 8002920:	4b5e      	ldr	r3, [pc, #376]	; (8002a9c <errorState+0x1ac>)
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <errorState+0x1b0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <errorState+0x44>
			_errorSetIcon = false;
 800292e:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <errorState+0x1b4>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 8002934:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <errorState+0x1b8>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]

	setError();
 800293a:	f7fe f957 	bl	8000bec <setError>

	_errorSetPopup = true; //Transmit pop-up
 800293e:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <errorState+0x1bc>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <errorState+0x1b4>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <errorState+0x1c0>)
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 8002950:	4b58      	ldr	r3, [pc, #352]	; (8002ab4 <errorState+0x1c4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <errorState+0x74>
		_errorSetPopup = false;
 8002958:	4b54      	ldr	r3, [pc, #336]	; (8002aac <errorState+0x1bc>)
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <errorState+0x1c0>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 8002964:	f001 feb8 	bl	80046d8 <evcuMode>

	if (previousStateSM == driving_state) {
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <errorState+0x1c8>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d123      	bne.n	80029ba <errorState+0xca>
		modeSelection(currentMode);
 8002972:	4b52      	ldr	r3, [pc, #328]	; (8002abc <errorState+0x1cc>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f000 ff39 	bl	80037f0 <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 800297e:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <errorState+0x1d0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d019      	beq.n	80029ba <errorState+0xca>
			err_previous = err_fullerror;
 8002986:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <errorState+0x1d4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a4f      	ldr	r2, [pc, #316]	; (8002ac8 <errorState+0x1d8>)
 800298c:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 800298e:	4b4f      	ldr	r3, [pc, #316]	; (8002acc <errorState+0x1dc>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <errorState+0x1c8>)
 8002996:	2203      	movs	r2, #3
 8002998:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <errorState+0x194>)
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
			okay = false;
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <errorState+0x1d0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <errorState+0x1bc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <errorState+0x1c0>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 80029b2:	4b40      	ldr	r3, [pc, #256]	; (8002ab4 <errorState+0x1c4>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
			return;
 80029b8:	e063      	b.n	8002a82 <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <errorState+0x1c8>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d10d      	bne.n	80029e0 <errorState+0xf0>
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <errorState+0x19c>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <errorState+0xf0>
		charge_error = true;
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <errorState+0x1e0>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <errorState+0x194>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 80029d8:	200f      	movs	r0, #15
 80029da:	f000 fc8d 	bl	80032f8 <charging_UI>
		return;
 80029de:	e050      	b.n	8002a82 <errorState+0x192>
	}

	if (accessory == 1) {
 80029e0:	4b3c      	ldr	r3, [pc, #240]	; (8002ad4 <errorState+0x1e4>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d110      	bne.n	8002a0a <errorState+0x11a>
		err_previous = err_fullerror;
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <errorState+0x1d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a36      	ldr	r2, [pc, #216]	; (8002ac8 <errorState+0x1d8>)
 80029ee:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <errorState+0x1dc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <errorState+0x1c8>)
 80029f8:	2203      	movs	r2, #3
 80029fa:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <errorState+0x194>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <errorState+0x1bc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 8002a08:	e03b      	b.n	8002a82 <errorState+0x192>
	}

	if (okay) {
 8002a0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <errorState+0x1d0>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <errorState+0x140>
		okay = false;
 8002a12:	4b2b      	ldr	r3, [pc, #172]	; (8002ac0 <errorState+0x1d0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 8002a18:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <errorState+0x1a0>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <errorState+0x1bc>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <errorState+0x1c0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <errorState+0x1c4>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <errorState+0x1a4>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d024      	beq.n	8002a82 <errorState+0x192>
		if (err_State_Navigation) {
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <errorState+0x1a0>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 8002a40:	f7fe fdc4 	bl	80015cc <navigation>
			_errorSetPopup = false;
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <errorState+0x1bc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002a4a:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <errorState+0x1c0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 8002a50:	e016      	b.n	8002a80 <errorState+0x190>
			if (mode) {
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <errorState+0x1e8>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00f      	beq.n	8002a7a <errorState+0x18a>
				mode = false;
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <errorState+0x1e8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <errorState+0x1bc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <errorState+0x1c0>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <errorState+0x1cc>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 febc 	bl	80037f0 <modeSelection>
		return;
 8002a78:	e002      	b.n	8002a80 <errorState+0x190>
				_errorSetCode = true;
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <errorState+0x1c0>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
		return;
 8002a80:	bf00      	nop
	}
}
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000013 	.word	0x20000013
 8002a88:	200003f6 	.word	0x200003f6
 8002a8c:	20000410 	.word	0x20000410
 8002a90:	200003f4 	.word	0x200003f4
 8002a94:	200003f5 	.word	0x200003f5
 8002a98:	20000423 	.word	0x20000423
 8002a9c:	20000434 	.word	0x20000434
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000420 	.word	0x20000420
 8002aa8:	20000419 	.word	0x20000419
 8002aac:	2000041e 	.word	0x2000041e
 8002ab0:	2000041f 	.word	0x2000041f
 8002ab4:	20000421 	.word	0x20000421
 8002ab8:	200003f9 	.word	0x200003f9
 8002abc:	200003fe 	.word	0x200003fe
 8002ac0:	20000386 	.word	0x20000386
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	200003f0 	.word	0x200003f0
 8002acc:	200003f8 	.word	0x200003f8
 8002ad0:	20000413 	.word	0x20000413
 8002ad4:	200003e2 	.word	0x200003e2
 8002ad8:	20000389 	.word	0x20000389

08002adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_MspInit+0x5c>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <HAL_MspInit+0x5c>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6193      	str	r3, [r2, #24]
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_MspInit+0x5c>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_MspInit+0x5c>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_MspInit+0x5c>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	61d3      	str	r3, [r2, #28]
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_MspInit+0x5c>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_MspInit+0x60>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_MspInit+0x60>)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010000 	.word	0x40010000

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <MemManage_Handler+0x4>

08002b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b86:	f001 fec5 	bl	8004914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <DMA1_Channel2_IRQHandler+0x10>)
 8002b96:	f003 f86d 	bl	8005c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000568 	.word	0x20000568

08002ba4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <CAN1_RX0_IRQHandler+0x10>)
 8002baa:	f002 fb23 	bl	80051f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000350 	.word	0x20000350

08002bb8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <CAN1_RX1_IRQHandler+0x10>)
 8002bbe:	f002 fb19 	bl	80051f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000350 	.word	0x20000350

08002bcc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <CAN1_SCE_IRQHandler+0x10>)
 8002bd2:	f002 fb0f 	bl	80051f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000350 	.word	0x20000350

08002be0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 8002be4:	2040      	movs	r0, #64	; 0x40
 8002be6:	f003 fc7b 	bl	80064e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 8002bea:	2080      	movs	r0, #128	; 0x80
 8002bec:	f003 fc78 	bl	80064e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <TIM2_IRQHandler+0x10>)
 8002bfa:	f004 fa95 	bl	8007128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200004c8 	.word	0x200004c8

08002c08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <USART3_IRQHandler+0x10>)
 8002c0e:	f004 ff41 	bl	8007a94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000524 	.word	0x20000524

08002c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2e:	f107 0308 	add.w	r3, r7, #8
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c4e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002c52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c5c:	2264      	movs	r2, #100	; 0x64
 8002c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c6c:	4813      	ldr	r0, [pc, #76]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c6e:	f004 f9b1 	bl	8006fd4 <HAL_TIM_Base_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c78:	f7fe fca2 	bl	80015c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	4619      	mov	r1, r3
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002c8a:	f004 fb55 	bl	8007338 <HAL_TIM_ConfigClockSource>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c94:	f7fe fc94 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_TIM2_Init+0x94>)
 8002ca6:	f004 fd31 	bl	800770c <HAL_TIMEx_MasterConfigSynchronization>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002cb0:	f7fe fc86 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200004c8 	.word	0x200004c8

08002cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d113      	bne.n	8002cfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_TIM_Base_MspInit+0x44>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <HAL_TIM_Base_MspInit+0x44>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	61d3      	str	r3, [r2, #28]
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_TIM_Base_MspInit+0x44>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	201c      	movs	r0, #28
 8002cf0:	f002 fd71 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cf4:	201c      	movs	r0, #28
 8002cf6:	f002 fd8a 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d054      	beq.n	8002dd0 <tick_count+0xc8>
 8002d26:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d854      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d2e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d32:	d049      	beq.n	8002dc8 <tick_count+0xc0>
 8002d34:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002d38:	d84e      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d3e:	d03f      	beq.n	8002dc0 <tick_count+0xb8>
 8002d40:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d44:	d848      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d46:	2bc8      	cmp	r3, #200	; 0xc8
 8002d48:	d036      	beq.n	8002db8 <tick_count+0xb0>
 8002d4a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d4c:	d844      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d4e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d50:	d02e      	beq.n	8002db0 <tick_count+0xa8>
 8002d52:	2ba0      	cmp	r3, #160	; 0xa0
 8002d54:	d840      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d56:	2b78      	cmp	r3, #120	; 0x78
 8002d58:	d026      	beq.n	8002da8 <tick_count+0xa0>
 8002d5a:	2b78      	cmp	r3, #120	; 0x78
 8002d5c:	d83c      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d5e:	2b50      	cmp	r3, #80	; 0x50
 8002d60:	d01e      	beq.n	8002da0 <tick_count+0x98>
 8002d62:	2b50      	cmp	r3, #80	; 0x50
 8002d64:	d838      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d66:	2b28      	cmp	r3, #40	; 0x28
 8002d68:	d016      	beq.n	8002d98 <tick_count+0x90>
 8002d6a:	2b28      	cmp	r3, #40	; 0x28
 8002d6c:	d834      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d6e:	2b14      	cmp	r3, #20
 8002d70:	d00e      	beq.n	8002d90 <tick_count+0x88>
 8002d72:	2b14      	cmp	r3, #20
 8002d74:	d830      	bhi.n	8002dd8 <tick_count+0xd0>
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d002      	beq.n	8002d80 <tick_count+0x78>
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d004      	beq.n	8002d88 <tick_count+0x80>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 8002d7e:	e02b      	b.n	8002dd8 <tick_count+0xd0>
			timer_ptr->timeout_50ms = true;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	711a      	strb	r2, [r3, #4]
			break;
 8002d86:	e028      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_0_5s = true;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	715a      	strb	r2, [r3, #5]
			break;
 8002d8e:	e024      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_1s = true;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	719a      	strb	r2, [r3, #6]
			break;
 8002d96:	e020      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_2s = true;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	71da      	strb	r2, [r3, #7]
			break;
 8002d9e:	e01c      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_4s = true;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	721a      	strb	r2, [r3, #8]
			break;
 8002da6:	e018      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_6s = true;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	725a      	strb	r2, [r3, #9]
			break;
 8002dae:	e014      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_8s = true;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	729a      	strb	r2, [r3, #10]
			break;
 8002db6:	e010      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_10s = true;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	72da      	strb	r2, [r3, #11]
			break;
 8002dbe:	e00c      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_15s = true;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	731a      	strb	r2, [r3, #12]
			break;
 8002dc6:	e008      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_30s = true;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	735a      	strb	r2, [r3, #13]
			break;
 8002dce:	e004      	b.n	8002dda <tick_count+0xd2>
			timer_ptr->timeout_5m = true;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	739a      	strb	r2, [r3, #14]
			break;
 8002dd6:	e000      	b.n	8002dda <tick_count+0xd2>
			break;
 8002dd8:	bf00      	nop
	}
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	_transmit_Function++;
 8002de8:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <transmit+0x1bc>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b6b      	ldr	r3, [pc, #428]	; (8002fa0 <transmit+0x1bc>)
 8002df2:	701a      	strb	r2, [r3, #0]
	if (_transmit_Function == 1) {
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <transmit+0x1bc>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d108      	bne.n	8002e0e <transmit+0x2a>
		if (_realTimeData) {
 8002dfc:	4b69      	ldr	r3, [pc, #420]	; (8002fa4 <transmit+0x1c0>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <transmit+0x2a>
			realTimeData();
 8002e04:	f000 fea2 	bl	8003b4c <realTimeData>
			_realTimeData = false;
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <transmit+0x1c0>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 2) {
 8002e0e:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <transmit+0x1bc>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d108      	bne.n	8002e28 <transmit+0x44>
		if (_oneTimeData) {
 8002e16:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <transmit+0x1c4>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <transmit+0x44>
			oneTimeData();
 8002e1e:	f001 f917 	bl	8004050 <oneTimeData>
			_oneTimeData = false;
 8002e22:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <transmit+0x1c4>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 3) {
 8002e28:	4b5d      	ldr	r3, [pc, #372]	; (8002fa0 <transmit+0x1bc>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d109      	bne.n	8002e44 <transmit+0x60>
		if (_startingUp) {
 8002e30:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <transmit+0x1c8>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <transmit+0x60>
			_startingUp = false;
 8002e38:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <transmit+0x1c8>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
			startingUp();
 8002e3e:	f000 fdb3 	bl	80039a8 <startingUp>
			return;
 8002e42:	e0ab      	b.n	8002f9c <transmit+0x1b8>
		}
	}

	if (_transmit_Function == 4) {
 8002e44:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <transmit+0x1bc>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d109      	bne.n	8002e60 <transmit+0x7c>
		if (_gearChanged) {
 8002e4c:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <transmit+0x1cc>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <transmit+0x7c>
			_gearChanged = false;
 8002e54:	4b56      	ldr	r3, [pc, #344]	; (8002fb0 <transmit+0x1cc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 8002e5a:	f001 fb31 	bl	80044c0 <gearUpdate>
			return;
 8002e5e:	e09d      	b.n	8002f9c <transmit+0x1b8>
		}
	}

	if (_transmit_Function == 5) {
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <transmit+0x1bc>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d11b      	bne.n	8002ea0 <transmit+0xbc>
		//_transmit_Function = 0;
		if (_modeSelection == 1 && currentstate == 2) {
 8002e68:	4b52      	ldr	r3, [pc, #328]	; (8002fb4 <transmit+0x1d0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10d      	bne.n	8002e8c <transmit+0xa8>
 8002e70:	4b51      	ldr	r3, [pc, #324]	; (8002fb8 <transmit+0x1d4>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d109      	bne.n	8002e8c <transmit+0xa8>
			modeSelection(currentMode);
 8002e78:	4b50      	ldr	r3, [pc, #320]	; (8002fbc <transmit+0x1d8>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fcb6 	bl	80037f0 <modeSelection>
			_modeSelection = 0;
 8002e84:	4b4b      	ldr	r3, [pc, #300]	; (8002fb4 <transmit+0x1d0>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]
			return;
 8002e8a:	e087      	b.n	8002f9c <transmit+0x1b8>
		}
		if (_modeSelection == 2) {
 8002e8c:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <transmit+0x1d0>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d105      	bne.n	8002ea0 <transmit+0xbc>
			_modeSelection = 0;
 8002e94:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <transmit+0x1d0>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
			modeSelection(modeCleared);
 8002e9a:	2004      	movs	r0, #4
 8002e9c:	f000 fca8 	bl	80037f0 <modeSelection>

		}
	}

	if (_transmit_Function == 6) {
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <transmit+0x1bc>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d119      	bne.n	8002edc <transmit+0xf8>
		if (currentStateSM == driving_state && _setDriverPage == true && !_setPoup) {
 8002ea8:	4b45      	ldr	r3, [pc, #276]	; (8002fc0 <transmit+0x1dc>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d114      	bne.n	8002edc <transmit+0xf8>
 8002eb2:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <transmit+0x1e0>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <transmit+0xf8>
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <transmit+0x1e4>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	f083 0301 	eor.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <transmit+0xf8>
			_setDriverPage = false;
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <transmit+0x1e0>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
			drivePageSetter(_drivePageSet);
 8002ece:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <transmit+0x1e8>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f88d 	bl	8002ff4 <drivePageSetter>
			return;
 8002eda:	e05f      	b.n	8002f9c <transmit+0x1b8>
		}

	}

	if (_transmit_Function == 9) {
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <transmit+0x1bc>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b09      	cmp	r3, #9
 8002ee2:	d122      	bne.n	8002f2a <transmit+0x146>
		_transmit_Function = 0;
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <transmit+0x1bc>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
		popUpCounter++;
 8002eea:	4b39      	ldr	r3, [pc, #228]	; (8002fd0 <transmit+0x1ec>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <transmit+0x1ec>)
 8002ef4:	701a      	strb	r2, [r3, #0]
		if (popUpCounter > 3) {
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <transmit+0x1ec>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d90c      	bls.n	8002f18 <transmit+0x134>
			popUpCounter = 0;
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <transmit+0x1ec>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
			popUpNumber = 0;
 8002f04:	4b33      	ldr	r3, [pc, #204]	; (8002fd4 <transmit+0x1f0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
			if (inPopup) {
 8002f0a:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <transmit+0x1f4>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <transmit+0x134>
				_setPoup = true;
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <transmit+0x1e4>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
		else
		{

		}
		//_setPoup and Popup Number should be set from else where
		if (_setPoup) {
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <transmit+0x1e4>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <transmit+0x146>
			_setPoup = false;
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <transmit+0x1e4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
			//HAL_UART_AbortTransmit(&huart3);
			popUpHandler();
 8002f26:	f000 fce3 	bl	80038f0 <popUpHandler>
		}

	}

	if (_errorSetIcon) {
 8002f2a:	4b2c      	ldr	r3, [pc, #176]	; (8002fdc <transmit+0x1f8>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <transmit+0x152>
		errorIcon();
 8002f32:	f000 fb47 	bl	80035c4 <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <transmit+0x1fc>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <transmit+0x170>
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <transmit+0x200>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <transmit+0x170>
		errorCode();
 8002f4c:	f000 fbde 	bl	800370c <errorCode>
		errorPopup();
 8002f50:	f000 fbbc 	bl	80036cc <errorPopup>
	}

	if (_charingState) {
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <transmit+0x204>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01f      	beq.n	8002f9c <transmit+0x1b8>
		_charingState = false;
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <transmit+0x204>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
		if (_transmit_Function == 3) {
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <transmit+0x1bc>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d102      	bne.n	8002f70 <transmit+0x18c>
			_transmit_Function = 0;
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <transmit+0x1bc>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
		}

		if (_chargingUI) {
 8002f70:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <transmit+0x208>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <transmit+0x1a2>
			charging_UI(charging_ui);
 8002f78:	200d      	movs	r0, #13
 8002f7a:	f000 f9bd 	bl	80032f8 <charging_UI>
			_chargingUI = false;
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <transmit+0x208>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 2;
			return;
 8002f84:	e00a      	b.n	8002f9c <transmit+0x1b8>
		}
		if (_chargeComplete) {
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <transmit+0x20c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <transmit+0x1b8>
			charging_UI(chargingcomp_ui);
 8002f8e:	200e      	movs	r0, #14
 8002f90:	f000 f9b2 	bl	80032f8 <charging_UI>
			_chargeComplete = false;
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <transmit+0x20c>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 3;
			return;
 8002f9a:	bf00      	nop
		}
	}
}
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000042f 	.word	0x2000042f
 8002fa4:	20000419 	.word	0x20000419
 8002fa8:	2000041b 	.word	0x2000041b
 8002fac:	20000417 	.word	0x20000417
 8002fb0:	20000427 	.word	0x20000427
 8002fb4:	2000041c 	.word	0x2000041c
 8002fb8:	200003e0 	.word	0x200003e0
 8002fbc:	200003fe 	.word	0x200003fe
 8002fc0:	200003f8 	.word	0x200003f8
 8002fc4:	2000041a 	.word	0x2000041a
 8002fc8:	2000042c 	.word	0x2000042c
 8002fcc:	20000433 	.word	0x20000433
 8002fd0:	20000430 	.word	0x20000430
 8002fd4:	20000431 	.word	0x20000431
 8002fd8:	20000017 	.word	0x20000017
 8002fdc:	20000420 	.word	0x20000420
 8002fe0:	2000041e 	.word	0x2000041e
 8002fe4:	20000421 	.word	0x20000421
 8002fe8:	20000422 	.word	0x20000422
 8002fec:	20000423 	.word	0x20000423
 8002ff0:	20000424 	.word	0x20000424

08002ff4 <drivePageSetter>:

uint8_t drivePageTransmit = 0;

void drivePageSetter(uitype_t page) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 8002ffe:	4b8e      	ldr	r3, [pc, #568]	; (8003238 <drivePageSetter+0x244>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b8c      	ldr	r3, [pc, #560]	; (8003238 <drivePageSetter+0x244>)
 8003008:	701a      	strb	r2, [r3, #0]
	switch (page) {
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b07      	cmp	r3, #7
 800300e:	f200 8104 	bhi.w	800321a <drivePageSetter+0x226>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <drivePageSetter+0x24>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	08003039 	.word	0x08003039
 800301c:	080031a3 	.word	0x080031a3
 8003020:	080031c1 	.word	0x080031c1
 8003024:	080031df 	.word	0x080031df
 8003028:	0800321b 	.word	0x0800321b
 800302c:	0800321b 	.word	0x0800321b
 8003030:	0800321b 	.word	0x0800321b
 8003034:	080031fd 	.word	0x080031fd
	case front:
		//Checking for Errors
		if (error_check) {
 8003038:	4b80      	ldr	r3, [pc, #512]	; (800323c <drivePageSetter+0x248>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d07b      	beq.n	8003138 <drivePageSetter+0x144>
			if (accessory == 1) {
 8003040:	4b7f      	ldr	r3, [pc, #508]	; (8003240 <drivePageSetter+0x24c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d123      	bne.n	8003090 <drivePageSetter+0x9c>
				if (drivePageTransmit == 1) {
 8003048:	4b7b      	ldr	r3, [pc, #492]	; (8003238 <drivePageSetter+0x244>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d106      	bne.n	800305e <drivePageSetter+0x6a>
					ReadytoDrive_OFF_Icon;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295
 8003054:	2208      	movs	r2, #8
 8003056:	497b      	ldr	r1, [pc, #492]	; (8003244 <drivePageSetter+0x250>)
 8003058:	487b      	ldr	r0, [pc, #492]	; (8003248 <drivePageSetter+0x254>)
 800305a:	f004 fc1c 	bl	8007896 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 2) {
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <drivePageSetter+0x244>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d106      	bne.n	8003074 <drivePageSetter+0x80>
					ModeClear_Icon;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	2208      	movs	r2, #8
 800306c:	4977      	ldr	r1, [pc, #476]	; (800324c <drivePageSetter+0x258>)
 800306e:	4876      	ldr	r0, [pc, #472]	; (8003248 <drivePageSetter+0x254>)
 8003070:	f004 fc11 	bl	8007896 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 3) {
 8003074:	4b70      	ldr	r3, [pc, #448]	; (8003238 <drivePageSetter+0x244>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d109      	bne.n	8003090 <drivePageSetter+0x9c>
					PowerLimitON_Icon;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
 8003080:	2208      	movs	r2, #8
 8003082:	4973      	ldr	r1, [pc, #460]	; (8003250 <drivePageSetter+0x25c>)
 8003084:	4870      	ldr	r0, [pc, #448]	; (8003248 <drivePageSetter+0x254>)
 8003086:	f004 fc06 	bl	8007896 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 800308a:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <drivePageSetter+0x244>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 8003090:	4b70      	ldr	r3, [pc, #448]	; (8003254 <drivePageSetter+0x260>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <drivePageSetter+0xc0>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 8003098:	4b67      	ldr	r3, [pc, #412]	; (8003238 <drivePageSetter+0x244>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d109      	bne.n	80030b4 <drivePageSetter+0xc0>
					SysError_Shutdown_Page;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	220a      	movs	r2, #10
 80030a6:	496c      	ldr	r1, [pc, #432]	; (8003258 <drivePageSetter+0x264>)
 80030a8:	4867      	ldr	r0, [pc, #412]	; (8003248 <drivePageSetter+0x254>)
 80030aa:	f004 fbf4 	bl	8007896 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <drivePageSetter+0x244>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 80030b4:	4b69      	ldr	r3, [pc, #420]	; (800325c <drivePageSetter+0x268>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	f040 80af 	bne.w	800321e <drivePageSetter+0x22a>
				if (shutdown == 1) {
 80030c0:	4b67      	ldr	r3, [pc, #412]	; (8003260 <drivePageSetter+0x26c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d10d      	bne.n	80030e4 <drivePageSetter+0xf0>
					if (drivePageTransmit == 1) {
 80030c8:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <drivePageSetter+0x244>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d109      	bne.n	80030e4 <drivePageSetter+0xf0>
						SysError_StopDrive_Page;
 80030d0:	f04f 33ff 	mov.w	r3, #4294967295
 80030d4:	220a      	movs	r2, #10
 80030d6:	4963      	ldr	r1, [pc, #396]	; (8003264 <drivePageSetter+0x270>)
 80030d8:	485b      	ldr	r0, [pc, #364]	; (8003248 <drivePageSetter+0x254>)
 80030da:	f004 fbdc 	bl	8007896 <HAL_UART_Transmit>
						drivePageTransmit = 0;
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <drivePageSetter+0x244>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 80030e4:	4b5e      	ldr	r3, [pc, #376]	; (8003260 <drivePageSetter+0x26c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 8098 	bne.w	800321e <drivePageSetter+0x22a>
					if (mode) {
 80030ee:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <drivePageSetter+0x274>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d011      	beq.n	800311a <drivePageSetter+0x126>
						if (drivePageTransmit == 1) {
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <drivePageSetter+0x244>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d109      	bne.n	8003112 <drivePageSetter+0x11e>
							ModeChangeOFF_Page;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	2208      	movs	r2, #8
 8003104:	4959      	ldr	r1, [pc, #356]	; (800326c <drivePageSetter+0x278>)
 8003106:	4850      	ldr	r0, [pc, #320]	; (8003248 <drivePageSetter+0x254>)
 8003108:	f004 fbc5 	bl	8007896 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 800310c:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <drivePageSetter+0x244>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 8003112:	4b55      	ldr	r3, [pc, #340]	; (8003268 <drivePageSetter+0x274>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
				//drivePageTransmit = 0;
				//}
			}
		}
		break;
 8003118:	e081      	b.n	800321e <drivePageSetter+0x22a>
						if (drivePageTransmit == 1) {
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <drivePageSetter+0x244>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d17d      	bne.n	800321e <drivePageSetter+0x22a>
							SysError_StopDrive_Page;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	220a      	movs	r2, #10
 8003128:	494e      	ldr	r1, [pc, #312]	; (8003264 <drivePageSetter+0x270>)
 800312a:	4847      	ldr	r0, [pc, #284]	; (8003248 <drivePageSetter+0x254>)
 800312c:	f004 fbb3 	bl	8007896 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <drivePageSetter+0x244>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
		break;
 8003136:	e072      	b.n	800321e <drivePageSetter+0x22a>
			if (accessory == 1) {
 8003138:	4b41      	ldr	r3, [pc, #260]	; (8003240 <drivePageSetter+0x24c>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d123      	bne.n	8003188 <drivePageSetter+0x194>
				if (drivePageTransmit == 1) {
 8003140:	4b3d      	ldr	r3, [pc, #244]	; (8003238 <drivePageSetter+0x244>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <drivePageSetter+0x162>
					ReadytoDrive_OFF_Icon;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295
 800314c:	2208      	movs	r2, #8
 800314e:	493d      	ldr	r1, [pc, #244]	; (8003244 <drivePageSetter+0x250>)
 8003150:	483d      	ldr	r0, [pc, #244]	; (8003248 <drivePageSetter+0x254>)
 8003152:	f004 fba0 	bl	8007896 <HAL_UART_Transmit>
				if (drivePageTransmit == 2) {
 8003156:	4b38      	ldr	r3, [pc, #224]	; (8003238 <drivePageSetter+0x244>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d106      	bne.n	800316c <drivePageSetter+0x178>
					ModeClear_Icon;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	2208      	movs	r2, #8
 8003164:	4939      	ldr	r1, [pc, #228]	; (800324c <drivePageSetter+0x258>)
 8003166:	4838      	ldr	r0, [pc, #224]	; (8003248 <drivePageSetter+0x254>)
 8003168:	f004 fb95 	bl	8007896 <HAL_UART_Transmit>
				if (drivePageTransmit == 3) {
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <drivePageSetter+0x244>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d109      	bne.n	8003188 <drivePageSetter+0x194>
					Disengage_KillSwitch_Page;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
 8003178:	220a      	movs	r2, #10
 800317a:	493d      	ldr	r1, [pc, #244]	; (8003270 <drivePageSetter+0x27c>)
 800317c:	4832      	ldr	r0, [pc, #200]	; (8003248 <drivePageSetter+0x254>)
 800317e:	f004 fb8a 	bl	8007896 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 8003182:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <drivePageSetter+0x244>)
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
			if (_testPage) {
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <drivePageSetter+0x280>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d046      	beq.n	800321e <drivePageSetter+0x22a>
				_testPage = false;
 8003190:	4b38      	ldr	r3, [pc, #224]	; (8003274 <drivePageSetter+0x280>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
 8003196:	220a      	movs	r2, #10
 8003198:	4937      	ldr	r1, [pc, #220]	; (8003278 <drivePageSetter+0x284>)
 800319a:	482b      	ldr	r0, [pc, #172]	; (8003248 <drivePageSetter+0x254>)
 800319c:	f004 fc0e 	bl	80079bc <HAL_UART_Transmit_DMA>
		break;
 80031a0:	e03d      	b.n	800321e <drivePageSetter+0x22a>
	case trip:
		if (_menupage == 1) {
 80031a2:	4b36      	ldr	r3, [pc, #216]	; (800327c <drivePageSetter+0x288>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d03b      	beq.n	8003222 <drivePageSetter+0x22e>
			return;
		}
		_menupage = 1;
 80031aa:	4b34      	ldr	r3, [pc, #208]	; (800327c <drivePageSetter+0x288>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
 80031b4:	220a      	movs	r2, #10
 80031b6:	4932      	ldr	r1, [pc, #200]	; (8003280 <drivePageSetter+0x28c>)
 80031b8:	4823      	ldr	r0, [pc, #140]	; (8003248 <drivePageSetter+0x254>)
 80031ba:	f004 fb6c 	bl	8007896 <HAL_UART_Transmit>
		break;
 80031be:	e037      	b.n	8003230 <drivePageSetter+0x23c>
	case after_charge:
		if (_menupage == 2) {
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <drivePageSetter+0x288>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d02e      	beq.n	8003226 <drivePageSetter+0x232>
			return;
		}
		_menupage = 2;
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <drivePageSetter+0x288>)
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	220a      	movs	r2, #10
 80031d4:	492b      	ldr	r1, [pc, #172]	; (8003284 <drivePageSetter+0x290>)
 80031d6:	481c      	ldr	r0, [pc, #112]	; (8003248 <drivePageSetter+0x254>)
 80031d8:	f004 fb5d 	bl	8007896 <HAL_UART_Transmit>
		break;
 80031dc:	e028      	b.n	8003230 <drivePageSetter+0x23c>
	case info:
		if (_menupage == 3) {
 80031de:	4b27      	ldr	r3, [pc, #156]	; (800327c <drivePageSetter+0x288>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d021      	beq.n	800322a <drivePageSetter+0x236>
			return;
		}
		_menupage = 3;
 80031e6:	4b25      	ldr	r3, [pc, #148]	; (800327c <drivePageSetter+0x288>)
 80031e8:	2203      	movs	r2, #3
 80031ea:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295
 80031f0:	220a      	movs	r2, #10
 80031f2:	4925      	ldr	r1, [pc, #148]	; (8003288 <drivePageSetter+0x294>)
 80031f4:	4814      	ldr	r0, [pc, #80]	; (8003248 <drivePageSetter+0x254>)
 80031f6:	f004 fb4e 	bl	8007896 <HAL_UART_Transmit>
		break;
 80031fa:	e019      	b.n	8003230 <drivePageSetter+0x23c>
	case settings:
		if (_menupage == 4) {
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <drivePageSetter+0x288>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d014      	beq.n	800322e <drivePageSetter+0x23a>
			return;
		}
		_menupage = 4;
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <drivePageSetter+0x288>)
 8003206:	2204      	movs	r2, #4
 8003208:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
 800320e:	220a      	movs	r2, #10
 8003210:	491e      	ldr	r1, [pc, #120]	; (800328c <drivePageSetter+0x298>)
 8003212:	480d      	ldr	r0, [pc, #52]	; (8003248 <drivePageSetter+0x254>)
 8003214:	f004 fb3f 	bl	8007896 <HAL_UART_Transmit>
		break;
 8003218:	e00a      	b.n	8003230 <drivePageSetter+0x23c>
	default:
		break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <drivePageSetter+0x23c>
		break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <drivePageSetter+0x23c>
			return;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <drivePageSetter+0x23c>
			return;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <drivePageSetter+0x23c>
			return;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <drivePageSetter+0x23c>
			return;
 800322e:	bf00      	nop

	}

}
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000520 	.word	0x20000520
 800323c:	20000410 	.word	0x20000410
 8003240:	200003e2 	.word	0x200003e2
 8003244:	200001ac 	.word	0x200001ac
 8003248:	20000524 	.word	0x20000524
 800324c:	200001ec 	.word	0x200001ec
 8003250:	20000194 	.word	0x20000194
 8003254:	200003f4 	.word	0x200003f4
 8003258:	200000f4 	.word	0x200000f4
 800325c:	200003f8 	.word	0x200003f8
 8003260:	200003ea 	.word	0x200003ea
 8003264:	20000100 	.word	0x20000100
 8003268:	20000389 	.word	0x20000389
 800326c:	20000274 	.word	0x20000274
 8003270:	20000034 	.word	0x20000034
 8003274:	2000042b 	.word	0x2000042b
 8003278:	20000148 	.word	0x20000148
 800327c:	200003fd 	.word	0x200003fd
 8003280:	20000070 	.word	0x20000070
 8003284:	2000007c 	.word	0x2000007c
 8003288:	20000088 	.word	0x20000088
 800328c:	200000b8 	.word	0x200000b8

08003290 <vehicleInfo_UI>:

void vehicleInfo_UI(uitype_t InfoUI) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d016      	beq.n	80032ce <vehicleInfo_UI+0x3e>
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	dc1c      	bgt.n	80032de <vehicleInfo_UI+0x4e>
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d002      	beq.n	80032ae <vehicleInfo_UI+0x1e>
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d008      	beq.n	80032be <vehicleInfo_UI+0x2e>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 80032ac:	e017      	b.n	80032de <vehicleInfo_UI+0x4e>
		Battery_Info_Page;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	220a      	movs	r2, #10
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <vehicleInfo_UI+0x58>)
 80032b6:	480d      	ldr	r0, [pc, #52]	; (80032ec <vehicleInfo_UI+0x5c>)
 80032b8:	f004 faed 	bl	8007896 <HAL_UART_Transmit>
		break;
 80032bc:	e010      	b.n	80032e0 <vehicleInfo_UI+0x50>
		Motor_Info_Page;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	220a      	movs	r2, #10
 80032c4:	490a      	ldr	r1, [pc, #40]	; (80032f0 <vehicleInfo_UI+0x60>)
 80032c6:	4809      	ldr	r0, [pc, #36]	; (80032ec <vehicleInfo_UI+0x5c>)
 80032c8:	f004 fae5 	bl	8007896 <HAL_UART_Transmit>
		break;
 80032cc:	e008      	b.n	80032e0 <vehicleInfo_UI+0x50>
		Inverter_Info_Page;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	220a      	movs	r2, #10
 80032d4:	4907      	ldr	r1, [pc, #28]	; (80032f4 <vehicleInfo_UI+0x64>)
 80032d6:	4805      	ldr	r0, [pc, #20]	; (80032ec <vehicleInfo_UI+0x5c>)
 80032d8:	f004 fadd 	bl	8007896 <HAL_UART_Transmit>
		break;
 80032dc:	e000      	b.n	80032e0 <vehicleInfo_UI+0x50>
		break;
 80032de:	bf00      	nop
	}
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000094 	.word	0x20000094
 80032ec:	20000524 	.word	0x20000524
 80032f0:	200000a0 	.word	0x200000a0
 80032f4:	200000ac 	.word	0x200000ac

080032f8 <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d016      	beq.n	8003336 <charging_UI+0x3e>
 8003308:	2b0f      	cmp	r3, #15
 800330a:	dc27      	bgt.n	800335c <charging_UI+0x64>
 800330c:	2b0d      	cmp	r3, #13
 800330e:	d002      	beq.n	8003316 <charging_UI+0x1e>
 8003310:	2b0e      	cmp	r3, #14
 8003312:	d008      	beq.n	8003326 <charging_UI+0x2e>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 8003314:	e022      	b.n	800335c <charging_UI+0x64>
		Charging_Page;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	220a      	movs	r2, #10
 800331c:	4913      	ldr	r1, [pc, #76]	; (800336c <charging_UI+0x74>)
 800331e:	4814      	ldr	r0, [pc, #80]	; (8003370 <charging_UI+0x78>)
 8003320:	f004 fab9 	bl	8007896 <HAL_UART_Transmit>
		break;
 8003324:	e01d      	b.n	8003362 <charging_UI+0x6a>
		ChargeComplete_Page;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	220a      	movs	r2, #10
 800332c:	4911      	ldr	r1, [pc, #68]	; (8003374 <charging_UI+0x7c>)
 800332e:	4810      	ldr	r0, [pc, #64]	; (8003370 <charging_UI+0x78>)
 8003330:	f004 fab1 	bl	8007896 <HAL_UART_Transmit>
		break;
 8003334:	e015      	b.n	8003362 <charging_UI+0x6a>
		Charge_Error_Page;
 8003336:	f04f 33ff 	mov.w	r3, #4294967295
 800333a:	220a      	movs	r2, #10
 800333c:	490e      	ldr	r1, [pc, #56]	; (8003378 <charging_UI+0x80>)
 800333e:	480c      	ldr	r0, [pc, #48]	; (8003370 <charging_UI+0x78>)
 8003340:	f004 faa9 	bl	8007896 <HAL_UART_Transmit>
		if (charge_error) {
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <charging_UI+0x84>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <charging_UI+0x68>
			Charge_Connection_Error_Popup_ON;
 800334c:	f04f 33ff 	mov.w	r3, #4294967295
 8003350:	2208      	movs	r2, #8
 8003352:	490b      	ldr	r1, [pc, #44]	; (8003380 <charging_UI+0x88>)
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <charging_UI+0x78>)
 8003356:	f004 fa9e 	bl	8007896 <HAL_UART_Transmit>
		break;
 800335a:	e001      	b.n	8003360 <charging_UI+0x68>
		break;
 800335c:	bf00      	nop
 800335e:	e000      	b.n	8003362 <charging_UI+0x6a>
		break;
 8003360:	bf00      	nop
	}
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000010c 	.word	0x2000010c
 8003370:	20000524 	.word	0x20000524
 8003374:	20000118 	.word	0x20000118
 8003378:	20000124 	.word	0x20000124
 800337c:	20000413 	.word	0x20000413
 8003380:	2000027c 	.word	0x2000027c

08003384 <settings_UI>:

void settings_UI(uitype_t SettingsMenu, uint8_t selectedOption) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	460a      	mov	r2, r1
 800338e:	71fb      	strb	r3, [r7, #7]
 8003390:	4613      	mov	r3, r2
 8003392:	71bb      	strb	r3, [r7, #6]
	switch (SettingsMenu) {
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	3b08      	subs	r3, #8
 8003398:	2b03      	cmp	r3, #3
 800339a:	f200 8098 	bhi.w	80034ce <settings_UI+0x14a>
 800339e:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <settings_UI+0x20>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	080033b5 	.word	0x080033b5
 80033a8:	080033c5 	.word	0x080033c5
 80033ac:	080034a9 	.word	0x080034a9
 80033b0:	080034b9 	.word	0x080034b9
	case vehicleMenu:
		General_Menu_Page;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	220a      	movs	r2, #10
 80033ba:	4948      	ldr	r1, [pc, #288]	; (80034dc <settings_UI+0x158>)
 80033bc:	4848      	ldr	r0, [pc, #288]	; (80034e0 <settings_UI+0x15c>)
 80033be:	f004 fa6a 	bl	8007896 <HAL_UART_Transmit>
		break;
 80033c2:	e087      	b.n	80034d4 <settings_UI+0x150>
	case systemMenu:
		System_Menu_Page;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
 80033c8:	220a      	movs	r2, #10
 80033ca:	4946      	ldr	r1, [pc, #280]	; (80034e4 <settings_UI+0x160>)
 80033cc:	4844      	ldr	r0, [pc, #272]	; (80034e0 <settings_UI+0x15c>)
 80033ce:	f004 fa62 	bl	8007896 <HAL_UART_Transmit>
		if(timeChanged)
 80033d2:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <settings_UI+0x164>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d011      	beq.n	80033fe <settings_UI+0x7a>
		{
			timeChanged = false;
 80033da:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <settings_UI+0x164>)
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
			timeSet[11] = timerSetValueH;
 80033e0:	4b42      	ldr	r3, [pc, #264]	; (80034ec <settings_UI+0x168>)
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <settings_UI+0x16c>)
 80033e6:	72da      	strb	r2, [r3, #11]
			timeSet[12] = timerSetValueMin;
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <settings_UI+0x170>)
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <settings_UI+0x16c>)
 80033ee:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart3, timeSet, sizeof(timeSet), HAL_MAX_DELAY);
 80033f0:	f04f 33ff 	mov.w	r3, #4294967295
 80033f4:	220e      	movs	r2, #14
 80033f6:	493e      	ldr	r1, [pc, #248]	; (80034f0 <settings_UI+0x16c>)
 80033f8:	4839      	ldr	r0, [pc, #228]	; (80034e0 <settings_UI+0x15c>)
 80033fa:	f004 fa4c 	bl	8007896 <HAL_UART_Transmit>
		}
		if(selectedOption == 0) {
 80033fe:	79bb      	ldrb	r3, [r7, #6]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10f      	bne.n	8003424 <settings_UI+0xa0>
			TimeSetting_Button;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	2208      	movs	r2, #8
 800340a:	493b      	ldr	r1, [pc, #236]	; (80034f8 <settings_UI+0x174>)
 800340c:	4834      	ldr	r0, [pc, #208]	; (80034e0 <settings_UI+0x15c>)
 800340e:	f004 fa42 	bl	8007896 <HAL_UART_Transmit>
			BrightnessSetting_Button_OFF;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	2208      	movs	r2, #8
 8003418:	4938      	ldr	r1, [pc, #224]	; (80034fc <settings_UI+0x178>)
 800341a:	4831      	ldr	r0, [pc, #196]	; (80034e0 <settings_UI+0x15c>)
 800341c:	f004 fa3b 	bl	8007896 <HAL_UART_Transmit>

			selectedOption = 10;
 8003420:	230a      	movs	r3, #10
 8003422:	71bb      	strb	r3, [r7, #6]
		}
		if(selectedOption == 1)
 8003424:	79bb      	ldrb	r3, [r7, #6]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d10f      	bne.n	800344a <settings_UI+0xc6>
		{
			BrightnessSetting_Button;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	2208      	movs	r2, #8
 8003430:	4933      	ldr	r1, [pc, #204]	; (8003500 <settings_UI+0x17c>)
 8003432:	482b      	ldr	r0, [pc, #172]	; (80034e0 <settings_UI+0x15c>)
 8003434:	f004 fa2f 	bl	8007896 <HAL_UART_Transmit>
			TimeSetting_Button_OFF;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	2208      	movs	r2, #8
 800343e:	4931      	ldr	r1, [pc, #196]	; (8003504 <settings_UI+0x180>)
 8003440:	4827      	ldr	r0, [pc, #156]	; (80034e0 <settings_UI+0x15c>)
 8003442:	f004 fa28 	bl	8007896 <HAL_UART_Transmit>
			selectedOption = 10;
 8003446:	230a      	movs	r3, #10
 8003448:	71bb      	strb	r3, [r7, #6]
		}
		if (selectedOption == 4) {
 800344a:	79bb      	ldrb	r3, [r7, #6]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d113      	bne.n	8003478 <settings_UI+0xf4>
			strDATA[4] = 0x13;
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <settings_UI+0x184>)
 8003452:	2213      	movs	r2, #19
 8003454:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x22;
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <settings_UI+0x184>)
 8003458:	2222      	movs	r2, #34	; 0x22
 800345a:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 800345c:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <settings_UI+0x184>)
 800345e:	2200      	movs	r2, #0
 8003460:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueH);
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <settings_UI+0x168>)
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	4b28      	ldr	r3, [pc, #160]	; (8003508 <settings_UI+0x184>)
 8003468:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	2208      	movs	r2, #8
 8003470:	4925      	ldr	r1, [pc, #148]	; (8003508 <settings_UI+0x184>)
 8003472:	481b      	ldr	r0, [pc, #108]	; (80034e0 <settings_UI+0x15c>)
 8003474:	f004 fa0f 	bl	8007896 <HAL_UART_Transmit>
		}
		if (selectedOption == 3) {
 8003478:	79bb      	ldrb	r3, [r7, #6]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d129      	bne.n	80034d2 <settings_UI+0x14e>
			strDATA[4] = 0x13;
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <settings_UI+0x184>)
 8003480:	2213      	movs	r2, #19
 8003482:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x21;
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <settings_UI+0x184>)
 8003486:	2221      	movs	r2, #33	; 0x21
 8003488:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 800348a:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <settings_UI+0x184>)
 800348c:	2200      	movs	r2, #0
 800348e:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueMin);
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <settings_UI+0x170>)
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <settings_UI+0x184>)
 8003496:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
 800349c:	2208      	movs	r2, #8
 800349e:	491a      	ldr	r1, [pc, #104]	; (8003508 <settings_UI+0x184>)
 80034a0:	480f      	ldr	r0, [pc, #60]	; (80034e0 <settings_UI+0x15c>)
 80034a2:	f004 f9f8 	bl	8007896 <HAL_UART_Transmit>
		}

		break;
 80034a6:	e014      	b.n	80034d2 <settings_UI+0x14e>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	220a      	movs	r2, #10
 80034ae:	4917      	ldr	r1, [pc, #92]	; (800350c <settings_UI+0x188>)
 80034b0:	480b      	ldr	r0, [pc, #44]	; (80034e0 <settings_UI+0x15c>)
 80034b2:	f004 f9f0 	bl	8007896 <HAL_UART_Transmit>
		break;
 80034b6:	e00d      	b.n	80034d4 <settings_UI+0x150>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 80034b8:	4b15      	ldr	r3, [pc, #84]	; (8003510 <settings_UI+0x18c>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	220a      	movs	r2, #10
 80034c4:	4913      	ldr	r1, [pc, #76]	; (8003514 <settings_UI+0x190>)
 80034c6:	4806      	ldr	r0, [pc, #24]	; (80034e0 <settings_UI+0x15c>)
 80034c8:	f004 f9e5 	bl	8007896 <HAL_UART_Transmit>
		break;
 80034cc:	e002      	b.n	80034d4 <settings_UI+0x150>
	default:
		break;
 80034ce:	bf00      	nop
 80034d0:	e000      	b.n	80034d4 <settings_UI+0x150>
		break;
 80034d2:	bf00      	nop
	}
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200000c4 	.word	0x200000c4
 80034e0:	20000524 	.word	0x20000524
 80034e4:	200000d0 	.word	0x200000d0
 80034e8:	20000406 	.word	0x20000406
 80034ec:	20000404 	.word	0x20000404
 80034f0:	20000024 	.word	0x20000024
 80034f4:	20000405 	.word	0x20000405
 80034f8:	20000244 	.word	0x20000244
 80034fc:	2000025c 	.word	0x2000025c
 8003500:	20000254 	.word	0x20000254
 8003504:	2000024c 	.word	0x2000024c
 8003508:	20000390 	.word	0x20000390
 800350c:	200000dc 	.word	0x200000dc
 8003510:	2000040f 	.word	0x2000040f
 8003514:	200000e8 	.word	0x200000e8

08003518 <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
 8003526:	220a      	movs	r2, #10
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <selection_UI+0x90>)
 800352a:	4820      	ldr	r0, [pc, #128]	; (80035ac <selection_UI+0x94>)
 800352c:	f004 f9b3 	bl	8007896 <HAL_UART_Transmit>
	switch (SettingsMenu) {
 8003530:	79fb      	ldrb	r3, [r7, #7]
 8003532:	3b08      	subs	r3, #8
 8003534:	2b03      	cmp	r3, #3
 8003536:	d82b      	bhi.n	8003590 <selection_UI+0x78>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <selection_UI+0x28>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003551 	.word	0x08003551
 8003544:	08003561 	.word	0x08003561
 8003548:	08003571 	.word	0x08003571
 800354c:	08003581 	.word	0x08003581
	case vehicleMenu:
		Vehicle_Button;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	2208      	movs	r2, #8
 8003556:	4916      	ldr	r1, [pc, #88]	; (80035b0 <selection_UI+0x98>)
 8003558:	4814      	ldr	r0, [pc, #80]	; (80035ac <selection_UI+0x94>)
 800355a:	f004 f99c 	bl	8007896 <HAL_UART_Transmit>
		break;
 800355e:	e01f      	b.n	80035a0 <selection_UI+0x88>
	case systemMenu:
		System_Button;
 8003560:	f04f 33ff 	mov.w	r3, #4294967295
 8003564:	2208      	movs	r2, #8
 8003566:	4913      	ldr	r1, [pc, #76]	; (80035b4 <selection_UI+0x9c>)
 8003568:	4810      	ldr	r0, [pc, #64]	; (80035ac <selection_UI+0x94>)
 800356a:	f004 f994 	bl	8007896 <HAL_UART_Transmit>
		break;
 800356e:	e017      	b.n	80035a0 <selection_UI+0x88>
	case bluetoothMenu:
		Bluetooth_Button;
 8003570:	f04f 33ff 	mov.w	r3, #4294967295
 8003574:	2208      	movs	r2, #8
 8003576:	4910      	ldr	r1, [pc, #64]	; (80035b8 <selection_UI+0xa0>)
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <selection_UI+0x94>)
 800357a:	f004 f98c 	bl	8007896 <HAL_UART_Transmit>
		break;
 800357e:	e00f      	b.n	80035a0 <selection_UI+0x88>
	case errorsMenu:
		Error_Button;
 8003580:	f04f 33ff 	mov.w	r3, #4294967295
 8003584:	2208      	movs	r2, #8
 8003586:	490d      	ldr	r1, [pc, #52]	; (80035bc <selection_UI+0xa4>)
 8003588:	4808      	ldr	r0, [pc, #32]	; (80035ac <selection_UI+0x94>)
 800358a:	f004 f984 	bl	8007896 <HAL_UART_Transmit>
		break;
 800358e:	e007      	b.n	80035a0 <selection_UI+0x88>
	default:
		NO_Button;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	2208      	movs	r2, #8
 8003596:	490a      	ldr	r1, [pc, #40]	; (80035c0 <selection_UI+0xa8>)
 8003598:	4804      	ldr	r0, [pc, #16]	; (80035ac <selection_UI+0x94>)
 800359a:	f004 f97c 	bl	8007896 <HAL_UART_Transmit>
		break;
 800359e:	bf00      	nop
	}
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200000b8 	.word	0x200000b8
 80035ac:	20000524 	.word	0x20000524
 80035b0:	2000021c 	.word	0x2000021c
 80035b4:	20000224 	.word	0x20000224
 80035b8:	2000022c 	.word	0x2000022c
 80035bc:	20000234 	.word	0x20000234
 80035c0:	2000023c 	.word	0x2000023c

080035c4 <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	if (error_on == true) {
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <errorIcon+0xc8>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <errorIcon+0x1c>
		Error_ON_Icon;
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
 80035d4:	2208      	movs	r2, #8
 80035d6:	492e      	ldr	r1, [pc, #184]	; (8003690 <errorIcon+0xcc>)
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <errorIcon+0xd0>)
 80035da:	f004 f95c 	bl	8007896 <HAL_UART_Transmit>
 80035de:	e006      	b.n	80035ee <errorIcon+0x2a>
	} else {
		Error_OFF_Icon;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	2208      	movs	r2, #8
 80035e6:	492c      	ldr	r1, [pc, #176]	; (8003698 <errorIcon+0xd4>)
 80035e8:	482a      	ldr	r0, [pc, #168]	; (8003694 <errorIcon+0xd0>)
 80035ea:	f004 f954 	bl	8007896 <HAL_UART_Transmit>
	}
	if (milderror_on == true) {
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <errorIcon+0xd8>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <errorIcon+0x42>
		Mild_Error_ON_Icon;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	2208      	movs	r2, #8
 80035fc:	4928      	ldr	r1, [pc, #160]	; (80036a0 <errorIcon+0xdc>)
 80035fe:	4825      	ldr	r0, [pc, #148]	; (8003694 <errorIcon+0xd0>)
 8003600:	f004 f949 	bl	8007896 <HAL_UART_Transmit>
 8003604:	e006      	b.n	8003614 <errorIcon+0x50>
	} else {
		Mild_Error_OFF_Icon;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	2208      	movs	r2, #8
 800360c:	4925      	ldr	r1, [pc, #148]	; (80036a4 <errorIcon+0xe0>)
 800360e:	4821      	ldr	r0, [pc, #132]	; (8003694 <errorIcon+0xd0>)
 8003610:	f004 f941 	bl	8007896 <HAL_UART_Transmit>
	}
	if (service_on == true) {
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <errorIcon+0xe4>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <errorIcon+0x68>
		Service_Error_ON_Icon;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	2208      	movs	r2, #8
 8003622:	4922      	ldr	r1, [pc, #136]	; (80036ac <errorIcon+0xe8>)
 8003624:	481b      	ldr	r0, [pc, #108]	; (8003694 <errorIcon+0xd0>)
 8003626:	f004 f936 	bl	8007896 <HAL_UART_Transmit>
 800362a:	e006      	b.n	800363a <errorIcon+0x76>
	} else {
		Service_Error_OFF_Icon;
 800362c:	f04f 33ff 	mov.w	r3, #4294967295
 8003630:	2208      	movs	r2, #8
 8003632:	491f      	ldr	r1, [pc, #124]	; (80036b0 <errorIcon+0xec>)
 8003634:	4817      	ldr	r0, [pc, #92]	; (8003694 <errorIcon+0xd0>)
 8003636:	f004 f92e 	bl	8007896 <HAL_UART_Transmit>
	}
	if (bat_temp_high == true) {
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <errorIcon+0xf0>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <errorIcon+0x8e>
		Battery_High_Temp_Popup_ON;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	2208      	movs	r2, #8
 8003648:	491b      	ldr	r1, [pc, #108]	; (80036b8 <errorIcon+0xf4>)
 800364a:	4812      	ldr	r0, [pc, #72]	; (8003694 <errorIcon+0xd0>)
 800364c:	f004 f923 	bl	8007896 <HAL_UART_Transmit>
 8003650:	e006      	b.n	8003660 <errorIcon+0x9c>
	} else {
		Battery_High_Temp_Popup_OFF;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	2208      	movs	r2, #8
 8003658:	4918      	ldr	r1, [pc, #96]	; (80036bc <errorIcon+0xf8>)
 800365a:	480e      	ldr	r0, [pc, #56]	; (8003694 <errorIcon+0xd0>)
 800365c:	f004 f91b 	bl	8007896 <HAL_UART_Transmit>
	}
	if (aux_low_on == true) {
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <errorIcon+0xfc>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <errorIcon+0xb4>
		Battery_ON_Icon;
 8003668:	f04f 33ff 	mov.w	r3, #4294967295
 800366c:	2208      	movs	r2, #8
 800366e:	4915      	ldr	r1, [pc, #84]	; (80036c4 <errorIcon+0x100>)
 8003670:	4808      	ldr	r0, [pc, #32]	; (8003694 <errorIcon+0xd0>)
 8003672:	f004 f910 	bl	8007896 <HAL_UART_Transmit>
	} else {
		Battery_OFF_Icon;
	}
}
 8003676:	e006      	b.n	8003686 <errorIcon+0xc2>
		Battery_OFF_Icon;
 8003678:	f04f 33ff 	mov.w	r3, #4294967295
 800367c:	2208      	movs	r2, #8
 800367e:	4912      	ldr	r1, [pc, #72]	; (80036c8 <errorIcon+0x104>)
 8003680:	4804      	ldr	r0, [pc, #16]	; (8003694 <errorIcon+0xd0>)
 8003682:	f004 f908 	bl	8007896 <HAL_UART_Transmit>
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	2000040a 	.word	0x2000040a
 8003690:	20000164 	.word	0x20000164
 8003694:	20000524 	.word	0x20000524
 8003698:	2000016c 	.word	0x2000016c
 800369c:	2000040b 	.word	0x2000040b
 80036a0:	20000184 	.word	0x20000184
 80036a4:	2000018c 	.word	0x2000018c
 80036a8:	2000040c 	.word	0x2000040c
 80036ac:	20000174 	.word	0x20000174
 80036b0:	2000017c 	.word	0x2000017c
 80036b4:	2000040d 	.word	0x2000040d
 80036b8:	20000264 	.word	0x20000264
 80036bc:	2000026c 	.word	0x2000026c
 80036c0:	2000040e 	.word	0x2000040e
 80036c4:	20000154 	.word	0x20000154
 80036c8:	2000015c 	.word	0x2000015c

080036cc <errorPopup>:

void errorPopup(void) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <errorPopup+0x30>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d107      	bne.n	80036e8 <errorPopup+0x1c>
		SystemError_Critical_Popup;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	220a      	movs	r2, #10
 80036de:	4908      	ldr	r1, [pc, #32]	; (8003700 <errorPopup+0x34>)
 80036e0:	4808      	ldr	r0, [pc, #32]	; (8003704 <errorPopup+0x38>)
 80036e2:	f004 f8d8 	bl	8007896 <HAL_UART_Transmit>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 80036e6:	e006      	b.n	80036f6 <errorPopup+0x2a>
		SystemError_Mild_Popup_Page;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	220a      	movs	r2, #10
 80036ee:	4906      	ldr	r1, [pc, #24]	; (8003708 <errorPopup+0x3c>)
 80036f0:	4804      	ldr	r0, [pc, #16]	; (8003704 <errorPopup+0x38>)
 80036f2:	f004 f8d0 	bl	8007896 <HAL_UART_Transmit>
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200003ed 	.word	0x200003ed
 8003700:	2000013c 	.word	0x2000013c
 8003704:	20000524 	.word	0x20000524
 8003708:	20000130 	.word	0x20000130

0800370c <errorCode>:

void errorCode(void) {
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <errorCode+0xd0>)
 8003712:	2211      	movs	r2, #17
 8003714:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <errorCode+0xd0>)
 8003718:	2294      	movs	r2, #148	; 0x94
 800371a:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <errorCode+0xd0>)
 800371e:	2200      	movs	r2, #0
 8003720:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 8003722:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <errorCode+0xd4>)
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <errorCode+0xd0>)
 8003728:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	2208      	movs	r2, #8
 8003730:	492a      	ldr	r1, [pc, #168]	; (80037dc <errorCode+0xd0>)
 8003732:	482c      	ldr	r0, [pc, #176]	; (80037e4 <errorCode+0xd8>)
 8003734:	f004 f8af 	bl	8007896 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 8003738:	4b28      	ldr	r3, [pc, #160]	; (80037dc <errorCode+0xd0>)
 800373a:	2211      	movs	r2, #17
 800373c:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 800373e:	4b27      	ldr	r3, [pc, #156]	; (80037dc <errorCode+0xd0>)
 8003740:	2297      	movs	r2, #151	; 0x97
 8003742:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	2208      	movs	r2, #8
 800374a:	4924      	ldr	r1, [pc, #144]	; (80037dc <errorCode+0xd0>)
 800374c:	4825      	ldr	r0, [pc, #148]	; (80037e4 <errorCode+0xd8>)
 800374e:	f004 f8a2 	bl	8007896 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <errorCode+0xd0>)
 8003754:	2211      	movs	r2, #17
 8003756:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 8003758:	4b20      	ldr	r3, [pc, #128]	; (80037dc <errorCode+0xd0>)
 800375a:	2295      	movs	r2, #149	; 0x95
 800375c:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <errorCode+0xd0>)
 8003760:	2200      	movs	r2, #0
 8003762:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 8003764:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <errorCode+0xdc>)
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <errorCode+0xd0>)
 800376a:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	2208      	movs	r2, #8
 8003772:	491a      	ldr	r1, [pc, #104]	; (80037dc <errorCode+0xd0>)
 8003774:	481b      	ldr	r0, [pc, #108]	; (80037e4 <errorCode+0xd8>)
 8003776:	f004 f88e 	bl	8007896 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <errorCode+0xd0>)
 800377c:	2211      	movs	r2, #17
 800377e:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <errorCode+0xd0>)
 8003782:	2298      	movs	r2, #152	; 0x98
 8003784:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
 800378a:	2208      	movs	r2, #8
 800378c:	4913      	ldr	r1, [pc, #76]	; (80037dc <errorCode+0xd0>)
 800378e:	4815      	ldr	r0, [pc, #84]	; (80037e4 <errorCode+0xd8>)
 8003790:	f004 f881 	bl	8007896 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Mild
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <errorCode+0xd0>)
 8003796:	2211      	movs	r2, #17
 8003798:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <errorCode+0xd0>)
 800379c:	2296      	movs	r2, #150	; 0x96
 800379e:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <errorCode+0xd0>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <errorCode+0xe0>)
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <errorCode+0xd0>)
 80037ac:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	2208      	movs	r2, #8
 80037b4:	4909      	ldr	r1, [pc, #36]	; (80037dc <errorCode+0xd0>)
 80037b6:	480b      	ldr	r0, [pc, #44]	; (80037e4 <errorCode+0xd8>)
 80037b8:	f004 f86d 	bl	8007896 <HAL_UART_Transmit>
	;
	strDATA[4] = 0x11; //System Error Critical
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <errorCode+0xd0>)
 80037be:	2211      	movs	r2, #17
 80037c0:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <errorCode+0xd0>)
 80037c4:	2299      	movs	r2, #153	; 0x99
 80037c6:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295
 80037cc:	2208      	movs	r2, #8
 80037ce:	4903      	ldr	r1, [pc, #12]	; (80037dc <errorCode+0xd0>)
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <errorCode+0xd8>)
 80037d2:	f004 f860 	bl	8007896 <HAL_UART_Transmit>
	;

}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000390 	.word	0x20000390
 80037e0:	200003eb 	.word	0x200003eb
 80037e4:	20000524 	.word	0x20000524
 80037e8:	200003ec 	.word	0x200003ec
 80037ec:	200003ed 	.word	0x200003ed

080037f0 <modeSelection>:

void modeSelection(uimode_t currentMode) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
//	if (!_modeChanged) {
//		drivePageSetter(currentPage);
//	}
	if (currentMode == modeCleared) {
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d107      	bne.n	8003810 <modeSelection+0x20>
		ModeClear_Icon;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	2208      	movs	r2, #8
 8003806:	4930      	ldr	r1, [pc, #192]	; (80038c8 <modeSelection+0xd8>)
 8003808:	4830      	ldr	r0, [pc, #192]	; (80038cc <modeSelection+0xdc>)
 800380a:	f004 f844 	bl	8007896 <HAL_UART_Transmit>
		return;
 800380e:	e057      	b.n	80038c0 <modeSelection+0xd0>
//	if (mode_count > 15) {
//		rtn = true;
//		mode_count = 0;
//	}

	switch (currentMode) {
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d037      	beq.n	8003886 <modeSelection+0x96>
 8003816:	2b03      	cmp	r3, #3
 8003818:	dc4b      	bgt.n	80038b2 <modeSelection+0xc2>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <modeSelection+0x34>
 800381e:	2b02      	cmp	r3, #2
 8003820:	d00f      	beq.n	8003842 <modeSelection+0x52>
			//SportMode_Popup;
			_modeChanged = false;
		}
		break;
	default:
		break;
 8003822:	e046      	b.n	80038b2 <modeSelection+0xc2>
		if (modeIcon) {
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <modeSelection+0xe0>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d044      	beq.n	80038b6 <modeSelection+0xc6>
			NormalMode_Icon;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	2208      	movs	r2, #8
 8003832:	4928      	ldr	r1, [pc, #160]	; (80038d4 <modeSelection+0xe4>)
 8003834:	4825      	ldr	r0, [pc, #148]	; (80038cc <modeSelection+0xdc>)
 8003836:	f004 f82e 	bl	8007896 <HAL_UART_Transmit>
			modeIcon = false;
 800383a:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <modeSelection+0xe0>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
		break;
 8003840:	e039      	b.n	80038b6 <modeSelection+0xc6>
		if (mode_evcu == 1) {
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <modeSelection+0xe8>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <modeSelection+0x6a>
			PowerLimitON_Icon;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	2208      	movs	r2, #8
 8003850:	4922      	ldr	r1, [pc, #136]	; (80038dc <modeSelection+0xec>)
 8003852:	481e      	ldr	r0, [pc, #120]	; (80038cc <modeSelection+0xdc>)
 8003854:	f004 f81f 	bl	8007896 <HAL_UART_Transmit>
 8003858:	e006      	b.n	8003868 <modeSelection+0x78>
			PowerLimitOFF_Icon;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	2208      	movs	r2, #8
 8003860:	491f      	ldr	r1, [pc, #124]	; (80038e0 <modeSelection+0xf0>)
 8003862:	481a      	ldr	r0, [pc, #104]	; (80038cc <modeSelection+0xdc>)
 8003864:	f004 f817 	bl	8007896 <HAL_UART_Transmit>
		if (modeIcon) {
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <modeSelection+0xe0>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d024      	beq.n	80038ba <modeSelection+0xca>
			modeIcon = false;
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <modeSelection+0xe0>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
			EcoMode_Icon;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	2208      	movs	r2, #8
 800387c:	4919      	ldr	r1, [pc, #100]	; (80038e4 <modeSelection+0xf4>)
 800387e:	4813      	ldr	r0, [pc, #76]	; (80038cc <modeSelection+0xdc>)
 8003880:	f004 f809 	bl	8007896 <HAL_UART_Transmit>
		break;
 8003884:	e019      	b.n	80038ba <modeSelection+0xca>
		if (modeIcon) {
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <modeSelection+0xe0>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <modeSelection+0xb2>
			modeIcon = false;
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <modeSelection+0xe0>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	2208      	movs	r2, #8
 800389a:	4913      	ldr	r1, [pc, #76]	; (80038e8 <modeSelection+0xf8>)
 800389c:	480b      	ldr	r0, [pc, #44]	; (80038cc <modeSelection+0xdc>)
 800389e:	f003 fffa 	bl	8007896 <HAL_UART_Transmit>
		if (_modeChanged) {
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <modeSelection+0xfc>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <modeSelection+0xce>
			_modeChanged = false;
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <modeSelection+0xfc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
		break;
 80038b0:	e005      	b.n	80038be <modeSelection+0xce>
		break;
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <modeSelection+0xd0>
		break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <modeSelection+0xd0>
		break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <modeSelection+0xd0>
		break;
 80038be:	bf00      	nop
	}
}
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200001ec 	.word	0x200001ec
 80038cc:	20000524 	.word	0x20000524
 80038d0:	20000412 	.word	0x20000412
 80038d4:	200001dc 	.word	0x200001dc
 80038d8:	200003e8 	.word	0x200003e8
 80038dc:	20000194 	.word	0x20000194
 80038e0:	2000019c 	.word	0x2000019c
 80038e4:	200001d4 	.word	0x200001d4
 80038e8:	200001e4 	.word	0x200001e4
 80038ec:	20000425 	.word	0x20000425

080038f0 <popUpHandler>:

void popUpHandler(void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
	//Set popup priority Here

	switch (popUpNumber) {
 80038f4:	4b26      	ldr	r3, [pc, #152]	; (8003990 <popUpHandler+0xa0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d846      	bhi.n	800398a <popUpHandler+0x9a>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <popUpHandler+0x14>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	0800391d 	.word	0x0800391d
 8003908:	08003933 	.word	0x08003933
 800390c:	08003949 	.word	0x08003949
 8003910:	0800395f 	.word	0x0800395f
 8003914:	08003975 	.word	0x08003975
 8003918:	0800398b 	.word	0x0800398b
	case 0:
		//popUp_OFF;
		Battery_High_Temp_Popup_OFF;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
 8003920:	2208      	movs	r2, #8
 8003922:	491c      	ldr	r1, [pc, #112]	; (8003994 <popUpHandler+0xa4>)
 8003924:	481c      	ldr	r0, [pc, #112]	; (8003998 <popUpHandler+0xa8>)
 8003926:	f003 ffb6 	bl	8007896 <HAL_UART_Transmit>
		inPopup = false;
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <popUpHandler+0xac>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
		break;
 8003930:	e02c      	b.n	800398c <popUpHandler+0x9c>
	case 1:
		//NormalMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	2208      	movs	r2, #8
 8003938:	4919      	ldr	r1, [pc, #100]	; (80039a0 <popUpHandler+0xb0>)
 800393a:	4817      	ldr	r0, [pc, #92]	; (8003998 <popUpHandler+0xa8>)
 800393c:	f003 ffab 	bl	8007896 <HAL_UART_Transmit>
		inPopup = true;
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <popUpHandler+0xac>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
		break;
 8003946:	e021      	b.n	800398c <popUpHandler+0x9c>
	case 2:
		//EcoMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003948:	f04f 33ff 	mov.w	r3, #4294967295
 800394c:	2208      	movs	r2, #8
 800394e:	4914      	ldr	r1, [pc, #80]	; (80039a0 <popUpHandler+0xb0>)
 8003950:	4811      	ldr	r0, [pc, #68]	; (8003998 <popUpHandler+0xa8>)
 8003952:	f003 ffa0 	bl	8007896 <HAL_UART_Transmit>
		inPopup = true;
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <popUpHandler+0xac>)
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
		break;
 800395c:	e016      	b.n	800398c <popUpHandler+0x9c>
	case 3:
		//SportMode_Popup;
		Battery_High_Temp_Popup_ON;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	2208      	movs	r2, #8
 8003964:	490e      	ldr	r1, [pc, #56]	; (80039a0 <popUpHandler+0xb0>)
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <popUpHandler+0xa8>)
 8003968:	f003 ff95 	bl	8007896 <HAL_UART_Transmit>
		inPopup = true;
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <popUpHandler+0xac>)
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
		break;
 8003972:	e00b      	b.n	800398c <popUpHandler+0x9c>
	case 4:
		ModeChangeOFF_Page;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	2208      	movs	r2, #8
 800397a:	490a      	ldr	r1, [pc, #40]	; (80039a4 <popUpHandler+0xb4>)
 800397c:	4806      	ldr	r0, [pc, #24]	; (8003998 <popUpHandler+0xa8>)
 800397e:	f003 ff8a 	bl	8007896 <HAL_UART_Transmit>
		inPopup = true;
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <popUpHandler+0xac>)
 8003984:	2201      	movs	r2, #1
 8003986:	701a      	strb	r2, [r3, #0]
		break;
 8003988:	e000      	b.n	800398c <popUpHandler+0x9c>
	case 5:
		//ModeChangeOFF_Page;
		break;

	default:
		break;
 800398a:	bf00      	nop
	}

}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000431 	.word	0x20000431
 8003994:	2000026c 	.word	0x2000026c
 8003998:	20000524 	.word	0x20000524
 800399c:	20000017 	.word	0x20000017
 80039a0:	20000264 	.word	0x20000264
 80039a4:	20000274 	.word	0x20000274

080039a8 <startingUp>:

	}
}
uint8_t delayCounter = 0;

void startingUp(void) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0

//	if (accessory == 0) {
//		modeSelection(currentMode);
//	}

	if (error_check) {
 80039ac:	4b4f      	ldr	r3, [pc, #316]	; (8003aec <startingUp+0x144>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <startingUp+0x22>
		if (err_State_Navigation == true) {
 80039b4:	4b4e      	ldr	r3, [pc, #312]	; (8003af0 <startingUp+0x148>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <startingUp+0x22>
			SysError_Shutdown_Page;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	220a      	movs	r2, #10
 80039c2:	494c      	ldr	r1, [pc, #304]	; (8003af4 <startingUp+0x14c>)
 80039c4:	484c      	ldr	r0, [pc, #304]	; (8003af8 <startingUp+0x150>)
 80039c6:	f003 ff66 	bl	8007896 <HAL_UART_Transmit>
		}
	}

	if (entry == true) {
 80039ca:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <startingUp+0x154>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d024      	beq.n	8003a1c <startingUp+0x74>
		if (_navigation) {
 80039d2:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <startingUp+0x158>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d019      	beq.n	8003a0e <startingUp+0x66>
			if (_trasmitGlobal == MainMenuPages) {
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <startingUp+0x15c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <startingUp+0x4a>
				drivePageSetter(_drivePageSet);
 80039e4:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <startingUp+0x160>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fb02 	bl	8002ff4 <drivePageSetter>
				return;
 80039f0:	e07b      	b.n	8003aea <startingUp+0x142>
			}
			_trasmitGlobal = MainMenuPages;
 80039f2:	4b44      	ldr	r3, [pc, #272]	; (8003b04 <startingUp+0x15c>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	220a      	movs	r2, #10
 80039fe:	4943      	ldr	r1, [pc, #268]	; (8003b0c <startingUp+0x164>)
 8003a00:	483d      	ldr	r0, [pc, #244]	; (8003af8 <startingUp+0x150>)
 8003a02:	f003 ff48 	bl	8007896 <HAL_UART_Transmit>
			_navigation = false;
 8003a06:	4b3e      	ldr	r3, [pc, #248]	; (8003b00 <startingUp+0x158>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
			return;
 8003a0c:	e06d      	b.n	8003aea <startingUp+0x142>
		}
		Press_Brake_Page;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a12:	220a      	movs	r2, #10
 8003a14:	493e      	ldr	r1, [pc, #248]	; (8003b10 <startingUp+0x168>)
 8003a16:	4838      	ldr	r0, [pc, #224]	; (8003af8 <startingUp+0x150>)
 8003a18:	f003 ff3d 	bl	8007896 <HAL_UART_Transmit>
	}

	if (start == 1) {
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <startingUp+0x16c>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d141      	bne.n	8003aa8 <startingUp+0x100>
		entry = false;
 8003a24:	4b35      	ldr	r3, [pc, #212]	; (8003afc <startingUp+0x154>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <startingUp+0x170>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <startingUp+0x90>
			//bootAnimation();
			checklit = false;
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <startingUp+0x170>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <startingUp+0x174>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d118      	bne.n	8003a72 <startingUp+0xca>
			ReadytoDrive_ON_Icon;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	2208      	movs	r2, #8
 8003a46:	4936      	ldr	r1, [pc, #216]	; (8003b20 <startingUp+0x178>)
 8003a48:	482b      	ldr	r0, [pc, #172]	; (8003af8 <startingUp+0x150>)
 8003a4a:	f003 ff24 	bl	8007896 <HAL_UART_Transmit>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <startingUp+0x17c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d014      	beq.n	8003a80 <startingUp+0xd8>
				ReadytoDrive_Page;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	220a      	movs	r2, #10
 8003a5c:	4932      	ldr	r1, [pc, #200]	; (8003b28 <startingUp+0x180>)
 8003a5e:	4826      	ldr	r0, [pc, #152]	; (8003af8 <startingUp+0x150>)
 8003a60:	f003 ff19 	bl	8007896 <HAL_UART_Transmit>
				_testPage = true;
 8003a64:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <startingUp+0x184>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
				startup = false;
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	; (8003b24 <startingUp+0x17c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	e006      	b.n	8003a80 <startingUp+0xd8>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	220a      	movs	r2, #10
 8003a78:	492d      	ldr	r1, [pc, #180]	; (8003b30 <startingUp+0x188>)
 8003a7a:	481f      	ldr	r0, [pc, #124]	; (8003af8 <startingUp+0x150>)
 8003a7c:	f003 ff0b 	bl	8007896 <HAL_UART_Transmit>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 8003a80:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <startingUp+0x18c>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <startingUp+0xf0>
			Charge_Connection_Error_Popup_ON;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	492a      	ldr	r1, [pc, #168]	; (8003b38 <startingUp+0x190>)
 8003a90:	4819      	ldr	r0, [pc, #100]	; (8003af8 <startingUp+0x150>)
 8003a92:	f003 ff00 	bl	8007896 <HAL_UART_Transmit>
 8003a96:	e028      	b.n	8003aea <startingUp+0x142>
		} else {
			Charge_Connection_Error_Popup_OFF;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4927      	ldr	r1, [pc, #156]	; (8003b3c <startingUp+0x194>)
 8003aa0:	4815      	ldr	r0, [pc, #84]	; (8003af8 <startingUp+0x150>)
 8003aa2:	f003 fef8 	bl	8007896 <HAL_UART_Transmit>
 8003aa6:	e020      	b.n	8003aea <startingUp+0x142>
//		if (mode) {
//			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
//			//Final: Mode Change unavailable before ignition
//			mode = false;
//		}
		if (warning == 1) {
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <startingUp+0x198>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <startingUp+0x116>
			Press_Brake_Page;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	4916      	ldr	r1, [pc, #88]	; (8003b10 <startingUp+0x168>)
 8003ab8:	480f      	ldr	r0, [pc, #60]	; (8003af8 <startingUp+0x150>)
 8003aba:	f003 feec 	bl	8007896 <HAL_UART_Transmit>
		}
		if (warning == 2) {
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <startingUp+0x198>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d106      	bne.n	8003ad4 <startingUp+0x12c>
			Mild_Error_ON_Icon;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	2208      	movs	r2, #8
 8003acc:	491d      	ldr	r1, [pc, #116]	; (8003b44 <startingUp+0x19c>)
 8003ace:	480a      	ldr	r0, [pc, #40]	; (8003af8 <startingUp+0x150>)
 8003ad0:	f003 fee1 	bl	8007896 <HAL_UART_Transmit>
		}
		if (warning == 3) {
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <startingUp+0x198>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d106      	bne.n	8003aea <startingUp+0x142>
			Gear_Error_Page;
 8003adc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae0:	220a      	movs	r2, #10
 8003ae2:	4919      	ldr	r1, [pc, #100]	; (8003b48 <startingUp+0x1a0>)
 8003ae4:	4804      	ldr	r0, [pc, #16]	; (8003af8 <startingUp+0x150>)
 8003ae6:	f003 fed6 	bl	8007896 <HAL_UART_Transmit>

		}
	}

}
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000410 	.word	0x20000410
 8003af0:	200003f4 	.word	0x200003f4
 8003af4:	200000f4 	.word	0x200000f4
 8003af8:	20000524 	.word	0x20000524
 8003afc:	2000000d 	.word	0x2000000d
 8003b00:	20000418 	.word	0x20000418
 8003b04:	20000434 	.word	0x20000434
 8003b08:	20000433 	.word	0x20000433
 8003b0c:	20000034 	.word	0x20000034
 8003b10:	20000040 	.word	0x20000040
 8003b14:	200003e4 	.word	0x200003e4
 8003b18:	2000000e 	.word	0x2000000e
 8003b1c:	200003e3 	.word	0x200003e3
 8003b20:	200001a4 	.word	0x200001a4
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	20000064 	.word	0x20000064
 8003b2c:	2000042b 	.word	0x2000042b
 8003b30:	20000058 	.word	0x20000058
 8003b34:	20000415 	.word	0x20000415
 8003b38:	2000027c 	.word	0x2000027c
 8003b3c:	20000284 	.word	0x20000284
 8003b40:	200003e9 	.word	0x200003e9
 8003b44:	20000184 	.word	0x20000184
 8003b48:	2000004c 	.word	0x2000004c

08003b4c <realTimeData>:

uint8_t powerBarTransmit = 0;

void realTimeData(void) { //Realtime updatable data sending
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
//Speed
	realTime_counter++;
 8003b50:	4ba0      	ldr	r3, [pc, #640]	; (8003dd4 <realTimeData+0x288>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b9e      	ldr	r3, [pc, #632]	; (8003dd4 <realTimeData+0x288>)
 8003b5a:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 1) {
 8003b5c:	4b9d      	ldr	r3, [pc, #628]	; (8003dd4 <realTimeData+0x288>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d114      	bne.n	8003b8e <realTimeData+0x42>
		strDATA[4] = 0x11; //
 8003b64:	4b9c      	ldr	r3, [pc, #624]	; (8003dd8 <realTimeData+0x28c>)
 8003b66:	2211      	movs	r2, #17
 8003b68:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x00; //
 8003b6a:	4b9b      	ldr	r3, [pc, #620]	; (8003dd8 <realTimeData+0x28c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (test_speed & 0xFF);
 8003b70:	4b9a      	ldr	r3, [pc, #616]	; (8003ddc <realTimeData+0x290>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	4b98      	ldr	r3, [pc, #608]	; (8003dd8 <realTimeData+0x28c>)
 8003b78:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (test_speed >> 8);
 8003b7a:	4b98      	ldr	r3, [pc, #608]	; (8003ddc <realTimeData+0x290>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	0a1b      	lsrs	r3, r3, #8
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	4b94      	ldr	r3, [pc, #592]	; (8003dd8 <realTimeData+0x28c>)
 8003b86:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
		testFlag_2 = true;
 8003b88:	4b95      	ldr	r3, [pc, #596]	; (8003de0 <realTimeData+0x294>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
	}
//ODO
	if (realTime_counter == 2) {
 8003b8e:	4b91      	ldr	r3, [pc, #580]	; (8003dd4 <realTimeData+0x288>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d11c      	bne.n	8003bd0 <realTimeData+0x84>
		strDATA2[4] = 0x11;
 8003b96:	4b93      	ldr	r3, [pc, #588]	; (8003de4 <realTimeData+0x298>)
 8003b98:	2211      	movs	r2, #17
 8003b9a:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x20;
 8003b9c:	4b91      	ldr	r3, [pc, #580]	; (8003de4 <realTimeData+0x298>)
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.ODO & 0xFF);
 8003ba2:	4b91      	ldr	r3, [pc, #580]	; (8003de8 <realTimeData+0x29c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	; (8003de4 <realTimeData+0x298>)
 8003baa:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.ODO >> 8);
 8003bac:	4b8e      	ldr	r3, [pc, #568]	; (8003de8 <realTimeData+0x29c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	4b8b      	ldr	r3, [pc, #556]	; (8003de4 <realTimeData+0x298>)
 8003bb6:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.ODO >> 16);
 8003bb8:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <realTimeData+0x29c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b88      	ldr	r3, [pc, #544]	; (8003de4 <realTimeData+0x298>)
 8003bc2:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.ODO >> 24);
 8003bc4:	4b88      	ldr	r3, [pc, #544]	; (8003de8 <realTimeData+0x29c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e1b      	lsrs	r3, r3, #24
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	4b85      	ldr	r3, [pc, #532]	; (8003de4 <realTimeData+0x298>)
 8003bce:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA2
//		;
	}
////Trip
	if (realTime_counter == 3) {
 8003bd0:	4b80      	ldr	r3, [pc, #512]	; (8003dd4 <realTimeData+0x288>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d11d      	bne.n	8003c14 <realTimeData+0xc8>
		strDATA2[4] = 0x11;
 8003bd8:	4b82      	ldr	r3, [pc, #520]	; (8003de4 <realTimeData+0x298>)
 8003bda:	2211      	movs	r2, #17
 8003bdc:	711a      	strb	r2, [r3, #4]
		strDATA2[5] = 0x40;
 8003bde:	4b81      	ldr	r3, [pc, #516]	; (8003de4 <realTimeData+0x298>)
 8003be0:	2240      	movs	r2, #64	; 0x40
 8003be2:	715a      	strb	r2, [r3, #5]
		strDATA2[9] = (distance.trip & 0xFF);
 8003be4:	4b80      	ldr	r3, [pc, #512]	; (8003de8 <realTimeData+0x29c>)
 8003be6:	889b      	ldrh	r3, [r3, #4]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4b7e      	ldr	r3, [pc, #504]	; (8003de4 <realTimeData+0x298>)
 8003bec:	725a      	strb	r2, [r3, #9]
		strDATA2[8] = (distance.trip >> 8);
 8003bee:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <realTimeData+0x29c>)
 8003bf0:	889b      	ldrh	r3, [r3, #4]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	4b7a      	ldr	r3, [pc, #488]	; (8003de4 <realTimeData+0x298>)
 8003bfa:	721a      	strb	r2, [r3, #8]
		strDATA2[7] = (distance.trip >> 16);
 8003bfc:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <realTimeData+0x29c>)
 8003bfe:	889b      	ldrh	r3, [r3, #4]
 8003c00:	141b      	asrs	r3, r3, #16
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	4b77      	ldr	r3, [pc, #476]	; (8003de4 <realTimeData+0x298>)
 8003c06:	71da      	strb	r2, [r3, #7]
		strDATA2[6] = (distance.trip >> 24);
 8003c08:	4b77      	ldr	r3, [pc, #476]	; (8003de8 <realTimeData+0x29c>)
 8003c0a:	889b      	ldrh	r3, [r3, #4]
 8003c0c:	161b      	asrs	r3, r3, #24
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b74      	ldr	r3, [pc, #464]	; (8003de4 <realTimeData+0x298>)
 8003c12:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA2
//		;
	}
//Power Bar
	powerBarTransmit++;
 8003c14:	4b75      	ldr	r3, [pc, #468]	; (8003dec <realTimeData+0x2a0>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	4b73      	ldr	r3, [pc, #460]	; (8003dec <realTimeData+0x2a0>)
 8003c1e:	701a      	strb	r2, [r3, #0]
	if (realTime_counter == 4) {
 8003c20:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <realTimeData+0x288>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d102      	bne.n	8003c2e <realTimeData+0xe2>
//#endif
//				}
//			}
//
//		}
		realTime_counter = 0;
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <realTimeData+0x288>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
//		}

	///}

//Battery Bar
	if (soc_value <= 5) {
 8003c2e:	4b70      	ldr	r3, [pc, #448]	; (8003df0 <realTimeData+0x2a4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d80d      	bhi.n	8003c52 <realTimeData+0x106>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat0, sizeof(bat0));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat0, sizeof(bat0), HAL_MAX_DELAY);
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	496d      	ldr	r1, [pc, #436]	; (8003df4 <realTimeData+0x2a8>)
 8003c3e:	486e      	ldr	r0, [pc, #440]	; (8003df8 <realTimeData+0x2ac>)
 8003c40:	f003 fe29 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	2208      	movs	r2, #8
 8003c4a:	496c      	ldr	r1, [pc, #432]	; (8003dfc <realTimeData+0x2b0>)
 8003c4c:	486a      	ldr	r0, [pc, #424]	; (8003df8 <realTimeData+0x2ac>)
 8003c4e:	f003 fe22 	bl	8007896 <HAL_UART_Transmit>
#endif
	}
	if (6 <= soc_value && soc_value <= 10) {
 8003c52:	4b67      	ldr	r3, [pc, #412]	; (8003df0 <realTimeData+0x2a4>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d911      	bls.n	8003c7e <realTimeData+0x132>
 8003c5a:	4b65      	ldr	r3, [pc, #404]	; (8003df0 <realTimeData+0x2a4>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b0a      	cmp	r3, #10
 8003c60:	d80d      	bhi.n	8003c7e <realTimeData+0x132>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat5, sizeof(bat5));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat5, sizeof(bat5), HAL_MAX_DELAY);
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	2208      	movs	r2, #8
 8003c68:	4965      	ldr	r1, [pc, #404]	; (8003e00 <realTimeData+0x2b4>)
 8003c6a:	4863      	ldr	r0, [pc, #396]	; (8003df8 <realTimeData+0x2ac>)
 8003c6c:	f003 fe13 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
 8003c74:	2208      	movs	r2, #8
 8003c76:	4961      	ldr	r1, [pc, #388]	; (8003dfc <realTimeData+0x2b0>)
 8003c78:	485f      	ldr	r0, [pc, #380]	; (8003df8 <realTimeData+0x2ac>)
 8003c7a:	f003 fe0c 	bl	8007896 <HAL_UART_Transmit>
#endif
	}
	if (11 <= soc_value && soc_value <= 15) {
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <realTimeData+0x2a4>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b0a      	cmp	r3, #10
 8003c84:	d911      	bls.n	8003caa <realTimeData+0x15e>
 8003c86:	4b5a      	ldr	r3, [pc, #360]	; (8003df0 <realTimeData+0x2a4>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d80d      	bhi.n	8003caa <realTimeData+0x15e>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat10, sizeof(bat10));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat10, sizeof(bat10), HAL_MAX_DELAY);
 8003c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c92:	2208      	movs	r2, #8
 8003c94:	495b      	ldr	r1, [pc, #364]	; (8003e04 <realTimeData+0x2b8>)
 8003c96:	4858      	ldr	r0, [pc, #352]	; (8003df8 <realTimeData+0x2ac>)
 8003c98:	f003 fdfd 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	4956      	ldr	r1, [pc, #344]	; (8003dfc <realTimeData+0x2b0>)
 8003ca4:	4854      	ldr	r0, [pc, #336]	; (8003df8 <realTimeData+0x2ac>)
 8003ca6:	f003 fdf6 	bl	8007896 <HAL_UART_Transmit>
#endif
	}
	if (16 <= soc_value && soc_value <= 20) {
 8003caa:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <realTimeData+0x2a4>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b0f      	cmp	r3, #15
 8003cb0:	d911      	bls.n	8003cd6 <realTimeData+0x18a>
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <realTimeData+0x2a4>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b14      	cmp	r3, #20
 8003cb8:	d80d      	bhi.n	8003cd6 <realTimeData+0x18a>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat15, sizeof(bat15));
		HAL_UART_Transmit_DMA(&huart3, BotRedON, sizeof(BotRedON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat15, sizeof(bat15), HAL_MAX_DELAY);
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	2208      	movs	r2, #8
 8003cc0:	4951      	ldr	r1, [pc, #324]	; (8003e08 <realTimeData+0x2bc>)
 8003cc2:	484d      	ldr	r0, [pc, #308]	; (8003df8 <realTimeData+0x2ac>)
 8003cc4:	f003 fde7 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotRedON, sizeof(BotRedON), HAL_MAX_DELAY);
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ccc:	2208      	movs	r2, #8
 8003cce:	494b      	ldr	r1, [pc, #300]	; (8003dfc <realTimeData+0x2b0>)
 8003cd0:	4849      	ldr	r0, [pc, #292]	; (8003df8 <realTimeData+0x2ac>)
 8003cd2:	f003 fde0 	bl	8007896 <HAL_UART_Transmit>
#endif
	}
	if (21 <= soc_value && soc_value <= 25) {
 8003cd6:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <realTimeData+0x2a4>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b14      	cmp	r3, #20
 8003cdc:	d911      	bls.n	8003d02 <realTimeData+0x1b6>
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <realTimeData+0x2a4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b19      	cmp	r3, #25
 8003ce4:	d80d      	bhi.n	8003d02 <realTimeData+0x1b6>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat20, sizeof(bat20));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat20, sizeof(bat20), HAL_MAX_DELAY);
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	2208      	movs	r2, #8
 8003cec:	4947      	ldr	r1, [pc, #284]	; (8003e0c <realTimeData+0x2c0>)
 8003cee:	4842      	ldr	r0, [pc, #264]	; (8003df8 <realTimeData+0x2ac>)
 8003cf0:	f003 fdd1 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	4945      	ldr	r1, [pc, #276]	; (8003e10 <realTimeData+0x2c4>)
 8003cfc:	483e      	ldr	r0, [pc, #248]	; (8003df8 <realTimeData+0x2ac>)
 8003cfe:	f003 fdca 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (26 <= soc_value && soc_value <= 30) {
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <realTimeData+0x2a4>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b19      	cmp	r3, #25
 8003d08:	d911      	bls.n	8003d2e <realTimeData+0x1e2>
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <realTimeData+0x2a4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b1e      	cmp	r3, #30
 8003d10:	d80d      	bhi.n	8003d2e <realTimeData+0x1e2>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat25, sizeof(bat25));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat25, sizeof(bat25), HAL_MAX_DELAY);
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	2208      	movs	r2, #8
 8003d18:	493e      	ldr	r1, [pc, #248]	; (8003e14 <realTimeData+0x2c8>)
 8003d1a:	4837      	ldr	r0, [pc, #220]	; (8003df8 <realTimeData+0x2ac>)
 8003d1c:	f003 fdbb 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	2208      	movs	r2, #8
 8003d26:	493a      	ldr	r1, [pc, #232]	; (8003e10 <realTimeData+0x2c4>)
 8003d28:	4833      	ldr	r0, [pc, #204]	; (8003df8 <realTimeData+0x2ac>)
 8003d2a:	f003 fdb4 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (31 <= soc_value && soc_value <= 35) {
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <realTimeData+0x2a4>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b1e      	cmp	r3, #30
 8003d34:	d911      	bls.n	8003d5a <realTimeData+0x20e>
 8003d36:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <realTimeData+0x2a4>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b23      	cmp	r3, #35	; 0x23
 8003d3c:	d80d      	bhi.n	8003d5a <realTimeData+0x20e>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat30, sizeof(bat30));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat30, sizeof(bat30), HAL_MAX_DELAY);
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d42:	2208      	movs	r2, #8
 8003d44:	4934      	ldr	r1, [pc, #208]	; (8003e18 <realTimeData+0x2cc>)
 8003d46:	482c      	ldr	r0, [pc, #176]	; (8003df8 <realTimeData+0x2ac>)
 8003d48:	f003 fda5 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	2208      	movs	r2, #8
 8003d52:	492f      	ldr	r1, [pc, #188]	; (8003e10 <realTimeData+0x2c4>)
 8003d54:	4828      	ldr	r0, [pc, #160]	; (8003df8 <realTimeData+0x2ac>)
 8003d56:	f003 fd9e 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (36 <= soc_value && soc_value <= 40) {
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <realTimeData+0x2a4>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b23      	cmp	r3, #35	; 0x23
 8003d60:	d911      	bls.n	8003d86 <realTimeData+0x23a>
 8003d62:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <realTimeData+0x2a4>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b28      	cmp	r3, #40	; 0x28
 8003d68:	d80d      	bhi.n	8003d86 <realTimeData+0x23a>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat35, sizeof(bat35));
		HAL_UART_Transmit_DMA(&huart3, BotOrangeON, sizeof(BotOrangeON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat35, sizeof(bat35), HAL_MAX_DELAY);
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	2208      	movs	r2, #8
 8003d70:	492a      	ldr	r1, [pc, #168]	; (8003e1c <realTimeData+0x2d0>)
 8003d72:	4821      	ldr	r0, [pc, #132]	; (8003df8 <realTimeData+0x2ac>)
 8003d74:	f003 fd8f 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotOrangeON, sizeof(BotOrangeON),
 8003d78:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4924      	ldr	r1, [pc, #144]	; (8003e10 <realTimeData+0x2c4>)
 8003d80:	481d      	ldr	r0, [pc, #116]	; (8003df8 <realTimeData+0x2ac>)
 8003d82:	f003 fd88 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (41 <= soc_value && soc_value <= 45) {
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <realTimeData+0x2a4>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b28      	cmp	r3, #40	; 0x28
 8003d8c:	d911      	bls.n	8003db2 <realTimeData+0x266>
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <realTimeData+0x2a4>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b2d      	cmp	r3, #45	; 0x2d
 8003d94:	d80d      	bhi.n	8003db2 <realTimeData+0x266>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat40, sizeof(bat40));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat40, sizeof(bat40), HAL_MAX_DELAY);
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	4920      	ldr	r1, [pc, #128]	; (8003e20 <realTimeData+0x2d4>)
 8003d9e:	4816      	ldr	r0, [pc, #88]	; (8003df8 <realTimeData+0x2ac>)
 8003da0:	f003 fd79 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003da4:	f04f 33ff 	mov.w	r3, #4294967295
 8003da8:	2208      	movs	r2, #8
 8003daa:	491e      	ldr	r1, [pc, #120]	; (8003e24 <realTimeData+0x2d8>)
 8003dac:	4812      	ldr	r0, [pc, #72]	; (8003df8 <realTimeData+0x2ac>)
 8003dae:	f003 fd72 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (46 <= soc_value && soc_value <= 50) {
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <realTimeData+0x2a4>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b2d      	cmp	r3, #45	; 0x2d
 8003db8:	d93f      	bls.n	8003e3a <realTimeData+0x2ee>
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <realTimeData+0x2a4>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b32      	cmp	r3, #50	; 0x32
 8003dc0:	d83b      	bhi.n	8003e3a <realTimeData+0x2ee>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat45, sizeof(bat45));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat45, sizeof(bat45), HAL_MAX_DELAY);
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	4917      	ldr	r1, [pc, #92]	; (8003e28 <realTimeData+0x2dc>)
 8003dca:	480b      	ldr	r0, [pc, #44]	; (8003df8 <realTimeData+0x2ac>)
 8003dcc:	f003 fd63 	bl	8007896 <HAL_UART_Transmit>
 8003dd0:	e02c      	b.n	8003e2c <realTimeData+0x2e0>
 8003dd2:	bf00      	nop
 8003dd4:	2000042d 	.word	0x2000042d
 8003dd8:	20000390 	.word	0x20000390
 8003ddc:	200003cc 	.word	0x200003cc
 8003de0:	20000416 	.word	0x20000416
 8003de4:	20000398 	.word	0x20000398
 8003de8:	200003a4 	.word	0x200003a4
 8003dec:	20000521 	.word	0x20000521
 8003df0:	200003d0 	.word	0x200003d0
 8003df4:	2000028c 	.word	0x2000028c
 8003df8:	20000524 	.word	0x20000524
 8003dfc:	20000214 	.word	0x20000214
 8003e00:	20000294 	.word	0x20000294
 8003e04:	2000029c 	.word	0x2000029c
 8003e08:	200002a4 	.word	0x200002a4
 8003e0c:	200002ac 	.word	0x200002ac
 8003e10:	2000020c 	.word	0x2000020c
 8003e14:	200002b4 	.word	0x200002b4
 8003e18:	200002bc 	.word	0x200002bc
 8003e1c:	200002c4 	.word	0x200002c4
 8003e20:	200002cc 	.word	0x200002cc
 8003e24:	20000204 	.word	0x20000204
 8003e28:	200002d4 	.word	0x200002d4
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e30:	2208      	movs	r2, #8
 8003e32:	497a      	ldr	r1, [pc, #488]	; (800401c <realTimeData+0x4d0>)
 8003e34:	487a      	ldr	r0, [pc, #488]	; (8004020 <realTimeData+0x4d4>)
 8003e36:	f003 fd2e 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (51 <= soc_value && soc_value <= 55) {
 8003e3a:	4b7a      	ldr	r3, [pc, #488]	; (8004024 <realTimeData+0x4d8>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b32      	cmp	r3, #50	; 0x32
 8003e40:	d911      	bls.n	8003e66 <realTimeData+0x31a>
 8003e42:	4b78      	ldr	r3, [pc, #480]	; (8004024 <realTimeData+0x4d8>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b37      	cmp	r3, #55	; 0x37
 8003e48:	d80d      	bhi.n	8003e66 <realTimeData+0x31a>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat50, sizeof(bat50));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat50, sizeof(bat50), HAL_MAX_DELAY);
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	2208      	movs	r2, #8
 8003e50:	4975      	ldr	r1, [pc, #468]	; (8004028 <realTimeData+0x4dc>)
 8003e52:	4873      	ldr	r0, [pc, #460]	; (8004020 <realTimeData+0x4d4>)
 8003e54:	f003 fd1f 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003e58:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	496f      	ldr	r1, [pc, #444]	; (800401c <realTimeData+0x4d0>)
 8003e60:	486f      	ldr	r0, [pc, #444]	; (8004020 <realTimeData+0x4d4>)
 8003e62:	f003 fd18 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (56 <= soc_value && soc_value <= 60) {
 8003e66:	4b6f      	ldr	r3, [pc, #444]	; (8004024 <realTimeData+0x4d8>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b37      	cmp	r3, #55	; 0x37
 8003e6c:	d911      	bls.n	8003e92 <realTimeData+0x346>
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <realTimeData+0x4d8>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b3c      	cmp	r3, #60	; 0x3c
 8003e74:	d80d      	bhi.n	8003e92 <realTimeData+0x346>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat55, sizeof(bat55));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat55, sizeof(bat55), HAL_MAX_DELAY);
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	496b      	ldr	r1, [pc, #428]	; (800402c <realTimeData+0x4e0>)
 8003e7e:	4868      	ldr	r0, [pc, #416]	; (8004020 <realTimeData+0x4d4>)
 8003e80:	f003 fd09 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	2208      	movs	r2, #8
 8003e8a:	4964      	ldr	r1, [pc, #400]	; (800401c <realTimeData+0x4d0>)
 8003e8c:	4864      	ldr	r0, [pc, #400]	; (8004020 <realTimeData+0x4d4>)
 8003e8e:	f003 fd02 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (61 <= soc_value && soc_value <= 65) {
 8003e92:	4b64      	ldr	r3, [pc, #400]	; (8004024 <realTimeData+0x4d8>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b3c      	cmp	r3, #60	; 0x3c
 8003e98:	d911      	bls.n	8003ebe <realTimeData+0x372>
 8003e9a:	4b62      	ldr	r3, [pc, #392]	; (8004024 <realTimeData+0x4d8>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b41      	cmp	r3, #65	; 0x41
 8003ea0:	d80d      	bhi.n	8003ebe <realTimeData+0x372>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat60, sizeof(bat60));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat60, sizeof(bat60), HAL_MAX_DELAY);
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	4961      	ldr	r1, [pc, #388]	; (8004030 <realTimeData+0x4e4>)
 8003eaa:	485d      	ldr	r0, [pc, #372]	; (8004020 <realTimeData+0x4d4>)
 8003eac:	f003 fcf3 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	4959      	ldr	r1, [pc, #356]	; (800401c <realTimeData+0x4d0>)
 8003eb8:	4859      	ldr	r0, [pc, #356]	; (8004020 <realTimeData+0x4d4>)
 8003eba:	f003 fcec 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (66 <= soc_value && soc_value <= 70) {
 8003ebe:	4b59      	ldr	r3, [pc, #356]	; (8004024 <realTimeData+0x4d8>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b41      	cmp	r3, #65	; 0x41
 8003ec4:	d911      	bls.n	8003eea <realTimeData+0x39e>
 8003ec6:	4b57      	ldr	r3, [pc, #348]	; (8004024 <realTimeData+0x4d8>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b46      	cmp	r3, #70	; 0x46
 8003ecc:	d80d      	bhi.n	8003eea <realTimeData+0x39e>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat65, sizeof(bat65));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat65, sizeof(bat65), HAL_MAX_DELAY);
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	4957      	ldr	r1, [pc, #348]	; (8004034 <realTimeData+0x4e8>)
 8003ed6:	4852      	ldr	r0, [pc, #328]	; (8004020 <realTimeData+0x4d4>)
 8003ed8:	f003 fcdd 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	494e      	ldr	r1, [pc, #312]	; (800401c <realTimeData+0x4d0>)
 8003ee4:	484e      	ldr	r0, [pc, #312]	; (8004020 <realTimeData+0x4d4>)
 8003ee6:	f003 fcd6 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (71 <= soc_value && soc_value <= 75) {
 8003eea:	4b4e      	ldr	r3, [pc, #312]	; (8004024 <realTimeData+0x4d8>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b46      	cmp	r3, #70	; 0x46
 8003ef0:	d911      	bls.n	8003f16 <realTimeData+0x3ca>
 8003ef2:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <realTimeData+0x4d8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b4b      	cmp	r3, #75	; 0x4b
 8003ef8:	d80d      	bhi.n	8003f16 <realTimeData+0x3ca>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat70, sizeof(bat70));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat70, sizeof(bat70), HAL_MAX_DELAY);
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	2208      	movs	r2, #8
 8003f00:	494d      	ldr	r1, [pc, #308]	; (8004038 <realTimeData+0x4ec>)
 8003f02:	4847      	ldr	r0, [pc, #284]	; (8004020 <realTimeData+0x4d4>)
 8003f04:	f003 fcc7 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	4943      	ldr	r1, [pc, #268]	; (800401c <realTimeData+0x4d0>)
 8003f10:	4843      	ldr	r0, [pc, #268]	; (8004020 <realTimeData+0x4d4>)
 8003f12:	f003 fcc0 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (76 <= soc_value && soc_value <= 80) {
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <realTimeData+0x4d8>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b4b      	cmp	r3, #75	; 0x4b
 8003f1c:	d911      	bls.n	8003f42 <realTimeData+0x3f6>
 8003f1e:	4b41      	ldr	r3, [pc, #260]	; (8004024 <realTimeData+0x4d8>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b50      	cmp	r3, #80	; 0x50
 8003f24:	d80d      	bhi.n	8003f42 <realTimeData+0x3f6>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat75, sizeof(bat75));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat75, sizeof(bat75), HAL_MAX_DELAY);
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	4943      	ldr	r1, [pc, #268]	; (800403c <realTimeData+0x4f0>)
 8003f2e:	483c      	ldr	r0, [pc, #240]	; (8004020 <realTimeData+0x4d4>)
 8003f30:	f003 fcb1 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003f34:	f04f 33ff 	mov.w	r3, #4294967295
 8003f38:	2208      	movs	r2, #8
 8003f3a:	4938      	ldr	r1, [pc, #224]	; (800401c <realTimeData+0x4d0>)
 8003f3c:	4838      	ldr	r0, [pc, #224]	; (8004020 <realTimeData+0x4d4>)
 8003f3e:	f003 fcaa 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (81 <= soc_value && soc_value <= 85) {
 8003f42:	4b38      	ldr	r3, [pc, #224]	; (8004024 <realTimeData+0x4d8>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b50      	cmp	r3, #80	; 0x50
 8003f48:	d911      	bls.n	8003f6e <realTimeData+0x422>
 8003f4a:	4b36      	ldr	r3, [pc, #216]	; (8004024 <realTimeData+0x4d8>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	2b55      	cmp	r3, #85	; 0x55
 8003f50:	d80d      	bhi.n	8003f6e <realTimeData+0x422>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat80, sizeof(bat80));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat80, sizeof(bat80), HAL_MAX_DELAY);
 8003f52:	f04f 33ff 	mov.w	r3, #4294967295
 8003f56:	2208      	movs	r2, #8
 8003f58:	4939      	ldr	r1, [pc, #228]	; (8004040 <realTimeData+0x4f4>)
 8003f5a:	4831      	ldr	r0, [pc, #196]	; (8004020 <realTimeData+0x4d4>)
 8003f5c:	f003 fc9b 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	2208      	movs	r2, #8
 8003f66:	492d      	ldr	r1, [pc, #180]	; (800401c <realTimeData+0x4d0>)
 8003f68:	482d      	ldr	r0, [pc, #180]	; (8004020 <realTimeData+0x4d4>)
 8003f6a:	f003 fc94 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (86 <= soc_value && soc_value <= 90) {
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <realTimeData+0x4d8>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b55      	cmp	r3, #85	; 0x55
 8003f74:	d911      	bls.n	8003f9a <realTimeData+0x44e>
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <realTimeData+0x4d8>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b5a      	cmp	r3, #90	; 0x5a
 8003f7c:	d80d      	bhi.n	8003f9a <realTimeData+0x44e>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat85, sizeof(bat85));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat85, sizeof(bat85), HAL_MAX_DELAY);
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	2208      	movs	r2, #8
 8003f84:	492f      	ldr	r1, [pc, #188]	; (8004044 <realTimeData+0x4f8>)
 8003f86:	4826      	ldr	r0, [pc, #152]	; (8004020 <realTimeData+0x4d4>)
 8003f88:	f003 fc85 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f90:	2208      	movs	r2, #8
 8003f92:	4922      	ldr	r1, [pc, #136]	; (800401c <realTimeData+0x4d0>)
 8003f94:	4822      	ldr	r0, [pc, #136]	; (8004020 <realTimeData+0x4d4>)
 8003f96:	f003 fc7e 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (91 <= soc_value && soc_value <= 95) {
 8003f9a:	4b22      	ldr	r3, [pc, #136]	; (8004024 <realTimeData+0x4d8>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b5a      	cmp	r3, #90	; 0x5a
 8003fa0:	d911      	bls.n	8003fc6 <realTimeData+0x47a>
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <realTimeData+0x4d8>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b5f      	cmp	r3, #95	; 0x5f
 8003fa8:	d80d      	bhi.n	8003fc6 <realTimeData+0x47a>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	2208      	movs	r2, #8
 8003fb0:	4925      	ldr	r1, [pc, #148]	; (8004048 <realTimeData+0x4fc>)
 8003fb2:	481b      	ldr	r0, [pc, #108]	; (8004020 <realTimeData+0x4d4>)
 8003fb4:	f003 fc6f 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4917      	ldr	r1, [pc, #92]	; (800401c <realTimeData+0x4d0>)
 8003fc0:	4817      	ldr	r0, [pc, #92]	; (8004020 <realTimeData+0x4d4>)
 8003fc2:	f003 fc68 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (96 <= soc_value && soc_value <= 99) {
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <realTimeData+0x4d8>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b5f      	cmp	r3, #95	; 0x5f
 8003fcc:	d911      	bls.n	8003ff2 <realTimeData+0x4a6>
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <realTimeData+0x4d8>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b63      	cmp	r3, #99	; 0x63
 8003fd4:	d80d      	bhi.n	8003ff2 <realTimeData+0x4a6>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat90, sizeof(bat90));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat90, sizeof(bat90), HAL_MAX_DELAY);
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	2208      	movs	r2, #8
 8003fdc:	491a      	ldr	r1, [pc, #104]	; (8004048 <realTimeData+0x4fc>)
 8003fde:	4810      	ldr	r0, [pc, #64]	; (8004020 <realTimeData+0x4d4>)
 8003fe0:	f003 fc59 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	2208      	movs	r2, #8
 8003fea:	490c      	ldr	r1, [pc, #48]	; (800401c <realTimeData+0x4d0>)
 8003fec:	480c      	ldr	r0, [pc, #48]	; (8004020 <realTimeData+0x4d4>)
 8003fee:	f003 fc52 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}
	if (100 == soc_value) {
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <realTimeData+0x4d8>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d10d      	bne.n	8004016 <realTimeData+0x4ca>
#ifdef DMA
		HAL_UART_Transmit_DMA(&huart3, bat100, sizeof(bat100));
		HAL_UART_Transmit_DMA(&huart3, BotGreenON, sizeof(BotGreenON));
#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, bat100, sizeof(bat100), HAL_MAX_DELAY);
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	2208      	movs	r2, #8
 8004000:	4912      	ldr	r1, [pc, #72]	; (800404c <realTimeData+0x500>)
 8004002:	4807      	ldr	r0, [pc, #28]	; (8004020 <realTimeData+0x4d4>)
 8004004:	f003 fc47 	bl	8007896 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, BotGreenON, sizeof(BotGreenON),
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	2208      	movs	r2, #8
 800400e:	4903      	ldr	r1, [pc, #12]	; (800401c <realTimeData+0x4d0>)
 8004010:	4803      	ldr	r0, [pc, #12]	; (8004020 <realTimeData+0x4d4>)
 8004012:	f003 fc40 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
#endif
	}

}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000204 	.word	0x20000204
 8004020:	20000524 	.word	0x20000524
 8004024:	200003d0 	.word	0x200003d0
 8004028:	200002dc 	.word	0x200002dc
 800402c:	200002e4 	.word	0x200002e4
 8004030:	200002ec 	.word	0x200002ec
 8004034:	200002f4 	.word	0x200002f4
 8004038:	200002fc 	.word	0x200002fc
 800403c:	20000304 	.word	0x20000304
 8004040:	2000030c 	.word	0x2000030c
 8004044:	20000314 	.word	0x20000314
 8004048:	2000031c 	.word	0x2000031c
 800404c:	20000324 	.word	0x20000324

08004050 <oneTimeData>:

void oneTimeData(void) {
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0

	oneTime_counter++;
 8004054:	4b96      	ldr	r3, [pc, #600]	; (80042b0 <oneTimeData+0x260>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	4b94      	ldr	r3, [pc, #592]	; (80042b0 <oneTimeData+0x260>)
 800405e:	701a      	strb	r2, [r3, #0]

	if (readytodrive == 0) {
 8004060:	4b94      	ldr	r3, [pc, #592]	; (80042b4 <oneTimeData+0x264>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <oneTimeData+0x28>
		DriveUnit_OFF_Icon;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	2208      	movs	r2, #8
 800406e:	4992      	ldr	r1, [pc, #584]	; (80042b8 <oneTimeData+0x268>)
 8004070:	4892      	ldr	r0, [pc, #584]	; (80042bc <oneTimeData+0x26c>)
 8004072:	f003 fc10 	bl	8007896 <HAL_UART_Transmit>
 8004076:	e006      	b.n	8004086 <oneTimeData+0x36>
	} else {
		DriveUnit_ON_Icon;
 8004078:	f04f 33ff 	mov.w	r3, #4294967295
 800407c:	2208      	movs	r2, #8
 800407e:	4990      	ldr	r1, [pc, #576]	; (80042c0 <oneTimeData+0x270>)
 8004080:	488e      	ldr	r0, [pc, #568]	; (80042bc <oneTimeData+0x26c>)
 8004082:	f003 fc08 	bl	8007896 <HAL_UART_Transmit>
	}
//RPM
	if (oneTime_counter == 0) {
 8004086:	4b8a      	ldr	r3, [pc, #552]	; (80042b0 <oneTimeData+0x260>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d111      	bne.n	80040b2 <oneTimeData+0x62>
		strDATA[4] = 0x12;
 800408e:	4b8d      	ldr	r3, [pc, #564]	; (80042c4 <oneTimeData+0x274>)
 8004090:	2212      	movs	r2, #18
 8004092:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 8004094:	4b8b      	ldr	r3, [pc, #556]	; (80042c4 <oneTimeData+0x274>)
 8004096:	2250      	movs	r2, #80	; 0x50
 8004098:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (rpm_meter & 0xFF);
 800409a:	4b8b      	ldr	r3, [pc, #556]	; (80042c8 <oneTimeData+0x278>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4b88      	ldr	r3, [pc, #544]	; (80042c4 <oneTimeData+0x274>)
 80040a2:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (rpm_meter >> 8);
 80040a4:	4b88      	ldr	r3, [pc, #544]	; (80042c8 <oneTimeData+0x278>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	0a1b      	lsrs	r3, r3, #8
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	4b85      	ldr	r3, [pc, #532]	; (80042c4 <oneTimeData+0x274>)
 80040b0:	719a      	strb	r2, [r3, #6]
		//Transmit_strDATA
		//;
	}

//AVG SPEED
	if (oneTime_counter == 1) {
 80040b2:	4b7f      	ldr	r3, [pc, #508]	; (80042b0 <oneTimeData+0x260>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d111      	bne.n	80040de <oneTimeData+0x8e>
		strDATA[4] = 0x11;
 80040ba:	4b82      	ldr	r3, [pc, #520]	; (80042c4 <oneTimeData+0x274>)
 80040bc:	2211      	movs	r2, #17
 80040be:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x52;
 80040c0:	4b80      	ldr	r3, [pc, #512]	; (80042c4 <oneTimeData+0x274>)
 80040c2:	2252      	movs	r2, #82	; 0x52
 80040c4:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.tripAvgSpeed & 0xFF);
 80040c6:	4b81      	ldr	r3, [pc, #516]	; (80042cc <oneTimeData+0x27c>)
 80040c8:	891b      	ldrh	r3, [r3, #8]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <oneTimeData+0x274>)
 80040ce:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.tripAvgSpeed >> 8);
 80040d0:	4b7e      	ldr	r3, [pc, #504]	; (80042cc <oneTimeData+0x27c>)
 80040d2:	891b      	ldrh	r3, [r3, #8]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b7a      	ldr	r3, [pc, #488]	; (80042c4 <oneTimeData+0x274>)
 80040dc:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
	}

	//Trip Economy -------VP
	if (oneTime_counter == 2) {
 80040de:	4b74      	ldr	r3, [pc, #464]	; (80042b0 <oneTimeData+0x260>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d111      	bne.n	800410a <oneTimeData+0xba>
		strDATA[4] = 0x11;
 80040e6:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <oneTimeData+0x274>)
 80040e8:	2211      	movs	r2, #17
 80040ea:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 80040ec:	4b75      	ldr	r3, [pc, #468]	; (80042c4 <oneTimeData+0x274>)
 80040ee:	2250      	movs	r2, #80	; 0x50
 80040f0:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Economy & 0xFF);
 80040f2:	4b76      	ldr	r3, [pc, #472]	; (80042cc <oneTimeData+0x27c>)
 80040f4:	895b      	ldrh	r3, [r3, #10]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b72      	ldr	r3, [pc, #456]	; (80042c4 <oneTimeData+0x274>)
 80040fa:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Economy >> 8);
 80040fc:	4b73      	ldr	r3, [pc, #460]	; (80042cc <oneTimeData+0x27c>)
 80040fe:	895b      	ldrh	r3, [r3, #10]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	b29b      	uxth	r3, r3
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b6f      	ldr	r3, [pc, #444]	; (80042c4 <oneTimeData+0x274>)
 8004108:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
	}

	//Trip Power----------VP
	if (oneTime_counter == 3) {
 800410a:	4b69      	ldr	r3, [pc, #420]	; (80042b0 <oneTimeData+0x260>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d111      	bne.n	8004136 <oneTimeData+0xe6>
		strDATA[4] = 0x11;
 8004112:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <oneTimeData+0x274>)
 8004114:	2211      	movs	r2, #17
 8004116:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x54;
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <oneTimeData+0x274>)
 800411a:	2254      	movs	r2, #84	; 0x54
 800411c:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Power & 0xFF);
 800411e:	4b6b      	ldr	r3, [pc, #428]	; (80042cc <oneTimeData+0x27c>)
 8004120:	899b      	ldrh	r3, [r3, #12]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <oneTimeData+0x274>)
 8004126:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Power >> 8);
 8004128:	4b68      	ldr	r3, [pc, #416]	; (80042cc <oneTimeData+0x27c>)
 800412a:	899b      	ldrh	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	b29b      	uxth	r3, r3
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4b64      	ldr	r3, [pc, #400]	; (80042c4 <oneTimeData+0x274>)
 8004134:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
	}

	//After charge trip
	if (oneTime_counter == 4) {
 8004136:	4b5e      	ldr	r3, [pc, #376]	; (80042b0 <oneTimeData+0x260>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b04      	cmp	r3, #4
 800413c:	d111      	bne.n	8004162 <oneTimeData+0x112>
		strDATA[4] = 0x11;
 800413e:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <oneTimeData+0x274>)
 8004140:	2211      	movs	r2, #17
 8004142:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x62;
 8004144:	4b5f      	ldr	r3, [pc, #380]	; (80042c4 <oneTimeData+0x274>)
 8004146:	2262      	movs	r2, #98	; 0x62
 8004148:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.trip & 0xFF);
 800414a:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <oneTimeData+0x280>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b5c      	ldr	r3, [pc, #368]	; (80042c4 <oneTimeData+0x274>)
 8004152:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.trip >> 8);
 8004154:	4b5e      	ldr	r3, [pc, #376]	; (80042d0 <oneTimeData+0x280>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	b29b      	uxth	r3, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <oneTimeData+0x274>)
 8004160:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
	}

	// After charge average speed
	if (oneTime_counter == 5) {
 8004162:	4b53      	ldr	r3, [pc, #332]	; (80042b0 <oneTimeData+0x260>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b05      	cmp	r3, #5
 8004168:	d111      	bne.n	800418e <oneTimeData+0x13e>
		strDATA[4] = 0x11;
 800416a:	4b56      	ldr	r3, [pc, #344]	; (80042c4 <oneTimeData+0x274>)
 800416c:	2211      	movs	r2, #17
 800416e:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x58;
 8004170:	4b54      	ldr	r3, [pc, #336]	; (80042c4 <oneTimeData+0x274>)
 8004172:	2258      	movs	r2, #88	; 0x58
 8004174:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.avarage_Speed & 0xFF);
 8004176:	4b56      	ldr	r3, [pc, #344]	; (80042d0 <oneTimeData+0x280>)
 8004178:	885b      	ldrh	r3, [r3, #2]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <oneTimeData+0x274>)
 800417e:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.avarage_Speed >> 8);
 8004180:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <oneTimeData+0x280>)
 8004182:	885b      	ldrh	r3, [r3, #2]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	b29b      	uxth	r3, r3
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b4e      	ldr	r3, [pc, #312]	; (80042c4 <oneTimeData+0x274>)
 800418c:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
	}

	// After Charge Economy
	if (oneTime_counter == 6) {
 800418e:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <oneTimeData+0x260>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b06      	cmp	r3, #6
 8004194:	d111      	bne.n	80041ba <oneTimeData+0x16a>
		strDATA[4] = 0x11;
 8004196:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <oneTimeData+0x274>)
 8004198:	2211      	movs	r2, #17
 800419a:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x56;
 800419c:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <oneTimeData+0x274>)
 800419e:	2256      	movs	r2, #86	; 0x56
 80041a0:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.economy & 0xFF);
 80041a2:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <oneTimeData+0x280>)
 80041a4:	889b      	ldrh	r3, [r3, #4]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	4b46      	ldr	r3, [pc, #280]	; (80042c4 <oneTimeData+0x274>)
 80041aa:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.economy >> 8);
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <oneTimeData+0x280>)
 80041ae:	889b      	ldrh	r3, [r3, #4]
 80041b0:	0a1b      	lsrs	r3, r3, #8
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <oneTimeData+0x274>)
 80041b8:	719a      	strb	r2, [r3, #6]
//		Transmit_strDATA
//		;
	}

	// After charge Power
	if (oneTime_counter == 7) {
 80041ba:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <oneTimeData+0x260>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b07      	cmp	r3, #7
 80041c0:	d111      	bne.n	80041e6 <oneTimeData+0x196>
		strDATA[4] = 0x11;
 80041c2:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <oneTimeData+0x274>)
 80041c4:	2211      	movs	r2, #17
 80041c6:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <oneTimeData+0x274>)
 80041ca:	2260      	movs	r2, #96	; 0x60
 80041cc:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.power & 0xFF);
 80041ce:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <oneTimeData+0x280>)
 80041d0:	88db      	ldrh	r3, [r3, #6]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <oneTimeData+0x274>)
 80041d6:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.power >> 8);
 80041d8:	4b3d      	ldr	r3, [pc, #244]	; (80042d0 <oneTimeData+0x280>)
 80041da:	88db      	ldrh	r3, [r3, #6]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	b29b      	uxth	r3, r3
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	4b38      	ldr	r3, [pc, #224]	; (80042c4 <oneTimeData+0x274>)
 80041e4:	719a      	strb	r2, [r3, #6]
	}



//Power
	if (oneTime_counter == 8) {
 80041e6:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <oneTimeData+0x260>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d127      	bne.n	800423e <oneTimeData+0x1ee>
		strDATA[4] = 0x12;
 80041ee:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <oneTimeData+0x274>)
 80041f0:	2212      	movs	r2, #18
 80041f2:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 80041f4:	4b33      	ldr	r3, [pc, #204]	; (80042c4 <oneTimeData+0x274>)
 80041f6:	2260      	movs	r2, #96	; 0x60
 80041f8:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (power & 0xFF);
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <oneTimeData+0x284>)
 80041fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <oneTimeData+0x274>)
 8004204:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (power >> 8);
 8004206:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <oneTimeData+0x284>)
 8004208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420c:	121b      	asrs	r3, r3, #8
 800420e:	b21b      	sxth	r3, r3
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b2c      	ldr	r3, [pc, #176]	; (80042c4 <oneTimeData+0x274>)
 8004214:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
 800421a:	2208      	movs	r2, #8
 800421c:	4929      	ldr	r1, [pc, #164]	; (80042c4 <oneTimeData+0x274>)
 800421e:	4827      	ldr	r0, [pc, #156]	; (80042bc <oneTimeData+0x26c>)
 8004220:	f003 fb39 	bl	8007896 <HAL_UART_Transmit>
		;
		strDATA[4] = 0x11;
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <oneTimeData+0x274>)
 8004226:	2211      	movs	r2, #17
 8004228:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 800422a:	4b26      	ldr	r3, [pc, #152]	; (80042c4 <oneTimeData+0x274>)
 800422c:	2270      	movs	r2, #112	; 0x70
 800422e:	715a      	strb	r2, [r3, #5]
		Transmit_strDATA
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
 8004234:	2208      	movs	r2, #8
 8004236:	4923      	ldr	r1, [pc, #140]	; (80042c4 <oneTimeData+0x274>)
 8004238:	4820      	ldr	r0, [pc, #128]	; (80042bc <oneTimeData+0x26c>)
 800423a:	f003 fb2c 	bl	8007896 <HAL_UART_Transmit>
//		;
//	}
	//Battery Data
	//if (oneTime_counter == 10) {

	switch (transferCount) {
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <oneTimeData+0x288>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3b01      	subs	r3, #1
 8004244:	2b07      	cmp	r3, #7
 8004246:	f200 8116 	bhi.w	8004476 <oneTimeData+0x426>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <oneTimeData+0x200>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004271 	.word	0x08004271
 8004254:	0800429b 	.word	0x0800429b
 8004258:	08004319 	.word	0x08004319
 800425c:	0800434d 	.word	0x0800434d
 8004260:	0800439b 	.word	0x0800439b
 8004264:	080043e5 	.word	0x080043e5
 8004268:	08004419 	.word	0x08004419
 800426c:	08004443 	.word	0x08004443
	case 1: //SOC - Battery Percentage
		strDATA[4] = 0x11;
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <oneTimeData+0x274>)
 8004272:	2211      	movs	r2, #17
 8004274:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x10;
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <oneTimeData+0x274>)
 8004278:	2210      	movs	r2, #16
 800427a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soc_value);
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <oneTimeData+0x28c>)
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <oneTimeData+0x274>)
 8004282:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <oneTimeData+0x274>)
 8004286:	2200      	movs	r2, #0
 8004288:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 800428a:	f04f 33ff 	mov.w	r3, #4294967295
 800428e:	2208      	movs	r2, #8
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <oneTimeData+0x274>)
 8004292:	480a      	ldr	r0, [pc, #40]	; (80042bc <oneTimeData+0x26c>)
 8004294:	f003 faff 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 8004298:	e0ee      	b.n	8004478 <oneTimeData+0x428>
	case 2:  //Pack voltage
		if (currentstate == 4) {
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <oneTimeData+0x290>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d120      	bne.n	80042e4 <oneTimeData+0x294>
			strDATA[4] = 0x12;
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <oneTimeData+0x274>)
 80042a4:	2212      	movs	r2, #18
 80042a6:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <oneTimeData+0x274>)
 80042aa:	2210      	movs	r2, #16
 80042ac:	715a      	strb	r2, [r3, #5]
 80042ae:	e01f      	b.n	80042f0 <oneTimeData+0x2a0>
 80042b0:	2000042e 	.word	0x2000042e
 80042b4:	200003e3 	.word	0x200003e3
 80042b8:	200001f4 	.word	0x200001f4
 80042bc:	20000524 	.word	0x20000524
 80042c0:	200001fc 	.word	0x200001fc
 80042c4:	20000390 	.word	0x20000390
 80042c8:	200003d8 	.word	0x200003d8
 80042cc:	200003a4 	.word	0x200003a4
 80042d0:	200003b4 	.word	0x200003b4
 80042d4:	200003de 	.word	0x200003de
 80042d8:	20000008 	.word	0x20000008
 80042dc:	200003d0 	.word	0x200003d0
 80042e0:	200003e0 	.word	0x200003e0
		} else {
			strDATA[4] = 0x12;
 80042e4:	4b6b      	ldr	r3, [pc, #428]	; (8004494 <oneTimeData+0x444>)
 80042e6:	2212      	movs	r2, #18
 80042e8:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 80042ea:	4b6a      	ldr	r3, [pc, #424]	; (8004494 <oneTimeData+0x444>)
 80042ec:	2210      	movs	r2, #16
 80042ee:	715a      	strb	r2, [r3, #5]
		}
		strDATA[7] = (pack_voltage & 0xFF);
 80042f0:	4b69      	ldr	r3, [pc, #420]	; (8004498 <oneTimeData+0x448>)
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b67      	ldr	r3, [pc, #412]	; (8004494 <oneTimeData+0x444>)
 80042f8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (pack_voltage >> 8);
 80042fa:	4b67      	ldr	r3, [pc, #412]	; (8004498 <oneTimeData+0x448>)
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b29b      	uxth	r3, r3
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b63      	ldr	r3, [pc, #396]	; (8004494 <oneTimeData+0x444>)
 8004306:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	2208      	movs	r2, #8
 800430e:	4961      	ldr	r1, [pc, #388]	; (8004494 <oneTimeData+0x444>)
 8004310:	4862      	ldr	r0, [pc, #392]	; (800449c <oneTimeData+0x44c>)
 8004312:	f003 fac0 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 8004316:	e0af      	b.n	8004478 <oneTimeData+0x428>
	case 3:  //Lowest Cell Voltage
		strDATA[4] = 0x12;
 8004318:	4b5e      	ldr	r3, [pc, #376]	; (8004494 <oneTimeData+0x444>)
 800431a:	2212      	movs	r2, #18
 800431c:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x20;
 800431e:	4b5d      	ldr	r3, [pc, #372]	; (8004494 <oneTimeData+0x444>)
 8004320:	2220      	movs	r2, #32
 8004322:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (lcell_voltage & 0xFF);
 8004324:	4b5e      	ldr	r3, [pc, #376]	; (80044a0 <oneTimeData+0x450>)
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4b5a      	ldr	r3, [pc, #360]	; (8004494 <oneTimeData+0x444>)
 800432c:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (lcell_voltage >> 8);
 800432e:	4b5c      	ldr	r3, [pc, #368]	; (80044a0 <oneTimeData+0x450>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	b29b      	uxth	r3, r3
 8004336:	b2da      	uxtb	r2, r3
 8004338:	4b56      	ldr	r3, [pc, #344]	; (8004494 <oneTimeData+0x444>)
 800433a:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	2208      	movs	r2, #8
 8004342:	4954      	ldr	r1, [pc, #336]	; (8004494 <oneTimeData+0x444>)
 8004344:	4855      	ldr	r0, [pc, #340]	; (800449c <oneTimeData+0x44c>)
 8004346:	f003 faa6 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 800434a:	e095      	b.n	8004478 <oneTimeData+0x428>
	case 4:  //DC Current
		if (currentstate == 4) {
 800434c:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <oneTimeData+0x454>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b04      	cmp	r3, #4
 8004352:	d106      	bne.n	8004362 <oneTimeData+0x312>
			strDATA[4] = 0x12;
 8004354:	4b4f      	ldr	r3, [pc, #316]	; (8004494 <oneTimeData+0x444>)
 8004356:	2212      	movs	r2, #18
 8004358:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x80;
 800435a:	4b4e      	ldr	r3, [pc, #312]	; (8004494 <oneTimeData+0x444>)
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	715a      	strb	r2, [r3, #5]
 8004360:	e005      	b.n	800436e <oneTimeData+0x31e>
		} else {
			strDATA[4] = 0x12;
 8004362:	4b4c      	ldr	r3, [pc, #304]	; (8004494 <oneTimeData+0x444>)
 8004364:	2212      	movs	r2, #18
 8004366:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x30;
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <oneTimeData+0x444>)
 800436a:	2230      	movs	r2, #48	; 0x30
 800436c:	715a      	strb	r2, [r3, #5]
		}
		strDATA[6] = (dc_current >> 8);
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <oneTimeData+0x458>)
 8004370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004374:	121b      	asrs	r3, r3, #8
 8004376:	b21b      	sxth	r3, r3
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4b46      	ldr	r3, [pc, #280]	; (8004494 <oneTimeData+0x444>)
 800437c:	719a      	strb	r2, [r3, #6]
		strDATA[7] = (dc_current & 0xFF);
 800437e:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <oneTimeData+0x458>)
 8004380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	4b43      	ldr	r3, [pc, #268]	; (8004494 <oneTimeData+0x444>)
 8004388:	71da      	strb	r2, [r3, #7]
		Transmit_strDATA
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	2208      	movs	r2, #8
 8004390:	4940      	ldr	r1, [pc, #256]	; (8004494 <oneTimeData+0x444>)
 8004392:	4842      	ldr	r0, [pc, #264]	; (800449c <oneTimeData+0x44c>)
 8004394:	f003 fa7f 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 8004398:	e06e      	b.n	8004478 <oneTimeData+0x428>
	case 5:  //Pack Temperature
		strDATA[4] = 0x12;
 800439a:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <oneTimeData+0x444>)
 800439c:	2212      	movs	r2, #18
 800439e:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x40;
 80043a0:	4b3c      	ldr	r3, [pc, #240]	; (8004494 <oneTimeData+0x444>)
 80043a2:	2240      	movs	r2, #64	; 0x40
 80043a4:	715a      	strb	r2, [r3, #5]
		strDATA[6] = (pack_temp >> 8);
 80043a6:	4b41      	ldr	r3, [pc, #260]	; (80044ac <oneTimeData+0x45c>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	121b      	asrs	r3, r3, #8
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4b39      	ldr	r3, [pc, #228]	; (8004494 <oneTimeData+0x444>)
 80043b0:	719a      	strb	r2, [r3, #6]
		strDATA[7] = (pack_temp & 0xFF);
 80043b2:	4b3e      	ldr	r3, [pc, #248]	; (80044ac <oneTimeData+0x45c>)
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <oneTimeData+0x444>)
 80043b8:	71da      	strb	r2, [r3, #7]
		Transmit_strDATA
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
 80043be:	2208      	movs	r2, #8
 80043c0:	4934      	ldr	r1, [pc, #208]	; (8004494 <oneTimeData+0x444>)
 80043c2:	4836      	ldr	r0, [pc, #216]	; (800449c <oneTimeData+0x44c>)
 80043c4:	f003 fa67 	bl	8007896 <HAL_UART_Transmit>
		;
		strDATA[4] = 0x11;
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <oneTimeData+0x444>)
 80043ca:	2211      	movs	r2, #17
 80043cc:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x68;
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <oneTimeData+0x444>)
 80043d0:	2268      	movs	r2, #104	; 0x68
 80043d2:	715a      	strb	r2, [r3, #5]
		Transmit_strDATA
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	2208      	movs	r2, #8
 80043da:	492e      	ldr	r1, [pc, #184]	; (8004494 <oneTimeData+0x444>)
 80043dc:	482f      	ldr	r0, [pc, #188]	; (800449c <oneTimeData+0x44c>)
 80043de:	f003 fa5a 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 80043e2:	e049      	b.n	8004478 <oneTimeData+0x428>
	case 6:  //Highest Cell Voltage
		strDATA[4] = 0x12;
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <oneTimeData+0x444>)
 80043e6:	2212      	movs	r2, #18
 80043e8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <oneTimeData+0x444>)
 80043ec:	2270      	movs	r2, #112	; 0x70
 80043ee:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (hcell_voltage & 0xFF);
 80043f0:	4b2f      	ldr	r3, [pc, #188]	; (80044b0 <oneTimeData+0x460>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <oneTimeData+0x444>)
 80043f8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (hcell_voltage >> 8);
 80043fa:	4b2d      	ldr	r3, [pc, #180]	; (80044b0 <oneTimeData+0x460>)
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b29b      	uxth	r3, r3
 8004402:	b2da      	uxtb	r2, r3
 8004404:	4b23      	ldr	r3, [pc, #140]	; (8004494 <oneTimeData+0x444>)
 8004406:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	2208      	movs	r2, #8
 800440e:	4921      	ldr	r1, [pc, #132]	; (8004494 <oneTimeData+0x444>)
 8004410:	4822      	ldr	r0, [pc, #136]	; (800449c <oneTimeData+0x44c>)
 8004412:	f003 fa40 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 8004416:	e02f      	b.n	8004478 <oneTimeData+0x428>
	case 7:  //SOH Battery Health
		strDATA[4] = 0x11;
 8004418:	4b1e      	ldr	r3, [pc, #120]	; (8004494 <oneTimeData+0x444>)
 800441a:	2211      	movs	r2, #17
 800441c:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x66;
 800441e:	4b1d      	ldr	r3, [pc, #116]	; (8004494 <oneTimeData+0x444>)
 8004420:	2266      	movs	r2, #102	; 0x66
 8004422:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soh_value);
 8004424:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <oneTimeData+0x464>)
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <oneTimeData+0x444>)
 800442a:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <oneTimeData+0x444>)
 800442e:	2200      	movs	r2, #0
 8004430:	719a      	strb	r2, [r3, #6]
		Transmit_strDATA
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	2208      	movs	r2, #8
 8004438:	4916      	ldr	r1, [pc, #88]	; (8004494 <oneTimeData+0x444>)
 800443a:	4818      	ldr	r0, [pc, #96]	; (800449c <oneTimeData+0x44c>)
 800443c:	f003 fa2b 	bl	8007896 <HAL_UART_Transmit>
		;
		break;
 8004440:	e01a      	b.n	8004478 <oneTimeData+0x428>
	case 8:  //Estimated Range
		strDATA[4] = 0x11;
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <oneTimeData+0x444>)
 8004444:	2211      	movs	r2, #17
 8004446:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <oneTimeData+0x444>)
 800444a:	2230      	movs	r2, #48	; 0x30
 800444c:	715a      	strb	r2, [r3, #5]
		//strDATA[7] = uint32_t(distance.range);
		//strDATA[6] = 0;
		strDATA[7] = (distance.range & 0xFF);
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <oneTimeData+0x468>)
 8004450:	88db      	ldrh	r3, [r3, #6]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <oneTimeData+0x444>)
 8004456:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.range >> 8);
 8004458:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <oneTimeData+0x468>)
 800445a:	88db      	ldrh	r3, [r3, #6]
 800445c:	0a1b      	lsrs	r3, r3, #8
 800445e:	b29b      	uxth	r3, r3
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <oneTimeData+0x444>)
 8004464:	719a      	strb	r2, [r3, #6]
		//strDATA[7] = (distance.range >> 16);
		//strDATA[6] = (distance.range >> 24);
		HAL_UART_Transmit(&huart3, strDATA, sizeof(strDATA),
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	2208      	movs	r2, #8
 800446c:	4909      	ldr	r1, [pc, #36]	; (8004494 <oneTimeData+0x444>)
 800446e:	480b      	ldr	r0, [pc, #44]	; (800449c <oneTimeData+0x44c>)
 8004470:	f003 fa11 	bl	8007896 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		break;
 8004474:	e000      	b.n	8004478 <oneTimeData+0x428>
	default:
		break;
 8004476:	bf00      	nop
	}

	transferCount++;
 8004478:	4b10      	ldr	r3, [pc, #64]	; (80044bc <oneTimeData+0x46c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <oneTimeData+0x46c>)
 8004480:	6013      	str	r3, [r2, #0]
	if (transferCount >= 9) {
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <oneTimeData+0x46c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b08      	cmp	r3, #8
 8004488:	d902      	bls.n	8004490 <oneTimeData+0x440>
		transferCount = 1;
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <oneTimeData+0x46c>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]
	}

}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000390 	.word	0x20000390
 8004498:	200003d2 	.word	0x200003d2
 800449c:	20000524 	.word	0x20000524
 80044a0:	200003d6 	.word	0x200003d6
 80044a4:	200003e0 	.word	0x200003e0
 80044a8:	200003dc 	.word	0x200003dc
 80044ac:	200003da 	.word	0x200003da
 80044b0:	200003d4 	.word	0x200003d4
 80044b4:	200003d1 	.word	0x200003d1
 80044b8:	200003a4 	.word	0x200003a4
 80044bc:	20000008 	.word	0x20000008

080044c0 <gearUpdate>:

void gearUpdate(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 80044c4:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <gearUpdate+0x70>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d106      	bne.n	80044da <gearUpdate+0x1a>
		Gear_Neutral_Icon;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
 80044d0:	2208      	movs	r2, #8
 80044d2:	4918      	ldr	r1, [pc, #96]	; (8004534 <gearUpdate+0x74>)
 80044d4:	4818      	ldr	r0, [pc, #96]	; (8004538 <gearUpdate+0x78>)
 80044d6:	f003 f9de 	bl	8007896 <HAL_UART_Transmit>
	}

	if (currentstate == 2) {
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <gearUpdate+0x70>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d106      	bne.n	80044f0 <gearUpdate+0x30>
		Gear_Drive_Icon;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	2208      	movs	r2, #8
 80044e8:	4914      	ldr	r1, [pc, #80]	; (800453c <gearUpdate+0x7c>)
 80044ea:	4813      	ldr	r0, [pc, #76]	; (8004538 <gearUpdate+0x78>)
 80044ec:	f003 f9d3 	bl	8007896 <HAL_UART_Transmit>
	}

	if (currentstate == 3) {
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <gearUpdate+0x70>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d106      	bne.n	8004506 <gearUpdate+0x46>
		Gear_Reverse_Icon;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	2208      	movs	r2, #8
 80044fe:	4910      	ldr	r1, [pc, #64]	; (8004540 <gearUpdate+0x80>)
 8004500:	480d      	ldr	r0, [pc, #52]	; (8004538 <gearUpdate+0x78>)
 8004502:	f003 f9c8 	bl	8007896 <HAL_UART_Transmit>
	}
	if (_gearCleared || currentstate == 0) {
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <gearUpdate+0x84>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <gearUpdate+0x56>
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <gearUpdate+0x70>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <gearUpdate+0x6a>
		Gear_Clear_Icon;
 8004516:	f04f 33ff 	mov.w	r3, #4294967295
 800451a:	2208      	movs	r2, #8
 800451c:	490a      	ldr	r1, [pc, #40]	; (8004548 <gearUpdate+0x88>)
 800451e:	4806      	ldr	r0, [pc, #24]	; (8004538 <gearUpdate+0x78>)
 8004520:	f003 f9b9 	bl	8007896 <HAL_UART_Transmit>
		_gearCleared = false;
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <gearUpdate+0x84>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
	}

}
 800452a:	bf00      	nop
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200003e0 	.word	0x200003e0
 8004534:	200001bc 	.word	0x200001bc
 8004538:	20000524 	.word	0x20000524
 800453c:	200001c4 	.word	0x200001c4
 8004540:	200001b4 	.word	0x200001b4
 8004544:	20000426 	.word	0x20000426
 8004548:	200001cc 	.word	0x200001cc

0800454c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004550:	4b11      	ldr	r3, [pc, #68]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004552:	4a12      	ldr	r2, [pc, #72]	; (800459c <MX_USART3_UART_Init+0x50>)
 8004554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004558:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800455c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004560:	2200      	movs	r2, #0
 8004562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004566:	2200      	movs	r2, #0
 8004568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 800456c:	2200      	movs	r2, #0
 800456e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004572:	220c      	movs	r2, #12
 8004574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004582:	4805      	ldr	r0, [pc, #20]	; (8004598 <MX_USART3_UART_Init+0x4c>)
 8004584:	f003 f93a 	bl	80077fc <HAL_UART_Init>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800458e:	f7fd f817 	bl	80015c0 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000524 	.word	0x20000524
 800459c:	40004800 	.word	0x40004800

080045a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a34      	ldr	r2, [pc, #208]	; (800468c <HAL_UART_MspInit+0xec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d160      	bne.n	8004682 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045c0:	4b33      	ldr	r3, [pc, #204]	; (8004690 <HAL_UART_MspInit+0xf0>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4a32      	ldr	r2, [pc, #200]	; (8004690 <HAL_UART_MspInit+0xf0>)
 80045c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ca:	61d3      	str	r3, [r2, #28]
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_UART_MspInit+0xf0>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_UART_MspInit+0xf0>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <HAL_UART_MspInit+0xf0>)
 80045de:	f043 0308 	orr.w	r3, r3, #8
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_UART_MspInit+0xf0>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80045f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045fa:	2303      	movs	r3, #3
 80045fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fe:	f107 0310 	add.w	r3, r7, #16
 8004602:	4619      	mov	r1, r3
 8004604:	4823      	ldr	r0, [pc, #140]	; (8004694 <HAL_UART_MspInit+0xf4>)
 8004606:	f001 fd9f 	bl	8006148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800460a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800460e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004618:	f107 0310 	add.w	r3, r7, #16
 800461c:	4619      	mov	r1, r3
 800461e:	481d      	ldr	r0, [pc, #116]	; (8004694 <HAL_UART_MspInit+0xf4>)
 8004620:	f001 fd92 	bl	8006148 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <HAL_UART_MspInit+0xf8>)
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <HAL_UART_MspInit+0xfc>)
 8004628:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_UART_MspInit+0xf8>)
 800462c:	2210      	movs	r2, #16
 800462e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_UART_MspInit+0xf8>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <HAL_UART_MspInit+0xf8>)
 8004638:	2280      	movs	r2, #128	; 0x80
 800463a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800463c:	4b16      	ldr	r3, [pc, #88]	; (8004698 <HAL_UART_MspInit+0xf8>)
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004642:	4b15      	ldr	r3, [pc, #84]	; (8004698 <HAL_UART_MspInit+0xf8>)
 8004644:	2200      	movs	r2, #0
 8004646:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <HAL_UART_MspInit+0xf8>)
 800464a:	2200      	movs	r2, #0
 800464c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_UART_MspInit+0xf8>)
 8004650:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004654:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004656:	4810      	ldr	r0, [pc, #64]	; (8004698 <HAL_UART_MspInit+0xf8>)
 8004658:	f001 f8f4 	bl	8005844 <HAL_DMA_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8004662:	f7fc ffad 	bl	80015c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <HAL_UART_MspInit+0xf8>)
 800466a:	635a      	str	r2, [r3, #52]	; 0x34
 800466c:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <HAL_UART_MspInit+0xf8>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004672:	2200      	movs	r2, #0
 8004674:	2100      	movs	r1, #0
 8004676:	2027      	movs	r0, #39	; 0x27
 8004678:	f001 f8ad 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800467c:	2027      	movs	r0, #39	; 0x27
 800467e:	f001 f8c6 	bl	800580e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004682:	bf00      	nop
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40004800 	.word	0x40004800
 8004690:	40021000 	.word	0x40021000
 8004694:	40010c00 	.word	0x40010c00
 8004698:	20000568 	.word	0x20000568
 800469c:	4002001c 	.word	0x4002001c

080046a0 <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <check_ack+0x2c>)
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <check_ack+0x30>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d103      	bne.n	80046ba <check_ack+0x1a>
		modeChangeOK = true;
 80046b2:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <check_ack+0x34>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e002      	b.n	80046c0 <check_ack+0x20>
	} else {
		modeChangeOK = false;
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <check_ack+0x34>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <check_ack+0x34>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	200003e8 	.word	0x200003e8
 80046d0:	200003ff 	.word	0x200003ff
 80046d4:	20000411 	.word	0x20000411

080046d8 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 80046dc:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <evcuMode+0x11c>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d16b      	bne.n	80047bc <evcuMode+0xe4>
 80046e4:	4b44      	ldr	r3, [pc, #272]	; (80047f8 <evcuMode+0x120>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d067      	beq.n	80047bc <evcuMode+0xe4>
		if (currentMode == ecoMode) {
 80046ec:	4b43      	ldr	r3, [pc, #268]	; (80047fc <evcuMode+0x124>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d11a      	bne.n	800472c <evcuMode+0x54>
			//Set Normal Mode
			targetMode = normalMode;
 80046f6:	4b42      	ldr	r3, [pc, #264]	; (8004800 <evcuMode+0x128>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 80046fc:	f7ff ffd0 	bl	80046a0 <check_ack>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d05a      	beq.n	80047bc <evcuMode+0xe4>
				currentMode = normalMode;
 8004706:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <evcuMode+0x124>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]
				mode = false;
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <evcuMode+0x120>)
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004712:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <evcuMode+0x12c>)
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 1;
 8004718:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <evcuMode+0x130>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 800471e:	4b3b      	ldr	r3, [pc, #236]	; (800480c <evcuMode+0x134>)
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004724:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <evcuMode+0x138>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e047      	b.n	80047bc <evcuMode+0xe4>
			}
		} else if (currentMode == normalMode) {
 800472c:	4b33      	ldr	r3, [pc, #204]	; (80047fc <evcuMode+0x124>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11d      	bne.n	8004772 <evcuMode+0x9a>
			//Set Sports Mode
			targetMode = sportMode;
 8004736:	4b32      	ldr	r3, [pc, #200]	; (8004800 <evcuMode+0x128>)
 8004738:	2203      	movs	r2, #3
 800473a:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 800473c:	f7ff ffb0 	bl	80046a0 <check_ack>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d03a      	beq.n	80047bc <evcuMode+0xe4>
				currentMode = sportMode;
 8004746:	4b2d      	ldr	r3, [pc, #180]	; (80047fc <evcuMode+0x124>)
 8004748:	2203      	movs	r2, #3
 800474a:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 800474c:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <evcuMode+0x12c>)
 800474e:	2201      	movs	r2, #1
 8004750:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 3;
 8004752:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <evcuMode+0x130>)
 8004754:	2203      	movs	r2, #3
 8004756:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004758:	4b2c      	ldr	r3, [pc, #176]	; (800480c <evcuMode+0x134>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
				mode = false;
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <evcuMode+0x120>)
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004764:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <evcuMode+0x138>)
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 800476a:	4b2a      	ldr	r3, [pc, #168]	; (8004814 <evcuMode+0x13c>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e024      	b.n	80047bc <evcuMode+0xe4>
			}
		} else if (currentMode == sportMode) {
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <evcuMode+0x124>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b03      	cmp	r3, #3
 800477a:	d11f      	bne.n	80047bc <evcuMode+0xe4>
			//Set Eco Mode
			targetMode = ecoMode;
 800477c:	4b20      	ldr	r3, [pc, #128]	; (8004800 <evcuMode+0x128>)
 800477e:	2202      	movs	r2, #2
 8004780:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004782:	f7ff ff8d 	bl	80046a0 <check_ack>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d017      	beq.n	80047bc <evcuMode+0xe4>
				currentMode = ecoMode;
 800478c:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <evcuMode+0x124>)
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004792:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <evcuMode+0x120>)
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004798:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <evcuMode+0x12c>)
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 2;
 800479e:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <evcuMode+0x130>)
 80047a0:	2202      	movs	r2, #2
 80047a2:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <evcuMode+0x134>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80047aa:	4b19      	ldr	r3, [pc, #100]	; (8004810 <evcuMode+0x138>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 80047b0:	4b18      	ldr	r3, [pc, #96]	; (8004814 <evcuMode+0x13c>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <evcuMode+0x124>)
 80047b8:	2202      	movs	r2, #2
 80047ba:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <evcuMode+0x11c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d115      	bne.n	80047f0 <evcuMode+0x118>
		currentMode = ecoMode;
 80047c4:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <evcuMode+0x124>)
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <evcuMode+0x128>)
 80047cc:	2202      	movs	r2, #2
 80047ce:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <evcuMode+0x120>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <evcuMode+0x118>
			mode = false;
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <evcuMode+0x120>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
			_modeSelection = 1;
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <evcuMode+0x134>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	701a      	strb	r2, [r3, #0]
			modeIcon = true;
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <evcuMode+0x12c>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
			rtn = false;
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <evcuMode+0x138>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	200003e7 	.word	0x200003e7
 80047f8:	20000389 	.word	0x20000389
 80047fc:	200003fe 	.word	0x200003fe
 8004800:	200003ff 	.word	0x200003ff
 8004804:	20000412 	.word	0x20000412
 8004808:	20000431 	.word	0x20000431
 800480c:	2000041c 	.word	0x2000041c
 8004810:	200003f5 	.word	0x200003f5
 8004814:	20000411 	.word	0x20000411

08004818 <trip_reset>:

void trip_reset(void){
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <trip_reset+0x1c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <trip_reset+0x12>
		tripreset = false;
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <trip_reset+0x20>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 800482a:	bf00      	nop
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	200003e6 	.word	0x200003e6
 8004838:	20000387 	.word	0x20000387

0800483c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800483c:	480c      	ldr	r0, [pc, #48]	; (8004870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800483e:	490d      	ldr	r1, [pc, #52]	; (8004874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004840:	4a0d      	ldr	r2, [pc, #52]	; (8004878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004844:	e002      	b.n	800484c <LoopCopyDataInit>

08004846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800484a:	3304      	adds	r3, #4

0800484c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800484c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800484e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004850:	d3f9      	bcc.n	8004846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004854:	4c0a      	ldr	r4, [pc, #40]	; (8004880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004858:	e001      	b.n	800485e <LoopFillZerobss>

0800485a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800485a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800485c:	3204      	adds	r2, #4

0800485e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800485e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004860:	d3fb      	bcc.n	800485a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004862:	f7fe f9db 	bl	8002c1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004866:	f003 fd9b 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800486a:	f7fc fcf5 	bl	8001258 <main>
  bx lr
 800486e:	4770      	bx	lr
  ldr r0, =_sdata
 8004870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004874:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8004878:	08008458 	.word	0x08008458
  ldr r2, =_sbss
 800487c:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8004880:	200005b0 	.word	0x200005b0

08004884 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004884:	e7fe      	b.n	8004884 <ADC1_2_IRQHandler>
	...

08004888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_Init+0x28>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a07      	ldr	r2, [pc, #28]	; (80048b0 <HAL_Init+0x28>)
 8004892:	f043 0310 	orr.w	r3, r3, #16
 8004896:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004898:	2003      	movs	r0, #3
 800489a:	f000 ff91 	bl	80057c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800489e:	200f      	movs	r0, #15
 80048a0:	f000 f808 	bl	80048b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048a4:	f7fe f91a 	bl	8002adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40022000 	.word	0x40022000

080048b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048bc:	4b12      	ldr	r3, [pc, #72]	; (8004908 <HAL_InitTick+0x54>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <HAL_InitTick+0x58>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	4619      	mov	r1, r3
 80048c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 ffa9 	bl	800582a <HAL_SYSTICK_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00e      	b.n	8004900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d80a      	bhi.n	80048fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048e8:	2200      	movs	r2, #0
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	f000 ff71 	bl	80057d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <HAL_InitTick+0x5c>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e000      	b.n	8004900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000020 	.word	0x20000020
 800490c:	20000330 	.word	0x20000330
 8004910:	2000032c 	.word	0x2000032c

08004914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_IncTick+0x1c>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_IncTick+0x20>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4413      	add	r3, r2
 8004924:	4a03      	ldr	r2, [pc, #12]	; (8004934 <HAL_IncTick+0x20>)
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	20000330 	.word	0x20000330
 8004934:	200005ac 	.word	0x200005ac

08004938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return uwTick;
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <HAL_GetTick+0x10>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	200005ac 	.word	0x200005ac

0800494c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004954:	f7ff fff0 	bl	8004938 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004964:	d005      	beq.n	8004972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_Delay+0x44>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004972:	bf00      	nop
 8004974:	f7ff ffe0 	bl	8004938 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	429a      	cmp	r2, r3
 8004982:	d8f7      	bhi.n	8004974 <HAL_Delay+0x28>
  {
  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000330 	.word	0x20000330

08004994 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0ed      	b.n	8004b82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fb fe0c 	bl	80005d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049c8:	f7ff ffb6 	bl	8004938 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049ce:	e012      	b.n	80049f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049d0:	f7ff ffb2 	bl	8004938 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b0a      	cmp	r3, #10
 80049dc:	d90b      	bls.n	80049f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2205      	movs	r2, #5
 80049ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e0c5      	b.n	8004b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0e5      	beq.n	80049d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0202 	bic.w	r2, r2, #2
 8004a12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a14:	f7ff ff90 	bl	8004938 <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a1a:	e012      	b.n	8004a42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a1c:	f7ff ff8c 	bl	8004938 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b0a      	cmp	r3, #10
 8004a28:	d90b      	bls.n	8004a42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2205      	movs	r2, #5
 8004a3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e09f      	b.n	8004b82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e5      	bne.n	8004a1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	7e1b      	ldrb	r3, [r3, #24]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d108      	bne.n	8004a6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	e007      	b.n	8004a7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7e5b      	ldrb	r3, [r3, #25]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d108      	bne.n	8004a94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e007      	b.n	8004aa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	7e9b      	ldrb	r3, [r3, #26]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d108      	bne.n	8004abe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0220 	orr.w	r2, r2, #32
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e007      	b.n	8004ace <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0220 	bic.w	r2, r2, #32
 8004acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	7edb      	ldrb	r3, [r3, #27]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d108      	bne.n	8004ae8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0210 	bic.w	r2, r2, #16
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e007      	b.n	8004af8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0210 	orr.w	r2, r2, #16
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	7f1b      	ldrb	r3, [r3, #28]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d108      	bne.n	8004b12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e007      	b.n	8004b22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0208 	bic.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7f5b      	ldrb	r3, [r3, #29]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d108      	bne.n	8004b3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0204 	orr.w	r2, r2, #4
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e007      	b.n	8004b4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0204 	bic.w	r2, r2, #4
 8004b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	ea42 0103 	orr.w	r1, r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	1e5a      	subs	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ba2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d003      	beq.n	8004bb2 <HAL_CAN_ConfigFilter+0x26>
 8004baa:	7cfb      	ldrb	r3, [r7, #19]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	f040 80be 	bne.w	8004d2e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004bb2:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <HAL_CAN_ConfigFilter+0x1bc>)
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bbc:	f043 0201 	orr.w	r2, r3, #1
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bcc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	431a      	orrs	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	401a      	ands	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d123      	bne.n	8004c5c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3248      	adds	r2, #72	; 0x48
 8004c3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c52:	6979      	ldr	r1, [r7, #20]
 8004c54:	3348      	adds	r3, #72	; 0x48
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d122      	bne.n	8004caa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c84:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3248      	adds	r2, #72	; 0x48
 8004c8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	3348      	adds	r3, #72	; 0x48
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	440b      	add	r3, r1
 8004ca8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	401a      	ands	r2, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004cc4:	e007      	b.n	8004cd6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	401a      	ands	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004cf0:	e007      	b.n	8004d02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d107      	bne.n	8004d1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d20:	f023 0201 	bic.w	r2, r3, #1
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e006      	b.n	8004d3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40006400 	.word	0x40006400

08004d4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d12e      	bne.n	8004dbe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d78:	f7ff fdde 	bl	8004938 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d7e:	e012      	b.n	8004da6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d80:	f7ff fdda 	bl	8004938 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b0a      	cmp	r3, #10
 8004d8c:	d90b      	bls.n	8004da6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2205      	movs	r2, #5
 8004d9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e012      	b.n	8004dcc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e006      	b.n	8004dcc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	; 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004df2:	7ffb      	ldrb	r3, [r7, #31]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d003      	beq.n	8004e00 <HAL_CAN_AddTxMessage+0x2c>
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	f040 80b8 	bne.w	8004f70 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d105      	bne.n	8004e20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80a0 	beq.w	8004f60 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	0e1b      	lsrs	r3, r3, #24
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d907      	bls.n	8004e40 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e09e      	b.n	8004f7e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e40:	2201      	movs	r2, #1
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	409a      	lsls	r2, r3
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	6809      	ldr	r1, [r1, #0]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3318      	adds	r3, #24
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	440b      	add	r3, r1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e00f      	b.n	8004e8e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e7e:	68f9      	ldr	r1, [r7, #12]
 8004e80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3318      	adds	r3, #24
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	440b      	add	r3, r1
 8004e8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3318      	adds	r3, #24
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	7d1b      	ldrb	r3, [r3, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d111      	bne.n	8004ece <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6811      	ldr	r1, [r2, #0]
 8004ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	440b      	add	r3, r1
 8004eca:	3304      	adds	r3, #4
 8004ecc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3307      	adds	r3, #7
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	061a      	lsls	r2, r3, #24
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3306      	adds	r3, #6
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3305      	adds	r3, #5
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	3204      	adds	r2, #4
 8004eee:	7812      	ldrb	r2, [r2, #0]
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6811      	ldr	r1, [r2, #0]
 8004ef6:	ea43 0200 	orr.w	r2, r3, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	440b      	add	r3, r1
 8004f00:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004f04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3303      	adds	r3, #3
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	061a      	lsls	r2, r3, #24
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3302      	adds	r3, #2
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	4313      	orrs	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	7812      	ldrb	r2, [r2, #0]
 8004f26:	4610      	mov	r0, r2
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	6811      	ldr	r1, [r2, #0]
 8004f2c:	ea43 0200 	orr.w	r2, r3, r0
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	440b      	add	r3, r1
 8004f36:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3318      	adds	r3, #24
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4413      	add	r3, r2
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	6811      	ldr	r1, [r2, #0]
 8004f4e:	f043 0201 	orr.w	r2, r3, #1
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3318      	adds	r3, #24
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	440b      	add	r3, r1
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e00e      	b.n	8004f7e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e006      	b.n	8004f7e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
  }
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	; 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f9c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d003      	beq.n	8004fac <HAL_CAN_GetRxMessage+0x24>
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	f040 80f3 	bne.w	8005192 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d116      	bne.n	8004fee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0e7      	b.n	80051a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e0d8      	b.n	80051a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	331b      	adds	r3, #27
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0204 	and.w	r2, r3, #4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	331b      	adds	r3, #27
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	0d5b      	lsrs	r3, r3, #21
 800501c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e00b      	b.n	800503e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	331b      	adds	r3, #27
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	4413      	add	r3, r2
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	08db      	lsrs	r3, r3, #3
 8005036:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	331b      	adds	r3, #27
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	4413      	add	r3, r2
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0202 	and.w	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	331b      	adds	r3, #27
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4413      	add	r3, r2
 8005060:	3304      	adds	r3, #4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	331b      	adds	r3, #27
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4413      	add	r3, r2
 8005078:	3304      	adds	r3, #4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	b2da      	uxtb	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	331b      	adds	r3, #27
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	4413      	add	r3, r2
 8005090:	3304      	adds	r3, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0c1b      	lsrs	r3, r3, #16
 8005096:	b29a      	uxth	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	0a1a      	lsrs	r2, r3, #8
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0c1a      	lsrs	r2, r3, #16
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	3302      	adds	r3, #2
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0e1a      	lsrs	r2, r3, #24
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	3303      	adds	r3, #3
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	4413      	add	r3, r2
 800510a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	3304      	adds	r3, #4
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	4413      	add	r3, r2
 8005122:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	0a1a      	lsrs	r2, r3, #8
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3305      	adds	r3, #5
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	4413      	add	r3, r2
 800513c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	0c1a      	lsrs	r2, r3, #16
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	3306      	adds	r3, #6
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	4413      	add	r3, r2
 8005156:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	0e1a      	lsrs	r2, r3, #24
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	3307      	adds	r3, #7
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0220 	orr.w	r2, r2, #32
 800517a:	60da      	str	r2, [r3, #12]
 800517c:	e007      	b.n	800518e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0220 	orr.w	r2, r2, #32
 800518c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e006      	b.n	80051a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d002      	beq.n	80051c8 <HAL_CAN_ActivateNotification+0x1e>
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d109      	bne.n	80051dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6959      	ldr	r1, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e006      	b.n	80051ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr

080051f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d07c      	beq.n	8005334 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d023      	beq.n	800528c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2201      	movs	r2, #1
 800524a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f983 	bl	8005562 <HAL_CAN_TxMailbox0CompleteCallback>
 800525c:	e016      	b.n	800528c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
 8005270:	e00c      	b.n	800528c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	e002      	b.n	800528c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f986 	bl	8005598 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d024      	beq.n	80052e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800529e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f962 	bl	8005574 <HAL_CAN_TxMailbox1CompleteCallback>
 80052b0:	e016      	b.n	80052e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	e00c      	b.n	80052e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
 80052d8:	e002      	b.n	80052e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f965 	bl	80055aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d024      	beq.n	8005334 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80052f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f941 	bl	8005586 <HAL_CAN_TxMailbox2CompleteCallback>
 8005304:	e016      	b.n	8005334 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
 8005318:	e00c      	b.n	8005334 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
 800532c:	e002      	b.n	8005334 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f944 	bl	80055bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2210      	movs	r2, #16
 8005356:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2208      	movs	r2, #8
 8005372:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f92a 	bl	80055ce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc f85c 	bl	8001450 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00c      	beq.n	80053bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2208      	movs	r2, #8
 80053d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f901 	bl	80055e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc f86c 	bl	80014d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d006      	beq.n	800541e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2210      	movs	r2, #16
 8005416:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8ea 	bl	80055f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00b      	beq.n	8005440 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2208      	movs	r2, #8
 8005438:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8e2 	bl	8005604 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d07b      	beq.n	8005542 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d072      	beq.n	800553a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	f043 0302 	orr.w	r3, r3, #2
 800548a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f043 0304 	orr.w	r3, r3, #4
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d043      	beq.n	800553a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d03e      	beq.n	800553a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054c2:	2b60      	cmp	r3, #96	; 0x60
 80054c4:	d02b      	beq.n	800551e <HAL_CAN_IRQHandler+0x32a>
 80054c6:	2b60      	cmp	r3, #96	; 0x60
 80054c8:	d82e      	bhi.n	8005528 <HAL_CAN_IRQHandler+0x334>
 80054ca:	2b50      	cmp	r3, #80	; 0x50
 80054cc:	d022      	beq.n	8005514 <HAL_CAN_IRQHandler+0x320>
 80054ce:	2b50      	cmp	r3, #80	; 0x50
 80054d0:	d82a      	bhi.n	8005528 <HAL_CAN_IRQHandler+0x334>
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d019      	beq.n	800550a <HAL_CAN_IRQHandler+0x316>
 80054d6:	2b40      	cmp	r3, #64	; 0x40
 80054d8:	d826      	bhi.n	8005528 <HAL_CAN_IRQHandler+0x334>
 80054da:	2b30      	cmp	r3, #48	; 0x30
 80054dc:	d010      	beq.n	8005500 <HAL_CAN_IRQHandler+0x30c>
 80054de:	2b30      	cmp	r3, #48	; 0x30
 80054e0:	d822      	bhi.n	8005528 <HAL_CAN_IRQHandler+0x334>
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d002      	beq.n	80054ec <HAL_CAN_IRQHandler+0x2f8>
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d005      	beq.n	80054f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80054ea:	e01d      	b.n	8005528 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	f043 0308 	orr.w	r3, r3, #8
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054f4:	e019      	b.n	800552a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	f043 0310 	orr.w	r3, r3, #16
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054fe:	e014      	b.n	800552a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f043 0320 	orr.w	r3, r3, #32
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005508:	e00f      	b.n	800552a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005512:	e00a      	b.n	800552a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800551c:	e005      	b.n	800552a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005526:	e000      	b.n	800552a <HAL_CAN_IRQHandler+0x336>
            break;
 8005528:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005538:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2204      	movs	r2, #4
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f85e 	bl	8005616 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800555a:	bf00      	nop
 800555c:	3728      	adds	r7, #40	; 0x28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	bc80      	pop	{r7}
 8005584:	4770      	bx	lr

08005586 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr

08005598 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005644:	4013      	ands	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <__NVIC_SetPriorityGrouping+0x44>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60d3      	str	r3, [r2, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <__NVIC_GetPriorityGrouping+0x18>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	f003 0307 	and.w	r3, r3, #7
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	e000ed00 	.word	0xe000ed00

0800568c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	db0b      	blt.n	80056b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	f003 021f 	and.w	r2, r3, #31
 80056a4:	4906      	ldr	r1, [pc, #24]	; (80056c0 <__NVIC_EnableIRQ+0x34>)
 80056a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2001      	movs	r0, #1
 80056ae:	fa00 f202 	lsl.w	r2, r0, r2
 80056b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr
 80056c0:	e000e100 	.word	0xe000e100

080056c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db0a      	blt.n	80056ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	490c      	ldr	r1, [pc, #48]	; (8005710 <__NVIC_SetPriority+0x4c>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	0112      	lsls	r2, r2, #4
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	440b      	add	r3, r1
 80056e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056ec:	e00a      	b.n	8005704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4908      	ldr	r1, [pc, #32]	; (8005714 <__NVIC_SetPriority+0x50>)
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	3b04      	subs	r3, #4
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	440b      	add	r3, r1
 8005702:	761a      	strb	r2, [r3, #24]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e100 	.word	0xe000e100
 8005714:	e000ed00 	.word	0xe000ed00

08005718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005718:	b480      	push	{r7}
 800571a:	b089      	sub	sp, #36	; 0x24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f1c3 0307 	rsb	r3, r3, #7
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf28      	it	cs
 8005736:	2304      	movcs	r3, #4
 8005738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3304      	adds	r3, #4
 800573e:	2b06      	cmp	r3, #6
 8005740:	d902      	bls.n	8005748 <NVIC_EncodePriority+0x30>
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3b03      	subs	r3, #3
 8005746:	e000      	b.n	800574a <NVIC_EncodePriority+0x32>
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	401a      	ands	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005760:	f04f 31ff 	mov.w	r1, #4294967295
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	43d9      	mvns	r1, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005770:	4313      	orrs	r3, r2
         );
}
 8005772:	4618      	mov	r0, r3
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800578c:	d301      	bcc.n	8005792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800578e:	2301      	movs	r3, #1
 8005790:	e00f      	b.n	80057b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <SysTick_Config+0x40>)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579a:	210f      	movs	r1, #15
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	f7ff ff90 	bl	80056c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <SysTick_Config+0x40>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <SysTick_Config+0x40>)
 80057ac:	2207      	movs	r2, #7
 80057ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000e010 	.word	0xe000e010

080057c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff2d 	bl	8005628 <__NVIC_SetPriorityGrouping>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	4603      	mov	r3, r0
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057e8:	f7ff ff42 	bl	8005670 <__NVIC_GetPriorityGrouping>
 80057ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	6978      	ldr	r0, [r7, #20]
 80057f4:	f7ff ff90 	bl	8005718 <NVIC_EncodePriority>
 80057f8:	4602      	mov	r2, r0
 80057fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff ff5f 	bl	80056c4 <__NVIC_SetPriority>
}
 8005806:	bf00      	nop
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	4603      	mov	r3, r0
 8005816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581c:	4618      	mov	r0, r3
 800581e:	f7ff ff35 	bl	800568c <__NVIC_EnableIRQ>
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff ffa2 	bl	800577c <SysTick_Config>
 8005838:	4603      	mov	r3, r0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e059      	b.n	800590e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <HAL_DMA_Init+0xd4>)
 8005862:	429a      	cmp	r2, r3
 8005864:	d80f      	bhi.n	8005886 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b2b      	ldr	r3, [pc, #172]	; (800591c <HAL_DMA_Init+0xd8>)
 800586e:	4413      	add	r3, r2
 8005870:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_DMA_Init+0xdc>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	009a      	lsls	r2, r3, #2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a28      	ldr	r2, [pc, #160]	; (8005924 <HAL_DMA_Init+0xe0>)
 8005882:	63da      	str	r2, [r3, #60]	; 0x3c
 8005884:	e00e      	b.n	80058a4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	4b26      	ldr	r3, [pc, #152]	; (8005928 <HAL_DMA_Init+0xe4>)
 800588e:	4413      	add	r3, r2
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <HAL_DMA_Init+0xdc>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a22      	ldr	r2, [pc, #136]	; (800592c <HAL_DMA_Init+0xe8>)
 80058a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80058be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80058c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr
 8005918:	40020407 	.word	0x40020407
 800591c:	bffdfff8 	.word	0xbffdfff8
 8005920:	cccccccd 	.word	0xcccccccd
 8005924:	40020000 	.word	0x40020000
 8005928:	bffdfbf8 	.word	0xbffdfbf8
 800592c:	40020400 	.word	0x40020400

08005930 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_DMA_Start_IT+0x20>
 800594c:	2302      	movs	r3, #2
 800594e:	e04a      	b.n	80059e6 <HAL_DMA_Start_IT+0xb6>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800595e:	2b01      	cmp	r3, #1
 8005960:	d13a      	bne.n	80059d8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0201 	bic.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fbb0 	bl	80060ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d008      	beq.n	80059a6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 020e 	orr.w	r2, r2, #14
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e00f      	b.n	80059c6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0204 	bic.w	r2, r2, #4
 80059b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 020a 	orr.w	r2, r2, #10
 80059c4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0201 	orr.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e005      	b.n	80059e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80059e0:	2302      	movs	r3, #2
 80059e2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d008      	beq.n	8005a16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e020      	b.n	8005a58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 020e 	bic.w	r2, r2, #14
 8005a24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0201 	bic.w	r2, r2, #1
 8005a34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	2101      	movs	r1, #1
 8005a40:	fa01 f202 	lsl.w	r2, r1, r2
 8005a44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
	...

08005a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d005      	beq.n	8005a86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
 8005a84:	e0d6      	b.n	8005c34 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 020e 	bic.w	r2, r2, #14
 8005a94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0201 	bic.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b64      	ldr	r3, [pc, #400]	; (8005c40 <HAL_DMA_Abort_IT+0x1dc>)
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d958      	bls.n	8005b64 <HAL_DMA_Abort_IT+0x100>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a63      	ldr	r2, [pc, #396]	; (8005c44 <HAL_DMA_Abort_IT+0x1e0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d04f      	beq.n	8005b5c <HAL_DMA_Abort_IT+0xf8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a61      	ldr	r2, [pc, #388]	; (8005c48 <HAL_DMA_Abort_IT+0x1e4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d048      	beq.n	8005b58 <HAL_DMA_Abort_IT+0xf4>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a60      	ldr	r2, [pc, #384]	; (8005c4c <HAL_DMA_Abort_IT+0x1e8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d040      	beq.n	8005b52 <HAL_DMA_Abort_IT+0xee>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5e      	ldr	r2, [pc, #376]	; (8005c50 <HAL_DMA_Abort_IT+0x1ec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d038      	beq.n	8005b4c <HAL_DMA_Abort_IT+0xe8>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5d      	ldr	r2, [pc, #372]	; (8005c54 <HAL_DMA_Abort_IT+0x1f0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d030      	beq.n	8005b46 <HAL_DMA_Abort_IT+0xe2>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a5b      	ldr	r2, [pc, #364]	; (8005c58 <HAL_DMA_Abort_IT+0x1f4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d028      	beq.n	8005b40 <HAL_DMA_Abort_IT+0xdc>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a53      	ldr	r2, [pc, #332]	; (8005c40 <HAL_DMA_Abort_IT+0x1dc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d020      	beq.n	8005b3a <HAL_DMA_Abort_IT+0xd6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a57      	ldr	r2, [pc, #348]	; (8005c5c <HAL_DMA_Abort_IT+0x1f8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d019      	beq.n	8005b36 <HAL_DMA_Abort_IT+0xd2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a56      	ldr	r2, [pc, #344]	; (8005c60 <HAL_DMA_Abort_IT+0x1fc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d012      	beq.n	8005b32 <HAL_DMA_Abort_IT+0xce>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a54      	ldr	r2, [pc, #336]	; (8005c64 <HAL_DMA_Abort_IT+0x200>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00a      	beq.n	8005b2c <HAL_DMA_Abort_IT+0xc8>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a53      	ldr	r2, [pc, #332]	; (8005c68 <HAL_DMA_Abort_IT+0x204>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d102      	bne.n	8005b26 <HAL_DMA_Abort_IT+0xc2>
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	e01b      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b2a:	e018      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b30:	e015      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b32:	2310      	movs	r3, #16
 8005b34:	e013      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e011      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b3e:	e00e      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b44:	e00b      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b4a:	e008      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b50:	e005      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b56:	e002      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	e000      	b.n	8005b5e <HAL_DMA_Abort_IT+0xfa>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4a43      	ldr	r2, [pc, #268]	; (8005c6c <HAL_DMA_Abort_IT+0x208>)
 8005b60:	6053      	str	r3, [r2, #4]
 8005b62:	e057      	b.n	8005c14 <HAL_DMA_Abort_IT+0x1b0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a36      	ldr	r2, [pc, #216]	; (8005c44 <HAL_DMA_Abort_IT+0x1e0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d04f      	beq.n	8005c0e <HAL_DMA_Abort_IT+0x1aa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a35      	ldr	r2, [pc, #212]	; (8005c48 <HAL_DMA_Abort_IT+0x1e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d048      	beq.n	8005c0a <HAL_DMA_Abort_IT+0x1a6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a33      	ldr	r2, [pc, #204]	; (8005c4c <HAL_DMA_Abort_IT+0x1e8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d040      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x1a0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a32      	ldr	r2, [pc, #200]	; (8005c50 <HAL_DMA_Abort_IT+0x1ec>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d038      	beq.n	8005bfe <HAL_DMA_Abort_IT+0x19a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a30      	ldr	r2, [pc, #192]	; (8005c54 <HAL_DMA_Abort_IT+0x1f0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d030      	beq.n	8005bf8 <HAL_DMA_Abort_IT+0x194>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <HAL_DMA_Abort_IT+0x1f4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d028      	beq.n	8005bf2 <HAL_DMA_Abort_IT+0x18e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <HAL_DMA_Abort_IT+0x1dc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d020      	beq.n	8005bec <HAL_DMA_Abort_IT+0x188>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <HAL_DMA_Abort_IT+0x1f8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d019      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x184>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a29      	ldr	r2, [pc, #164]	; (8005c60 <HAL_DMA_Abort_IT+0x1fc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d012      	beq.n	8005be4 <HAL_DMA_Abort_IT+0x180>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a28      	ldr	r2, [pc, #160]	; (8005c64 <HAL_DMA_Abort_IT+0x200>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00a      	beq.n	8005bde <HAL_DMA_Abort_IT+0x17a>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a26      	ldr	r2, [pc, #152]	; (8005c68 <HAL_DMA_Abort_IT+0x204>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d102      	bne.n	8005bd8 <HAL_DMA_Abort_IT+0x174>
 8005bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bd6:	e01b      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bdc:	e018      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be2:	e015      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005be4:	2310      	movs	r3, #16
 8005be6:	e013      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e011      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bf0:	e00e      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005bf2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005bf6:	e00b      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bfc:	e008      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c02:	e005      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c08:	e002      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	e000      	b.n	8005c10 <HAL_DMA_Abort_IT+0x1ac>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <HAL_DMA_Abort_IT+0x20c>)
 8005c12:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	4798      	blx	r3
    } 
  }
  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40020080 	.word	0x40020080
 8005c44:	40020008 	.word	0x40020008
 8005c48:	4002001c 	.word	0x4002001c
 8005c4c:	40020030 	.word	0x40020030
 8005c50:	40020044 	.word	0x40020044
 8005c54:	40020058 	.word	0x40020058
 8005c58:	4002006c 	.word	0x4002006c
 8005c5c:	40020408 	.word	0x40020408
 8005c60:	4002041c 	.word	0x4002041c
 8005c64:	40020430 	.word	0x40020430
 8005c68:	40020444 	.word	0x40020444
 8005c6c:	40020400 	.word	0x40020400
 8005c70:	40020000 	.word	0x40020000

08005c74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2204      	movs	r2, #4
 8005c92:	409a      	lsls	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80f1 	beq.w	8005e80 <HAL_DMA_IRQHandler+0x20c>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 80eb 	beq.w	8005e80 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d107      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b5f      	ldr	r3, [pc, #380]	; (8005e4c <HAL_DMA_IRQHandler+0x1d8>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d958      	bls.n	8005d86 <HAL_DMA_IRQHandler+0x112>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a5d      	ldr	r2, [pc, #372]	; (8005e50 <HAL_DMA_IRQHandler+0x1dc>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d04f      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x10a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a5c      	ldr	r2, [pc, #368]	; (8005e54 <HAL_DMA_IRQHandler+0x1e0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d048      	beq.n	8005d7a <HAL_DMA_IRQHandler+0x106>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a5a      	ldr	r2, [pc, #360]	; (8005e58 <HAL_DMA_IRQHandler+0x1e4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d040      	beq.n	8005d74 <HAL_DMA_IRQHandler+0x100>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a59      	ldr	r2, [pc, #356]	; (8005e5c <HAL_DMA_IRQHandler+0x1e8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d038      	beq.n	8005d6e <HAL_DMA_IRQHandler+0xfa>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a57      	ldr	r2, [pc, #348]	; (8005e60 <HAL_DMA_IRQHandler+0x1ec>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d030      	beq.n	8005d68 <HAL_DMA_IRQHandler+0xf4>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a56      	ldr	r2, [pc, #344]	; (8005e64 <HAL_DMA_IRQHandler+0x1f0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d028      	beq.n	8005d62 <HAL_DMA_IRQHandler+0xee>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a4d      	ldr	r2, [pc, #308]	; (8005e4c <HAL_DMA_IRQHandler+0x1d8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d020      	beq.n	8005d5c <HAL_DMA_IRQHandler+0xe8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a52      	ldr	r2, [pc, #328]	; (8005e68 <HAL_DMA_IRQHandler+0x1f4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d019      	beq.n	8005d58 <HAL_DMA_IRQHandler+0xe4>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a50      	ldr	r2, [pc, #320]	; (8005e6c <HAL_DMA_IRQHandler+0x1f8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d012      	beq.n	8005d54 <HAL_DMA_IRQHandler+0xe0>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a4f      	ldr	r2, [pc, #316]	; (8005e70 <HAL_DMA_IRQHandler+0x1fc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00a      	beq.n	8005d4e <HAL_DMA_IRQHandler+0xda>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a4d      	ldr	r2, [pc, #308]	; (8005e74 <HAL_DMA_IRQHandler+0x200>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d102      	bne.n	8005d48 <HAL_DMA_IRQHandler+0xd4>
 8005d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d46:	e01b      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d4c:	e018      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d52:	e015      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	e013      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	e011      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d60:	e00e      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d66:	e00b      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d6c:	e008      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d72:	e005      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d78:	e002      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	e000      	b.n	8005d80 <HAL_DMA_IRQHandler+0x10c>
 8005d7e:	2304      	movs	r3, #4
 8005d80:	4a3d      	ldr	r2, [pc, #244]	; (8005e78 <HAL_DMA_IRQHandler+0x204>)
 8005d82:	6053      	str	r3, [r2, #4]
 8005d84:	e057      	b.n	8005e36 <HAL_DMA_IRQHandler+0x1c2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a31      	ldr	r2, [pc, #196]	; (8005e50 <HAL_DMA_IRQHandler+0x1dc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d04f      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x1bc>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2f      	ldr	r2, [pc, #188]	; (8005e54 <HAL_DMA_IRQHandler+0x1e0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d048      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x1b8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2e      	ldr	r2, [pc, #184]	; (8005e58 <HAL_DMA_IRQHandler+0x1e4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d040      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x1b2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2c      	ldr	r2, [pc, #176]	; (8005e5c <HAL_DMA_IRQHandler+0x1e8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d038      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x1ac>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2b      	ldr	r2, [pc, #172]	; (8005e60 <HAL_DMA_IRQHandler+0x1ec>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d030      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x1a6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a29      	ldr	r2, [pc, #164]	; (8005e64 <HAL_DMA_IRQHandler+0x1f0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d028      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x1a0>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <HAL_DMA_IRQHandler+0x1d8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d020      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x19a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a25      	ldr	r2, [pc, #148]	; (8005e68 <HAL_DMA_IRQHandler+0x1f4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d019      	beq.n	8005e0a <HAL_DMA_IRQHandler+0x196>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a24      	ldr	r2, [pc, #144]	; (8005e6c <HAL_DMA_IRQHandler+0x1f8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d012      	beq.n	8005e06 <HAL_DMA_IRQHandler+0x192>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_DMA_IRQHandler+0x1fc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00a      	beq.n	8005e00 <HAL_DMA_IRQHandler+0x18c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <HAL_DMA_IRQHandler+0x200>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d102      	bne.n	8005dfa <HAL_DMA_IRQHandler+0x186>
 8005df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005df8:	e01b      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005dfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005dfe:	e018      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e04:	e015      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	e013      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e0a:	2304      	movs	r3, #4
 8005e0c:	e011      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005e12:	e00e      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e18:	e00b      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e1e:	e008      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e24:	e005      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e2a:	e002      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	e000      	b.n	8005e32 <HAL_DMA_IRQHandler+0x1be>
 8005e30:	2304      	movs	r3, #4
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <HAL_DMA_IRQHandler+0x208>)
 8005e34:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 8136 	beq.w	80060ac <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005e48:	e130      	b.n	80060ac <HAL_DMA_IRQHandler+0x438>
 8005e4a:	bf00      	nop
 8005e4c:	40020080 	.word	0x40020080
 8005e50:	40020008 	.word	0x40020008
 8005e54:	4002001c 	.word	0x4002001c
 8005e58:	40020030 	.word	0x40020030
 8005e5c:	40020044 	.word	0x40020044
 8005e60:	40020058 	.word	0x40020058
 8005e64:	4002006c 	.word	0x4002006c
 8005e68:	40020408 	.word	0x40020408
 8005e6c:	4002041c 	.word	0x4002041c
 8005e70:	40020430 	.word	0x40020430
 8005e74:	40020444 	.word	0x40020444
 8005e78:	40020400 	.word	0x40020400
 8005e7c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	2202      	movs	r2, #2
 8005e86:	409a      	lsls	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80dd 	beq.w	800604c <HAL_DMA_IRQHandler+0x3d8>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80d7 	beq.w	800604c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 020a 	bic.w	r2, r2, #10
 8005eba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	4b7b      	ldr	r3, [pc, #492]	; (80060b8 <HAL_DMA_IRQHandler+0x444>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d958      	bls.n	8005f82 <HAL_DMA_IRQHandler+0x30e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a79      	ldr	r2, [pc, #484]	; (80060bc <HAL_DMA_IRQHandler+0x448>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d04f      	beq.n	8005f7a <HAL_DMA_IRQHandler+0x306>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a78      	ldr	r2, [pc, #480]	; (80060c0 <HAL_DMA_IRQHandler+0x44c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d048      	beq.n	8005f76 <HAL_DMA_IRQHandler+0x302>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a76      	ldr	r2, [pc, #472]	; (80060c4 <HAL_DMA_IRQHandler+0x450>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d040      	beq.n	8005f70 <HAL_DMA_IRQHandler+0x2fc>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a75      	ldr	r2, [pc, #468]	; (80060c8 <HAL_DMA_IRQHandler+0x454>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d038      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x2f6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a73      	ldr	r2, [pc, #460]	; (80060cc <HAL_DMA_IRQHandler+0x458>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d030      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x2f0>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a72      	ldr	r2, [pc, #456]	; (80060d0 <HAL_DMA_IRQHandler+0x45c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d028      	beq.n	8005f5e <HAL_DMA_IRQHandler+0x2ea>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a69      	ldr	r2, [pc, #420]	; (80060b8 <HAL_DMA_IRQHandler+0x444>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d020      	beq.n	8005f58 <HAL_DMA_IRQHandler+0x2e4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a6e      	ldr	r2, [pc, #440]	; (80060d4 <HAL_DMA_IRQHandler+0x460>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d019      	beq.n	8005f54 <HAL_DMA_IRQHandler+0x2e0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a6c      	ldr	r2, [pc, #432]	; (80060d8 <HAL_DMA_IRQHandler+0x464>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d012      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x2dc>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	; (80060dc <HAL_DMA_IRQHandler+0x468>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00a      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x2d6>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a69      	ldr	r2, [pc, #420]	; (80060e0 <HAL_DMA_IRQHandler+0x46c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d102      	bne.n	8005f44 <HAL_DMA_IRQHandler+0x2d0>
 8005f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f42:	e01b      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f48:	e018      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f4e:	e015      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f50:	2320      	movs	r3, #32
 8005f52:	e013      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e011      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f5c:	e00e      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f62:	e00b      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f68:	e008      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f6e:	e005      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f74:	e002      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f76:	2320      	movs	r3, #32
 8005f78:	e000      	b.n	8005f7c <HAL_DMA_IRQHandler+0x308>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	4a59      	ldr	r2, [pc, #356]	; (80060e4 <HAL_DMA_IRQHandler+0x470>)
 8005f7e:	6053      	str	r3, [r2, #4]
 8005f80:	e057      	b.n	8006032 <HAL_DMA_IRQHandler+0x3be>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a4d      	ldr	r2, [pc, #308]	; (80060bc <HAL_DMA_IRQHandler+0x448>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d04f      	beq.n	800602c <HAL_DMA_IRQHandler+0x3b8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a4b      	ldr	r2, [pc, #300]	; (80060c0 <HAL_DMA_IRQHandler+0x44c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d048      	beq.n	8006028 <HAL_DMA_IRQHandler+0x3b4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	; (80060c4 <HAL_DMA_IRQHandler+0x450>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d040      	beq.n	8006022 <HAL_DMA_IRQHandler+0x3ae>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a48      	ldr	r2, [pc, #288]	; (80060c8 <HAL_DMA_IRQHandler+0x454>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d038      	beq.n	800601c <HAL_DMA_IRQHandler+0x3a8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a47      	ldr	r2, [pc, #284]	; (80060cc <HAL_DMA_IRQHandler+0x458>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d030      	beq.n	8006016 <HAL_DMA_IRQHandler+0x3a2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a45      	ldr	r2, [pc, #276]	; (80060d0 <HAL_DMA_IRQHandler+0x45c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d028      	beq.n	8006010 <HAL_DMA_IRQHandler+0x39c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a3d      	ldr	r2, [pc, #244]	; (80060b8 <HAL_DMA_IRQHandler+0x444>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d020      	beq.n	800600a <HAL_DMA_IRQHandler+0x396>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a41      	ldr	r2, [pc, #260]	; (80060d4 <HAL_DMA_IRQHandler+0x460>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d019      	beq.n	8006006 <HAL_DMA_IRQHandler+0x392>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <HAL_DMA_IRQHandler+0x464>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d012      	beq.n	8006002 <HAL_DMA_IRQHandler+0x38e>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3e      	ldr	r2, [pc, #248]	; (80060dc <HAL_DMA_IRQHandler+0x468>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00a      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x388>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3d      	ldr	r2, [pc, #244]	; (80060e0 <HAL_DMA_IRQHandler+0x46c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d102      	bne.n	8005ff6 <HAL_DMA_IRQHandler+0x382>
 8005ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ff4:	e01b      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8005ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ffa:	e018      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8005ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006000:	e015      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8006002:	2320      	movs	r3, #32
 8006004:	e013      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8006006:	2302      	movs	r3, #2
 8006008:	e011      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 800600a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800600e:	e00e      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8006010:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006014:	e00b      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8006016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800601a:	e008      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 800601c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006020:	e005      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8006022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006026:	e002      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 8006028:	2320      	movs	r3, #32
 800602a:	e000      	b.n	800602e <HAL_DMA_IRQHandler+0x3ba>
 800602c:	2302      	movs	r3, #2
 800602e:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <HAL_DMA_IRQHandler+0x474>)
 8006030:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	d034      	beq.n	80060ac <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800604a:	e02f      	b.n	80060ac <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006050:	2208      	movs	r2, #8
 8006052:	409a      	lsls	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d028      	beq.n	80060ae <HAL_DMA_IRQHandler+0x43a>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d023      	beq.n	80060ae <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 020e 	bic.w	r2, r2, #14
 8006074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607e:	2101      	movs	r1, #1
 8006080:	fa01 f202 	lsl.w	r2, r1, r2
 8006084:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
    }
  }
  return;
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
}
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40020080 	.word	0x40020080
 80060bc:	40020008 	.word	0x40020008
 80060c0:	4002001c 	.word	0x4002001c
 80060c4:	40020030 	.word	0x40020030
 80060c8:	40020044 	.word	0x40020044
 80060cc:	40020058 	.word	0x40020058
 80060d0:	4002006c 	.word	0x4002006c
 80060d4:	40020408 	.word	0x40020408
 80060d8:	4002041c 	.word	0x4002041c
 80060dc:	40020430 	.word	0x40020430
 80060e0:	40020444 	.word	0x40020444
 80060e4:	40020400 	.word	0x40020400
 80060e8:	40020000 	.word	0x40020000

080060ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006102:	2101      	movs	r1, #1
 8006104:	fa01 f202 	lsl.w	r2, r1, r2
 8006108:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b10      	cmp	r3, #16
 8006118:	d108      	bne.n	800612c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800612a:	e007      	b.n	800613c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr
	...

08006148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006148:	b480      	push	{r7}
 800614a:	b08b      	sub	sp, #44	; 0x2c
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006152:	2300      	movs	r3, #0
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006156:	2300      	movs	r3, #0
 8006158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800615a:	e169      	b.n	8006430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800615c:	2201      	movs	r2, #1
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	429a      	cmp	r2, r3
 8006176:	f040 8158 	bne.w	800642a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4a9a      	ldr	r2, [pc, #616]	; (80063e8 <HAL_GPIO_Init+0x2a0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d05e      	beq.n	8006242 <HAL_GPIO_Init+0xfa>
 8006184:	4a98      	ldr	r2, [pc, #608]	; (80063e8 <HAL_GPIO_Init+0x2a0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d875      	bhi.n	8006276 <HAL_GPIO_Init+0x12e>
 800618a:	4a98      	ldr	r2, [pc, #608]	; (80063ec <HAL_GPIO_Init+0x2a4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d058      	beq.n	8006242 <HAL_GPIO_Init+0xfa>
 8006190:	4a96      	ldr	r2, [pc, #600]	; (80063ec <HAL_GPIO_Init+0x2a4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d86f      	bhi.n	8006276 <HAL_GPIO_Init+0x12e>
 8006196:	4a96      	ldr	r2, [pc, #600]	; (80063f0 <HAL_GPIO_Init+0x2a8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d052      	beq.n	8006242 <HAL_GPIO_Init+0xfa>
 800619c:	4a94      	ldr	r2, [pc, #592]	; (80063f0 <HAL_GPIO_Init+0x2a8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d869      	bhi.n	8006276 <HAL_GPIO_Init+0x12e>
 80061a2:	4a94      	ldr	r2, [pc, #592]	; (80063f4 <HAL_GPIO_Init+0x2ac>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d04c      	beq.n	8006242 <HAL_GPIO_Init+0xfa>
 80061a8:	4a92      	ldr	r2, [pc, #584]	; (80063f4 <HAL_GPIO_Init+0x2ac>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d863      	bhi.n	8006276 <HAL_GPIO_Init+0x12e>
 80061ae:	4a92      	ldr	r2, [pc, #584]	; (80063f8 <HAL_GPIO_Init+0x2b0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d046      	beq.n	8006242 <HAL_GPIO_Init+0xfa>
 80061b4:	4a90      	ldr	r2, [pc, #576]	; (80063f8 <HAL_GPIO_Init+0x2b0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d85d      	bhi.n	8006276 <HAL_GPIO_Init+0x12e>
 80061ba:	2b12      	cmp	r3, #18
 80061bc:	d82a      	bhi.n	8006214 <HAL_GPIO_Init+0xcc>
 80061be:	2b12      	cmp	r3, #18
 80061c0:	d859      	bhi.n	8006276 <HAL_GPIO_Init+0x12e>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <HAL_GPIO_Init+0x80>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	08006243 	.word	0x08006243
 80061cc:	0800621d 	.word	0x0800621d
 80061d0:	0800622f 	.word	0x0800622f
 80061d4:	08006271 	.word	0x08006271
 80061d8:	08006277 	.word	0x08006277
 80061dc:	08006277 	.word	0x08006277
 80061e0:	08006277 	.word	0x08006277
 80061e4:	08006277 	.word	0x08006277
 80061e8:	08006277 	.word	0x08006277
 80061ec:	08006277 	.word	0x08006277
 80061f0:	08006277 	.word	0x08006277
 80061f4:	08006277 	.word	0x08006277
 80061f8:	08006277 	.word	0x08006277
 80061fc:	08006277 	.word	0x08006277
 8006200:	08006277 	.word	0x08006277
 8006204:	08006277 	.word	0x08006277
 8006208:	08006277 	.word	0x08006277
 800620c:	08006225 	.word	0x08006225
 8006210:	08006239 	.word	0x08006239
 8006214:	4a79      	ldr	r2, [pc, #484]	; (80063fc <HAL_GPIO_Init+0x2b4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800621a:	e02c      	b.n	8006276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	623b      	str	r3, [r7, #32]
          break;
 8006222:	e029      	b.n	8006278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	623b      	str	r3, [r7, #32]
          break;
 800622c:	e024      	b.n	8006278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	3308      	adds	r3, #8
 8006234:	623b      	str	r3, [r7, #32]
          break;
 8006236:	e01f      	b.n	8006278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	330c      	adds	r3, #12
 800623e:	623b      	str	r3, [r7, #32]
          break;
 8006240:	e01a      	b.n	8006278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d102      	bne.n	8006250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800624a:	2304      	movs	r3, #4
 800624c:	623b      	str	r3, [r7, #32]
          break;
 800624e:	e013      	b.n	8006278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d105      	bne.n	8006264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006258:	2308      	movs	r3, #8
 800625a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	611a      	str	r2, [r3, #16]
          break;
 8006262:	e009      	b.n	8006278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006264:	2308      	movs	r3, #8
 8006266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	615a      	str	r2, [r3, #20]
          break;
 800626e:	e003      	b.n	8006278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006270:	2300      	movs	r3, #0
 8006272:	623b      	str	r3, [r7, #32]
          break;
 8006274:	e000      	b.n	8006278 <HAL_GPIO_Init+0x130>
          break;
 8006276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2bff      	cmp	r3, #255	; 0xff
 800627c:	d801      	bhi.n	8006282 <HAL_GPIO_Init+0x13a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	e001      	b.n	8006286 <HAL_GPIO_Init+0x13e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2bff      	cmp	r3, #255	; 0xff
 800628c:	d802      	bhi.n	8006294 <HAL_GPIO_Init+0x14c>
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	e002      	b.n	800629a <HAL_GPIO_Init+0x152>
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	3b08      	subs	r3, #8
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	210f      	movs	r1, #15
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	6a39      	ldr	r1, [r7, #32]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	431a      	orrs	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 80b1 	beq.w	800642a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062c8:	4b4d      	ldr	r3, [pc, #308]	; (8006400 <HAL_GPIO_Init+0x2b8>)
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	4a4c      	ldr	r2, [pc, #304]	; (8006400 <HAL_GPIO_Init+0x2b8>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	6193      	str	r3, [r2, #24]
 80062d4:	4b4a      	ldr	r3, [pc, #296]	; (8006400 <HAL_GPIO_Init+0x2b8>)
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	60bb      	str	r3, [r7, #8]
 80062de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80062e0:	4a48      	ldr	r2, [pc, #288]	; (8006404 <HAL_GPIO_Init+0x2bc>)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	089b      	lsrs	r3, r3, #2
 80062e6:	3302      	adds	r3, #2
 80062e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	220f      	movs	r2, #15
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	43db      	mvns	r3, r3
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a40      	ldr	r2, [pc, #256]	; (8006408 <HAL_GPIO_Init+0x2c0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <HAL_GPIO_Init+0x1ec>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3f      	ldr	r2, [pc, #252]	; (800640c <HAL_GPIO_Init+0x2c4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00d      	beq.n	8006330 <HAL_GPIO_Init+0x1e8>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3e      	ldr	r2, [pc, #248]	; (8006410 <HAL_GPIO_Init+0x2c8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <HAL_GPIO_Init+0x1e4>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3d      	ldr	r2, [pc, #244]	; (8006414 <HAL_GPIO_Init+0x2cc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <HAL_GPIO_Init+0x1e0>
 8006324:	2303      	movs	r3, #3
 8006326:	e006      	b.n	8006336 <HAL_GPIO_Init+0x1ee>
 8006328:	2304      	movs	r3, #4
 800632a:	e004      	b.n	8006336 <HAL_GPIO_Init+0x1ee>
 800632c:	2302      	movs	r3, #2
 800632e:	e002      	b.n	8006336 <HAL_GPIO_Init+0x1ee>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_GPIO_Init+0x1ee>
 8006334:	2300      	movs	r3, #0
 8006336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006338:	f002 0203 	and.w	r2, r2, #3
 800633c:	0092      	lsls	r2, r2, #2
 800633e:	4093      	lsls	r3, r2
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006346:	492f      	ldr	r1, [pc, #188]	; (8006404 <HAL_GPIO_Init+0x2bc>)
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	089b      	lsrs	r3, r3, #2
 800634c:	3302      	adds	r3, #2
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006360:	4b2d      	ldr	r3, [pc, #180]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	492c      	ldr	r1, [pc, #176]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	4313      	orrs	r3, r2
 800636a:	600b      	str	r3, [r1, #0]
 800636c:	e006      	b.n	800637c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	43db      	mvns	r3, r3
 8006376:	4928      	ldr	r1, [pc, #160]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 8006378:	4013      	ands	r3, r2
 800637a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006388:	4b23      	ldr	r3, [pc, #140]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	4922      	ldr	r1, [pc, #136]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
 8006394:	e006      	b.n	80063a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	43db      	mvns	r3, r3
 800639e:	491e      	ldr	r1, [pc, #120]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80063b0:	4b19      	ldr	r3, [pc, #100]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	4918      	ldr	r1, [pc, #96]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	608b      	str	r3, [r1, #8]
 80063bc:	e006      	b.n	80063cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	4914      	ldr	r1, [pc, #80]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d021      	beq.n	800641c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80063d8:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	490e      	ldr	r1, [pc, #56]	; (8006418 <HAL_GPIO_Init+0x2d0>)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60cb      	str	r3, [r1, #12]
 80063e4:	e021      	b.n	800642a <HAL_GPIO_Init+0x2e2>
 80063e6:	bf00      	nop
 80063e8:	10320000 	.word	0x10320000
 80063ec:	10310000 	.word	0x10310000
 80063f0:	10220000 	.word	0x10220000
 80063f4:	10210000 	.word	0x10210000
 80063f8:	10120000 	.word	0x10120000
 80063fc:	10110000 	.word	0x10110000
 8006400:	40021000 	.word	0x40021000
 8006404:	40010000 	.word	0x40010000
 8006408:	40010800 	.word	0x40010800
 800640c:	40010c00 	.word	0x40010c00
 8006410:	40011000 	.word	0x40011000
 8006414:	40011400 	.word	0x40011400
 8006418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <HAL_GPIO_Init+0x304>)
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	43db      	mvns	r3, r3
 8006424:	4909      	ldr	r1, [pc, #36]	; (800644c <HAL_GPIO_Init+0x304>)
 8006426:	4013      	ands	r3, r2
 8006428:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	3301      	adds	r3, #1
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	f47f ae8e 	bne.w	800615c <HAL_GPIO_Init+0x14>
  }
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	372c      	adds	r7, #44	; 0x2c
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	40010400 	.word	0x40010400

08006450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	887b      	ldrh	r3, [r7, #2]
 8006462:	4013      	ands	r3, r2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
 800646c:	e001      	b.n	8006472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr

0800647e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	807b      	strh	r3, [r7, #2]
 800648a:	4613      	mov	r3, r2
 800648c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800648e:	787b      	ldrb	r3, [r7, #1]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800649a:	e003      	b.n	80064a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800649c:	887b      	ldrh	r3, [r7, #2]
 800649e:	041a      	lsls	r2, r3, #16
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	611a      	str	r2, [r3, #16]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b085      	sub	sp, #20
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064c0:	887a      	ldrh	r2, [r7, #2]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	041a      	lsls	r2, r3, #16
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	43d9      	mvns	r1, r3
 80064cc:	887b      	ldrh	r3, [r7, #2]
 80064ce:	400b      	ands	r3, r1
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	611a      	str	r2, [r3, #16]
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064f6:	4a05      	ldr	r2, [pc, #20]	; (800650c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fb f80a 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40010400 	.word	0x40010400

08006510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e304      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8087 	beq.w	800663e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006530:	4b92      	ldr	r3, [pc, #584]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b04      	cmp	r3, #4
 800653a:	d00c      	beq.n	8006556 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800653c:	4b8f      	ldr	r3, [pc, #572]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f003 030c 	and.w	r3, r3, #12
 8006544:	2b08      	cmp	r3, #8
 8006546:	d112      	bne.n	800656e <HAL_RCC_OscConfig+0x5e>
 8006548:	4b8c      	ldr	r3, [pc, #560]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006554:	d10b      	bne.n	800656e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006556:	4b89      	ldr	r3, [pc, #548]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d06c      	beq.n	800663c <HAL_RCC_OscConfig+0x12c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d168      	bne.n	800663c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e2de      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d106      	bne.n	8006586 <HAL_RCC_OscConfig+0x76>
 8006578:	4b80      	ldr	r3, [pc, #512]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a7f      	ldr	r2, [pc, #508]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 800657e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e02e      	b.n	80065e4 <HAL_RCC_OscConfig+0xd4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10c      	bne.n	80065a8 <HAL_RCC_OscConfig+0x98>
 800658e:	4b7b      	ldr	r3, [pc, #492]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7a      	ldr	r2, [pc, #488]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b78      	ldr	r3, [pc, #480]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a77      	ldr	r2, [pc, #476]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e01d      	b.n	80065e4 <HAL_RCC_OscConfig+0xd4>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065b0:	d10c      	bne.n	80065cc <HAL_RCC_OscConfig+0xbc>
 80065b2:	4b72      	ldr	r3, [pc, #456]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a71      	ldr	r2, [pc, #452]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	4b6f      	ldr	r3, [pc, #444]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a6e      	ldr	r2, [pc, #440]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e00b      	b.n	80065e4 <HAL_RCC_OscConfig+0xd4>
 80065cc:	4b6b      	ldr	r3, [pc, #428]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a6a      	ldr	r2, [pc, #424]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	4b68      	ldr	r3, [pc, #416]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a67      	ldr	r2, [pc, #412]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80065de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d013      	beq.n	8006614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7fe f9a4 	bl	8004938 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f4:	f7fe f9a0 	bl	8004938 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e292      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	4b5d      	ldr	r3, [pc, #372]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCC_OscConfig+0xe4>
 8006612:	e014      	b.n	800663e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006614:	f7fe f990 	bl	8004938 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800661c:	f7fe f98c 	bl	8004938 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b64      	cmp	r3, #100	; 0x64
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e27e      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662e:	4b53      	ldr	r3, [pc, #332]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x10c>
 800663a:	e000      	b.n	800663e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800663c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d063      	beq.n	8006712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800664a:	4b4c      	ldr	r3, [pc, #304]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006656:	4b49      	ldr	r3, [pc, #292]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f003 030c 	and.w	r3, r3, #12
 800665e:	2b08      	cmp	r3, #8
 8006660:	d11c      	bne.n	800669c <HAL_RCC_OscConfig+0x18c>
 8006662:	4b46      	ldr	r3, [pc, #280]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d116      	bne.n	800669c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800666e:	4b43      	ldr	r3, [pc, #268]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_RCC_OscConfig+0x176>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d001      	beq.n	8006686 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e252      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006686:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4939      	ldr	r1, [pc, #228]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669a:	e03a      	b.n	8006712 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d020      	beq.n	80066e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066a4:	4b36      	ldr	r3, [pc, #216]	; (8006780 <HAL_RCC_OscConfig+0x270>)
 80066a6:	2201      	movs	r2, #1
 80066a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066aa:	f7fe f945 	bl	8004938 <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b2:	f7fe f941 	bl	8004938 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e233      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c4:	4b2d      	ldr	r3, [pc, #180]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0f0      	beq.n	80066b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d0:	4b2a      	ldr	r3, [pc, #168]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4927      	ldr	r1, [pc, #156]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	600b      	str	r3, [r1, #0]
 80066e4:	e015      	b.n	8006712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066e6:	4b26      	ldr	r3, [pc, #152]	; (8006780 <HAL_RCC_OscConfig+0x270>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ec:	f7fe f924 	bl	8004938 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f4:	f7fe f920 	bl	8004938 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e212      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006706:	4b1d      	ldr	r3, [pc, #116]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f0      	bne.n	80066f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d03a      	beq.n	8006794 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d019      	beq.n	800675a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006726:	4b17      	ldr	r3, [pc, #92]	; (8006784 <HAL_RCC_OscConfig+0x274>)
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672c:	f7fe f904 	bl	8004938 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006734:	f7fe f900 	bl	8004938 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e1f2      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006746:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_RCC_OscConfig+0x26c>)
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006752:	2001      	movs	r0, #1
 8006754:	f000 fc20 	bl	8006f98 <RCC_Delay>
 8006758:	e01c      	b.n	8006794 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <HAL_RCC_OscConfig+0x274>)
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006760:	f7fe f8ea 	bl	8004938 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006766:	e00f      	b.n	8006788 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006768:	f7fe f8e6 	bl	8004938 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d908      	bls.n	8006788 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1d8      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
 800677a:	bf00      	nop
 800677c:	40021000 	.word	0x40021000
 8006780:	42420000 	.word	0x42420000
 8006784:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006788:	4b9b      	ldr	r3, [pc, #620]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e9      	bne.n	8006768 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80a6 	beq.w	80068ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067a6:	4b94      	ldr	r3, [pc, #592]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10d      	bne.n	80067ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b2:	4b91      	ldr	r3, [pc, #580]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	4a90      	ldr	r2, [pc, #576]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80067b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067bc:	61d3      	str	r3, [r2, #28]
 80067be:	4b8e      	ldr	r3, [pc, #568]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ce:	4b8b      	ldr	r3, [pc, #556]	; (80069fc <HAL_RCC_OscConfig+0x4ec>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d118      	bne.n	800680c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067da:	4b88      	ldr	r3, [pc, #544]	; (80069fc <HAL_RCC_OscConfig+0x4ec>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a87      	ldr	r2, [pc, #540]	; (80069fc <HAL_RCC_OscConfig+0x4ec>)
 80067e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067e6:	f7fe f8a7 	bl	8004938 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067ec:	e008      	b.n	8006800 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ee:	f7fe f8a3 	bl	8004938 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b64      	cmp	r3, #100	; 0x64
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e195      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006800:	4b7e      	ldr	r3, [pc, #504]	; (80069fc <HAL_RCC_OscConfig+0x4ec>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d106      	bne.n	8006822 <HAL_RCC_OscConfig+0x312>
 8006814:	4b78      	ldr	r3, [pc, #480]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	4a77      	ldr	r2, [pc, #476]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	6213      	str	r3, [r2, #32]
 8006820:	e02d      	b.n	800687e <HAL_RCC_OscConfig+0x36e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10c      	bne.n	8006844 <HAL_RCC_OscConfig+0x334>
 800682a:	4b73      	ldr	r3, [pc, #460]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	4a72      	ldr	r2, [pc, #456]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	6213      	str	r3, [r2, #32]
 8006836:	4b70      	ldr	r3, [pc, #448]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	4a6f      	ldr	r2, [pc, #444]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800683c:	f023 0304 	bic.w	r3, r3, #4
 8006840:	6213      	str	r3, [r2, #32]
 8006842:	e01c      	b.n	800687e <HAL_RCC_OscConfig+0x36e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b05      	cmp	r3, #5
 800684a:	d10c      	bne.n	8006866 <HAL_RCC_OscConfig+0x356>
 800684c:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	4a69      	ldr	r2, [pc, #420]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	6213      	str	r3, [r2, #32]
 8006858:	4b67      	ldr	r3, [pc, #412]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	4a66      	ldr	r2, [pc, #408]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6213      	str	r3, [r2, #32]
 8006864:	e00b      	b.n	800687e <HAL_RCC_OscConfig+0x36e>
 8006866:	4b64      	ldr	r3, [pc, #400]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	4a63      	ldr	r2, [pc, #396]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	6213      	str	r3, [r2, #32]
 8006872:	4b61      	ldr	r3, [pc, #388]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	4a60      	ldr	r2, [pc, #384]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006878:	f023 0304 	bic.w	r3, r3, #4
 800687c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d015      	beq.n	80068b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006886:	f7fe f857 	bl	8004938 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688c:	e00a      	b.n	80068a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800688e:	f7fe f853 	bl	8004938 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	f241 3288 	movw	r2, #5000	; 0x1388
 800689c:	4293      	cmp	r3, r2
 800689e:	d901      	bls.n	80068a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e143      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a4:	4b54      	ldr	r3, [pc, #336]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0ee      	beq.n	800688e <HAL_RCC_OscConfig+0x37e>
 80068b0:	e014      	b.n	80068dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b2:	f7fe f841 	bl	8004938 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068b8:	e00a      	b.n	80068d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ba:	f7fe f83d 	bl	8004938 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e12d      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d0:	4b49      	ldr	r3, [pc, #292]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1ee      	bne.n	80068ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d105      	bne.n	80068ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e2:	4b45      	ldr	r3, [pc, #276]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	4a44      	ldr	r2, [pc, #272]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80068e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ec:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 808c 	beq.w	8006a10 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80068f8:	4b3f      	ldr	r3, [pc, #252]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006904:	d10e      	bne.n	8006924 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8006906:	4b3c      	ldr	r3, [pc, #240]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800690e:	2b08      	cmp	r3, #8
 8006910:	d108      	bne.n	8006924 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8006912:	4b39      	ldr	r3, [pc, #228]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800691a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691e:	d101      	bne.n	8006924 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e103      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	2b02      	cmp	r3, #2
 800692a:	d14e      	bne.n	80069ca <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800692c:	4b32      	ldr	r3, [pc, #200]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8006938:	4b2f      	ldr	r3, [pc, #188]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8006944:	429a      	cmp	r2, r3
 8006946:	d001      	beq.n	800694c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e0ef      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800694c:	4b2c      	ldr	r3, [pc, #176]	; (8006a00 <HAL_RCC_OscConfig+0x4f0>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006952:	f7fd fff1 	bl	8004938 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800695a:	f7fd ffed 	bl	8004938 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b64      	cmp	r3, #100	; 0x64
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e0df      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800696c:	4b22      	ldr	r3, [pc, #136]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f0      	bne.n	800695a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8006978:	4b1f      	ldr	r3, [pc, #124]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006984:	491c      	ldr	r1, [pc, #112]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006986:	4313      	orrs	r3, r2
 8006988:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800698a:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 800698c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	4918      	ldr	r1, [pc, #96]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 8006998:	4313      	orrs	r3, r2
 800699a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <HAL_RCC_OscConfig+0x4f0>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a2:	f7fd ffc9 	bl	8004938 <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069aa:	f7fd ffc5 	bl	8004938 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b64      	cmp	r3, #100	; 0x64
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e0b7      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0f0      	beq.n	80069aa <HAL_RCC_OscConfig+0x49a>
 80069c8:	e022      	b.n	8006a10 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80069ca:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <HAL_RCC_OscConfig+0x4e8>)
 80069d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <HAL_RCC_OscConfig+0x4f0>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069dc:	f7fd ffac 	bl	8004938 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80069e2:	e00f      	b.n	8006a04 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069e4:	f7fd ffa8 	bl	8004938 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b64      	cmp	r3, #100	; 0x64
 80069f0:	d908      	bls.n	8006a04 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e09a      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
 80069f6:	bf00      	nop
 80069f8:	40021000 	.word	0x40021000
 80069fc:	40007000 	.word	0x40007000
 8006a00:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8006a04:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e9      	bne.n	80069e4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f000 8088 	beq.w	8006b2a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a1a:	4b46      	ldr	r3, [pc, #280]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d068      	beq.n	8006af8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d14d      	bne.n	8006aca <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2e:	4b42      	ldr	r3, [pc, #264]	; (8006b38 <HAL_RCC_OscConfig+0x628>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a34:	f7fd ff80 	bl	8004938 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fd ff7c 	bl	8004938 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e06e      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a4e:	4b39      	ldr	r3, [pc, #228]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1f0      	bne.n	8006a3c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a62:	d10f      	bne.n	8006a84 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8006a64:	4b33      	ldr	r3, [pc, #204]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4931      	ldr	r1, [pc, #196]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a72:	4b30      	ldr	r3, [pc, #192]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	f023 020f 	bic.w	r2, r3, #15
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	492d      	ldr	r1, [pc, #180]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a84:	4b2b      	ldr	r3, [pc, #172]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a94:	430b      	orrs	r3, r1
 8006a96:	4927      	ldr	r1, [pc, #156]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a9c:	4b26      	ldr	r3, [pc, #152]	; (8006b38 <HAL_RCC_OscConfig+0x628>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa2:	f7fd ff49 	bl	8004938 <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aaa:	f7fd ff45 	bl	8004938 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e037      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006abc:	4b1d      	ldr	r3, [pc, #116]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0f0      	beq.n	8006aaa <HAL_RCC_OscConfig+0x59a>
 8006ac8:	e02f      	b.n	8006b2a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <HAL_RCC_OscConfig+0x628>)
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fd ff32 	bl	8004938 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fd ff2e 	bl	8004938 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e020      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aea:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x5c8>
 8006af6:	e018      	b.n	8006b2a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e013      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCC_OscConfig+0x624>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d106      	bne.n	8006b26 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d001      	beq.n	8006b2a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40021000 	.word	0x40021000
 8006b38:	42420060 	.word	0x42420060

08006b3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0d0      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b50:	4b6a      	ldr	r3, [pc, #424]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d910      	bls.n	8006b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b5e:	4b67      	ldr	r3, [pc, #412]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f023 0207 	bic.w	r2, r3, #7
 8006b66:	4965      	ldr	r1, [pc, #404]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b63      	ldr	r3, [pc, #396]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0b8      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d020      	beq.n	8006bce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b98:	4b59      	ldr	r3, [pc, #356]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4a58      	ldr	r2, [pc, #352]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ba2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bb0:	4b53      	ldr	r3, [pc, #332]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	4a52      	ldr	r2, [pc, #328]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006bba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bbc:	4b50      	ldr	r3, [pc, #320]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	494d      	ldr	r1, [pc, #308]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d040      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be2:	4b47      	ldr	r3, [pc, #284]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d115      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07f      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e073      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0a:	4b3d      	ldr	r3, [pc, #244]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e06b      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f023 0203 	bic.w	r2, r3, #3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	4936      	ldr	r1, [pc, #216]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c2c:	f7fd fe84 	bl	8004938 <HAL_GetTick>
 8006c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c32:	e00a      	b.n	8006c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c34:	f7fd fe80 	bl	8004938 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d901      	bls.n	8006c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c46:	2303      	movs	r3, #3
 8006c48:	e053      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4a:	4b2d      	ldr	r3, [pc, #180]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f003 020c 	and.w	r2, r3, #12
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d1eb      	bne.n	8006c34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d210      	bcs.n	8006c8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b24      	ldr	r3, [pc, #144]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 0207 	bic.w	r2, r3, #7
 8006c72:	4922      	ldr	r1, [pc, #136]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <HAL_RCC_ClockConfig+0x1c0>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e032      	b.n	8006cf2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c98:	4b19      	ldr	r3, [pc, #100]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4916      	ldr	r1, [pc, #88]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cb6:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	490e      	ldr	r1, [pc, #56]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cca:	f000 f821 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	490a      	ldr	r1, [pc, #40]	; (8006d04 <HAL_RCC_ClockConfig+0x1c8>)
 8006cdc:	5ccb      	ldrb	r3, [r1, r3]
 8006cde:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce2:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <HAL_RCC_ClockConfig+0x1cc>)
 8006ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <HAL_RCC_ClockConfig+0x1d0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd fde2 	bl	80048b4 <HAL_InitTick>

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40022000 	.word	0x40022000
 8006d00:	40021000 	.word	0x40021000
 8006d04:	08008430 	.word	0x08008430
 8006d08:	20000020 	.word	0x20000020
 8006d0c:	2000032c 	.word	0x2000032c

08006d10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	b09d      	sub	sp, #116	; 0x74
 8006d16:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006d18:	4b81      	ldr	r3, [pc, #516]	; (8006f20 <HAL_RCC_GetSysClockFreq+0x210>)
 8006d1a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8006d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d20:	c407      	stmia	r4!, {r0, r1, r2}
 8006d22:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8006d24:	4b7f      	ldr	r3, [pc, #508]	; (8006f24 <HAL_RCC_GetSysClockFreq+0x214>)
 8006d26:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8006d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	667b      	str	r3, [r7, #100]	; 0x64
 8006d34:	2300      	movs	r3, #0
 8006d36:	663b      	str	r3, [r7, #96]	; 0x60
 8006d38:	2300      	movs	r3, #0
 8006d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d48:	2300      	movs	r3, #0
 8006d4a:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d4c:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x218>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d54:	f003 030c 	and.w	r3, r3, #12
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d002      	beq.n	8006d62 <HAL_RCC_GetSysClockFreq+0x52>
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d003      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x58>
 8006d60:	e0d4      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d62:	4b72      	ldr	r3, [pc, #456]	; (8006f2c <HAL_RCC_GetSysClockFreq+0x21c>)
 8006d64:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006d66:	e0d4      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d6a:	0c9b      	lsrs	r3, r3, #18
 8006d6c:	f003 030f 	and.w	r3, r3, #15
 8006d70:	3340      	adds	r3, #64	; 0x40
 8006d72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d76:	4413      	add	r3, r2
 8006d78:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80b9 	beq.w	8006efc <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006d8a:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x218>)
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	3340      	adds	r3, #64	; 0x40
 8006d94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d98:	4413      	add	r3, r2
 8006d9a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8006d9e:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8006da0:	4b61      	ldr	r3, [pc, #388]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x218>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8095 	beq.w	8006ed8 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006dae:	4b5e      	ldr	r3, [pc, #376]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x218>)
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	091b      	lsrs	r3, r3, #4
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	3301      	adds	r3, #1
 8006dba:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006dbc:	4b5a      	ldr	r3, [pc, #360]	; (8006f28 <HAL_RCC_GetSysClockFreq+0x218>)
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	0a1b      	lsrs	r3, r3, #8
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dcc:	2200      	movs	r2, #0
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	61fa      	str	r2, [r7, #28]
 8006dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006dde:	4622      	mov	r2, r4
 8006de0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006de4:	4684      	mov	ip, r0
 8006de6:	fb0c f202 	mul.w	r2, ip, r2
 8006dea:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8006dee:	468c      	mov	ip, r1
 8006df0:	4618      	mov	r0, r3
 8006df2:	4621      	mov	r1, r4
 8006df4:	4603      	mov	r3, r0
 8006df6:	fb03 f30c 	mul.w	r3, r3, ip
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e00:	fba2 8901 	umull	r8, r9, r2, r1
 8006e04:	444b      	add	r3, r9
 8006e06:	4699      	mov	r9, r3
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	f04f 0000 	mov.w	r0, #0
 8006e10:	f04f 0100 	mov.w	r1, #0
 8006e14:	0159      	lsls	r1, r3, #5
 8006e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e1a:	0150      	lsls	r0, r2, #5
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	ebb2 0508 	subs.w	r5, r2, r8
 8006e24:	eb63 0609 	sbc.w	r6, r3, r9
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	01b3      	lsls	r3, r6, #6
 8006e32:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 8006e36:	01aa      	lsls	r2, r5, #6
 8006e38:	ebb2 0a05 	subs.w	sl, r2, r5
 8006e3c:	eb63 0b06 	sbc.w	fp, r3, r6
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e54:	4692      	mov	sl, r2
 8006e56:	469b      	mov	fp, r3
 8006e58:	eb1a 0308 	adds.w	r3, sl, r8
 8006e5c:	603b      	str	r3, [r7, #0]
 8006e5e:	eb4b 0309 	adc.w	r3, fp, r9
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e70:	4629      	mov	r1, r5
 8006e72:	024b      	lsls	r3, r1, #9
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	4604      	mov	r4, r0
 8006e7a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006e7e:	4601      	mov	r1, r0
 8006e80:	024a      	lsls	r2, r1, #9
 8006e82:	4610      	mov	r0, r2
 8006e84:	4619      	mov	r1, r3
 8006e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e88:	2200      	movs	r2, #0
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	617a      	str	r2, [r7, #20]
 8006e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e90:	2200      	movs	r2, #0
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	60fa      	str	r2, [r7, #12]
 8006e96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006ea0:	4645      	mov	r5, r8
 8006ea2:	fb05 f202 	mul.w	r2, r5, r2
 8006ea6:	464e      	mov	r6, r9
 8006ea8:	4625      	mov	r5, r4
 8006eaa:	461c      	mov	r4, r3
 8006eac:	4623      	mov	r3, r4
 8006eae:	fb03 f306 	mul.w	r3, r3, r6
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	4644      	mov	r4, r8
 8006eb8:	fba2 2404 	umull	r2, r4, r2, r4
 8006ebc:	627c      	str	r4, [r7, #36]	; 0x24
 8006ebe:	623a      	str	r2, [r7, #32]
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec2:	4413      	add	r3, r2
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eca:	f7f9 f9ab 	bl	8000224 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ed6:	e007      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8006ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eda:	4a14      	ldr	r2, [pc, #80]	; (8006f2c <HAL_RCC_GetSysClockFreq+0x21c>)
 8006edc:	fb03 f202 	mul.w	r2, r3, r2
 8006ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006ee8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8006eec:	461a      	mov	r2, r3
 8006eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d108      	bne.n	8006f06 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006efa:	e004      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006efe:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x220>)
 8006f00:	fb02 f303 	mul.w	r3, r2, r3
 8006f04:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8006f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f08:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006f0a:	e002      	b.n	8006f12 <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f0c:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <HAL_RCC_GetSysClockFreq+0x21c>)
 8006f0e:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3774      	adds	r7, #116	; 0x74
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	bf00      	nop
 8006f20:	08008410 	.word	0x08008410
 8006f24:	08008420 	.word	0x08008420
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	007a1200 	.word	0x007a1200
 8006f30:	003d0900 	.word	0x003d0900

08006f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f38:	4b02      	ldr	r3, [pc, #8]	; (8006f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr
 8006f44:	20000020 	.word	0x20000020

08006f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f4c:	f7ff fff2 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8006f50:	4602      	mov	r2, r0
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	0a1b      	lsrs	r3, r3, #8
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4903      	ldr	r1, [pc, #12]	; (8006f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f5e:	5ccb      	ldrb	r3, [r1, r3]
 8006f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	08008440 	.word	0x08008440

08006f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f74:	f7ff ffde 	bl	8006f34 <HAL_RCC_GetHCLKFreq>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	0adb      	lsrs	r3, r3, #11
 8006f80:	f003 0307 	and.w	r3, r3, #7
 8006f84:	4903      	ldr	r1, [pc, #12]	; (8006f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f86:	5ccb      	ldrb	r3, [r1, r3]
 8006f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40021000 	.word	0x40021000
 8006f94:	08008440 	.word	0x08008440

08006f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <RCC_Delay+0x34>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <RCC_Delay+0x38>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	0a5b      	lsrs	r3, r3, #9
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	fb02 f303 	mul.w	r3, r2, r3
 8006fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fb4:	bf00      	nop
  }
  while (Delay --);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	60fa      	str	r2, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f9      	bne.n	8006fb4 <RCC_Delay+0x1c>
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	20000020 	.word	0x20000020
 8006fd0:	10624dd3 	.word	0x10624dd3

08006fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e041      	b.n	800706a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fb fe60 	bl	8002cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f000 fa78 	bl	8007508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	d001      	beq.n	800708c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e03f      	b.n	800710c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1b      	ldr	r2, [pc, #108]	; (8007118 <HAL_TIM_Base_Start_IT+0xa4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0x62>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b6:	d00e      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0x62>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a17      	ldr	r2, [pc, #92]	; (800711c <HAL_TIM_Base_Start_IT+0xa8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0x62>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a16      	ldr	r2, [pc, #88]	; (8007120 <HAL_TIM_Base_Start_IT+0xac>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_TIM_Base_Start_IT+0x62>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a14      	ldr	r2, [pc, #80]	; (8007124 <HAL_TIM_Base_Start_IT+0xb0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d111      	bne.n	80070fa <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b06      	cmp	r3, #6
 80070e6:	d010      	beq.n	800710a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f8:	e007      	b.n	800710a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00

08007128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d122      	bne.n	8007184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b02      	cmp	r3, #2
 800714a:	d11b      	bne.n	8007184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f06f 0202 	mvn.w	r2, #2
 8007154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f9b1 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 8007170:	e005      	b.n	800717e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9a4 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9b3 	bl	80074e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d122      	bne.n	80071d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b04      	cmp	r3, #4
 800719e:	d11b      	bne.n	80071d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0204 	mvn.w	r2, #4
 80071a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2202      	movs	r2, #2
 80071ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f987 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 80071c4:	e005      	b.n	80071d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f97a 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f989 	bl	80074e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d122      	bne.n	800722c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d11b      	bne.n	800722c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0208 	mvn.w	r2, #8
 80071fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2204      	movs	r2, #4
 8007202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	f003 0303 	and.w	r3, r3, #3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d003      	beq.n	800721a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f95d 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 8007218:	e005      	b.n	8007226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f950 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f95f 	bl	80074e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d122      	bne.n	8007280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b10      	cmp	r3, #16
 8007246:	d11b      	bne.n	8007280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0210 	mvn.w	r2, #16
 8007250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2208      	movs	r2, #8
 8007256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f933 	bl	80074d2 <HAL_TIM_IC_CaptureCallback>
 800726c:	e005      	b.n	800727a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f926 	bl	80074c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f935 	bl	80074e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10e      	bne.n	80072ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f003 0301 	and.w	r3, r3, #1
 8007298:	2b01      	cmp	r3, #1
 800729a:	d107      	bne.n	80072ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0201 	mvn.w	r2, #1
 80072a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa f94a 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d10e      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c4:	2b80      	cmp	r3, #128	; 0x80
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa89 	bl	80077ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d10e      	bne.n	8007304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d107      	bne.n	8007304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f8f9 	bl	80074f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b20      	cmp	r3, #32
 8007310:	d10e      	bne.n	8007330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b20      	cmp	r3, #32
 800731e:	d107      	bne.n	8007330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0220 	mvn.w	r2, #32
 8007328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa54 	bl	80077d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIM_ConfigClockSource+0x18>
 800734c:	2302      	movs	r3, #2
 800734e:	e0b3      	b.n	80074b8 <HAL_TIM_ConfigClockSource+0x180>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800736e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d03e      	beq.n	8007408 <HAL_TIM_ConfigClockSource+0xd0>
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	f200 8087 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	f000 8085 	beq.w	80074a4 <HAL_TIM_ConfigClockSource+0x16c>
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d87f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073a0:	2b70      	cmp	r3, #112	; 0x70
 80073a2:	d01a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0xa2>
 80073a4:	2b70      	cmp	r3, #112	; 0x70
 80073a6:	d87b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073a8:	2b60      	cmp	r3, #96	; 0x60
 80073aa:	d050      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x116>
 80073ac:	2b60      	cmp	r3, #96	; 0x60
 80073ae:	d877      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073b0:	2b50      	cmp	r3, #80	; 0x50
 80073b2:	d03c      	beq.n	800742e <HAL_TIM_ConfigClockSource+0xf6>
 80073b4:	2b50      	cmp	r3, #80	; 0x50
 80073b6:	d873      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d058      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x136>
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d86f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073c0:	2b30      	cmp	r3, #48	; 0x30
 80073c2:	d064      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x156>
 80073c4:	2b30      	cmp	r3, #48	; 0x30
 80073c6:	d86b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d060      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x156>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d867      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x156>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d05a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80073d8:	e062      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6899      	ldr	r1, [r3, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f000 f970 	bl	80076ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	609a      	str	r2, [r3, #8]
      break;
 8007406:	e04e      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6899      	ldr	r1, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f000 f959 	bl	80076ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800742a:	609a      	str	r2, [r3, #8]
      break;
 800742c:	e03b      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 f8d0 	bl	80075e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2150      	movs	r1, #80	; 0x50
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f927 	bl	800769a <TIM_ITRx_SetConfig>
      break;
 800744c:	e02b      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 f8ee 	bl	800763c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2160      	movs	r1, #96	; 0x60
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f917 	bl	800769a <TIM_ITRx_SetConfig>
      break;
 800746c:	e01b      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	f000 f8b0 	bl	80075e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f907 	bl	800769a <TIM_ITRx_SetConfig>
      break;
 800748c:	e00b      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 f8fe 	bl	800769a <TIM_ITRx_SetConfig>
        break;
 800749e:	e002      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr

080074d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a2d      	ldr	r2, [pc, #180]	; (80075d0 <TIM_Base_SetConfig+0xc8>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00f      	beq.n	8007540 <TIM_Base_SetConfig+0x38>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d00b      	beq.n	8007540 <TIM_Base_SetConfig+0x38>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a2a      	ldr	r2, [pc, #168]	; (80075d4 <TIM_Base_SetConfig+0xcc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d007      	beq.n	8007540 <TIM_Base_SetConfig+0x38>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a29      	ldr	r2, [pc, #164]	; (80075d8 <TIM_Base_SetConfig+0xd0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_Base_SetConfig+0x38>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a28      	ldr	r2, [pc, #160]	; (80075dc <TIM_Base_SetConfig+0xd4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d108      	bne.n	8007552 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1e      	ldr	r2, [pc, #120]	; (80075d0 <TIM_Base_SetConfig+0xc8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00f      	beq.n	800757a <TIM_Base_SetConfig+0x72>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007560:	d00b      	beq.n	800757a <TIM_Base_SetConfig+0x72>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a1b      	ldr	r2, [pc, #108]	; (80075d4 <TIM_Base_SetConfig+0xcc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <TIM_Base_SetConfig+0x72>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a1a      	ldr	r2, [pc, #104]	; (80075d8 <TIM_Base_SetConfig+0xd0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_Base_SetConfig+0x72>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a19      	ldr	r2, [pc, #100]	; (80075dc <TIM_Base_SetConfig+0xd4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d108      	bne.n	800758c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4313      	orrs	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <TIM_Base_SetConfig+0xc8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d103      	bne.n	80075c0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	615a      	str	r2, [r3, #20]
}
 80075c6:	bf00      	nop
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00

080075e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f023 0201 	bic.w	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800760a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 030a 	bic.w	r3, r3, #10
 800761c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	f023 0210 	bic.w	r2, r3, #16
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007666:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	031b      	lsls	r3, r3, #12
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f043 0307 	orr.w	r3, r3, #7
 80076bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bc80      	pop	{r7}
 80076cc:	4770      	bx	lr

080076ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b087      	sub	sp, #28
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	021a      	lsls	r2, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	431a      	orrs	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	609a      	str	r2, [r3, #8]
}
 8007702:	bf00      	nop
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr

0800770c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007720:	2302      	movs	r3, #2
 8007722:	e04b      	b.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a19      	ldr	r2, [pc, #100]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d013      	beq.n	8007790 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007770:	d00e      	beq.n	8007790 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a15      	ldr	r2, [pc, #84]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d009      	beq.n	8007790 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a13      	ldr	r2, [pc, #76]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d004      	beq.n	8007790 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a12      	ldr	r2, [pc, #72]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10c      	bne.n	80077aa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3714      	adds	r7, #20
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40012c00 	.word	0x40012c00
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00

080077d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr

080077ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e03f      	b.n	800788e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fc febc 	bl	80045a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2224      	movs	r2, #36	; 0x24
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800783e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd1f 	bl	8008284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691a      	ldr	r2, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b08a      	sub	sp, #40	; 0x28
 800789a:	af02      	add	r7, sp, #8
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	603b      	str	r3, [r7, #0]
 80078a2:	4613      	mov	r3, r2
 80078a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d17c      	bne.n	80079b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <HAL_UART_Transmit+0x2c>
 80078bc:	88fb      	ldrh	r3, [r7, #6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e075      	b.n	80079b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_UART_Transmit+0x3e>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e06e      	b.n	80079b2 <HAL_UART_Transmit+0x11c>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2221      	movs	r2, #33	; 0x21
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ea:	f7fd f825 	bl	8004938 <HAL_GetTick>
 80078ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	88fa      	ldrh	r2, [r7, #6]
 80078f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007904:	d108      	bne.n	8007918 <HAL_UART_Transmit+0x82>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d104      	bne.n	8007918 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e003      	b.n	8007920 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007928:	e02a      	b.n	8007980 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 faf5 	bl	8007f24 <UART_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e036      	b.n	80079b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007958:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3302      	adds	r3, #2
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	e007      	b.n	8007972 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	781a      	ldrb	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	3301      	adds	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007976:	b29b      	uxth	r3, r3
 8007978:	3b01      	subs	r3, #1
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1cf      	bne.n	800792a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2200      	movs	r2, #0
 8007992:	2140      	movs	r1, #64	; 0x40
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fac5 	bl	8007f24 <UART_WaitOnFlagUntilTimeout>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e006      	b.n	80079b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	e000      	b.n	80079b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079b0:	2302      	movs	r3, #2
  }
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3720      	adds	r7, #32
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d153      	bne.n	8007a7e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_UART_Transmit_DMA+0x26>
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e04c      	b.n	8007a80 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_UART_Transmit_DMA+0x38>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e045      	b.n	8007a80 <HAL_UART_Transmit_DMA+0xc4>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	88fa      	ldrh	r2, [r7, #6]
 8007a0c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2221      	movs	r2, #33	; 0x21
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a20:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <HAL_UART_Transmit_DMA+0xcc>)
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a28:	4a18      	ldr	r2, [pc, #96]	; (8007a8c <HAL_UART_Transmit_DMA+0xd0>)
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <HAL_UART_Transmit_DMA+0xd4>)
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a38:	2200      	movs	r2, #0
 8007a3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8007a3c:	f107 0308 	add.w	r3, r7, #8
 8007a40:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	461a      	mov	r2, r3
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	f7fd ff6c 	bl	8005930 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a60:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695a      	ldr	r2, [r3, #20]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a78:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e000      	b.n	8007a80 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007a7e:	2302      	movs	r3, #2
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	08007e23 	.word	0x08007e23
 8007a8c:	08007e75 	.word	0x08007e75
 8007a90:	08007e91 	.word	0x08007e91

08007a94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10d      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x52>
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb26 	bl	8008130 <UART_Receive_IT>
      return;
 8007ae4:	e17b      	b.n	8007dde <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80b1 	beq.w	8007c50 <HAL_UART_IRQHandler+0x1bc>
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <HAL_UART_IRQHandler+0x70>
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80a6 	beq.w	8007c50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <HAL_UART_IRQHandler+0x90>
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	f043 0201 	orr.w	r2, r3, #1
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <HAL_UART_IRQHandler+0xb0>
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	f043 0202 	orr.w	r2, r3, #2
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_UART_IRQHandler+0xd0>
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d005      	beq.n	8007b64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	f043 0204 	orr.w	r2, r3, #4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00f      	beq.n	8007b8e <HAL_UART_IRQHandler+0xfa>
 8007b6e:	6a3b      	ldr	r3, [r7, #32]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <HAL_UART_IRQHandler+0xee>
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0208 	orr.w	r2, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 811e 	beq.w	8007dd4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x11e>
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fabf 	bl	8008130 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	f003 0308 	and.w	r3, r3, #8
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <HAL_UART_IRQHandler+0x146>
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d031      	beq.n	8007c3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa01 	bl	8007fe2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d023      	beq.n	8007c36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695a      	ldr	r2, [r3, #20]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bfc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d013      	beq.n	8007c2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0a:	4a76      	ldr	r2, [pc, #472]	; (8007de4 <HAL_UART_IRQHandler+0x350>)
 8007c0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd ff26 	bl	8005a64 <HAL_DMA_Abort_IT>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d016      	beq.n	8007c4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	e00e      	b.n	8007c4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8e3 	bl	8007dfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	e00a      	b.n	8007c4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f8df 	bl	8007dfa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3c:	e006      	b.n	8007c4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f8db 	bl	8007dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c4a:	e0c3      	b.n	8007dd4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	bf00      	nop
    return;
 8007c4e:	e0c1      	b.n	8007dd4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 80a1 	bne.w	8007d9c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f000 809b 	beq.w	8007d9c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8095 	beq.w	8007d9c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d04e      	beq.n	8007d34 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007ca0:	8a3b      	ldrh	r3, [r7, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f000 8098 	beq.w	8007dd8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cac:	8a3a      	ldrh	r2, [r7, #16]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	f080 8092 	bcs.w	8007dd8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8a3a      	ldrh	r2, [r7, #16]
 8007cb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d02b      	beq.n	8007d1c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695a      	ldr	r2, [r3, #20]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cf2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0210 	bic.w	r2, r2, #16
 8007d10:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fd fe69 	bl	80059ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f86d 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d32:	e051      	b.n	8007dd8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d047      	beq.n	8007ddc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007d4c:	8a7b      	ldrh	r3, [r7, #18]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d044      	beq.n	8007ddc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d60:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0201 	bic.w	r2, r2, #1
 8007d70:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0210 	bic.w	r2, r2, #16
 8007d8e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d90:	8a7b      	ldrh	r3, [r7, #18]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f839 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d9a:	e01f      	b.n	8007ddc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <HAL_UART_IRQHandler+0x324>
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f956 	bl	8008062 <UART_Transmit_IT>
    return;
 8007db6:	e012      	b.n	8007dde <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <HAL_UART_IRQHandler+0x34a>
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f997 	bl	8008100 <UART_EndTransmit_IT>
    return;
 8007dd2:	e004      	b.n	8007dde <HAL_UART_IRQHandler+0x34a>
    return;
 8007dd4:	bf00      	nop
 8007dd6:	e002      	b.n	8007dde <HAL_UART_IRQHandler+0x34a>
      return;
 8007dd8:	bf00      	nop
 8007dda:	e000      	b.n	8007dde <HAL_UART_IRQHandler+0x34a>
      return;
 8007ddc:	bf00      	nop
  }
}
 8007dde:	3728      	adds	r7, #40	; 0x28
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	0800803b 	.word	0x0800803b

08007de8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr

08007dfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bc80      	pop	{r7}
 8007e20:	4770      	bx	lr

08007e22 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d113      	bne.n	8007e66 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	695a      	ldr	r2, [r3, #20]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e52:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e62:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e64:	e002      	b.n	8007e6c <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7f9 fb98 	bl	800159c <HAL_UART_TxCpltCallback>
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7f9 fb93 	bl	80015ae <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bf14      	ite	ne
 8007eb0:	2301      	movne	r3, #1
 8007eb2:	2300      	moveq	r3, #0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b21      	cmp	r3, #33	; 0x21
 8007ec2:	d108      	bne.n	8007ed6 <UART_DMAError+0x46>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ed0:	68b8      	ldr	r0, [r7, #8]
 8007ed2:	f000 f871 	bl	8007fb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf14      	ite	ne
 8007ee4:	2301      	movne	r3, #1
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b22      	cmp	r3, #34	; 0x22
 8007ef6:	d108      	bne.n	8007f0a <UART_DMAError+0x7a>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d005      	beq.n	8007f0a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2200      	movs	r2, #0
 8007f02:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f04:	68b8      	ldr	r0, [r7, #8]
 8007f06:	f000 f86c 	bl	8007fe2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f043 0210 	orr.w	r2, r3, #16
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f16:	68b8      	ldr	r0, [r7, #8]
 8007f18:	f7ff ff6f 	bl	8007dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f1c:	bf00      	nop
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f34:	e02c      	b.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3c:	d028      	beq.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f44:	f7fc fcf8 	bl	8004938 <HAL_GetTick>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d21d      	bcs.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695a      	ldr	r2, [r3, #20]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e00f      	b.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d0c3      	beq.n	8007f36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007fce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr

08007fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ff8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	695a      	ldr	r2, [r3, #20]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0201 	bic.w	r2, r2, #1
 8008008:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	2b01      	cmp	r3, #1
 8008010:	d107      	bne.n	8008022 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0210 	bic.w	r2, r2, #16
 8008020:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f7ff fed0 	bl	8007dfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805a:	bf00      	nop
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b21      	cmp	r3, #33	; 0x21
 8008074:	d13e      	bne.n	80080f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	d114      	bne.n	80080aa <UART_Transmit_IT+0x48>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d110      	bne.n	80080aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800809c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	1c9a      	adds	r2, r3, #2
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	621a      	str	r2, [r3, #32]
 80080a8:	e008      	b.n	80080bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	1c59      	adds	r1, r3, #1
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6211      	str	r1, [r2, #32]
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4619      	mov	r1, r3
 80080ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	e000      	b.n	80080f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080f4:	2302      	movs	r3, #2
  }
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008116:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7f9 fa3b 	bl	800159c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b22      	cmp	r3, #34	; 0x22
 8008142:	f040 8099 	bne.w	8008278 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814e:	d117      	bne.n	8008180 <UART_Receive_IT+0x50>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d113      	bne.n	8008180 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008160:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	b29a      	uxth	r2, r3
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008178:	1c9a      	adds	r2, r3, #2
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	629a      	str	r2, [r3, #40]	; 0x28
 800817e:	e026      	b.n	80081ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008184:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008192:	d007      	beq.n	80081a4 <UART_Receive_IT+0x74>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <UART_Receive_IT+0x82>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	e008      	b.n	80081c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	4619      	mov	r1, r3
 80081dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d148      	bne.n	8008274 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0220 	bic.w	r2, r2, #32
 80081f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008200:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	695a      	ldr	r2, [r3, #20]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	2b01      	cmp	r3, #1
 8008220:	d123      	bne.n	800826a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0210 	bic.w	r2, r2, #16
 8008236:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b10      	cmp	r3, #16
 8008244:	d10a      	bne.n	800825c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7ff fdd2 	bl	8007e0c <HAL_UARTEx_RxEventCallback>
 8008268:	e002      	b.n	8008270 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fdbc 	bl	8007de8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e002      	b.n	800827a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	e000      	b.n	800827a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008278:	2302      	movs	r3, #2
  }
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68da      	ldr	r2, [r3, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	430a      	orrs	r2, r1
 80082a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80082be:	f023 030c 	bic.w	r3, r3, #12
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	430b      	orrs	r3, r1
 80082ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a2c      	ldr	r2, [pc, #176]	; (8008398 <UART_SetConfig+0x114>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d103      	bne.n	80082f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082ec:	f7fe fe40 	bl	8006f70 <HAL_RCC_GetPCLK2Freq>
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	e002      	b.n	80082fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80082f4:	f7fe fe28 	bl	8006f48 <HAL_RCC_GetPCLK1Freq>
 80082f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009a      	lsls	r2, r3, #2
 8008304:	441a      	add	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008310:	4a22      	ldr	r2, [pc, #136]	; (800839c <UART_SetConfig+0x118>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	0119      	lsls	r1, r3, #4
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009a      	lsls	r2, r3, #2
 8008324:	441a      	add	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008330:	4b1a      	ldr	r3, [pc, #104]	; (800839c <UART_SetConfig+0x118>)
 8008332:	fba3 0302 	umull	r0, r3, r3, r2
 8008336:	095b      	lsrs	r3, r3, #5
 8008338:	2064      	movs	r0, #100	; 0x64
 800833a:	fb00 f303 	mul.w	r3, r0, r3
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	3332      	adds	r3, #50	; 0x32
 8008344:	4a15      	ldr	r2, [pc, #84]	; (800839c <UART_SetConfig+0x118>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	095b      	lsrs	r3, r3, #5
 800834c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008350:	4419      	add	r1, r3
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4613      	mov	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4413      	add	r3, r2
 800835a:	009a      	lsls	r2, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	fbb2 f2f3 	udiv	r2, r2, r3
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <UART_SetConfig+0x118>)
 800836a:	fba3 0302 	umull	r0, r3, r3, r2
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	2064      	movs	r0, #100	; 0x64
 8008372:	fb00 f303 	mul.w	r3, r0, r3
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	3332      	adds	r3, #50	; 0x32
 800837c:	4a07      	ldr	r2, [pc, #28]	; (800839c <UART_SetConfig+0x118>)
 800837e:	fba2 2303 	umull	r2, r3, r2, r3
 8008382:	095b      	lsrs	r3, r3, #5
 8008384:	f003 020f 	and.w	r2, r3, #15
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	440a      	add	r2, r1
 800838e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40013800 	.word	0x40013800
 800839c:	51eb851f 	.word	0x51eb851f

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	2600      	movs	r6, #0
 80083a4:	4d0c      	ldr	r5, [pc, #48]	; (80083d8 <__libc_init_array+0x38>)
 80083a6:	4c0d      	ldr	r4, [pc, #52]	; (80083dc <__libc_init_array+0x3c>)
 80083a8:	1b64      	subs	r4, r4, r5
 80083aa:	10a4      	asrs	r4, r4, #2
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	f000 f822 	bl	80083f8 <_init>
 80083b4:	2600      	movs	r6, #0
 80083b6:	4d0a      	ldr	r5, [pc, #40]	; (80083e0 <__libc_init_array+0x40>)
 80083b8:	4c0a      	ldr	r4, [pc, #40]	; (80083e4 <__libc_init_array+0x44>)
 80083ba:	1b64      	subs	r4, r4, r5
 80083bc:	10a4      	asrs	r4, r4, #2
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	08008450 	.word	0x08008450
 80083dc:	08008450 	.word	0x08008450
 80083e0:	08008450 	.word	0x08008450
 80083e4:	08008454 	.word	0x08008454

080083e8 <memset>:
 80083e8:	4603      	mov	r3, r0
 80083ea:	4402      	add	r2, r0
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d100      	bne.n	80083f2 <memset+0xa>
 80083f0:	4770      	bx	lr
 80083f2:	f803 1b01 	strb.w	r1, [r3], #1
 80083f6:	e7f9      	b.n	80083ec <memset+0x4>

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
