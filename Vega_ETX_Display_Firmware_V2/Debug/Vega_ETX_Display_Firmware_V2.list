
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b44  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d60  08007d60  000203c0  2**0
                  CONTENTS
  4 .ARM          00000008  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d68  08007d68  000203c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c0  20000000  08007d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  200003c0  08008130  000203c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d10  08008130  00020d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136f5  00000000  00000000  000203e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314d  00000000  00000000  00033ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00036c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00037cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e5d  00000000  00000000  00038c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e82  00000000  00000000  0005ba8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9fa0  00000000  00000000  0007390f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d8af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004230  00000000  00000000  0012d900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200003c0 	.word	0x200003c0
 8000200:	00000000 	.word	0x00000000
 8000204:	08007d10 	.word	0x08007d10

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200003c4 	.word	0x200003c4
 8000220:	08007d10 	.word	0x08007d10

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <PollingRoutine>:
void PollingInit(void) {
	someState = 1; // send EconON
}

// main while loop
void PollingRoutine(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	//SomeTask();
	UART_SendMessage();
 8000530:	f000 f840 	bl	80005b4 <UART_SendMessage>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <SaveToUART_TxBuffer>:
//		// buffer is full. Use some notification so user is aware and can increase UART_TX_QUEUE_SIZE
//	}
//	someState = 0;
//}

void SaveToUART_TxBuffer(uint8_t *data, uint32_t dataSize) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	if (txMsg.RING_BUFF.ptr.iCnt_OverFlow) {
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000544:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <SaveToUART_TxBuffer+0x1a>
		//return 1; // Overflow. Increase UART_TX_QUEUE_SIZE
		queueOverFlowed = true;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <SaveToUART_TxBuffer+0x74>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
	}
	memcpy(&txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexIN].data, data, dataSize);
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000554:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	; 0x708
 8000558:	461a      	mov	r2, r3
 800055a:	4613      	mov	r3, r2
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	4413      	add	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4a11      	ldr	r2, [pc, #68]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000564:	4413      	add	r3, r2
 8000566:	3301      	adds	r3, #1
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4618      	mov	r0, r3
 800056e:	f007 fbb9 	bl	8007ce4 <memcpy>
	txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexIN].dataSize = dataSize;
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000574:	f8b3 3708 	ldrh.w	r3, [r3, #1800]	; 0x708
 8000578:	4619      	mov	r1, r3
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	b2d8      	uxtb	r0, r3
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <SaveToUART_TxBuffer+0x70>)
 8000580:	460b      	mov	r3, r1
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	440b      	add	r3, r1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	330b      	adds	r3, #11
 800058c:	4602      	mov	r2, r0
 800058e:	701a      	strb	r2, [r3, #0]
	DRV_RingBuffPtr__Input(&txMsg.RING_BUFF.ptr, UART_TX_QUEUE_SIZE);
 8000590:	2196      	movs	r1, #150	; 0x96
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <SaveToUART_TxBuffer+0x78>)
 8000594:	f000 f840 	bl	8000618 <DRV_RingBuffPtr__Input>

	queueOverFlowed = false;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <SaveToUART_TxBuffer+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	//return 0; // no error
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200004c8 	.word	0x200004c8
 80005ac:	20000bd8 	.word	0x20000bd8
 80005b0:	20000bd0 	.word	0x20000bd0

080005b4 <UART_SendMessage>:

void UART_SendMessage(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if (txMsg.RING_BUFF.ptr.iCnt_Handle) {
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <UART_SendMessage+0x58>)
 80005ba:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d022      	beq.n	8000608 <UART_SendMessage+0x54>
		if (HAL_UART_Transmit_IT(&huart3,
				txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexOUT].data,
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <UART_SendMessage+0x58>)
 80005c4:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
 80005c8:	461a      	mov	r2, r3
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	4413      	add	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <UART_SendMessage+0x58>)
 80005d4:	4413      	add	r3, r2
 80005d6:	1c59      	adds	r1, r3, #1
				txMsg.QUEUE.msg[txMsg.RING_BUFF.ptr.iIndexOUT].dataSize) == HAL_OK) {
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <UART_SendMessage+0x58>)
 80005da:	f8b3 370a 	ldrh.w	r3, [r3, #1802]	; 0x70a
 80005de:	4618      	mov	r0, r3
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <UART_SendMessage+0x58>)
 80005e2:	4603      	mov	r3, r0
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4403      	add	r3, r0
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	330b      	adds	r3, #11
 80005ee:	781b      	ldrb	r3, [r3, #0]
		if (HAL_UART_Transmit_IT(&huart3,
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <UART_SendMessage+0x5c>)
 80005f6:	f006 ff1c 	bl	8007432 <HAL_UART_Transmit_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d103      	bne.n	8000608 <UART_SendMessage+0x54>
			// transmit is good, increment queue pointer to next available message
			DRV_RingBuffPtr__Output(&txMsg.RING_BUFF.ptr, UART_TX_QUEUE_SIZE);
 8000600:	2196      	movs	r1, #150	; 0x96
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <UART_SendMessage+0x60>)
 8000604:	f000 f850 	bl	80006a8 <DRV_RingBuffPtr__Output>
		}
	}
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200004c8 	.word	0x200004c8
 8000610:	20000cc8 	.word	0x20000cc8
 8000614:	20000bd0 	.word	0x20000bd0

08000618 <DRV_RingBuffPtr__Input>:
	ptr->iIndexIN = 0;
	ptr->iIndexOUT = 0;
	ptr->iCnt_Handle = 0;
	ptr->iCnt_OverFlow = 0;
}
void DRV_RingBuffPtr__Input(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	ptr->iIndexIN++;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	b29a      	uxth	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	801a      	strh	r2, [r3, #0]
	if (ptr->iIndexIN >= iBufferSize)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	4293      	cmp	r3, r2
 8000638:	d802      	bhi.n	8000640 <DRV_RingBuffPtr__Input+0x28>
		ptr->iIndexIN = 0;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	801a      	strh	r2, [r3, #0]
	ptr->iCnt_Handle++;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	889b      	ldrh	r3, [r3, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	b29a      	uxth	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	809a      	strh	r2, [r3, #4]
	if (ptr->iIndexIN == ptr->iIndexOUT) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	885b      	ldrh	r3, [r3, #2]
 8000654:	429a      	cmp	r2, r3
 8000656:	d122      	bne.n	800069e <DRV_RingBuffPtr__Input+0x86>
		ptr->iCnt_OverFlow++;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	88db      	ldrh	r3, [r3, #6]
 800065c:	3301      	adds	r3, #1
 800065e:	b29a      	uxth	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	80da      	strh	r2, [r3, #6]
		if (ptr->iCnt_OverFlow > 50000)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	88db      	ldrh	r3, [r3, #6]
 8000668:	f24c 3250 	movw	r2, #50000	; 0xc350
 800066c:	4293      	cmp	r3, r2
 800066e:	d902      	bls.n	8000676 <DRV_RingBuffPtr__Input+0x5e>
			ptr->iCnt_OverFlow = 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	80da      	strh	r2, [r3, #6]
		if (ptr->iIndexIN == 0) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d106      	bne.n	800068c <DRV_RingBuffPtr__Input+0x74>
			ptr->iIndexOUT = iBufferSize - 1;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b29b      	uxth	r3, r3
 8000682:	3b01      	subs	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	805a      	strh	r2, [r3, #2]
 800068a:	e005      	b.n	8000698 <DRV_RingBuffPtr__Input+0x80>
		} else {
			ptr->iIndexOUT = ptr->iIndexIN - 1;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	3b01      	subs	r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	805a      	strh	r2, [r3, #2]
		}
		ptr->iCnt_Handle = 1;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	809a      	strh	r2, [r3, #4]
	}
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <DRV_RingBuffPtr__Output>:

void DRV_RingBuffPtr__Output(RING_BUFF_INFO *ptr, unsigned int iBufferSize) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	if (ptr->iCnt_Handle) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d014      	beq.n	80006e4 <DRV_RingBuffPtr__Output+0x3c>
		ptr->iIndexOUT++;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	805a      	strh	r2, [r3, #2]
		if (ptr->iIndexOUT >= iBufferSize)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	885b      	ldrh	r3, [r3, #2]
 80006ca:	461a      	mov	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d802      	bhi.n	80006d8 <DRV_RingBuffPtr__Output+0x30>
			ptr->iIndexOUT = 0;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	805a      	strh	r2, [r3, #2]
		ptr->iCnt_Handle--;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	889b      	ldrh	r3, [r3, #4]
 80006dc:	3b01      	subs	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	809a      	strh	r2, [r3, #4]
	}
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <MX_CAN1_Init+0x9c>)
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_CAN1_Init+0xa0>)
 80006fa:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_CAN1_Init+0x9c>)
 80006fe:	2209      	movs	r2, #9
 8000700:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_CAN1_Init+0x9c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_CAN1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_CAN1_Init+0x9c>)
 8000710:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000714:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_CAN1_Init+0x9c>)
 8000718:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800071c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_CAN1_Init+0x9c>)
 8000720:	2200      	movs	r2, #0
 8000722:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_CAN1_Init+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_CAN1_Init+0x9c>)
 800072c:	2200      	movs	r2, #0
 800072e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_CAN1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_CAN1_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_CAN1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_CAN1_Init+0x9c>)
 8000744:	f004 f9a2 	bl	8004a8c <HAL_CAN_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800074e:	f001 f805 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 8000752:	2301      	movs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 8000776:	230e      	movs	r3, #14
 8000778:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_CAN1_Init+0x9c>)
 8000780:	f004 fa80 	bl	8004c84 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200003dc 	.word	0x200003dc
 8000790:	40006400 	.word	0x40006400

08000794 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <HAL_CAN_MspInit+0xbc>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d149      	bne.n	8000848 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007be:	61d3      	str	r3, [r2, #28]
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007c2:	69db      	ldr	r3, [r3, #28]
 80007c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a20      	ldr	r2, [pc, #128]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_CAN_MspInit+0xc0>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	4817      	ldr	r0, [pc, #92]	; (8000858 <HAL_CAN_MspInit+0xc4>)
 80007fa:	f005 f9e1 	bl	8005bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4811      	ldr	r0, [pc, #68]	; (8000858 <HAL_CAN_MspInit+0xc4>)
 8000814:	f005 f9d4 	bl	8005bc0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2014      	movs	r0, #20
 800081e:	f005 f856 	bl	80058ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000822:	2014      	movs	r0, #20
 8000824:	f005 f86f 	bl	8005906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2015      	movs	r0, #21
 800082e:	f005 f84e 	bl	80058ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000832:	2015      	movs	r0, #21
 8000834:	f005 f867 	bl	8005906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2016      	movs	r0, #22
 800083e:	f005 f846 	bl	80058ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000842:	2016      	movs	r0, #22
 8000844:	f005 f85f 	bl	8005906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40006400 	.word	0x40006400
 8000854:	40021000 	.word	0x40021000
 8000858:	40010800 	.word	0x40010800

0800085c <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	//timeStampSend();6
//	testFlag_1 = true;
	EVCU_setData_i.dataID = 0;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <EVCU_setData_write+0x70>)
 8000866:	2200      	movs	r2, #0
 8000868:	801a      	strh	r2, [r3, #0]
	EVCU_setData_i.fixSetS.bit.mode = targetMode;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <EVCU_setData_write+0x74>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	b2d9      	uxtb	r1, r3
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <EVCU_setData_write+0x70>)
 8000878:	7893      	ldrb	r3, [r2, #2]
 800087a:	f361 0301 	bfi	r3, r1, #0, #2
 800087e:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <EVCU_setData_write+0x78>)
 8000882:	7819      	ldrb	r1, [r3, #0]
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <EVCU_setData_write+0x70>)
 8000886:	7893      	ldrb	r3, [r2, #2]
 8000888:	f361 0382 	bfi	r3, r1, #2, #1
 800088c:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <EVCU_setData_write+0x7c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	b2d9      	uxtb	r1, r3
 800089a:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <EVCU_setData_write+0x70>)
 800089c:	7893      	ldrb	r3, [r2, #2]
 800089e:	f361 03c5 	bfi	r3, r1, #3, #3
 80008a2:	7093      	strb	r3, [r2, #2]
	//EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <EVCU_setData_write+0x70>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a06      	ldr	r2, [pc, #24]	; (80008cc <EVCU_setData_write+0x70>)
 80008b4:	7892      	ldrb	r2, [r2, #2]
 80008b6:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <EVCU_setData_write+0x80>)
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	4908      	ldr	r1, [pc, #32]	; (80008e0 <EVCU_setData_write+0x84>)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <EVCU_setData_write+0x88>)
 80008c0:	f004 fb04 	bl	8004ecc <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000404 	.word	0x20000404
 80008d0:	2000048b 	.word	0x2000048b
 80008d4:	20000413 	.word	0x20000413
 80008d8:	2000000b 	.word	0x2000000b
 80008dc:	20000c48 	.word	0x20000c48
 80008e0:	20000be0 	.word	0x20000be0
 80008e4:	200003dc 	.word	0x200003dc

080008e8 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	091b      	lsrs	r3, r3, #4
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <EVCU_getData_read_40+0x124>)
 80008fc:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3301      	adds	r3, #1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	10db      	asrs	r3, r3, #3
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <EVCU_getData_read_40+0x128>)
 8000910:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	109b      	asrs	r3, r3, #2
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <EVCU_getData_read_40+0x12c>)
 8000924:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3301      	adds	r3, #1
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	105b      	asrs	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b38      	ldr	r3, [pc, #224]	; (8000a18 <EVCU_getData_read_40+0x130>)
 8000938:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3301      	adds	r3, #1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <EVCU_getData_read_40+0x134>)
 8000948:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3302      	adds	r3, #2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	09db      	lsrs	r3, r3, #7
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <EVCU_getData_read_40+0x138>)
 8000956:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3302      	adds	r3, #2
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	119b      	asrs	r3, r3, #6
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2da      	uxtb	r2, r3
 8000968:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <EVCU_getData_read_40+0x13c>)
 800096a:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3302      	adds	r3, #2
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	111b      	asrs	r3, r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <EVCU_getData_read_40+0x140>)
 800097e:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3302      	adds	r3, #2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	10db      	asrs	r3, r3, #3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <EVCU_getData_read_40+0x144>)
 8000992:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3302      	adds	r3, #2
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	109b      	asrs	r3, r3, #2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <EVCU_getData_read_40+0x148>)
 80009a6:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3304      	adds	r3, #4
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3303      	adds	r3, #3
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <EVCU_getData_read_40+0x14c>)
 80009c0:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3305      	adds	r3, #5
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <EVCU_getData_read_40+0x150>)
 80009cc:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3307      	adds	r3, #7
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3306      	adds	r3, #6
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b21b      	sxth	r3, r3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <EVCU_getData_read_40+0x154>)
 80009e8:	801a      	strh	r2, [r3, #0]
	if (starupMode) {
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <EVCU_getData_read_40+0x158>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d006      	beq.n	8000a00 <EVCU_getData_read_40+0x118>
		starupMode = false;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <EVCU_getData_read_40+0x158>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <EVCU_getData_read_40+0x140>)
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <EVCU_getData_read_40+0x15c>)
 80009fe:	701a      	strb	r2, [r3, #0]
	}


}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000046c 	.word	0x2000046c
 8000a10:	2000046e 	.word	0x2000046e
 8000a14:	2000046f 	.word	0x2000046f
 8000a18:	20000470 	.word	0x20000470
 8000a1c:	20000471 	.word	0x20000471
 8000a20:	20000472 	.word	0x20000472
 8000a24:	20000473 	.word	0x20000473
 8000a28:	20000474 	.word	0x20000474
 8000a2c:	200004a1 	.word	0x200004a1
 8000a30:	20000476 	.word	0x20000476
 8000a34:	2000046a 	.word	0x2000046a
 8000a38:	20000458 	.word	0x20000458
 8000a3c:	20000464 	.word	0x20000464
 8000a40:	2000000e 	.word	0x2000000e
 8000a44:	2000048a 	.word	0x2000048a

08000a48 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d129      	bne.n	8000aac <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b83      	ldr	r3, [pc, #524]	; (8000c74 <EVCU_getData_read_41+0x22c>)
 8000a66:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	111b      	asrs	r3, r3, #4
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	4b7f      	ldr	r3, [pc, #508]	; (8000c78 <EVCU_getData_read_41+0x230>)
 8000a7a:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	119b      	asrs	r3, r3, #6
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b7b      	ldr	r3, [pc, #492]	; (8000c7c <EVCU_getData_read_41+0x234>)
 8000a8e:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3301      	adds	r3, #1
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	09db      	lsrs	r3, r3, #7
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4b79      	ldr	r3, [pc, #484]	; (8000c80 <EVCU_getData_read_41+0x238>)
 8000a9c:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3302      	adds	r3, #2
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	099b      	lsrs	r3, r3, #6
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b76      	ldr	r3, [pc, #472]	; (8000c84 <EVCU_getData_read_41+0x23c>)
 8000aaa:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d120      	bne.n	8000af6 <EVCU_getData_read_41+0xae>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3303      	adds	r3, #3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3302      	adds	r3, #2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	041b      	lsls	r3, r3, #16
 8000ace:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	061b      	lsls	r3, r3, #24
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000adc:	4b6a      	ldr	r3, [pc, #424]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000ade:	601a      	str	r2, [r3, #0]
		distance.range = 10 *canRX[5];
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3305      	adds	r3, #5
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b65      	ldr	r3, [pc, #404]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000af4:	80da      	strh	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d127      	bne.n	8000b4e <EVCU_getData_read_41+0x106>

		soc_value = canRX[1];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	785a      	ldrb	r2, [r3, #1]
 8000b02:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <EVCU_getData_read_41+0x244>)
 8000b04:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	789a      	ldrb	r2, [r3, #2]
 8000b0a:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <EVCU_getData_read_41+0x248>)
 8000b0c:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	78da      	ldrb	r2, [r3, #3]
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <EVCU_getData_read_41+0x24c>)
 8000b14:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3305      	adds	r3, #5
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3304      	adds	r3, #4
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b5a      	ldr	r3, [pc, #360]	; (8000c98 <EVCU_getData_read_41+0x250>)
 8000b30:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3307      	adds	r3, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3306      	adds	r3, #6
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <EVCU_getData_read_41+0x254>)
 8000b4c:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d11a      	bne.n	8000b8c <EVCU_getData_read_41+0x144>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3302      	adds	r3, #2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3301      	adds	r3, #1
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <EVCU_getData_read_41+0x258>)
 8000b70:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3304      	adds	r3, #4
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3303      	adds	r3, #3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <EVCU_getData_read_41+0x25c>)
 8000b8a:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	d11b      	bne.n	8000bcc <EVCU_getData_read_41+0x184>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3302      	adds	r3, #2
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000bae:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3305      	adds	r3, #5
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000bca:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	d129      	bne.n	8000c28 <EVCU_getData_read_41+0x1e0>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000bee:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21b      	sxth	r3, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b21b      	sxth	r3, r3
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000c0a:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3306      	adds	r3, #6
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3305      	adds	r3, #5
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	b21b      	sxth	r3, r3
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000c26:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b06      	cmp	r3, #6
 8000c2e:	d11b      	bne.n	8000c68 <EVCU_getData_read_41+0x220>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3302      	adds	r3, #2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <EVCU_getData_read_41+0x240>)
 8000c4a:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3303      	adds	r3, #3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b21b      	sxth	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <EVCU_getData_read_41+0x260>)
 8000c66:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000477 	.word	0x20000477
 8000c78:	20000478 	.word	0x20000478
 8000c7c:	20000479 	.word	0x20000479
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000475 	.word	0x20000475
 8000c88:	20000430 	.word	0x20000430
 8000c8c:	2000045c 	.word	0x2000045c
 8000c90:	2000045d 	.word	0x2000045d
 8000c94:	20000466 	.word	0x20000466
 8000c98:	20000462 	.word	0x20000462
 8000c9c:	20000460 	.word	0x20000460
 8000ca0:	2000045e 	.word	0x2000045e
 8000ca4:	20000468 	.word	0x20000468
 8000ca8:	20000440 	.word	0x20000440

08000cac <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d12d      	bne.n	8000d18 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	785a      	ldrb	r2, [r3, #1]
 8000cc0:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000cc2:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3303      	adds	r3, #3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	021b      	lsls	r3, r3, #8
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000cde:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3305      	adds	r3, #5
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3306      	adds	r3, #6
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000cfa:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3307      	adds	r3, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b21a      	sxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3306      	adds	r3, #6
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d16:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d121      	bne.n	8000d64 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	785a      	ldrb	r2, [r3, #1]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d26:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3302      	adds	r3, #2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d42:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d4a:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d52:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d5a:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <EVCU_getData_read_43+0xc4>)
 8000d62:	73da      	strb	r2, [r3, #15]
	}
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000448 	.word	0x20000448

08000d74 <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000d78:	4b83      	ldr	r3, [pc, #524]	; (8000f88 <setError+0x214>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d13a      	bne.n	8000df6 <setError+0x82>
		switch (err_error) {
 8000d80:	4b82      	ldr	r3, [pc, #520]	; (8000f8c <setError+0x218>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d026      	beq.n	8000dd6 <setError+0x62>
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	dc36      	bgt.n	8000dfa <setError+0x86>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <setError+0x22>
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d010      	beq.n	8000db6 <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000d94:	e031      	b.n	8000dfa <setError+0x86>
			error_on = true;
 8000d96:	4b7e      	ldr	r3, [pc, #504]	; (8000f90 <setError+0x21c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d9c:	4b7d      	ldr	r3, [pc, #500]	; (8000f94 <setError+0x220>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000da2:	4b7d      	ldr	r3, [pc, #500]	; (8000f98 <setError+0x224>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000da8:	4b7c      	ldr	r3, [pc, #496]	; (8000f9c <setError+0x228>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dae:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <setError+0x22c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
			break;
 8000db4:	e022      	b.n	8000dfc <setError+0x88>
			error_on = true;
 8000db6:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <setError+0x21c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dbc:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <setError+0x220>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000dc2:	4b75      	ldr	r3, [pc, #468]	; (8000f98 <setError+0x224>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000dc8:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <setError+0x228>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dce:	4b74      	ldr	r3, [pc, #464]	; (8000fa0 <setError+0x22c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
			break;
 8000dd4:	e012      	b.n	8000dfc <setError+0x88>
			error_on = false;
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <setError+0x21c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000ddc:	4b6d      	ldr	r3, [pc, #436]	; (8000f94 <setError+0x220>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000de2:	4b6d      	ldr	r3, [pc, #436]	; (8000f98 <setError+0x224>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000de8:	4b6c      	ldr	r3, [pc, #432]	; (8000f9c <setError+0x228>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000dee:	4b6c      	ldr	r3, [pc, #432]	; (8000fa0 <setError+0x22c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
			break;
 8000df4:	e002      	b.n	8000dfc <setError+0x88>
		}
	}
 8000df6:	bf00      	nop
 8000df8:	e000      	b.n	8000dfc <setError+0x88>
			break;
 8000dfa:	bf00      	nop
	if (err_device == 1) { //BMS
 8000dfc:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <setError+0x214>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	f040 80bb 	bne.w	8000f7c <setError+0x208>
		switch (err_error) {
 8000e06:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <setError+0x218>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	f200 80a6 	bhi.w	8000f5c <setError+0x1e8>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <setError+0xa4>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e3d 	.word	0x08000e3d
 8000e1c:	08000e5d 	.word	0x08000e5d
 8000e20:	08000e7d 	.word	0x08000e7d
 8000e24:	08000e9d 	.word	0x08000e9d
 8000e28:	08000ebd 	.word	0x08000ebd
 8000e2c:	08000edd 	.word	0x08000edd
 8000e30:	08000efd 	.word	0x08000efd
 8000e34:	08000f1d 	.word	0x08000f1d
 8000e38:	08000f3d 	.word	0x08000f3d
		case 0: //Over_Discharge_Current
			error_on = true;
 8000e3c:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <setError+0x21c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000e42:	4b54      	ldr	r3, [pc, #336]	; (8000f94 <setError+0x220>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <setError+0x224>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000e4e:	4b53      	ldr	r3, [pc, #332]	; (8000f9c <setError+0x228>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000e54:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <setError+0x22c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000e5a:	e090      	b.n	8000f7e <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000e5c:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <setError+0x21c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000e62:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <setError+0x220>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <setError+0x224>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000e6e:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <setError+0x228>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <setError+0x22c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000e7a:	e080      	b.n	8000f7e <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <setError+0x21c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000e82:	4b44      	ldr	r3, [pc, #272]	; (8000f94 <setError+0x220>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <setError+0x224>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <setError+0x228>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <setError+0x22c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000e9a:	e070      	b.n	8000f7e <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <setError+0x21c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <setError+0x220>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <setError+0x224>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <setError+0x228>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <setError+0x22c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000eba:	e060      	b.n	8000f7e <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <setError+0x21c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <setError+0x220>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <setError+0x224>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <setError+0x228>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <setError+0x22c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000eda:	e050      	b.n	8000f7e <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000edc:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <setError+0x21c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <setError+0x220>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <setError+0x224>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <setError+0x228>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000ef4:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <setError+0x22c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000efa:	e040      	b.n	8000f7e <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <setError+0x21c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <setError+0x220>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <setError+0x224>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <setError+0x228>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <setError+0x22c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000f1a:	e030      	b.n	8000f7e <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <setError+0x21c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <setError+0x220>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <setError+0x224>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <setError+0x228>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <setError+0x22c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000f3a:	e020      	b.n	8000f7e <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <setError+0x21c>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <setError+0x220>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <setError+0x224>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <setError+0x228>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <setError+0x22c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000f5a:	e010      	b.n	8000f7e <setError+0x20a>
		default:
			error_on = false;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <setError+0x21c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <setError+0x220>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <setError+0x224>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <setError+0x228>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <setError+0x22c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e000      	b.n	8000f7e <setError+0x20a>
		}
	}
 8000f7c:	bf00      	nop
	//_errorSelection = true;
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000478 	.word	0x20000478
 8000f8c:	20000477 	.word	0x20000477
 8000f90:	20000496 	.word	0x20000496
 8000f94:	20000497 	.word	0x20000497
 8000f98:	20000498 	.word	0x20000498
 8000f9c:	20000499 	.word	0x20000499
 8000fa0:	2000049a 	.word	0x2000049a

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a39      	ldr	r2, [pc, #228]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a33      	ldr	r2, [pc, #204]	; (80010bc <MX_GPIO_Init+0x118>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_GPIO_Init+0x118>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_GPIO_Init+0x118>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_GPIO_Init+0x118>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <MX_GPIO_Init+0x118>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2103      	movs	r1, #3
 800101c:	4828      	ldr	r0, [pc, #160]	; (80010c0 <MX_GPIO_Init+0x11c>)
 800101e:	f004 ff6a 	bl	8005ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8001022:	2303      	movs	r3, #3
 8001024:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4619      	mov	r1, r3
 8001038:	4821      	ldr	r0, [pc, #132]	; (80010c0 <MX_GPIO_Init+0x11c>)
 800103a:	f004 fdc1 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin;
 800103e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <MX_GPIO_Init+0x120>)
 8001054:	f004 fdb4 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN9_Pin|IN10_Pin
 8001058:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800105c:	613b      	str	r3, [r7, #16]
                          |IN11_Pin|IN12_Pin|IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4619      	mov	r1, r3
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x11c>)
 800106e:	f004 fda7 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN8_Pin|IN1_Pin;
 8001072:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <MX_GPIO_Init+0x124>)
 8001088:	f004 fd9a 	bl	8005bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Btn_Int_1_Pin|Btn_Int_2_Pin;
 800108c:	23c0      	movs	r3, #192	; 0xc0
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_GPIO_Init+0x128>)
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <MX_GPIO_Init+0x124>)
 80010a0:	f004 fd8e 	bl	8005bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2017      	movs	r0, #23
 80010aa:	f004 fc10 	bl	80058ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ae:	2017      	movs	r0, #23
 80010b0:	f004 fc29 	bl	8005906 <HAL_NVIC_EnableIRQ>

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40010800 	.word	0x40010800
 80010c8:	40010c00 	.word	0x40010c00
 80010cc:	10110000 	.word	0x10110000

080010d0 <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4851      	ldr	r0, [pc, #324]	; (8001220 <getInputs+0x150>)
 80010da:	f004 fef5 	bl	8005ec8 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <getInputs+0x154>)
 80010e8:	7813      	ldrb	r3, [r2, #0]
 80010ea:	f361 0300 	bfi	r3, r1, #0, #1
 80010ee:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	484c      	ldr	r0, [pc, #304]	; (8001228 <getInputs+0x158>)
 80010f6:	f004 fee7 	bl	8005ec8 <HAL_GPIO_ReadPin>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	b2d9      	uxtb	r1, r3
 8001102:	4a48      	ldr	r2, [pc, #288]	; (8001224 <getInputs+0x154>)
 8001104:	7813      	ldrb	r3, [r2, #0]
 8001106:	f361 0341 	bfi	r3, r1, #1, #1
 800110a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 800110c:	2108      	movs	r1, #8
 800110e:	4846      	ldr	r0, [pc, #280]	; (8001228 <getInputs+0x158>)
 8001110:	f004 feda 	bl	8005ec8 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	4a41      	ldr	r2, [pc, #260]	; (8001224 <getInputs+0x154>)
 800111e:	7813      	ldrb	r3, [r2, #0]
 8001120:	f361 0382 	bfi	r3, r1, #2, #1
 8001124:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8001126:	2104      	movs	r1, #4
 8001128:	483f      	ldr	r0, [pc, #252]	; (8001228 <getInputs+0x158>)
 800112a:	f004 fecd 	bl	8005ec8 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	4a3b      	ldr	r2, [pc, #236]	; (8001224 <getInputs+0x154>)
 8001138:	7813      	ldrb	r3, [r2, #0]
 800113a:	f361 03c3 	bfi	r3, r1, #3, #1
 800113e:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8001140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001144:	4839      	ldr	r0, [pc, #228]	; (800122c <getInputs+0x15c>)
 8001146:	f004 febf 	bl	8005ec8 <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2d9      	uxtb	r1, r3
 8001152:	4a34      	ldr	r2, [pc, #208]	; (8001224 <getInputs+0x154>)
 8001154:	7813      	ldrb	r3, [r2, #0]
 8001156:	f361 1304 	bfi	r3, r1, #4, #1
 800115a:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 800115c:	2120      	movs	r1, #32
 800115e:	4833      	ldr	r0, [pc, #204]	; (800122c <getInputs+0x15c>)
 8001160:	f004 feb2 	bl	8005ec8 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	b2d9      	uxtb	r1, r3
 800116c:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <getInputs+0x154>)
 800116e:	7813      	ldrb	r3, [r2, #0]
 8001170:	f361 1345 	bfi	r3, r1, #5, #1
 8001174:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8001176:	2110      	movs	r1, #16
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <getInputs+0x15c>)
 800117a:	f004 fea5 	bl	8005ec8 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	b2d9      	uxtb	r1, r3
 8001186:	4a27      	ldr	r2, [pc, #156]	; (8001224 <getInputs+0x154>)
 8001188:	7813      	ldrb	r3, [r2, #0]
 800118a:	f361 1386 	bfi	r3, r1, #6, #1
 800118e:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8001190:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001194:	4822      	ldr	r0, [pc, #136]	; (8001220 <getInputs+0x150>)
 8001196:	f004 fe97 	bl	8005ec8 <HAL_GPIO_ReadPin>
 800119a:	4603      	mov	r3, r0
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	b2d9      	uxtb	r1, r3
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <getInputs+0x154>)
 80011a4:	7813      	ldrb	r3, [r2, #0]
 80011a6:	f361 13c7 	bfi	r3, r1, #7, #1
 80011aa:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <getInputs+0x15c>)
 80011b0:	f004 fe8a 	bl	8005ec8 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <getInputs+0x154>)
 80011be:	7853      	ldrb	r3, [r2, #1]
 80011c0:	f361 0300 	bfi	r3, r1, #0, #1
 80011c4:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <getInputs+0x15c>)
 80011ca:	f004 fe7d 	bl	8005ec8 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	b2d9      	uxtb	r1, r3
 80011d6:	4a13      	ldr	r2, [pc, #76]	; (8001224 <getInputs+0x154>)
 80011d8:	7853      	ldrb	r3, [r2, #1]
 80011da:	f361 0341 	bfi	r3, r1, #1, #1
 80011de:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 80011e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <getInputs+0x15c>)
 80011e6:	f004 fe6f 	bl	8005ec8 <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <getInputs+0x154>)
 80011f4:	7853      	ldrb	r3, [r2, #1]
 80011f6:	f361 0382 	bfi	r3, r1, #2, #1
 80011fa:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <getInputs+0x15c>)
 8001202:	f004 fe61 	bl	8005ec8 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <getInputs+0x154>)
 8001210:	7853      	ldrb	r3, [r2, #1]
 8001212:	f361 03c3 	bfi	r3, r1, #3, #1
 8001216:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001218:	f000 f8ae 	bl	8001378 <buttonOkay>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010c00 	.word	0x40010c00
 8001224:	2000040c 	.word	0x2000040c
 8001228:	40010800 	.word	0x40010800
 800122c:	40011000 	.word	0x40011000

08001230 <setInputs>:


#ifdef TestBench
void setInputs() {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
//		door = true;
//		HAL_Delay(50);
//	}


	if (gpio.buttonInputs.bit.in7) //pageUp
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <setInputs+0x11c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d011      	beq.n	8001266 <setInputs+0x36>
	{
		buttonCounterForward++;
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <setInputs+0x120>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <setInputs+0x120>)
 800124c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <setInputs+0x120>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d803      	bhi.n	800125e <setInputs+0x2e>
			forward = true;
 8001256:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <setInputs+0x124>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e006      	b.n	800126c <setInputs+0x3c>
		}
		else {
			forward = false;
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <setInputs+0x124>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	e002      	b.n	800126c <setInputs+0x3c>
		}
	} else {
		buttonCounterForward = 0;
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <setInputs+0x120>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in5) //pageDown
 800126c:	4b37      	ldr	r3, [pc, #220]	; (800134c <setInputs+0x11c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d011      	beq.n	800129e <setInputs+0x6e>
	{
		buttonCounterBackward++;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <setInputs+0x128>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <setInputs+0x128>)
 8001284:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <setInputs+0x128>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d803      	bhi.n	8001296 <setInputs+0x66>
			backward = true;
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <setInputs+0x12c>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e006      	b.n	80012a4 <setInputs+0x74>
		}
		else {
			backward = false;
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <setInputs+0x12c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e002      	b.n	80012a4 <setInputs+0x74>
		}
	} else {
		buttonCounterBackward = 0;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <setInputs+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in8) //back
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <setInputs+0x11c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d011      	beq.n	80012d6 <setInputs+0xa6>
	{
		buttonCounterBack++;
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <setInputs+0x130>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <setInputs+0x130>)
 80012bc:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <setInputs+0x130>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d803      	bhi.n	80012ce <setInputs+0x9e>
			back = true;
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <setInputs+0x134>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	e006      	b.n	80012dc <setInputs+0xac>
		}
		else {
			back = false;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <setInputs+0x134>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e002      	b.n	80012dc <setInputs+0xac>
		}
	}
	else
	{
		buttonCounterBack = 0;
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <setInputs+0x130>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //mode //After fixing the okay button change mode to okay
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <setInputs+0x11c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00d      	beq.n	8001306 <setInputs+0xd6>
	{
		buttonCounterMode++;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <setInputs+0x138>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <setInputs+0x138>)
 80012f4:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <setInputs+0x138>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d806      	bhi.n	800130c <setInputs+0xdc>
			mode = true;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <setInputs+0x13c>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e002      	b.n	800130c <setInputs+0xdc>
			//mode = false;
		//}
	}
	else
	{
		buttonCounterMode = 0;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <setInputs+0x138>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6 == 1) //okay
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <setInputs+0x11c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d011      	beq.n	800133e <setInputs+0x10e>
	{
		buttonCounterOkay++;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <setInputs+0x140>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <setInputs+0x140>)
 8001324:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <setInputs+0x140>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d803      	bhi.n	8001336 <setInputs+0x106>
			okay = true;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <setInputs+0x144>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 8001334:	e006      	b.n	8001344 <setInputs+0x114>
			okay = false;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <setInputs+0x144>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
}
 800133c:	e002      	b.n	8001344 <setInputs+0x114>
		buttonCounterOkay = 0;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <setInputs+0x140>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	2000040c 	.word	0x2000040c
 8001350:	20000bda 	.word	0x20000bda
 8001354:	20000410 	.word	0x20000410
 8001358:	20000bdb 	.word	0x20000bdb
 800135c:	20000411 	.word	0x20000411
 8001360:	20000bdc 	.word	0x20000bdc
 8001364:	20000416 	.word	0x20000416
 8001368:	20000bde 	.word	0x20000bde
 800136c:	20000415 	.word	0x20000415
 8001370:	20000bdd 	.word	0x20000bdd
 8001374:	20000412 	.word	0x20000412

08001378 <buttonOkay>:

void buttonOkay(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in6 == 1) {
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <buttonOkay+0x54>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f003 0320 	and.w	r3, r3, #32
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <buttonOkay+0x20>
		buttonCounterLongPress++;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <buttonOkay+0x58>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <buttonOkay+0x58>)
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e005      	b.n	80013a4 <buttonOkay+0x2c>
	} else {
		buttonCounterLongPress = 0;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <buttonOkay+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
		okay = false;
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <buttonOkay+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <buttonOkay+0x58>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <buttonOkay+0x60>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d308      	bcc.n	80013c2 <buttonOkay+0x4a>
		longpress = true;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <buttonOkay+0x64>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	701a      	strb	r2, [r3, #0]
		okay = false;
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <buttonOkay+0x5c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <buttonOkay+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	}

}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	2000040c 	.word	0x2000040c
 80013d0:	20000bd9 	.word	0x20000bd9
 80013d4:	20000412 	.word	0x20000412
 80013d8:	20000012 	.word	0x20000012
 80013dc:	20000414 	.word	0x20000414

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f003 facc 	bl	8004980 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f003 fb2a 	bl	8004a44 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f0:	f000 f8ac 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f4:	f7ff fdd6 	bl	8000fa4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80013f8:	f7ff f97a 	bl	80006f0 <MX_CAN1_Init>
  MX_TIM2_Init();
 80013fc:	f001 fd50 	bl	8002ea0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001400:	f003 f94c 	bl	800469c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 8001404:	4b44      	ldr	r3, [pc, #272]	; (8001518 <main+0x138>)
 8001406:	2208      	movs	r2, #8
 8001408:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <main+0x138>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 8001410:	4b41      	ldr	r3, [pc, #260]	; (8001518 <main+0x138>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <main+0x138>)
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 800141c:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <main+0x138>)
 800141e:	2242      	movs	r2, #66	; 0x42
 8001420:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 8001422:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <main+0x138>)
 8001424:	2200      	movs	r2, #0
 8001426:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <main+0x13c>)
 800142a:	22f3      	movs	r2, #243	; 0xf3
 800142c:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <main+0x140>)
 8001430:	2208      	movs	r2, #8
 8001432:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 8001434:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <main+0x140>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <main+0x140>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8001440:	4b37      	ldr	r3, [pc, #220]	; (8001520 <main+0x140>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <main+0x140>)
 8001448:	2252      	movs	r2, #82	; 0x52
 800144a:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 800144c:	4b34      	ldr	r3, [pc, #208]	; (8001520 <main+0x140>)
 800144e:	2200      	movs	r2, #0
 8001450:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <main+0x144>)
 8001454:	22f3      	movs	r2, #243	; 0xf3
 8001456:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 8001458:	2208      	movs	r2, #8
 800145a:	2100      	movs	r1, #0
 800145c:	4832      	ldr	r0, [pc, #200]	; (8001528 <main+0x148>)
 800145e:	f006 fc4f 	bl	8007d00 <memset>
	memset(strDATA2, 0, 10);
 8001462:	220a      	movs	r2, #10
 8001464:	2100      	movs	r1, #0
 8001466:	4831      	ldr	r0, [pc, #196]	; (800152c <main+0x14c>)
 8001468:	f006 fc4a 	bl	8007d00 <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <main+0x148>)
 800146e:	225a      	movs	r2, #90	; 0x5a
 8001470:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <main+0x148>)
 8001474:	22a5      	movs	r2, #165	; 0xa5
 8001476:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <main+0x148>)
 800147a:	2205      	movs	r2, #5
 800147c:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <main+0x148>)
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 8001484:	4b29      	ldr	r3, [pc, #164]	; (800152c <main+0x14c>)
 8001486:	225a      	movs	r2, #90	; 0x5a
 8001488:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <main+0x14c>)
 800148c:	22a5      	movs	r2, #165	; 0xa5
 800148e:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 8001490:	4b26      	ldr	r3, [pc, #152]	; (800152c <main+0x14c>)
 8001492:	2207      	movs	r2, #7
 8001494:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <main+0x14c>)
 8001498:	2282      	movs	r2, #130	; 0x82
 800149a:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <main+0x150>)
 800149e:	f003 fcd1 	bl	8004e44 <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014a2:	2102      	movs	r1, #2
 80014a4:	4822      	ldr	r0, [pc, #136]	; (8001530 <main+0x150>)
 80014a6:	f003 fefc 	bl	80052a2 <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <main+0x154>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 80014b0:	4821      	ldr	r0, [pc, #132]	; (8001538 <main+0x158>)
 80014b2:	f005 fb1b 	bl	8006aec <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <main+0x15c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <main+0x15c>)
 80014c0:	701a      	strb	r2, [r3, #0]
		counter2++;
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <main+0x160>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <main+0x160>)
 80014cc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(10);
 80014ce:	200a      	movs	r0, #10
 80014d0:	f003 fab8 	bl	8004a44 <HAL_Delay>

		if (gpioSetFlag) {
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <main+0x164>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <main+0x110>
			getInputs();
 80014dc:	f7ff fdf8 	bl	80010d0 <getInputs>
			setInputs();
 80014e0:	f7ff fea6 	bl	8001230 <setInputs>
			gpioSetFlag = false;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <main+0x164>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			//mainStateMachine();
			counter = 0;
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <main+0x15c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

		}
		if (counter2>5) {
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <main+0x160>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d902      	bls.n	80014fe <main+0x11e>
			//transmit();
			counter2=0;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <main+0x160>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
		}
		if (timeout.timeout_0_5s == true) {
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <main+0x168>)
 8001500:	795b      	ldrb	r3, [r3, #5]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0d6      	beq.n	80014b6 <main+0xd6>
			if (counter2 >= 10) {
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <main+0x160>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d9d2      	bls.n	80014b6 <main+0xd6>
				//transmit();
				counter2 = 0;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <main+0x160>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
		counter++;
 8001516:	e7ce      	b.n	80014b6 <main+0xd6>
 8001518:	20000be0 	.word	0x20000be0
 800151c:	20000c54 	.word	0x20000c54
 8001520:	20000c14 	.word	0x20000c14
 8001524:	20000014 	.word	0x20000014
 8001528:	2000041c 	.word	0x2000041c
 800152c:	20000424 	.word	0x20000424
 8001530:	200003dc 	.word	0x200003dc
 8001534:	200004c5 	.word	0x200004c5
 8001538:	20000c6c 	.word	0x20000c6c
 800153c:	20000c64 	.word	0x20000c64
 8001540:	20000c65 	.word	0x20000c65
 8001544:	20000c68 	.word	0x20000c68
 8001548:	20000cb4 	.word	0x20000cb4

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0318 	add.w	r3, r7, #24
 8001556:	2238      	movs	r2, #56	; 0x38
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 fbd0 	bl	8007d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800156e:	2301      	movs	r3, #1
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001584:	2302      	movs	r3, #2
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800158e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001598:	f107 0318 	add.w	r3, r7, #24
 800159c:	4618      	mov	r0, r3
 800159e:	f004 fcf3 	bl	8005f88 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x60>
  {
    Error_Handler();
 80015a8:	f000 f8d8 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2302      	movs	r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 fff4 	bl	80065b4 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015d2:	f000 f8c3 	bl	800175c <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <SystemClock_Config+0x98>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	3750      	adds	r7, #80	; 0x50
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	42420070 	.word	0x42420070

080015e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	can_Counter++;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80015fa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2101      	movs	r1, #1
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 8001602:	f004 fc78 	bl	8005ef6 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f003 fd37 	bl	8005080 <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b40      	cmp	r3, #64	; 0x40
 8001618:	d106      	bne.n	8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001624:	f7ff f960 	bl	80008e8 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b41      	cmp	r3, #65	; 0x41
 800162e:	d106      	bne.n	800163e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800163a:	f7ff fa05 	bl	8000a48 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b43      	cmp	r3, #67	; 0x43
 8001644:	d106      	bne.n	8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001650:	f7ff fb2c 	bl	8000cac <EVCU_getData_read_43>
	}
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000c66 	.word	0x20000c66
 8001660:	40011000 	.word	0x40011000
 8001664:	20000c4c 	.word	0x20000c4c
 8001668:	20000bf8 	.word	0x20000bf8

0800166c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	counter2++;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800167e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2102      	movs	r1, #2
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8001686:	f004 fc36 	bl	8005ef6 <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 800168e:	2101      	movs	r1, #1
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f003 fcf5 	bl	8005080 <HAL_CAN_GetRxMessage>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000c65 	.word	0x20000c65
 80016a4:	40011000 	.word	0x40011000
 80016a8:	20000c5c 	.word	0x20000c5c
 80016ac:	20000c2c 	.word	0x20000c2c

080016b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x20>)
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x24>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
	}
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	2000040e 	.word	0x2000040e
 80016d4:	2000040f 	.word	0x2000040f

080016d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 80016e0:	4810      	ldr	r0, [pc, #64]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016e2:	f001 fc4d 	bl	8002f80 <tick_count>
	gpioSetFlag = true;//50ms
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
	mainStateMachine();
 80016ec:	f001 f81a 	bl	8002724 <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 80016f0:	2101      	movs	r1, #1
 80016f2:	480e      	ldr	r0, [pc, #56]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80016f4:	f004 fc17 	bl	8005f26 <HAL_GPIO_TogglePin>
	timCounter++;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001702:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 8001704:	f001 fcaa 	bl	800305c <transmit>
	PollingRoutine();
 8001708:	f7fe ff10 	bl	800052c <PollingRoutine>
	//gpioSetFlag = true;

	if (timeout.timeout_1s == true) {
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_TIM_PeriodElapsedCallback+0x44>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001718:	f7ff f8a0 	bl	800085c <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000cb4 	.word	0x20000cb4
 8001728:	20000c68 	.word	0x20000c68
 800172c:	40011000 	.word	0x40011000
 8001730:	20000c67 	.word	0x20000c67
 8001734:	20000c54 	.word	0x20000c54

08001738 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart3.Instance) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_UART_TxCpltCallback+0x20>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d101      	bne.n	8001750 <HAL_UART_TxCpltCallback+0x18>
		PollingRoutine();
 800174c:	f7fe feee 	bl	800052c <PollingRoutine>
	}


}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000cc8 	.word	0x20000cc8

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <navigation>:
#include <menu.h>


void navigation(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 800176c:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <navigation+0x284>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d103      	bne.n	800177c <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 8001774:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <navigation+0x288>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e002      	b.n	8001782 <navigation+0x1a>
	} else {
		_navigation = false;
 800177c:	4b9c      	ldr	r3, [pc, #624]	; (80019f0 <navigation+0x288>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
	}



	switch (currentPage) {
 8001782:	4b9c      	ldr	r3, [pc, #624]	; (80019f4 <navigation+0x28c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b07      	cmp	r3, #7
 800178a:	f200 8121 	bhi.w	80019d0 <navigation+0x268>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <navigation+0x2c>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017b5 	.word	0x080017b5
 8001798:	0800181d 	.word	0x0800181d
 800179c:	0800188b 	.word	0x0800188b
 80017a0:	080018f7 	.word	0x080018f7
 80017a4:	080019d1 	.word	0x080019d1
 80017a8:	080019d1 	.word	0x080019d1
 80017ac:	080019d1 	.word	0x080019d1
 80017b0:	0800196d 	.word	0x0800196d
	case front:
		front_mainPage();
 80017b4:	f000 f936 	bl	8001a24 <front_mainPage>
		if (currentStateSM == driving_state) {
 80017b8:	4b8f      	ldr	r3, [pc, #572]	; (80019f8 <navigation+0x290>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d105      	bne.n	80017ce <navigation+0x66>
			_realTimeData = true;
 80017c2:	4b8e      	ldr	r3, [pc, #568]	; (80019fc <navigation+0x294>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80017c8:	4b8d      	ldr	r3, [pc, #564]	; (8001a00 <navigation+0x298>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
			//_testPage = true;
		}
		if (currentPage != previousPage) {
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <navigation+0x28c>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <navigation+0x29c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	429a      	cmp	r2, r3
 80017dc:	f000 80fa 	beq.w	80019d4 <navigation+0x26c>
			previousPage = front;
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <navigation+0x29c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <navigation+0x2a0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80017ec:	4b83      	ldr	r3, [pc, #524]	; (80019fc <navigation+0x294>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80017f2:	4b83      	ldr	r3, [pc, #524]	; (8001a00 <navigation+0x298>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80017f8:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <navigation+0x290>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d102      	bne.n	8001808 <navigation+0xa0>
				_transmit_Function = 4;
 8001802:	4b82      	ldr	r3, [pc, #520]	; (8001a0c <navigation+0x2a4>)
 8001804:	2204      	movs	r2, #4
 8001806:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001808:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <navigation+0x290>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80e0 	bne.w	80019d4 <navigation+0x26c>
				_transmit_Function = 1;
 8001814:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <navigation+0x2a4>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 800181a:	e0db      	b.n	80019d4 <navigation+0x26c>
	case trip:
		_Trip_Summary_Page = true;
 800181c:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <navigation+0x2a8>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
		trip_mainPage();
 8001822:	f000 f959 	bl	8001ad8 <trip_mainPage>
		if (currentStateSM == driving_state) {
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <navigation+0x290>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <navigation+0xd4>
			_realTimeData = true;
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <navigation+0x294>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <navigation+0x298>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 800183c:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <navigation+0x28c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <navigation+0x29c>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	429a      	cmp	r2, r3
 800184a:	f000 80c5 	beq.w	80019d8 <navigation+0x270>
			previousPage = trip;
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <navigation+0x29c>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <navigation+0x2a0>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 800185a:	4b68      	ldr	r3, [pc, #416]	; (80019fc <navigation+0x294>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001860:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <navigation+0x298>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <navigation+0x290>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <navigation+0x10e>
				_transmit_Function = 4;
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <navigation+0x2a4>)
 8001872:	2204      	movs	r2, #4
 8001874:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <navigation+0x290>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 80ab 	bne.w	80019d8 <navigation+0x270>
				_transmit_Function = 1;
 8001882:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <navigation+0x2a4>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001888:	e0a6      	b.n	80019d8 <navigation+0x270>
	case after_charge:
		_After_Charge_Page = true;
 800188a:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <navigation+0x2ac>)
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
		after_charge_mainPage();
 8001890:	f000 f978 	bl	8001b84 <after_charge_mainPage>
		if (currentStateSM == driving_state) {
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <navigation+0x290>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d105      	bne.n	80018aa <navigation+0x142>
			_realTimeData = true;
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <navigation+0x294>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <navigation+0x298>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <navigation+0x28c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b54      	ldr	r3, [pc, #336]	; (8001a04 <navigation+0x29c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	429a      	cmp	r2, r3
 80018b8:	f000 8090 	beq.w	80019dc <navigation+0x274>
			previousPage = after_charge;
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <navigation+0x29c>)
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80018c2:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <navigation+0x2a0>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <navigation+0x294>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <navigation+0x298>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80018d4:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <navigation+0x290>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d102      	bne.n	80018e4 <navigation+0x17c>
				_transmit_Function = 4;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <navigation+0x2a4>)
 80018e0:	2204      	movs	r2, #4
 80018e2:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <navigation+0x290>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d176      	bne.n	80019dc <navigation+0x274>
				_transmit_Function = 1;
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <navigation+0x2a4>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80018f4:	e072      	b.n	80019dc <navigation+0x274>
	case info:
		_Battery_Info_Page = true;
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <navigation+0x2b0>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
		_Motor_Info_Page = false;
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <navigation+0x2b4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		_Inverter_Info_Page = false;
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <navigation+0x2b8>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
		info_mainPage();
 8001908:	f000 f984 	bl	8001c14 <info_mainPage>
		if (currentStateSM == driving_state) {
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <navigation+0x290>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <navigation+0x1ba>
			_realTimeData = true;
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <navigation+0x294>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <navigation+0x298>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <navigation+0x28c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <navigation+0x29c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	429a      	cmp	r2, r3
 8001930:	d056      	beq.n	80019e0 <navigation+0x278>
			previousPage = info;
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <navigation+0x29c>)
 8001934:	2203      	movs	r2, #3
 8001936:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <navigation+0x2a0>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <navigation+0x294>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <navigation+0x298>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <navigation+0x290>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d102      	bne.n	800195a <navigation+0x1f2>
				_transmit_Function = 4;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <navigation+0x2a4>)
 8001956:	2204      	movs	r2, #4
 8001958:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <navigation+0x290>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d13d      	bne.n	80019e0 <navigation+0x278>
				_transmit_Function = 1;
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <navigation+0x2a4>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800196a:	e039      	b.n	80019e0 <navigation+0x278>
	case settings:
		settings_mainPage();
 800196c:	f000 fac2 	bl	8001ef4 <settings_mainPage>
		if (currentStateSM == driving_state) {
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <navigation+0x290>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d105      	bne.n	8001986 <navigation+0x21e>
			_realTimeData = true;
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <navigation+0x294>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <navigation+0x298>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <navigation+0x28c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <navigation+0x29c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	429a      	cmp	r2, r3
 8001994:	d026      	beq.n	80019e4 <navigation+0x27c>
			previousPage = settings;
 8001996:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <navigation+0x29c>)
 8001998:	2207      	movs	r2, #7
 800199a:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <navigation+0x2a0>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <navigation+0x294>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <navigation+0x298>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <navigation+0x290>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <navigation+0x256>
				_transmit_Function = 4;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <navigation+0x2a4>)
 80019ba:	2204      	movs	r2, #4
 80019bc:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <navigation+0x290>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10d      	bne.n	80019e4 <navigation+0x27c>
				_transmit_Function = 1;
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <navigation+0x2a4>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80019ce:	e009      	b.n	80019e4 <navigation+0x27c>
	default:
		break;
 80019d0:	bf00      	nop
 80019d2:	e008      	b.n	80019e6 <navigation+0x27e>
		break;
 80019d4:	bf00      	nop
 80019d6:	e006      	b.n	80019e6 <navigation+0x27e>
		break;
 80019d8:	bf00      	nop
 80019da:	e004      	b.n	80019e6 <navigation+0x27e>
		break;
 80019dc:	bf00      	nop
 80019de:	e002      	b.n	80019e6 <navigation+0x27e>
		break;
 80019e0:	bf00      	nop
 80019e2:	e000      	b.n	80019e6 <navigation+0x27e>
		break;
 80019e4:	bf00      	nop
	}

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000046e 	.word	0x2000046e
 80019f0:	200004a3 	.word	0x200004a3
 80019f4:	20000482 	.word	0x20000482
 80019f8:	20000484 	.word	0x20000484
 80019fc:	200004a4 	.word	0x200004a4
 8001a00:	200004a6 	.word	0x200004a6
 8001a04:	20000483 	.word	0x20000483
 8001a08:	200004a5 	.word	0x200004a5
 8001a0c:	200004c2 	.word	0x200004c2
 8001a10:	200004ba 	.word	0x200004ba
 8001a14:	200004b9 	.word	0x200004b9
 8001a18:	200004bb 	.word	0x200004bb
 8001a1c:	200004bc 	.word	0x200004bc
 8001a20:	200004bd 	.word	0x200004bd

08001a24 <front_mainPage>:

void front_mainPage(void) {
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	if (page_entry) {
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <front_mainPage+0x8c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <front_mainPage+0x24>
		page_entry = false;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <front_mainPage+0x8c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <front_mainPage+0x90>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <front_mainPage+0x94>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <front_mainPage+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <front_mainPage+0x9c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <front_mainPage+0xa0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]

	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <front_mainPage+0xa4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00f      	beq.n	8001a7c <front_mainPage+0x58>
		currentPage = trip;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <front_mainPage+0xa8>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <front_mainPage+0x8c>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <front_mainPage+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <front_mainPage+0xac>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <front_mainPage+0xb0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
		return;
 8001a7a:	e016      	b.n	8001aaa <front_mainPage+0x86>
	}

	if (backward == true) {
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <front_mainPage+0xac>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d012      	beq.n	8001aaa <front_mainPage+0x86>
		backward = false;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <front_mainPage+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
		currentPage = settings;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <front_mainPage+0xa8>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <front_mainPage+0x8c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <front_mainPage+0xa4>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <front_mainPage+0xb0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <front_mainPage+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
		return;
 8001aa8:	bf00      	nop
	}
}
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	200004a7 	.word	0x200004a7
 8001ab8:	200004b2 	.word	0x200004b2
 8001abc:	200004b3 	.word	0x200004b3
 8001ac0:	200004c6 	.word	0x200004c6
 8001ac4:	200004c7 	.word	0x200004c7
 8001ac8:	20000410 	.word	0x20000410
 8001acc:	20000482 	.word	0x20000482
 8001ad0:	20000411 	.word	0x20000411
 8001ad4:	20000489 	.word	0x20000489

08001ad8 <trip_mainPage>:

void trip_mainPage(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <trip_mainPage+0x88>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <trip_mainPage+0x12>
		page_entry = false;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <trip_mainPage+0x88>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <trip_mainPage+0x8c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <trip_mainPage+0x26>
		tripreset = true;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <trip_mainPage+0x90>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
		longpress = false;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <trip_mainPage+0x8c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <trip_mainPage+0x94>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <trip_mainPage+0x98>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
	trip_reset();
 8001b0a:	f002 ff01 	bl	8004910 <trip_reset>

	if (forward == true) {
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <trip_mainPage+0x9c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00f      	beq.n	8001b36 <trip_mainPage+0x5e>

		currentPage = after_charge;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <trip_mainPage+0xa0>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <trip_mainPage+0x88>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <trip_mainPage+0x9c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <trip_mainPage+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <trip_mainPage+0xa8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
		return;
 8001b34:	e013      	b.n	8001b5e <trip_mainPage+0x86>
	}

	if (backward == true) {
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <trip_mainPage+0xa4>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00f      	beq.n	8001b5e <trip_mainPage+0x86>

		currentPage = front;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <trip_mainPage+0xa0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <trip_mainPage+0x88>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <trip_mainPage+0x9c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <trip_mainPage+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <trip_mainPage+0xa8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		return;
 8001b5c:	bf00      	nop
	}
}
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000414 	.word	0x20000414
 8001b68:	20000413 	.word	0x20000413
 8001b6c:	200004c6 	.word	0x200004c6
 8001b70:	200004c7 	.word	0x200004c7
 8001b74:	20000410 	.word	0x20000410
 8001b78:	20000482 	.word	0x20000482
 8001b7c:	20000411 	.word	0x20000411
 8001b80:	20000489 	.word	0x20000489

08001b84 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <after_charge_mainPage+0x12>
		page_entry = false;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <after_charge_mainPage+0x78>)
 8001b98:	2202      	movs	r2, #2
 8001b9a:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <after_charge_mainPage+0x7c>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <after_charge_mainPage+0x80>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00f      	beq.n	8001bca <after_charge_mainPage+0x46>

		currentPage = info;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <after_charge_mainPage+0x84>)
 8001bac:	2203      	movs	r2, #3
 8001bae:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <after_charge_mainPage+0x80>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <after_charge_mainPage+0x88>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <after_charge_mainPage+0x8c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
		return;
 8001bc8:	e013      	b.n	8001bf2 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <after_charge_mainPage+0x88>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00f      	beq.n	8001bf2 <after_charge_mainPage+0x6e>
		currentPage = trip;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <after_charge_mainPage+0x84>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <after_charge_mainPage+0x74>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <after_charge_mainPage+0x80>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <after_charge_mainPage+0x88>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <after_charge_mainPage+0x8c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
		return;
 8001bf0:	bf00      	nop
	}
}
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	200004c6 	.word	0x200004c6
 8001c00:	200004c7 	.word	0x200004c7
 8001c04:	20000410 	.word	0x20000410
 8001c08:	20000482 	.word	0x20000482
 8001c0c:	20000411 	.word	0x20000411
 8001c10:	20000489 	.word	0x20000489

08001c14 <info_mainPage>:

void info_mainPage(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001c18:	4ba5      	ldr	r3, [pc, #660]	; (8001eb0 <info_mainPage+0x29c>)
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001c1e:	4ba5      	ldr	r3, [pc, #660]	; (8001eb4 <info_mainPage+0x2a0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001c24:	4ba4      	ldr	r3, [pc, #656]	; (8001eb8 <info_mainPage+0x2a4>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f083 0301 	eor.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00b      	beq.n	8001c4a <info_mainPage+0x36>
		if (okay == true) {
 8001c32:	4ba2      	ldr	r3, [pc, #648]	; (8001ebc <info_mainPage+0x2a8>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8110 	beq.w	8001e5c <info_mainPage+0x248>
			inInfoBat = true;
 8001c3c:	4b9e      	ldr	r3, [pc, #632]	; (8001eb8 <info_mainPage+0x2a4>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001c42:	4b9e      	ldr	r3, [pc, #632]	; (8001ebc <info_mainPage+0x2a8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e108      	b.n	8001e5c <info_mainPage+0x248>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 8001c4a:	4b9d      	ldr	r3, [pc, #628]	; (8001ec0 <info_mainPage+0x2ac>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00f      	beq.n	8001c72 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001c52:	4b9c      	ldr	r3, [pc, #624]	; (8001ec4 <info_mainPage+0x2b0>)
 8001c54:	2204      	movs	r2, #4
 8001c56:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001c58:	4b9b      	ldr	r3, [pc, #620]	; (8001ec8 <info_mainPage+0x2b4>)
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 8001c5e:	4b9b      	ldr	r3, [pc, #620]	; (8001ecc <info_mainPage+0x2b8>)
 8001c60:	2205      	movs	r2, #5
 8001c62:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001c64:	4b96      	ldr	r3, [pc, #600]	; (8001ec0 <info_mainPage+0x2ac>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 8001c6a:	2004      	movs	r0, #4
 8001c6c:	f001 ff54 	bl	8003b18 <vehicleInfo_UI>
 8001c70:	e00c      	b.n	8001c8c <info_mainPage+0x78>
		} else {
			if (buttonPressed) {
 8001c72:	4b97      	ldr	r3, [pc, #604]	; (8001ed0 <info_mainPage+0x2bc>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <info_mainPage+0x78>
				vehicleInfo_UI(currentMenu);
 8001c7a:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <info_mainPage+0x2b0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 ff49 	bl	8003b18 <vehicleInfo_UI>
				buttonPressed = false;
 8001c86:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <info_mainPage+0x2bc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (forward == true) {
 8001c8c:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <info_mainPage+0x2c0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d062      	beq.n	8001d5a <info_mainPage+0x146>
			buttonPressed = true;
 8001c94:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <info_mainPage+0x2bc>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001c9a:	4b8a      	ldr	r3, [pc, #552]	; (8001ec4 <info_mainPage+0x2b0>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d11a      	bne.n	8001cda <info_mainPage+0xc6>
 8001ca4:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <info_mainPage+0x2b4>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d115      	bne.n	8001cda <info_mainPage+0xc6>
				_Battery_Info_Page = true;
 8001cae:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <info_mainPage+0x2c4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001cb4:	4b89      	ldr	r3, [pc, #548]	; (8001edc <info_mainPage+0x2c8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001cba:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <info_mainPage+0x2cc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]

				currentMenu = infobat;
 8001cc0:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <info_mainPage+0x2b0>)
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001cc6:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <info_mainPage+0x2b4>)
 8001cc8:	2206      	movs	r2, #6
 8001cca:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001ccc:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <info_mainPage+0x2b8>)
 8001cce:	2205      	movs	r2, #5
 8001cd0:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001cd2:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <info_mainPage+0x2c0>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
				return;
 8001cd8:	e0e9      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 8001cda:	4b7a      	ldr	r3, [pc, #488]	; (8001ec4 <info_mainPage+0x2b0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11a      	bne.n	8001d1a <info_mainPage+0x106>
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <info_mainPage+0x2b4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d115      	bne.n	8001d1a <info_mainPage+0x106>
				_Battery_Info_Page = false;
 8001cee:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <info_mainPage+0x2c4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = true;
 8001cf4:	4b79      	ldr	r3, [pc, #484]	; (8001edc <info_mainPage+0x2c8>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001cfa:	4b79      	ldr	r3, [pc, #484]	; (8001ee0 <info_mainPage+0x2cc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

				currentMenu = infomot;
 8001d00:	4b70      	ldr	r3, [pc, #448]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d02:	2205      	movs	r2, #5
 8001d04:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <info_mainPage+0x2b8>)
 8001d0e:	2206      	movs	r2, #6
 8001d10:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <info_mainPage+0x2c0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
				return;
 8001d18:	e0c9      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d11a      	bne.n	8001d5a <info_mainPage+0x146>
 8001d24:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d115      	bne.n	8001d5a <info_mainPage+0x146>
				_Battery_Info_Page = false;
 8001d2e:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <info_mainPage+0x2c4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <info_mainPage+0x2c8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = true;
 8001d3a:	4b69      	ldr	r3, [pc, #420]	; (8001ee0 <info_mainPage+0x2cc>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]

				currentMenu = infoinv;
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d42:	2206      	movs	r2, #6
 8001d44:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001d46:	4b60      	ldr	r3, [pc, #384]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d48:	2205      	movs	r2, #5
 8001d4a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001d4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <info_mainPage+0x2b8>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001d52:	4b60      	ldr	r3, [pc, #384]	; (8001ed4 <info_mainPage+0x2c0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
				return;
 8001d58:	e0a9      	b.n	8001eae <info_mainPage+0x29a>
			}

		}

		if (backward == true) {
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <info_mainPage+0x2d0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d062      	beq.n	8001e28 <info_mainPage+0x214>
			buttonPressed = true;
 8001d62:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <info_mainPage+0x2bc>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001d68:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d11a      	bne.n	8001da8 <info_mainPage+0x194>
 8001d72:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <info_mainPage+0x2b8>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d115      	bne.n	8001da8 <info_mainPage+0x194>
				_Battery_Info_Page = false;
 8001d7c:	4b56      	ldr	r3, [pc, #344]	; (8001ed8 <info_mainPage+0x2c4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <info_mainPage+0x2c8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = true;
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <info_mainPage+0x2cc>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]

				currentMenu = infoinv;
 8001d8e:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <info_mainPage+0x2b0>)
 8001d90:	2206      	movs	r2, #6
 8001d92:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001d94:	4b4d      	ldr	r3, [pc, #308]	; (8001ecc <info_mainPage+0x2b8>)
 8001d96:	2204      	movs	r2, #4
 8001d98:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <info_mainPage+0x2b4>)
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <info_mainPage+0x2d0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
				return;
 8001da6:	e082      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001da8:	4b46      	ldr	r3, [pc, #280]	; (8001ec4 <info_mainPage+0x2b0>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d11a      	bne.n	8001de8 <info_mainPage+0x1d4>
 8001db2:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <info_mainPage+0x2b8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d115      	bne.n	8001de8 <info_mainPage+0x1d4>
				_Battery_Info_Page = false;
 8001dbc:	4b46      	ldr	r3, [pc, #280]	; (8001ed8 <info_mainPage+0x2c4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = true;
 8001dc2:	4b46      	ldr	r3, [pc, #280]	; (8001edc <info_mainPage+0x2c8>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001dc8:	4b45      	ldr	r3, [pc, #276]	; (8001ee0 <info_mainPage+0x2cc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]

				currentMenu = infomot;
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <info_mainPage+0x2b0>)
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <info_mainPage+0x2b8>)
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <info_mainPage+0x2b4>)
 8001ddc:	2204      	movs	r2, #4
 8001dde:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <info_mainPage+0x2d0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
				return;
 8001de6:	e062      	b.n	8001eae <info_mainPage+0x29a>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <info_mainPage+0x2b0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d11a      	bne.n	8001e28 <info_mainPage+0x214>
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <info_mainPage+0x2b8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d115      	bne.n	8001e28 <info_mainPage+0x214>
				_Battery_Info_Page = true;
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <info_mainPage+0x2c4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <info_mainPage+0x2c8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <info_mainPage+0x2cc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]

				currentMenu = infobat;
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <info_mainPage+0x2b0>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <info_mainPage+0x2b8>)
 8001e16:	2205      	movs	r2, #5
 8001e18:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <info_mainPage+0x2b4>)
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <info_mainPage+0x2d0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
				return;
 8001e26:	e042      	b.n	8001eae <info_mainPage+0x29a>
			}
		}

		if (back == true) {
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <info_mainPage+0x2d4>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d03d      	beq.n	8001eac <info_mainPage+0x298>
			_Battery_Info_Page = true;
 8001e30:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <info_mainPage+0x2c4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
			_Motor_Info_Page = false;
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <info_mainPage+0x2c8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
			_Inverter_Info_Page = false;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <info_mainPage+0x2cc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]

			page_entry = true;
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <info_mainPage+0x2ac>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <info_mainPage+0x2a4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
			back = false;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <info_mainPage+0x2d4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <info_mainPage+0x2d8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001e5a:	e027      	b.n	8001eac <info_mainPage+0x298>
	}

	if (forward == true) {
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <info_mainPage+0x2c0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <info_mainPage+0x270>
		currentPage = settings;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <info_mainPage+0x2dc>)
 8001e66:	2207      	movs	r2, #7
 8001e68:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <info_mainPage+0x2ac>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <info_mainPage+0x2c0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <info_mainPage+0x2d0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <info_mainPage+0x2d8>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
		return;
 8001e82:	e014      	b.n	8001eae <info_mainPage+0x29a>
	}

	if (backward == true) {
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <info_mainPage+0x2d0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <info_mainPage+0x29a>
		currentPage = after_charge;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <info_mainPage+0x2dc>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <info_mainPage+0x2ac>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <info_mainPage+0x2c0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <info_mainPage+0x2d0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <info_mainPage+0x2d8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		return;
 8001eaa:	e000      	b.n	8001eae <info_mainPage+0x29a>
		return;
 8001eac:	bf00      	nop
	}
}
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200004c6 	.word	0x200004c6
 8001eb4:	200004c7 	.word	0x200004c7
 8001eb8:	20000418 	.word	0x20000418
 8001ebc:	20000412 	.word	0x20000412
 8001ec0:	20000010 	.word	0x20000010
 8001ec4:	2000000b 	.word	0x2000000b
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	2000000d 	.word	0x2000000d
 8001ed0:	200004be 	.word	0x200004be
 8001ed4:	20000410 	.word	0x20000410
 8001ed8:	200004bb 	.word	0x200004bb
 8001edc:	200004bc 	.word	0x200004bc
 8001ee0:	200004bd 	.word	0x200004bd
 8001ee4:	20000411 	.word	0x20000411
 8001ee8:	20000416 	.word	0x20000416
 8001eec:	20000489 	.word	0x20000489
 8001ef0:	20000482 	.word	0x20000482

08001ef4 <settings_mainPage>:

void settings_mainPage(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

	//selection_UI(front);
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <settings_mainPage+0x258>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001efe:	4b94      	ldr	r3, [pc, #592]	; (8002150 <settings_mainPage+0x25c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]

	if (!(inSettings)) {
 8001f04:	4b93      	ldr	r3, [pc, #588]	; (8002154 <settings_mainPage+0x260>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <settings_mainPage+0x3c>
		selection_UI(front);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f001 ff0e 	bl	8003d34 <selection_UI>
		if (okay == true) {
 8001f18:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <settings_mainPage+0x264>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8161 	beq.w	80021e4 <settings_mainPage+0x2f0>
			inSettings = true;
 8001f22:	4b8c      	ldr	r3, [pc, #560]	; (8002154 <settings_mainPage+0x260>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001f28:	4b8b      	ldr	r3, [pc, #556]	; (8002158 <settings_mainPage+0x264>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e159      	b.n	80021e4 <settings_mainPage+0x2f0>
		}
	} else {
		if (page_entry == true) {
 8001f30:	4b8a      	ldr	r3, [pc, #552]	; (800215c <settings_mainPage+0x268>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <settings_mainPage+0x62>
			currentMenu = vehicleMenu;
 8001f38:	4b89      	ldr	r3, [pc, #548]	; (8002160 <settings_mainPage+0x26c>)
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	701a      	strb	r2, [r3, #0]
			previousMenuForward = errorsMenu;
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <settings_mainPage+0x270>)
 8001f40:	220b      	movs	r2, #11
 8001f42:	701a      	strb	r2, [r3, #0]
			previousMenuBack = systemMenu;
 8001f44:	4b88      	ldr	r3, [pc, #544]	; (8002168 <settings_mainPage+0x274>)
 8001f46:	2209      	movs	r2, #9
 8001f48:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001f4a:	4b88      	ldr	r3, [pc, #544]	; (800216c <settings_mainPage+0x278>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001f50:	4b82      	ldr	r3, [pc, #520]	; (800215c <settings_mainPage+0x268>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
		}
		if(menuCounter>2)
 8001f56:	4b86      	ldr	r3, [pc, #536]	; (8002170 <settings_mainPage+0x27c>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d90f      	bls.n	8001f7e <settings_mainPage+0x8a>
		{
			if (_menuChanged) {
 8001f5e:	4b83      	ldr	r3, [pc, #524]	; (800216c <settings_mainPage+0x278>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <settings_mainPage+0x84>
				_menuChanged = false;
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <settings_mainPage+0x278>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
				selection_UI(currentMenu);
 8001f6c:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <settings_mainPage+0x26c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 fede 	bl	8003d34 <selection_UI>
			}
			menuCounter = 0;
 8001f78:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <settings_mainPage+0x27c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		}


		if (!(menuAccess)) {
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <settings_mainPage+0x280>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 810c 	beq.w	80021a6 <settings_mainPage+0x2b2>
			menuCounter++;
 8001f8e:	4b78      	ldr	r3, [pc, #480]	; (8002170 <settings_mainPage+0x27c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b76      	ldr	r3, [pc, #472]	; (8002170 <settings_mainPage+0x27c>)
 8001f98:	701a      	strb	r2, [r3, #0]
			if (forward == true) {
 8001f9a:	4b77      	ldr	r3, [pc, #476]	; (8002178 <settings_mainPage+0x284>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d067      	beq.n	8002072 <settings_mainPage+0x17e>
//				currentMenu--;
//				if (currentMenu <= 7) {
//					currentMenu = errorsMenu;
//				}
				if (currentMenu == errorsMenu && previousMenuBack == vehicleMenu) {
 8001fa2:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <settings_mainPage+0x26c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b0b      	cmp	r3, #11
 8001faa:	d114      	bne.n	8001fd6 <settings_mainPage+0xe2>
 8001fac:	4b6e      	ldr	r3, [pc, #440]	; (8002168 <settings_mainPage+0x274>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d10f      	bne.n	8001fd6 <settings_mainPage+0xe2>
					currentMenu = bluetoothMenu;
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <settings_mainPage+0x26c>)
 8001fb8:	220a      	movs	r2, #10
 8001fba:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001fbc:	4b69      	ldr	r3, [pc, #420]	; (8002164 <settings_mainPage+0x270>)
 8001fbe:	2209      	movs	r2, #9
 8001fc0:	701a      	strb	r2, [r3, #0]
					previousMenuBack = errorsMenu;
 8001fc2:	4b69      	ldr	r3, [pc, #420]	; (8002168 <settings_mainPage+0x274>)
 8001fc4:	220b      	movs	r2, #11
 8001fc6:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001fc8:	4b68      	ldr	r3, [pc, #416]	; (800216c <settings_mainPage+0x278>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001fce:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <settings_mainPage+0x284>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
					return;
 8001fd4:	e131      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == vehicleMenu && previousMenuBack == systemMenu) {
 8001fd6:	4b62      	ldr	r3, [pc, #392]	; (8002160 <settings_mainPage+0x26c>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d114      	bne.n	800200a <settings_mainPage+0x116>
 8001fe0:	4b61      	ldr	r3, [pc, #388]	; (8002168 <settings_mainPage+0x274>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d10f      	bne.n	800200a <settings_mainPage+0x116>
					currentMenu = errorsMenu;
 8001fea:	4b5d      	ldr	r3, [pc, #372]	; (8002160 <settings_mainPage+0x26c>)
 8001fec:	220b      	movs	r2, #11
 8001fee:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <settings_mainPage+0x270>)
 8001ff2:	220a      	movs	r2, #10
 8001ff4:	701a      	strb	r2, [r3, #0]
					previousMenuBack = vehicleMenu;
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <settings_mainPage+0x274>)
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001ffc:	4b5b      	ldr	r3, [pc, #364]	; (800216c <settings_mainPage+0x278>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
					forward = false;
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <settings_mainPage+0x284>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
					return;
 8002008:	e117      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == systemMenu && previousMenuBack == bluetoothMenu) {
 800200a:	4b55      	ldr	r3, [pc, #340]	; (8002160 <settings_mainPage+0x26c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b09      	cmp	r3, #9
 8002012:	d114      	bne.n	800203e <settings_mainPage+0x14a>
 8002014:	4b54      	ldr	r3, [pc, #336]	; (8002168 <settings_mainPage+0x274>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d10f      	bne.n	800203e <settings_mainPage+0x14a>
					currentMenu = vehicleMenu;
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <settings_mainPage+0x26c>)
 8002020:	2208      	movs	r2, #8
 8002022:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <settings_mainPage+0x270>)
 8002026:	220b      	movs	r2, #11
 8002028:	701a      	strb	r2, [r3, #0]
					previousMenuBack = systemMenu;
 800202a:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <settings_mainPage+0x274>)
 800202c:	2209      	movs	r2, #9
 800202e:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <settings_mainPage+0x278>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
					forward = false;
 8002036:	4b50      	ldr	r3, [pc, #320]	; (8002178 <settings_mainPage+0x284>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
					return;
 800203c:	e0fd      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == bluetoothMenu && previousMenuBack == errorsMenu) {
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <settings_mainPage+0x26c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d114      	bne.n	8002072 <settings_mainPage+0x17e>
 8002048:	4b47      	ldr	r3, [pc, #284]	; (8002168 <settings_mainPage+0x274>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b0b      	cmp	r3, #11
 8002050:	d10f      	bne.n	8002072 <settings_mainPage+0x17e>
					currentMenu = systemMenu;
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <settings_mainPage+0x26c>)
 8002054:	2209      	movs	r2, #9
 8002056:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8002058:	4b42      	ldr	r3, [pc, #264]	; (8002164 <settings_mainPage+0x270>)
 800205a:	2208      	movs	r2, #8
 800205c:	701a      	strb	r2, [r3, #0]
					previousMenuBack = bluetoothMenu;
 800205e:	4b42      	ldr	r3, [pc, #264]	; (8002168 <settings_mainPage+0x274>)
 8002060:	220a      	movs	r2, #10
 8002062:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8002064:	4b41      	ldr	r3, [pc, #260]	; (800216c <settings_mainPage+0x278>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
					forward = false;
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <settings_mainPage+0x284>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
					return;
 8002070:	e0e3      	b.n	800223a <settings_mainPage+0x346>
				}
			}

			if (backward == true) {
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <settings_mainPage+0x288>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8082 	beq.w	8002180 <settings_mainPage+0x28c>
//				currentMenu++;
//				if (currentMenu >= 12) {
//					currentMenu = vehicleMenu;
//				}
				if (currentMenu == vehicleMenu && previousMenuForward == errorsMenu) {
 800207c:	4b38      	ldr	r3, [pc, #224]	; (8002160 <settings_mainPage+0x26c>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b08      	cmp	r3, #8
 8002084:	d114      	bne.n	80020b0 <settings_mainPage+0x1bc>
 8002086:	4b37      	ldr	r3, [pc, #220]	; (8002164 <settings_mainPage+0x270>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b0b      	cmp	r3, #11
 800208e:	d10f      	bne.n	80020b0 <settings_mainPage+0x1bc>
					currentMenu = systemMenu;
 8002090:	4b33      	ldr	r3, [pc, #204]	; (8002160 <settings_mainPage+0x26c>)
 8002092:	2209      	movs	r2, #9
 8002094:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <settings_mainPage+0x270>)
 8002098:	2208      	movs	r2, #8
 800209a:	701a      	strb	r2, [r3, #0]

					previousMenuBack = bluetoothMenu;
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <settings_mainPage+0x274>)
 800209e:	220a      	movs	r2, #10
 80020a0:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <settings_mainPage+0x278>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
					backward = false;
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <settings_mainPage+0x288>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
					return;
 80020ae:	e0c4      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == errorsMenu && previousMenuForward == bluetoothMenu) {
 80020b0:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <settings_mainPage+0x26c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b0b      	cmp	r3, #11
 80020b8:	d114      	bne.n	80020e4 <settings_mainPage+0x1f0>
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <settings_mainPage+0x270>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d10f      	bne.n	80020e4 <settings_mainPage+0x1f0>
					currentMenu = vehicleMenu;
 80020c4:	4b26      	ldr	r3, [pc, #152]	; (8002160 <settings_mainPage+0x26c>)
 80020c6:	2208      	movs	r2, #8
 80020c8:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <settings_mainPage+0x270>)
 80020cc:	220b      	movs	r2, #11
 80020ce:	701a      	strb	r2, [r3, #0]

					previousMenuBack = systemMenu;
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <settings_mainPage+0x274>)
 80020d2:	2209      	movs	r2, #9
 80020d4:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 80020d6:	4b25      	ldr	r3, [pc, #148]	; (800216c <settings_mainPage+0x278>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
					backward = false;
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <settings_mainPage+0x288>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
					return;
 80020e2:	e0aa      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == bluetoothMenu && previousMenuForward == systemMenu) {
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <settings_mainPage+0x26c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d114      	bne.n	8002118 <settings_mainPage+0x224>
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <settings_mainPage+0x270>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d10f      	bne.n	8002118 <settings_mainPage+0x224>
					currentMenu = errorsMenu;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <settings_mainPage+0x26c>)
 80020fa:	220b      	movs	r2, #11
 80020fc:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <settings_mainPage+0x270>)
 8002100:	220a      	movs	r2, #10
 8002102:	701a      	strb	r2, [r3, #0]

					previousMenuBack = vehicleMenu;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <settings_mainPage+0x274>)
 8002106:	2208      	movs	r2, #8
 8002108:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <settings_mainPage+0x278>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
					backward = false;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <settings_mainPage+0x288>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
					return;
 8002116:	e090      	b.n	800223a <settings_mainPage+0x346>
				}
				if (currentMenu == systemMenu && previousMenuForward == vehicleMenu) {
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <settings_mainPage+0x26c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b09      	cmp	r3, #9
 8002120:	d12e      	bne.n	8002180 <settings_mainPage+0x28c>
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <settings_mainPage+0x270>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b08      	cmp	r3, #8
 800212a:	d129      	bne.n	8002180 <settings_mainPage+0x28c>
					currentMenu = bluetoothMenu;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <settings_mainPage+0x26c>)
 800212e:	220a      	movs	r2, #10
 8002130:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <settings_mainPage+0x270>)
 8002134:	2209      	movs	r2, #9
 8002136:	701a      	strb	r2, [r3, #0]

					previousMenuBack = errorsMenu;
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <settings_mainPage+0x274>)
 800213a:	220b      	movs	r2, #11
 800213c:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <settings_mainPage+0x278>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
					backward = false;
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <settings_mainPage+0x288>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
					return;
 800214a:	e076      	b.n	800223a <settings_mainPage+0x346>
 800214c:	200004c6 	.word	0x200004c6
 8002150:	200004c7 	.word	0x200004c7
 8002154:	20000417 	.word	0x20000417
 8002158:	20000412 	.word	0x20000412
 800215c:	20000010 	.word	0x20000010
 8002160:	2000000b 	.word	0x2000000b
 8002164:	2000000d 	.word	0x2000000d
 8002168:	2000000c 	.word	0x2000000c
 800216c:	200004b4 	.word	0x200004b4
 8002170:	200004b5 	.word	0x200004b5
 8002174:	2000048c 	.word	0x2000048c
 8002178:	20000410 	.word	0x20000410
 800217c:	20000411 	.word	0x20000411
				}

			}
			if (back == true) {
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <settings_mainPage+0x348>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <settings_mainPage+0x2b2>
				page_entry = true;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <settings_mainPage+0x34c>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
				inSettings = false;
 800218e:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <settings_mainPage+0x350>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
				selection_UI(front);
 8002194:	2000      	movs	r0, #0
 8002196:	f001 fdcd 	bl	8003d34 <selection_UI>
				_menupage = 0;
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <settings_mainPage+0x354>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
				back = false;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <settings_mainPage+0x348>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
			}


		}
		switch (currentMenu) {
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <settings_mainPage+0x358>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3b08      	subs	r3, #8
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d816      	bhi.n	80021e0 <settings_mainPage+0x2ec>
 80021b2:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <settings_mainPage+0x2c4>)
 80021b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021cf 	.word	0x080021cf
 80021c0:	080021d5 	.word	0x080021d5
 80021c4:	080021db 	.word	0x080021db
		case vehicleMenu:
			vehicle_page();
 80021c8:	f000 f84a 	bl	8002260 <vehicle_page>
			break;
 80021cc:	e009      	b.n	80021e2 <settings_mainPage+0x2ee>
		case systemMenu:
			system_page();
 80021ce:	f000 f893 	bl	80022f8 <system_page>
			break;
 80021d2:	e006      	b.n	80021e2 <settings_mainPage+0x2ee>
		case bluetoothMenu:
			bluetooth_page();
 80021d4:	f000 fa0e 	bl	80025f4 <bluetooth_page>
			break;
 80021d8:	e003      	b.n	80021e2 <settings_mainPage+0x2ee>
		case errorsMenu:
			errors_page();
 80021da:	f000 fa57 	bl	800268c <errors_page>
			break;
 80021de:	e000      	b.n	80021e2 <settings_mainPage+0x2ee>
		default:
			break;
 80021e0:	bf00      	nop
		}


		return;
 80021e2:	e02a      	b.n	800223a <settings_mainPage+0x346>
	}

	if (forward == true) {
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <settings_mainPage+0x35c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d012      	beq.n	8002212 <settings_mainPage+0x31e>
		currentPage = front;
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <settings_mainPage+0x360>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <settings_mainPage+0x34c>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
		forward = false;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <settings_mainPage+0x35c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <settings_mainPage+0x354>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <settings_mainPage+0x364>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
		backward = false;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <settings_mainPage+0x368>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
		return;
 8002210:	e013      	b.n	800223a <settings_mainPage+0x346>
	}

	if (backward == true) {
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <settings_mainPage+0x368>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00f      	beq.n	800223a <settings_mainPage+0x346>
		currentPage = info;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <settings_mainPage+0x360>)
 800221c:	2203      	movs	r2, #3
 800221e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <settings_mainPage+0x34c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		forward = false;
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <settings_mainPage+0x35c>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <settings_mainPage+0x354>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <settings_mainPage+0x368>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
		return;
 8002238:	bf00      	nop
	}

}
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000416 	.word	0x20000416
 8002240:	20000010 	.word	0x20000010
 8002244:	20000417 	.word	0x20000417
 8002248:	20000489 	.word	0x20000489
 800224c:	2000000b 	.word	0x2000000b
 8002250:	20000410 	.word	0x20000410
 8002254:	20000482 	.word	0x20000482
 8002258:	200004c7 	.word	0x200004c7
 800225c:	20000411 	.word	0x20000411

08002260 <vehicle_page>:

void vehicle_page(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <vehicle_page+0x7c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d010      	beq.n	8002294 <vehicle_page+0x34>
		if (okay == true) {
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <vehicle_page+0x80>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d02e      	beq.n	80022d8 <vehicle_page+0x78>
			menuAccess = true;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <vehicle_page+0x84>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <vehicle_page+0x7c>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <vehicle_page+0x88>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
			okay = false;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <vehicle_page+0x80>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			return;
 8002292:	e021      	b.n	80022d8 <vehicle_page+0x78>
		}
	} else {
		if (subMenuCounter>2) {
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <vehicle_page+0x8c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d909      	bls.n	80022b0 <vehicle_page+0x50>
			if (inTheMenu) {
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <vehicle_page+0x88>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <vehicle_page+0x4a>
				inTheMenu = false;
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <vehicle_page+0x88>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
				//settings_UI(vehicleMenu);
			}
			subMenuCounter = 0;
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <vehicle_page+0x8c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(vehicleMenu,10);
 80022b0:	210a      	movs	r1, #10
 80022b2:	2008      	movs	r0, #8
 80022b4:	f001 fc92 	bl	8003bdc <settings_UI>


		if (back == true) {
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <vehicle_page+0x90>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <vehicle_page+0x78>
			menuAccess = false;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <vehicle_page+0x84>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <vehicle_page+0x7c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <vehicle_page+0x94>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
			back = false;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <vehicle_page+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000048d 	.word	0x2000048d
 80022e0:	20000412 	.word	0x20000412
 80022e4:	2000048c 	.word	0x2000048c
 80022e8:	20000495 	.word	0x20000495
 80022ec:	200004b6 	.word	0x200004b6
 80022f0:	20000416 	.word	0x20000416
 80022f4:	200004b4 	.word	0x200004b4

080022f8 <system_page>:
void system_page(void) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <system_page+0x1a0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f083 0301 	eor.w	r3, r3, #1
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <system_page+0x48>
		if (okay == true) {
 800230a:	4b64      	ldr	r3, [pc, #400]	; (800249c <system_page+0x1a4>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8142 	beq.w	8002598 <system_page+0x2a0>
			menuAccess = true;
 8002314:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <system_page+0x1a8>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 800231a:	4b5f      	ldr	r3, [pc, #380]	; (8002498 <system_page+0x1a0>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8002320:	4b60      	ldr	r3, [pc, #384]	; (80024a4 <system_page+0x1ac>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002326:	4b5d      	ldr	r3, [pc, #372]	; (800249c <system_page+0x1a4>)
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
			currentSubMenu = 0;
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <system_page+0x1b0>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
			previousSubMenuBack = 1;
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <system_page+0x1b4>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
			previousSubMenuForward = 1;
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <system_page+0x1b8>)
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
			return;
 800233e:	e13b      	b.n	80025b8 <system_page+0x2c0>
		}
	} else {
		if (subMenuCounter>2) {
 8002340:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <system_page+0x1bc>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d909      	bls.n	800235c <system_page+0x64>
			if (inTheMenu) {
 8002348:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <system_page+0x1ac>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <system_page+0x5e>
				inTheMenu = false;
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <system_page+0x1ac>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
				//settings_UI(systemMenu);
			}
			subMenuCounter = 0;
 8002356:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <system_page+0x1bc>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(systemMenu,currentSubMenu);
 800235c:	4b52      	ldr	r3, [pc, #328]	; (80024a8 <system_page+0x1b0>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	2009      	movs	r0, #9
 8002366:	f001 fc39 	bl	8003bdc <settings_UI>
		//Time Settings Menu
		if (!inTimeSettings) {
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <system_page+0x1c0>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d06f      	beq.n	8002458 <system_page+0x160>
			if (forward == true) {
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <system_page+0x1c4>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d02d      	beq.n	80023dc <system_page+0xe4>

				if (currentSubMenu == 0 && previousSubMenuBack == 1) {
 8002380:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <system_page+0x1b0>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d111      	bne.n	80023ae <system_page+0xb6>
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <system_page+0x1b4>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10c      	bne.n	80023ae <system_page+0xb6>
					currentSubMenu = 1;
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <system_page+0x1b0>)
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <system_page+0x1b8>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 0;
 80023a0:	4b42      	ldr	r3, [pc, #264]	; (80024ac <system_page+0x1b4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 80023a6:	4b45      	ldr	r3, [pc, #276]	; (80024bc <system_page+0x1c4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
					return;
 80023ac:	e104      	b.n	80025b8 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuBack == 0) {
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <system_page+0x1b0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d111      	bne.n	80023dc <system_page+0xe4>
 80023b8:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <system_page+0x1b4>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <system_page+0xe4>
					currentSubMenu = 0;
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <system_page+0x1b0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <system_page+0x1b8>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 1;
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <system_page+0x1b4>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <system_page+0x1c4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
					return;
 80023da:	e0ed      	b.n	80025b8 <system_page+0x2c0>
				}
			}
			if (backward == true) {
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <system_page+0x1c8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02d      	beq.n	8002440 <system_page+0x148>
				if (currentSubMenu == 0 && previousSubMenuForward == 1) {
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <system_page+0x1b0>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d111      	bne.n	8002412 <system_page+0x11a>
 80023ee:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <system_page+0x1b8>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10c      	bne.n	8002412 <system_page+0x11a>
					currentSubMenu = 1;
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <system_page+0x1b0>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <system_page+0x1b8>)
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 0;
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <system_page+0x1b4>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <system_page+0x1c8>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
					return;
 8002410:	e0d2      	b.n	80025b8 <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuForward == 0) {
 8002412:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <system_page+0x1b0>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	d111      	bne.n	8002440 <system_page+0x148>
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <system_page+0x1b8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10c      	bne.n	8002440 <system_page+0x148>
					currentSubMenu = 0;
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <system_page+0x1b0>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <system_page+0x1b8>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 1;
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <system_page+0x1b4>)
 8002434:	2201      	movs	r2, #1
 8002436:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <system_page+0x1c8>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
					return;
 800243e:	e0bb      	b.n	80025b8 <system_page+0x2c0>
				}

			}
			if (okay) {
 8002440:	4b16      	ldr	r3, [pc, #88]	; (800249c <system_page+0x1a4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a7 	beq.w	8002598 <system_page+0x2a0>
				inTimeSettings = true;
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <system_page+0x1c0>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
				okay = false;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <system_page+0x1a4>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
				return;
 8002456:	e0af      	b.n	80025b8 <system_page+0x2c0>
			}

		}
		else
		{
			if (okay) {
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <system_page+0x1a4>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d033      	beq.n	80024c8 <system_page+0x1d0>
				okay = false;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <system_page+0x1a4>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <system_page+0x1cc>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <system_page+0x186>
					currentSubMenu = vpCounter;
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <system_page+0x1cc>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <system_page+0x1b0>)
 8002474:	701a      	strb	r2, [r3, #0]
					vpCounter = 4;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <system_page+0x1cc>)
 8002478:	2204      	movs	r2, #4
 800247a:	701a      	strb	r2, [r3, #0]
					return;
 800247c:	e09c      	b.n	80025b8 <system_page+0x2c0>
				}
				if (vpCounter == 4) {
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <system_page+0x1cc>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d120      	bne.n	80024c8 <system_page+0x1d0>
					currentSubMenu = vpCounter;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <system_page+0x1cc>)
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <system_page+0x1b0>)
 800248c:	701a      	strb	r2, [r3, #0]
					vpCounter = 3;
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <system_page+0x1cc>)
 8002490:	2203      	movs	r2, #3
 8002492:	701a      	strb	r2, [r3, #0]
					return;
 8002494:	e090      	b.n	80025b8 <system_page+0x2c0>
 8002496:	bf00      	nop
 8002498:	2000048e 	.word	0x2000048e
 800249c:	20000412 	.word	0x20000412
 80024a0:	2000048c 	.word	0x2000048c
 80024a4:	20000495 	.word	0x20000495
 80024a8:	20000486 	.word	0x20000486
 80024ac:	20000487 	.word	0x20000487
 80024b0:	20000488 	.word	0x20000488
 80024b4:	200004b6 	.word	0x200004b6
 80024b8:	2000048f 	.word	0x2000048f
 80024bc:	20000410 	.word	0x20000410
 80024c0:	20000411 	.word	0x20000411
 80024c4:	20000011 	.word	0x20000011
				}
			}
			if (forward) {
 80024c8:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <system_page+0x2c4>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <system_page+0x206>
			forward = false;
 80024d0:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <system_page+0x2c4>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <system_page+0x2c8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d105      	bne.n	80024ea <system_page+0x1f2>
					timerSetValueH++;
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <system_page+0x2cc>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <system_page+0x2cc>)
 80024e8:	701a      	strb	r2, [r3, #0]
				}
				if (vpCounter == 4) {
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <system_page+0x2c8>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d105      	bne.n	80024fe <system_page+0x206>
					timerSetValueMin++;
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <system_page+0x2d0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <system_page+0x2d0>)
 80024fc:	701a      	strb	r2, [r3, #0]
				}
			}

			if (backward) {
 80024fe:	4b33      	ldr	r3, [pc, #204]	; (80025cc <system_page+0x2d4>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d024      	beq.n	8002550 <system_page+0x258>
			backward = false;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <system_page+0x2d4>)
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
			if (vpCounter == 3) {
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <system_page+0x2c8>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d105      	bne.n	8002520 <system_page+0x228>
				timerSetValueH--;
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <system_page+0x2cc>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	3b01      	subs	r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <system_page+0x2cc>)
 800251e:	701a      	strb	r2, [r3, #0]
			}
			if (vpCounter == 4) {
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <system_page+0x2c8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d105      	bne.n	8002534 <system_page+0x23c>
				timerSetValueMin--;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <system_page+0x2d0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <system_page+0x2d0>)
 8002532:	701a      	strb	r2, [r3, #0]
			}

				if (timerSetValueH == 0) {
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <system_page+0x2cc>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <system_page+0x24a>
					timerSetValueH = 23;
 800253c:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <system_page+0x2cc>)
 800253e:	2217      	movs	r2, #23
 8002540:	701a      	strb	r2, [r3, #0]
				}
				if (timerSetValueMin == 0) {
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <system_page+0x2d0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <system_page+0x258>
					timerSetValueMin = 59;
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <system_page+0x2d0>)
 800254c:	223b      	movs	r2, #59	; 0x3b
 800254e:	701a      	strb	r2, [r3, #0]
				}
			}

			if (timerSetValueH > 24) {
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <system_page+0x2cc>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b18      	cmp	r3, #24
 8002556:	d902      	bls.n	800255e <system_page+0x266>
				timerSetValueH = 0;
 8002558:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <system_page+0x2cc>)
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
			}

			if (timerSetValueMin > 60) {
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <system_page+0x2d0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b3c      	cmp	r3, #60	; 0x3c
 8002564:	d902      	bls.n	800256c <system_page+0x274>
				timerSetValueMin = 0;
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <system_page+0x2d0>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			}


			if (back) {
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <system_page+0x2d8>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d011      	beq.n	8002598 <system_page+0x2a0>
				inTimeSettings = false;
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <system_page+0x2dc>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
				//Trasmit time
				currentSubMenu = 0;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <system_page+0x2e0>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
				previousSubMenuForward = 1;
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <system_page+0x2e4>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
				previousSubMenuBack = 1;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <system_page+0x2e8>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
				timeChanged = true;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <system_page+0x2ec>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
				back = false;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <system_page+0x2d8>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
//		} else {
//
//		}
	}

	if (back == true) {
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <system_page+0x2d8>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <system_page+0x2c0>
		menuAccess = false;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <system_page+0x2f0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <system_page+0x2f4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
		_menuChanged = true;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <system_page+0x2f8>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
		back = false;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <system_page+0x2d8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]

	}
}
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000410 	.word	0x20000410
 80025c0:	20000011 	.word	0x20000011
 80025c4:	20000490 	.word	0x20000490
 80025c8:	20000491 	.word	0x20000491
 80025cc:	20000411 	.word	0x20000411
 80025d0:	20000416 	.word	0x20000416
 80025d4:	2000048f 	.word	0x2000048f
 80025d8:	20000486 	.word	0x20000486
 80025dc:	20000488 	.word	0x20000488
 80025e0:	20000487 	.word	0x20000487
 80025e4:	20000492 	.word	0x20000492
 80025e8:	2000048c 	.word	0x2000048c
 80025ec:	2000048e 	.word	0x2000048e
 80025f0:	200004b4 	.word	0x200004b4

080025f4 <bluetooth_page>:

void bluetooth_page(void) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <bluetooth_page+0x7c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <bluetooth_page+0x34>
		if (okay == true) {
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <bluetooth_page+0x80>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02e      	beq.n	800266c <bluetooth_page+0x78>
			menuAccess = true;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <bluetooth_page+0x84>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <bluetooth_page+0x7c>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <bluetooth_page+0x88>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <bluetooth_page+0x80>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8002626:	e021      	b.n	800266c <bluetooth_page+0x78>
		if (subMenuCounter>2) {
 8002628:	4b15      	ldr	r3, [pc, #84]	; (8002680 <bluetooth_page+0x8c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d909      	bls.n	8002644 <bluetooth_page+0x50>
			if (inTheMenu) {
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <bluetooth_page+0x88>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <bluetooth_page+0x4a>
				inTheMenu = false;
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <bluetooth_page+0x88>)
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <bluetooth_page+0x8c>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
		settings_UI(bluetoothMenu,10);
 8002644:	210a      	movs	r1, #10
 8002646:	200a      	movs	r0, #10
 8002648:	f001 fac8 	bl	8003bdc <settings_UI>
		if (back == true) {
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <bluetooth_page+0x90>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <bluetooth_page+0x78>
			menuAccess = false;
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <bluetooth_page+0x84>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <bluetooth_page+0x7c>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <bluetooth_page+0x94>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
			back = false;
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <bluetooth_page+0x90>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000493 	.word	0x20000493
 8002674:	20000412 	.word	0x20000412
 8002678:	2000048c 	.word	0x2000048c
 800267c:	20000495 	.word	0x20000495
 8002680:	200004b6 	.word	0x200004b6
 8002684:	20000416 	.word	0x20000416
 8002688:	200004b4 	.word	0x200004b4

0800268c <errors_page>:
void errors_page(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <errors_page+0x7c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f083 0301 	eor.w	r3, r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <errors_page+0x34>
		if (okay == true) {
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <errors_page+0x80>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02e      	beq.n	8002704 <errors_page+0x78>
			menuAccess = true;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <errors_page+0x84>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <errors_page+0x7c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <errors_page+0x88>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
			okay = false;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <errors_page+0x80>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 80026be:	e021      	b.n	8002704 <errors_page+0x78>
		if (subMenuCounter>2) {
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <errors_page+0x8c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d909      	bls.n	80026dc <errors_page+0x50>
			if (inTheMenu) {
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <errors_page+0x88>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <errors_page+0x4a>
				inTheMenu = false;
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <errors_page+0x88>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <errors_page+0x8c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
		settings_UI(errorsMenu,10);
 80026dc:	210a      	movs	r1, #10
 80026de:	200b      	movs	r0, #11
 80026e0:	f001 fa7c 	bl	8003bdc <settings_UI>
		if (back == true) {
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <errors_page+0x90>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <errors_page+0x78>
			menuAccess = false;
 80026ec:	4b08      	ldr	r3, [pc, #32]	; (8002710 <errors_page+0x84>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <errors_page+0x7c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <errors_page+0x94>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
			back = false;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <errors_page+0x90>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000494 	.word	0x20000494
 800270c:	20000412 	.word	0x20000412
 8002710:	2000048c 	.word	0x2000048c
 8002714:	20000495 	.word	0x20000495
 8002718:	200004b6 	.word	0x200004b6
 800271c:	20000416 	.word	0x20000416
 8002720:	200004b4 	.word	0x200004b4

08002724 <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <mainStateMachine+0x44>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b03      	cmp	r3, #3
 8002730:	d816      	bhi.n	8002760 <mainStateMachine+0x3c>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <mainStateMachine+0x14>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	0800274f 	.word	0x0800274f
 8002740:	08002755 	.word	0x08002755
 8002744:	0800275b 	.word	0x0800275b
	case startingup_state:
		startUpState();
 8002748:	f000 f810 	bl	800276c <startUpState>
		break;
 800274c:	e009      	b.n	8002762 <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 800274e:	f000 f8f5 	bl	800293c <driveState>
		break;
 8002752:	e006      	b.n	8002762 <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 8002754:	f000 f994 	bl	8002a80 <chargeState>
		break;
 8002758:	e003      	b.n	8002762 <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 800275a:	f000 fa0f 	bl	8002b7c <errorState>
		break;
 800275e:	e000      	b.n	8002762 <mainStateMachine+0x3e>
	default:
		break;
 8002760:	bf00      	nop
	}
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000484 	.word	0x20000484

0800276c <startUpState>:

void startUpState(void) {
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0

	dataCounter++;
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <startUpState+0x154>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <startUpState+0x154>)
 800277a:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 800277c:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <startUpState+0x158>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d018      	beq.n	80027b6 <startUpState+0x4a>
		state_entry = false;
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <startUpState+0x158>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 800278a:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <startUpState+0x15c>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 8002790:	4b4e      	ldr	r3, [pc, #312]	; (80028cc <startUpState+0x160>)
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002796:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <startUpState+0x164>)
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
		_modeSelection = 2;//Clear Mode
 800279c:	4b4d      	ldr	r3, [pc, #308]	; (80028d4 <startUpState+0x168>)
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
		_setDriverPage = false;
 80027a2:	4b4d      	ldr	r3, [pc, #308]	; (80028d8 <startUpState+0x16c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80027a8:	4b4c      	ldr	r3, [pc, #304]	; (80028dc <startUpState+0x170>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <startUpState+0x4a>
			_errorSetIcon = false;
 80027b0:	4b4b      	ldr	r3, [pc, #300]	; (80028e0 <startUpState+0x174>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
		}
	}


	if (err_error != 0) {
 80027b6:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <startUpState+0x178>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <startUpState+0x80>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <startUpState+0x170>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d177      	bne.n	80028b6 <startUpState+0x14a>
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <startUpState+0x17c>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b48      	ldr	r3, [pc, #288]	; (80028ec <startUpState+0x180>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d071      	beq.n	80028b6 <startUpState+0x14a>
			currentStateSM = Error_state;
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <startUpState+0x184>)
 80027d4:	2203      	movs	r2, #3
 80027d6:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 80027d8:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <startUpState+0x188>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 80027de:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <startUpState+0x158>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 80027e4:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <startUpState+0x18c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 80027ea:	e064      	b.n	80028b6 <startUpState+0x14a>
	}

	if (currentstate == 4) {
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <startUpState+0x190>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d109      	bne.n	8002808 <startUpState+0x9c>
		currentStateSM = charging_state;
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <startUpState+0x184>)
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <startUpState+0x188>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002800:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <startUpState+0x158>)
 8002802:	2201      	movs	r2, #1
 8002804:	701a      	strb	r2, [r3, #0]
		return;
 8002806:	e059      	b.n	80028bc <startUpState+0x150>
	}
	_oneTimeData = true;
 8002808:	4b3d      	ldr	r3, [pc, #244]	; (8002900 <startUpState+0x194>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
	if (accessory == 1) {
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <startUpState+0x198>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d112      	bne.n	800283c <startUpState+0xd0>
		navigation(); //enable navigation in Accessory Mode
 8002816:	f7fe ffa7 	bl	8001768 <navigation>
		//_modeSelection = 2;//Clear Mode
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 800281a:	4b30      	ldr	r3, [pc, #192]	; (80028dc <startUpState+0x170>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02b      	beq.n	800287a <startUpState+0x10e>
			entry = true;
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <startUpState+0x19c>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
			startup = true;
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <startUpState+0x1a0>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
			checklit = true;
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <startUpState+0x1a4>)
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <startUpState+0x1a8>)
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e01e      	b.n	800287a <startUpState+0x10e>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <startUpState+0x1ac>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002842:	4b36      	ldr	r3, [pc, #216]	; (800291c <startUpState+0x1b0>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <startUpState+0x1b4>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
		//currentMode = mode_evcu;
		currentPage = front;
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <startUpState+0x15c>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]

		if (dataCounter > 2) {
 8002854:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <startUpState+0x154>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d905      	bls.n	8002868 <startUpState+0xfc>
			_realTimeData = true;
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <startUpState+0x1b8>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
			dataCounter = 0;
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <startUpState+0x154>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
		}


		inInfoBat = false;
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <startUpState+0x1bc>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
		inSettings = false;
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <startUpState+0x1c0>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]

		_trasmitGlobal = Disengage_Page;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <startUpState+0x164>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		//_modeSelection = 2;//Clear Mode
	}

	//StartingUp Transmit flag
	_startingUp = true;
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <startUpState+0x1a8>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]

	if (mode) {
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <startUpState+0x1c4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <startUpState+0x12e>
		mode = false;
 8002888:	4b29      	ldr	r3, [pc, #164]	; (8002930 <startUpState+0x1c4>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
		_modeChangeDisabled = true;
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <startUpState+0x1c8>)
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
		_modeSelection = 2;
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <startUpState+0x168>)
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
	}
	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <startUpState+0x1cc>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d10b      	bne.n	80028ba <startUpState+0x14e>
		return;
	}

	currentStateSM = driving_state;
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <startUpState+0x184>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <startUpState+0x188>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
	//_modeSelection = true;
	if (readytodrive == 1) {

	}
	state_entry = true;
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <startUpState+0x158>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e002      	b.n	80028bc <startUpState+0x150>
		return; //Will exit from the function
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <startUpState+0x150>
		return;
 80028ba:	bf00      	nop
}
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000c69 	.word	0x20000c69
 80028c4:	2000000f 	.word	0x2000000f
 80028c8:	20000482 	.word	0x20000482
 80028cc:	20000412 	.word	0x20000412
 80028d0:	200004c7 	.word	0x200004c7
 80028d4:	200004a7 	.word	0x200004a7
 80028d8:	200004a5 	.word	0x200004a5
 80028dc:	20000000 	.word	0x20000000
 80028e0:	200004ac 	.word	0x200004ac
 80028e4:	20000477 	.word	0x20000477
 80028e8:	20000004 	.word	0x20000004
 80028ec:	2000047c 	.word	0x2000047c
 80028f0:	20000484 	.word	0x20000484
 80028f4:	20000485 	.word	0x20000485
 80028f8:	200004ad 	.word	0x200004ad
 80028fc:	2000046c 	.word	0x2000046c
 8002900:	200004a6 	.word	0x200004a6
 8002904:	2000046e 	.word	0x2000046e
 8002908:	20000009 	.word	0x20000009
 800290c:	20000008 	.word	0x20000008
 8002910:	2000000a 	.word	0x2000000a
 8002914:	200004a2 	.word	0x200004a2
 8002918:	20000410 	.word	0x20000410
 800291c:	20000411 	.word	0x20000411
 8002920:	200004a3 	.word	0x200004a3
 8002924:	200004a4 	.word	0x200004a4
 8002928:	20000418 	.word	0x20000418
 800292c:	20000417 	.word	0x20000417
 8002930:	20000415 	.word	0x20000415
 8002934:	200004a8 	.word	0x200004a8
 8002938:	2000046f 	.word	0x2000046f

0800293c <driveState>:

void driveState(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	if (state_entry) {
 8002940:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <driveState+0xec>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d021      	beq.n	800298c <driveState+0x50>
		state_entry = false;
 8002948:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <driveState+0xec>)
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <driveState+0xf0>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <driveState+0xf4>)
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 800295a:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <driveState+0xf8>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <driveState+0xfc>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
		_drivePageSet = front;
 8002966:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <driveState+0x100>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
		///////////////////////
		_gearChanged = true;
 800296c:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <driveState+0x104>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
		_modeSelection = 1;
 8002972:	4b34      	ldr	r3, [pc, #208]	; (8002a44 <driveState+0x108>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
		modeIcon = true;
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <driveState+0x10c>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <driveState+0x110>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <driveState+0x50>
			_errorSetIcon = false;
 8002986:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <driveState+0x114>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
		}
	}
	dataCounter++;
 800298c:	4b2a      	ldr	r3, [pc, #168]	; (8002a38 <driveState+0xfc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	3301      	adds	r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b28      	ldr	r3, [pc, #160]	; (8002a38 <driveState+0xfc>)
 8002996:	701a      	strb	r2, [r3, #0]
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <driveState+0x110>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d112      	bne.n	80029c6 <driveState+0x8a>
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <driveState+0x118>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <driveState+0x11c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d00c      	beq.n	80029c6 <driveState+0x8a>
		currentStateSM = Error_state;
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <driveState+0x120>)
 80029ae:	2203      	movs	r2, #3
 80029b0:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <driveState+0x124>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <driveState+0xec>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 80029be:	4b29      	ldr	r3, [pc, #164]	; (8002a64 <driveState+0x128>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
		return;
 80029c4:	e02e      	b.n	8002a24 <driveState+0xe8>
	}

	if (accessory == 1) {
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <driveState+0x12c>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d109      	bne.n	80029e2 <driveState+0xa6>
		currentStateSM = startingup_state;
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <driveState+0x120>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 80029d4:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <driveState+0x124>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <driveState+0xec>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
		return;
 80029e0:	e020      	b.n	8002a24 <driveState+0xe8>
	}

	if (currentstate == 2) {
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <driveState+0x130>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d102      	bne.n	80029f0 <driveState+0xb4>
		evcuMode();
 80029ea:	f001 fef1 	bl	80047d0 <evcuMode>
 80029ee:	e002      	b.n	80029f6 <driveState+0xba>
	}
	else
	{
		mode = false;
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <driveState+0x134>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <driveState+0x138>)
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <driveState+0x130>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d006      	beq.n	8002a10 <driveState+0xd4>
		_gearChanged = true;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <driveState+0x104>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <driveState+0x130>)
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <driveState+0x138>)
 8002a0e:	701a      	strb	r2, [r3, #0]
	}

	navigation();
 8002a10:	f7fe feaa 	bl	8001768 <navigation>

//	if (_modeChanged) {
//		//modeSelection(currentMode);	//This should be called using a flag _modeSelection
//		_modeSelection = true;
//	}
	if (rtn) { //rtn True when there is a error
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <driveState+0x13c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <driveState+0xe8>
		_allowNavigation = true;
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <driveState+0x140>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
		return;
 8002a22:	bf00      	nop
	}
}
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	2000000f 	.word	0x2000000f
 8002a2c:	20000482 	.word	0x20000482
 8002a30:	2000045a 	.word	0x2000045a
 8002a34:	200004c7 	.word	0x200004c7
 8002a38:	20000c69 	.word	0x20000c69
 8002a3c:	200004c6 	.word	0x200004c6
 8002a40:	200004b3 	.word	0x200004b3
 8002a44:	200004a7 	.word	0x200004a7
 8002a48:	2000049e 	.word	0x2000049e
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	200004ac 	.word	0x200004ac
 8002a54:	20000004 	.word	0x20000004
 8002a58:	2000047c 	.word	0x2000047c
 8002a5c:	20000484 	.word	0x20000484
 8002a60:	20000485 	.word	0x20000485
 8002a64:	200004ad 	.word	0x200004ad
 8002a68:	2000046e 	.word	0x2000046e
 8002a6c:	2000046c 	.word	0x2000046c
 8002a70:	20000415 	.word	0x20000415
 8002a74:	2000046d 	.word	0x2000046d
 8002a78:	20000481 	.word	0x20000481
 8002a7c:	200004a9 	.word	0x200004a9

08002a80 <chargeState>:

void chargeState(void) {
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	if (state_entry) {
 8002a84:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <chargeState+0xc0>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00f      	beq.n	8002aac <chargeState+0x2c>
		state_entry = false;
 8002a8c:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <chargeState+0xc0>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 8002a92:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <chargeState+0xc4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <chargeState+0xc8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <chargeState+0xcc>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <chargeState+0x2c>
			_errorSetIcon = false;
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <chargeState+0xd0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 8002aac:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <chargeState+0xd4>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <chargeState+0xd8>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <chargeState+0xdc>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <chargeState+0xe0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d009      	beq.n	8002ada <chargeState+0x5a>
		currentStateSM = startingup_state;
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <chargeState+0xe4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <chargeState+0xe8>)
 8002ace:	2202      	movs	r2, #2
 8002ad0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <chargeState+0xc0>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		return;
 8002ad8:	e02e      	b.n	8002b38 <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <chargeState+0xcc>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d113      	bne.n	8002b0a <chargeState+0x8a>
		currentStateSM = Error_state;
 8002ae2:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <chargeState+0xe4>)
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <chargeState+0xe8>)
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <chargeState+0xc0>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <chargeState+0xec>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <chargeState+0xcc>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d019      	beq.n	8002b36 <chargeState+0xb6>
			_errorSetIcon = false;
 8002b02:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <chargeState+0xd0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
		}
		return;
 8002b08:	e015      	b.n	8002b36 <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <chargeState+0xf0>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <chargeState+0xa0>
		_chargeComplete = true;
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <chargeState+0xf4>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <chargeState+0xf8>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
		return;
 8002b1e:	e00b      	b.n	8002b38 <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <chargeState+0xf8>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	f083 0301 	eor.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <chargeState+0xf8>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e000      	b.n	8002b38 <chargeState+0xb8>
		return;
 8002b36:	bf00      	nop
	}

}
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	2000000f 	.word	0x2000000f
 8002b44:	200004c7 	.word	0x200004c7
 8002b48:	200004a2 	.word	0x200004a2
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	200004ac 	.word	0x200004ac
 8002b54:	200004ae 	.word	0x200004ae
 8002b58:	200004a4 	.word	0x200004a4
 8002b5c:	200004a6 	.word	0x200004a6
 8002b60:	2000046c 	.word	0x2000046c
 8002b64:	20000484 	.word	0x20000484
 8002b68:	20000485 	.word	0x20000485
 8002b6c:	200004ad 	.word	0x200004ad
 8002b70:	200004a0 	.word	0x200004a0
 8002b74:	200004b0 	.word	0x200004b0
 8002b78:	200004af 	.word	0x200004af

08002b7c <errorState>:

void errorState(void) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0

	if (state_entry) {
 8002b80:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <errorState+0x194>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <errorState+0x44>
		state_entry = false;
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <errorState+0x194>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 8002b8e:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <errorState+0x198>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
		error_check = true;
 8002b94:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <errorState+0x19c>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 8002b9a:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <errorState+0x1a0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
		rtn = true;
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	; (8002d20 <errorState+0x1a4>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002ba6:	4b5f      	ldr	r3, [pc, #380]	; (8002d24 <errorState+0x1a8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 8002bac:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <errorState+0x1ac>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 8002bb2:	4b5e      	ldr	r3, [pc, #376]	; (8002d2c <errorState+0x1b0>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <errorState+0x44>
			_errorSetIcon = false;
 8002bba:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <errorState+0x1b4>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 8002bc0:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <errorState+0x1b8>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]

	setError();
 8002bc6:	f7fe f8d5 	bl	8000d74 <setError>

	_errorSetPopup = true; //Transmit pop-up
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <errorState+0x1bc>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 8002bd0:	4b57      	ldr	r3, [pc, #348]	; (8002d30 <errorState+0x1b4>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 8002bd6:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <errorState+0x1c0>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 8002bdc:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <errorState+0x1c4>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <errorState+0x74>
		_errorSetPopup = false;
 8002be4:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <errorState+0x1bc>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <errorState+0x1c0>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 8002bf0:	f001 fdee 	bl	80047d0 <evcuMode>

	if (previousStateSM == driving_state) {
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <errorState+0x1c8>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d123      	bne.n	8002c46 <errorState+0xca>
		modeSelection(currentMode);
 8002bfe:	4b52      	ldr	r3, [pc, #328]	; (8002d48 <errorState+0x1cc>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	f001 f9b1 	bl	8003f6c <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 8002c0a:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <errorState+0x1d0>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d019      	beq.n	8002c46 <errorState+0xca>
			err_previous = err_fullerror;
 8002c12:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <errorState+0x1d4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4f      	ldr	r2, [pc, #316]	; (8002d54 <errorState+0x1d8>)
 8002c18:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <errorState+0x1dc>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002c20:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <errorState+0x1c8>)
 8002c22:	2203      	movs	r2, #3
 8002c24:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <errorState+0x194>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <errorState+0x1d0>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <errorState+0x1bc>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002c38:	4b40      	ldr	r3, [pc, #256]	; (8002d3c <errorState+0x1c0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 8002c3e:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <errorState+0x1c4>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
			return;
 8002c44:	e063      	b.n	8002d0e <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 8002c46:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <errorState+0x1c8>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d10d      	bne.n	8002c6c <errorState+0xf0>
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <errorState+0x19c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <errorState+0xf0>
		charge_error = true;
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <errorState+0x1e0>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <errorState+0x194>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 8002c64:	200f      	movs	r0, #15
 8002c66:	f000 ff81 	bl	8003b6c <charging_UI>
		return;
 8002c6a:	e050      	b.n	8002d0e <errorState+0x192>
	}

	if (accessory == 1) {
 8002c6c:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <errorState+0x1e4>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d110      	bne.n	8002c96 <errorState+0x11a>
		err_previous = err_fullerror;
 8002c74:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <errorState+0x1d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a36      	ldr	r2, [pc, #216]	; (8002d54 <errorState+0x1d8>)
 8002c7a:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <errorState+0x1dc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <errorState+0x1c8>)
 8002c84:	2203      	movs	r2, #3
 8002c86:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <errorState+0x194>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <errorState+0x1bc>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 8002c94:	e03b      	b.n	8002d0e <errorState+0x192>
	}

	if (okay) {
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <errorState+0x1d0>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00e      	beq.n	8002cbc <errorState+0x140>
		okay = false;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <errorState+0x1d0>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <errorState+0x1a0>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <errorState+0x1bc>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002cb0:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <errorState+0x1c0>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 8002cb6:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <errorState+0x1c4>)
 8002cb8:	2201      	movs	r2, #1
 8002cba:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <errorState+0x1a4>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d024      	beq.n	8002d0e <errorState+0x192>
		if (err_State_Navigation) {
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <errorState+0x1a0>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 8002ccc:	f7fe fd4c 	bl	8001768 <navigation>
			_errorSetPopup = false;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <errorState+0x1bc>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <errorState+0x1c0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 8002cdc:	e016      	b.n	8002d0c <errorState+0x190>
			if (mode) {
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <errorState+0x1e8>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00f      	beq.n	8002d06 <errorState+0x18a>
				mode = false;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <errorState+0x1e8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <errorState+0x1bc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <errorState+0x1c0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <errorState+0x1cc>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 f934 	bl	8003f6c <modeSelection>
		return;
 8002d04:	e002      	b.n	8002d0c <errorState+0x190>
				_errorSetCode = true;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <errorState+0x1c0>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
		return;
 8002d0c:	bf00      	nop
	}
}
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2000000f 	.word	0x2000000f
 8002d14:	20000482 	.word	0x20000482
 8002d18:	2000049c 	.word	0x2000049c
 8002d1c:	20000480 	.word	0x20000480
 8002d20:	20000481 	.word	0x20000481
 8002d24:	200004af 	.word	0x200004af
 8002d28:	200004c7 	.word	0x200004c7
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	200004ac 	.word	0x200004ac
 8002d34:	200004a4 	.word	0x200004a4
 8002d38:	200004aa 	.word	0x200004aa
 8002d3c:	200004ab 	.word	0x200004ab
 8002d40:	200004ad 	.word	0x200004ad
 8002d44:	20000485 	.word	0x20000485
 8002d48:	2000048a 	.word	0x2000048a
 8002d4c:	20000412 	.word	0x20000412
 8002d50:	20000004 	.word	0x20000004
 8002d54:	2000047c 	.word	0x2000047c
 8002d58:	20000484 	.word	0x20000484
 8002d5c:	2000049f 	.word	0x2000049f
 8002d60:	2000046e 	.word	0x2000046e
 8002d64:	20000415 	.word	0x20000415

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d6e:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_MspInit+0x5c>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_MspInit+0x5c>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6193      	str	r3, [r2, #24]
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_MspInit+0x5c>)
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_MspInit+0x5c>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4a0e      	ldr	r2, [pc, #56]	; (8002dc4 <HAL_MspInit+0x5c>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d90:	61d3      	str	r3, [r2, #28]
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_MspInit+0x5c>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_MspInit+0x60>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_MspInit+0x60>)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000

08002dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <NMI_Handler+0x4>

08002dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <MemManage_Handler+0x4>

08002dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <BusFault_Handler+0x4>

08002de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <UsageFault_Handler+0x4>

08002dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e12:	f001 fdfb 	bl	8004a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <CAN1_RX0_IRQHandler+0x10>)
 8002e22:	f002 fa63 	bl	80052ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200003dc 	.word	0x200003dc

08002e30 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <CAN1_RX1_IRQHandler+0x10>)
 8002e36:	f002 fa59 	bl	80052ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200003dc 	.word	0x200003dc

08002e44 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <CAN1_SCE_IRQHandler+0x10>)
 8002e4a:	f002 fa4f 	bl	80052ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200003dc 	.word	0x200003dc

08002e58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 8002e5c:	2040      	movs	r0, #64	; 0x40
 8002e5e:	f003 f87b 	bl	8005f58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 8002e62:	2080      	movs	r0, #128	; 0x80
 8002e64:	f003 f878 	bl	8005f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <TIM2_IRQHandler+0x10>)
 8002e72:	f003 fe95 	bl	8006ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000c6c 	.word	0x20000c6c

08002e80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <USART3_IRQHandler+0x10>)
 8002e86:	f004 fb19 	bl	80074bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000cc8 	.word	0x20000cc8

08002e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002ebe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ec2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002ec6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002eca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002ed4:	2264      	movs	r2, #100	; 0x64
 8002ed6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ee4:	4813      	ldr	r0, [pc, #76]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002ee6:	f003 fdb1 	bl	8006a4c <HAL_TIM_Base_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ef0:	f7fe fc34 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	4619      	mov	r1, r3
 8002f00:	480c      	ldr	r0, [pc, #48]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002f02:	f003 ff55 	bl	8006db0 <HAL_TIM_ConfigClockSource>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f0c:	f7fe fc26 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f18:	463b      	mov	r3, r7
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4805      	ldr	r0, [pc, #20]	; (8002f34 <MX_TIM2_Init+0x94>)
 8002f1e:	f004 f931 	bl	8007184 <HAL_TIMEx_MasterConfigSynchronization>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f28:	f7fe fc18 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000c6c 	.word	0x20000c6c

08002f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f48:	d113      	bne.n	8002f72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_TIM_Base_MspInit+0x44>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a0b      	ldr	r2, [pc, #44]	; (8002f7c <HAL_TIM_Base_MspInit+0x44>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <HAL_TIM_Base_MspInit+0x44>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	201c      	movs	r0, #28
 8002f68:	f002 fcb1 	bl	80058ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f6c:	201c      	movs	r0, #28
 8002f6e:	f002 fcca 	bl	8005906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d054      	beq.n	8003048 <tick_count+0xc8>
 8002f9e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d854      	bhi.n	8003050 <tick_count+0xd0>
 8002fa6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002faa:	d049      	beq.n	8003040 <tick_count+0xc0>
 8002fac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002fb0:	d84e      	bhi.n	8003050 <tick_count+0xd0>
 8002fb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fb6:	d03f      	beq.n	8003038 <tick_count+0xb8>
 8002fb8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002fbc:	d848      	bhi.n	8003050 <tick_count+0xd0>
 8002fbe:	2bc8      	cmp	r3, #200	; 0xc8
 8002fc0:	d036      	beq.n	8003030 <tick_count+0xb0>
 8002fc2:	2bc8      	cmp	r3, #200	; 0xc8
 8002fc4:	d844      	bhi.n	8003050 <tick_count+0xd0>
 8002fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fc8:	d02e      	beq.n	8003028 <tick_count+0xa8>
 8002fca:	2ba0      	cmp	r3, #160	; 0xa0
 8002fcc:	d840      	bhi.n	8003050 <tick_count+0xd0>
 8002fce:	2b78      	cmp	r3, #120	; 0x78
 8002fd0:	d026      	beq.n	8003020 <tick_count+0xa0>
 8002fd2:	2b78      	cmp	r3, #120	; 0x78
 8002fd4:	d83c      	bhi.n	8003050 <tick_count+0xd0>
 8002fd6:	2b50      	cmp	r3, #80	; 0x50
 8002fd8:	d01e      	beq.n	8003018 <tick_count+0x98>
 8002fda:	2b50      	cmp	r3, #80	; 0x50
 8002fdc:	d838      	bhi.n	8003050 <tick_count+0xd0>
 8002fde:	2b28      	cmp	r3, #40	; 0x28
 8002fe0:	d016      	beq.n	8003010 <tick_count+0x90>
 8002fe2:	2b28      	cmp	r3, #40	; 0x28
 8002fe4:	d834      	bhi.n	8003050 <tick_count+0xd0>
 8002fe6:	2b14      	cmp	r3, #20
 8002fe8:	d00e      	beq.n	8003008 <tick_count+0x88>
 8002fea:	2b14      	cmp	r3, #20
 8002fec:	d830      	bhi.n	8003050 <tick_count+0xd0>
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d002      	beq.n	8002ff8 <tick_count+0x78>
 8002ff2:	2b0a      	cmp	r3, #10
 8002ff4:	d004      	beq.n	8003000 <tick_count+0x80>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 8002ff6:	e02b      	b.n	8003050 <tick_count+0xd0>
			timer_ptr->timeout_50ms = true;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	711a      	strb	r2, [r3, #4]
			break;
 8002ffe:	e028      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_0_5s = true;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	715a      	strb	r2, [r3, #5]
			break;
 8003006:	e024      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_1s = true;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	719a      	strb	r2, [r3, #6]
			break;
 800300e:	e020      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_2s = true;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	71da      	strb	r2, [r3, #7]
			break;
 8003016:	e01c      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_4s = true;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	721a      	strb	r2, [r3, #8]
			break;
 800301e:	e018      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_6s = true;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	725a      	strb	r2, [r3, #9]
			break;
 8003026:	e014      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_8s = true;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	729a      	strb	r2, [r3, #10]
			break;
 800302e:	e010      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_10s = true;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	72da      	strb	r2, [r3, #11]
			break;
 8003036:	e00c      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_15s = true;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	731a      	strb	r2, [r3, #12]
			break;
 800303e:	e008      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_30s = true;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	735a      	strb	r2, [r3, #13]
			break;
 8003046:	e004      	b.n	8003052 <tick_count+0xd2>
			timer_ptr->timeout_5m = true;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	739a      	strb	r2, [r3, #14]
			break;
 800304e:	e000      	b.n	8003052 <tick_count+0xd2>
			break;
 8003050:	bf00      	nop
	}
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
	_transmit_Function++;
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <transmit+0x1b0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <transmit+0x1b0>)
 800306a:	701a      	strb	r2, [r3, #0]
	//if (_transmit_Function == 1) {
		if (_realTimeData) {
 800306c:	4b68      	ldr	r3, [pc, #416]	; (8003210 <transmit+0x1b4>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <transmit+0x22>
			realTimeData();
 8003074:	f000 fac8 	bl	8003608 <realTimeData>
			_realTimeData = false;
 8003078:	4b65      	ldr	r3, [pc, #404]	; (8003210 <transmit+0x1b4>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
			//return;
		}
	//}

	//if (_transmit_Function == 1) {
		if (_oneTimeData) {
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <transmit+0x1b8>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d004      	beq.n	8003090 <transmit+0x34>
			oneTimeData();
 8003086:	f000 fbb9 	bl	80037fc <oneTimeData>
			_oneTimeData = false;
 800308a:	4b62      	ldr	r3, [pc, #392]	; (8003214 <transmit+0x1b8>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
			//return;
	//	}
	}

	//if (_transmit_Function == 2) {
		if (_startingUp) {
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <transmit+0x1bc>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <transmit+0x46>
			_startingUp = false;
 8003098:	4b5f      	ldr	r3, [pc, #380]	; (8003218 <transmit+0x1bc>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
			startingUp();
 800309e:	f000 f8e3 	bl	8003268 <startingUp>
			//return;
		}
	//}

	//if (_transmit_Function == 3) {
		if (_gearChanged) {
 80030a2:	4b5e      	ldr	r3, [pc, #376]	; (800321c <transmit+0x1c0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <transmit+0x5a>
			_gearChanged = false;
 80030aa:	4b5c      	ldr	r3, [pc, #368]	; (800321c <transmit+0x1c0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 80030b0:	f001 fabc 	bl	800462c <gearUpdate>
			return;
 80030b4:	e0a8      	b.n	8003208 <transmit+0x1ac>
		}
	//}

	//if (_transmit_Function == 4) {
		//_transmit_Function = 0;
		if (_modeSelection == 1 && currentstate == 2) {
 80030b6:	4b5a      	ldr	r3, [pc, #360]	; (8003220 <transmit+0x1c4>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10d      	bne.n	80030da <transmit+0x7e>
 80030be:	4b59      	ldr	r3, [pc, #356]	; (8003224 <transmit+0x1c8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d109      	bne.n	80030da <transmit+0x7e>
			modeSelection(currentMode);
 80030c6:	4b58      	ldr	r3, [pc, #352]	; (8003228 <transmit+0x1cc>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 ff4d 	bl	8003f6c <modeSelection>
			_modeSelection = 0;
 80030d2:	4b53      	ldr	r3, [pc, #332]	; (8003220 <transmit+0x1c4>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
			return;
 80030d8:	e096      	b.n	8003208 <transmit+0x1ac>
		}
		if (_modeSelection == 2) {
 80030da:	4b51      	ldr	r3, [pc, #324]	; (8003220 <transmit+0x1c4>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d112      	bne.n	8003108 <transmit+0xac>
			_modeSelection = 0;
 80030e2:	4b4f      	ldr	r3, [pc, #316]	; (8003220 <transmit+0x1c4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			modeSelection(modeCleared);
 80030e8:	2004      	movs	r0, #4
 80030ea:	f000 ff3f 	bl	8003f6c <modeSelection>
			if (_modeChangeDisabled) {
 80030ee:	4b4f      	ldr	r3, [pc, #316]	; (800322c <transmit+0x1d0>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <transmit+0xac>
				_setPoup = true;
 80030f6:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <transmit+0x1d4>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
				_modeChangeDisabled = false;
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <transmit+0x1d0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
				//_transmit_Function = 6;
				popUpNumber = 5;
 8003102:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <transmit+0x1d8>)
 8003104:	2205      	movs	r2, #5
 8003106:	701a      	strb	r2, [r3, #0]
			}
		}
	//}

	//if (_transmit_Function == 5) {
		if (currentStateSM == driving_state && _setDriverPage == true && !_setPoup) {
 8003108:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <transmit+0x1dc>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d114      	bne.n	800313c <transmit+0xe0>
 8003112:	4b4a      	ldr	r3, [pc, #296]	; (800323c <transmit+0x1e0>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <transmit+0xe0>
 800311a:	4b45      	ldr	r3, [pc, #276]	; (8003230 <transmit+0x1d4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	f083 0301 	eor.w	r3, r3, #1
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <transmit+0xe0>
			_setDriverPage = false;
 8003128:	4b44      	ldr	r3, [pc, #272]	; (800323c <transmit+0x1e0>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
			drivePageSetter(_drivePageSet);
 800312e:	4b44      	ldr	r3, [pc, #272]	; (8003240 <transmit+0x1e4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f947 	bl	80033c8 <drivePageSetter>
			return;
 800313a:	e065      	b.n	8003208 <transmit+0x1ac>
		}

	//}

	if (_transmit_Function == 6) {
 800313c:	4b33      	ldr	r3, [pc, #204]	; (800320c <transmit+0x1b0>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b06      	cmp	r3, #6
 8003142:	d122      	bne.n	800318a <transmit+0x12e>
		_transmit_Function = 0;
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <transmit+0x1b0>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
		popUpCounter++;
 800314a:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <transmit+0x1e8>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <transmit+0x1e8>)
 8003154:	701a      	strb	r2, [r3, #0]
		if (popUpCounter > 20) {
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <transmit+0x1e8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b14      	cmp	r3, #20
 800315c:	d90c      	bls.n	8003178 <transmit+0x11c>
			popUpCounter = 0;
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <transmit+0x1e8>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
			popUpNumber = 0;
 8003164:	4b33      	ldr	r3, [pc, #204]	; (8003234 <transmit+0x1d8>)
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
			if (inPopup) {
 800316a:	4b37      	ldr	r3, [pc, #220]	; (8003248 <transmit+0x1ec>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <transmit+0x11c>
				_setPoup = true;
 8003172:	4b2f      	ldr	r3, [pc, #188]	; (8003230 <transmit+0x1d4>)
 8003174:	2201      	movs	r2, #1
 8003176:	701a      	strb	r2, [r3, #0]
			}
		}
		//_setPoup and Popup Number should be set from else where
		if (_setPoup) {
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <transmit+0x1d4>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <transmit+0x12e>
			_setPoup = false;
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <transmit+0x1d4>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
			//HAL_UART_AbortTransmit(&huart3);
			popUpHandler();
 8003186:	f000 ff5d 	bl	8004044 <popUpHandler>
		}

	}

	if (_errorSetIcon) {
 800318a:	4b30      	ldr	r3, [pc, #192]	; (800324c <transmit+0x1f0>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <transmit+0x13a>
		errorIcon();
 8003192:	f000 fe11 	bl	8003db8 <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <transmit+0x1f4>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <transmit+0x158>
 800319e:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <transmit+0x1f8>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f083 0301 	eor.w	r3, r3, #1
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <transmit+0x158>
		errorCode();
 80031ac:	f000 fe80 	bl	8003eb0 <errorCode>
		errorPopup();
 80031b0:	f000 fe66 	bl	8003e80 <errorPopup>
	}

	if (_charingState) {
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <transmit+0x1fc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d025      	beq.n	8003208 <transmit+0x1ac>
		_charingState = false;
 80031bc:	4b26      	ldr	r3, [pc, #152]	; (8003258 <transmit+0x1fc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
		if (_transmit_Function == 3) {
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <transmit+0x1b0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d102      	bne.n	80031d0 <transmit+0x174>
			_transmit_Function = 0;
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <transmit+0x1b0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
		}

		if (_chargingUI) {
 80031d0:	4b22      	ldr	r3, [pc, #136]	; (800325c <transmit+0x200>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <transmit+0x190>
			charging_UI(charging_ui);
 80031d8:	200d      	movs	r0, #13
 80031da:	f000 fcc7 	bl	8003b6c <charging_UI>
			_chargingUI = false;
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <transmit+0x200>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
			_trasmitGlobal = 2;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <transmit+0x204>)
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
			return;
 80031ea:	e00d      	b.n	8003208 <transmit+0x1ac>
		}
		if (_chargeComplete) {
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <transmit+0x208>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <transmit+0x1ac>
			charging_UI(chargingcomp_ui);
 80031f4:	200e      	movs	r0, #14
 80031f6:	f000 fcb9 	bl	8003b6c <charging_UI>
			_chargeComplete = false;
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <transmit+0x208>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
			_trasmitGlobal = 3;
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <transmit+0x204>)
 8003202:	2203      	movs	r2, #3
 8003204:	701a      	strb	r2, [r3, #0]
			return;
 8003206:	bf00      	nop
		}
	}
}
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200004c2 	.word	0x200004c2
 8003210:	200004a4 	.word	0x200004a4
 8003214:	200004a6 	.word	0x200004a6
 8003218:	200004a2 	.word	0x200004a2
 800321c:	200004b3 	.word	0x200004b3
 8003220:	200004a7 	.word	0x200004a7
 8003224:	2000046c 	.word	0x2000046c
 8003228:	2000048a 	.word	0x2000048a
 800322c:	200004a8 	.word	0x200004a8
 8003230:	200004b8 	.word	0x200004b8
 8003234:	200004c4 	.word	0x200004c4
 8003238:	20000484 	.word	0x20000484
 800323c:	200004a5 	.word	0x200004a5
 8003240:	200004c6 	.word	0x200004c6
 8003244:	200004c3 	.word	0x200004c3
 8003248:	20000013 	.word	0x20000013
 800324c:	200004ac 	.word	0x200004ac
 8003250:	200004aa 	.word	0x200004aa
 8003254:	200004ad 	.word	0x200004ad
 8003258:	200004ae 	.word	0x200004ae
 800325c:	200004af 	.word	0x200004af
 8003260:	200004c7 	.word	0x200004c7
 8003264:	200004b0 	.word	0x200004b0

08003268 <startingUp>:

void startingUp(void) {
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0

	if (error_check) {
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <startingUp+0x104>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <startingUp+0x1c>
		if (err_State_Navigation == true) {
 8003274:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <startingUp+0x108>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <startingUp+0x1c>
			SysError_Shutdown_Page;
 800327c:	210a      	movs	r1, #10
 800327e:	483d      	ldr	r0, [pc, #244]	; (8003374 <startingUp+0x10c>)
 8003280:	f7fd f95a 	bl	8000538 <SaveToUART_TxBuffer>
		}
	}

	if (entry == true) {
 8003284:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <startingUp+0x110>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01e      	beq.n	80032ca <startingUp+0x62>
		if (_navigation) {
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <startingUp+0x114>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d016      	beq.n	80032c2 <startingUp+0x5a>
			if (_trasmitGlobal == MainMenuPages) {
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <startingUp+0x118>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d106      	bne.n	80032ac <startingUp+0x44>
				drivePageSetter(_drivePageSet);
 800329e:	4b39      	ldr	r3, [pc, #228]	; (8003384 <startingUp+0x11c>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f88f 	bl	80033c8 <drivePageSetter>
				return;
 80032aa:	e05d      	b.n	8003368 <startingUp+0x100>
			}
			_trasmitGlobal = MainMenuPages;
 80032ac:	4b34      	ldr	r3, [pc, #208]	; (8003380 <startingUp+0x118>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 80032b2:	210a      	movs	r1, #10
 80032b4:	4834      	ldr	r0, [pc, #208]	; (8003388 <startingUp+0x120>)
 80032b6:	f7fd f93f 	bl	8000538 <SaveToUART_TxBuffer>
			_navigation = false;
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <startingUp+0x114>)
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
			return;
 80032c0:	e052      	b.n	8003368 <startingUp+0x100>
		}
//		if (_trasmitGlobal == PressBrakePage && warning == 0) {
//			return;
//		}
//		_trasmitGlobal = PressBrakePage;
		Press_Brake_Page;
 80032c2:	210a      	movs	r1, #10
 80032c4:	4831      	ldr	r0, [pc, #196]	; (800338c <startingUp+0x124>)
 80032c6:	f7fd f937 	bl	8000538 <SaveToUART_TxBuffer>

	}

	if (start == 1) {
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <startingUp+0x128>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d132      	bne.n	8003338 <startingUp+0xd0>
		entry = false;
 80032d2:	4b29      	ldr	r3, [pc, #164]	; (8003378 <startingUp+0x110>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 80032d8:	4b2e      	ldr	r3, [pc, #184]	; (8003394 <startingUp+0x12c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <startingUp+0x7e>
			//bootAnimation();
			checklit = false;
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <startingUp+0x12c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <startingUp+0x130>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d112      	bne.n	8003314 <startingUp+0xac>
			ReadytoDrive_ON_Icon;
 80032ee:	2108      	movs	r1, #8
 80032f0:	482a      	ldr	r0, [pc, #168]	; (800339c <startingUp+0x134>)
 80032f2:	f7fd f921 	bl	8000538 <SaveToUART_TxBuffer>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 80032f6:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <startingUp+0x138>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00e      	beq.n	800331c <startingUp+0xb4>
				//ReadytoDrive_Page;
#ifdef Queue
		SaveToUART_TxBuffer(testData_Page, sizeof(testData_Page));
 80032fe:	210a      	movs	r1, #10
 8003300:	4828      	ldr	r0, [pc, #160]	; (80033a4 <startingUp+0x13c>)
 8003302:	f7fd f919 	bl	8000538 <SaveToUART_TxBuffer>
#endif
				_testPage = true;
 8003306:	4b28      	ldr	r3, [pc, #160]	; (80033a8 <startingUp+0x140>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
				startup = false;
 800330c:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <startingUp+0x138>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e003      	b.n	800331c <startingUp+0xb4>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 8003314:	210a      	movs	r1, #10
 8003316:	4825      	ldr	r0, [pc, #148]	; (80033ac <startingUp+0x144>)
 8003318:	f7fd f90e 	bl	8000538 <SaveToUART_TxBuffer>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <startingUp+0x148>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d104      	bne.n	800332e <startingUp+0xc6>
			Charge_Connection_Error_Popup_ON;
 8003324:	2108      	movs	r1, #8
 8003326:	4823      	ldr	r0, [pc, #140]	; (80033b4 <startingUp+0x14c>)
 8003328:	f7fd f906 	bl	8000538 <SaveToUART_TxBuffer>
 800332c:	e01c      	b.n	8003368 <startingUp+0x100>
		} else {
			Charge_Connection_Error_Popup_OFF;
 800332e:	2108      	movs	r1, #8
 8003330:	4821      	ldr	r0, [pc, #132]	; (80033b8 <startingUp+0x150>)
 8003332:	f7fd f901 	bl	8000538 <SaveToUART_TxBuffer>
 8003336:	e017      	b.n	8003368 <startingUp+0x100>
//		if (mode) {
//			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
//			//Final: Mode Change unavailable before ignition
//			mode = false;
//		}
		if (warning == 1) {
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <startingUp+0x154>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d103      	bne.n	8003348 <startingUp+0xe0>
			Press_Brake_Page;
 8003340:	210a      	movs	r1, #10
 8003342:	4812      	ldr	r0, [pc, #72]	; (800338c <startingUp+0x124>)
 8003344:	f7fd f8f8 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (warning == 2) {
 8003348:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <startingUp+0x154>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d103      	bne.n	8003358 <startingUp+0xf0>
			Mild_Error_ON_Icon;
 8003350:	2108      	movs	r1, #8
 8003352:	481b      	ldr	r0, [pc, #108]	; (80033c0 <startingUp+0x158>)
 8003354:	f7fd f8f0 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (warning == 3) {
 8003358:	4b18      	ldr	r3, [pc, #96]	; (80033bc <startingUp+0x154>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d103      	bne.n	8003368 <startingUp+0x100>
			Gear_Error_Page;
 8003360:	210a      	movs	r1, #10
 8003362:	4818      	ldr	r0, [pc, #96]	; (80033c4 <startingUp+0x15c>)
 8003364:	f7fd f8e8 	bl	8000538 <SaveToUART_TxBuffer>

		}
	}

}
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000049c 	.word	0x2000049c
 8003370:	20000480 	.word	0x20000480
 8003374:	200000e4 	.word	0x200000e4
 8003378:	20000009 	.word	0x20000009
 800337c:	200004a3 	.word	0x200004a3
 8003380:	200004c7 	.word	0x200004c7
 8003384:	200004c6 	.word	0x200004c6
 8003388:	20000030 	.word	0x20000030
 800338c:	2000003c 	.word	0x2000003c
 8003390:	20000470 	.word	0x20000470
 8003394:	2000000a 	.word	0x2000000a
 8003398:	2000046f 	.word	0x2000046f
 800339c:	200001a0 	.word	0x200001a0
 80033a0:	20000008 	.word	0x20000008
 80033a4:	20000144 	.word	0x20000144
 80033a8:	200004b7 	.word	0x200004b7
 80033ac:	20000054 	.word	0x20000054
 80033b0:	200004a1 	.word	0x200004a1
 80033b4:	20000288 	.word	0x20000288
 80033b8:	20000290 	.word	0x20000290
 80033bc:	20000475 	.word	0x20000475
 80033c0:	20000180 	.word	0x20000180
 80033c4:	20000048 	.word	0x20000048

080033c8 <drivePageSetter>:


uint8_t drivePageTransmit = 0;


void drivePageSetter(uitype_t page) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 80033d2:	4b78      	ldr	r3, [pc, #480]	; (80035b4 <drivePageSetter+0x1ec>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4b76      	ldr	r3, [pc, #472]	; (80035b4 <drivePageSetter+0x1ec>)
 80033dc:	701a      	strb	r2, [r3, #0]
	switch (page) {
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2b07      	cmp	r3, #7
 80033e2:	f200 80d8 	bhi.w	8003596 <drivePageSetter+0x1ce>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <drivePageSetter+0x24>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	0800340d 	.word	0x0800340d
 80033f0:	08003537 	.word	0x08003537
 80033f4:	0800354f 	.word	0x0800354f
 80033f8:	08003567 	.word	0x08003567
 80033fc:	08003597 	.word	0x08003597
 8003400:	08003597 	.word	0x08003597
 8003404:	08003597 	.word	0x08003597
 8003408:	0800357f 	.word	0x0800357f
	case front:
		//Checking for Errors
		if (error_check) {
 800340c:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <drivePageSetter+0x1f0>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d065      	beq.n	80034e0 <drivePageSetter+0x118>
			if (accessory == 1) {
 8003414:	4b69      	ldr	r3, [pc, #420]	; (80035bc <drivePageSetter+0x1f4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d11a      	bne.n	8003452 <drivePageSetter+0x8a>
				if (drivePageTransmit == 1) {
 800341c:	4b65      	ldr	r3, [pc, #404]	; (80035b4 <drivePageSetter+0x1ec>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d103      	bne.n	800342c <drivePageSetter+0x64>
					ReadytoDrive_OFF_Icon;
 8003424:	2108      	movs	r1, #8
 8003426:	4866      	ldr	r0, [pc, #408]	; (80035c0 <drivePageSetter+0x1f8>)
 8003428:	f7fd f886 	bl	8000538 <SaveToUART_TxBuffer>
				}
				if (drivePageTransmit == 2) {
 800342c:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <drivePageSetter+0x1ec>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d103      	bne.n	800343c <drivePageSetter+0x74>
					ModeClear_Icon;
 8003434:	2108      	movs	r1, #8
 8003436:	4863      	ldr	r0, [pc, #396]	; (80035c4 <drivePageSetter+0x1fc>)
 8003438:	f7fd f87e 	bl	8000538 <SaveToUART_TxBuffer>
				}
				if (drivePageTransmit == 3) {
 800343c:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <drivePageSetter+0x1ec>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d106      	bne.n	8003452 <drivePageSetter+0x8a>
					PowerLimitON_Icon;
 8003444:	2108      	movs	r1, #8
 8003446:	4860      	ldr	r0, [pc, #384]	; (80035c8 <drivePageSetter+0x200>)
 8003448:	f7fd f876 	bl	8000538 <SaveToUART_TxBuffer>
					drivePageTransmit = 0;
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <drivePageSetter+0x1ec>)
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 8003452:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <drivePageSetter+0x204>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <drivePageSetter+0xa8>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 800345a:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <drivePageSetter+0x1ec>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d106      	bne.n	8003470 <drivePageSetter+0xa8>
					SysError_Shutdown_Page;
 8003462:	210a      	movs	r1, #10
 8003464:	485a      	ldr	r0, [pc, #360]	; (80035d0 <drivePageSetter+0x208>)
 8003466:	f7fd f867 	bl	8000538 <SaveToUART_TxBuffer>
					drivePageTransmit = 0;
 800346a:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <drivePageSetter+0x1ec>)
 800346c:	2200      	movs	r2, #0
 800346e:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 8003470:	4b58      	ldr	r3, [pc, #352]	; (80035d4 <drivePageSetter+0x20c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	f040 808f 	bne.w	800359a <drivePageSetter+0x1d2>
				if (shutdown == 1) {
 800347c:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <drivePageSetter+0x210>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10a      	bne.n	800349a <drivePageSetter+0xd2>
					if (drivePageTransmit == 1) {
 8003484:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <drivePageSetter+0x1ec>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <drivePageSetter+0xd2>
						SysError_StopDrive_Page;
 800348c:	210a      	movs	r1, #10
 800348e:	4853      	ldr	r0, [pc, #332]	; (80035dc <drivePageSetter+0x214>)
 8003490:	f7fd f852 	bl	8000538 <SaveToUART_TxBuffer>
						drivePageTransmit = 0;
 8003494:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <drivePageSetter+0x1ec>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 800349a:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <drivePageSetter+0x210>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d17b      	bne.n	800359a <drivePageSetter+0x1d2>
					if (mode) {
 80034a2:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <drivePageSetter+0x218>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <drivePageSetter+0x100>
						if (drivePageTransmit == 1) {
 80034aa:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <drivePageSetter+0x1ec>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d106      	bne.n	80034c0 <drivePageSetter+0xf8>
							ModeChangeOFF_Page;
 80034b2:	2108      	movs	r1, #8
 80034b4:	484b      	ldr	r0, [pc, #300]	; (80035e4 <drivePageSetter+0x21c>)
 80034b6:	f7fd f83f 	bl	8000538 <SaveToUART_TxBuffer>
							drivePageTransmit = 0;
 80034ba:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <drivePageSetter+0x1ec>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 80034c0:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <drivePageSetter+0x218>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
#ifdef Queue
		SaveToUART_TxBuffer(testData_Page, sizeof(testData_Page));
#endif
			}
		}
		break;
 80034c6:	e068      	b.n	800359a <drivePageSetter+0x1d2>
						if (drivePageTransmit == 1) {
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <drivePageSetter+0x1ec>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d164      	bne.n	800359a <drivePageSetter+0x1d2>
							SysError_StopDrive_Page;
 80034d0:	210a      	movs	r1, #10
 80034d2:	4842      	ldr	r0, [pc, #264]	; (80035dc <drivePageSetter+0x214>)
 80034d4:	f7fd f830 	bl	8000538 <SaveToUART_TxBuffer>
							drivePageTransmit = 0;
 80034d8:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <drivePageSetter+0x1ec>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
		break;
 80034de:	e05c      	b.n	800359a <drivePageSetter+0x1d2>
			if (accessory == 1) {
 80034e0:	4b36      	ldr	r3, [pc, #216]	; (80035bc <drivePageSetter+0x1f4>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d11a      	bne.n	800351e <drivePageSetter+0x156>
				if (drivePageTransmit == 1) {
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <drivePageSetter+0x1ec>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d103      	bne.n	80034f8 <drivePageSetter+0x130>
					ReadytoDrive_OFF_Icon;
 80034f0:	2108      	movs	r1, #8
 80034f2:	4833      	ldr	r0, [pc, #204]	; (80035c0 <drivePageSetter+0x1f8>)
 80034f4:	f7fd f820 	bl	8000538 <SaveToUART_TxBuffer>
				if (drivePageTransmit == 2) {
 80034f8:	4b2e      	ldr	r3, [pc, #184]	; (80035b4 <drivePageSetter+0x1ec>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d103      	bne.n	8003508 <drivePageSetter+0x140>
					ModeClear_Icon;
 8003500:	2108      	movs	r1, #8
 8003502:	4830      	ldr	r0, [pc, #192]	; (80035c4 <drivePageSetter+0x1fc>)
 8003504:	f7fd f818 	bl	8000538 <SaveToUART_TxBuffer>
				if (drivePageTransmit == 3) {
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <drivePageSetter+0x1ec>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d106      	bne.n	800351e <drivePageSetter+0x156>
					Disengage_KillSwitch_Page;
 8003510:	210a      	movs	r1, #10
 8003512:	4835      	ldr	r0, [pc, #212]	; (80035e8 <drivePageSetter+0x220>)
 8003514:	f7fd f810 	bl	8000538 <SaveToUART_TxBuffer>
					drivePageTransmit = 0;
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <drivePageSetter+0x1ec>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
			if (_testPage) {
 800351e:	4b33      	ldr	r3, [pc, #204]	; (80035ec <drivePageSetter+0x224>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d039      	beq.n	800359a <drivePageSetter+0x1d2>
				_testPage = false;
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <drivePageSetter+0x224>)
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
		SaveToUART_TxBuffer(testData_Page, sizeof(testData_Page));
 800352c:	210a      	movs	r1, #10
 800352e:	4830      	ldr	r0, [pc, #192]	; (80035f0 <drivePageSetter+0x228>)
 8003530:	f7fd f802 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003534:	e031      	b.n	800359a <drivePageSetter+0x1d2>
	case trip:
		if (_menupage == 1) {
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <drivePageSetter+0x22c>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d02f      	beq.n	800359e <drivePageSetter+0x1d6>
			return;
		}
		_menupage = 1;
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <drivePageSetter+0x22c>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 8003544:	210a      	movs	r1, #10
 8003546:	482c      	ldr	r0, [pc, #176]	; (80035f8 <drivePageSetter+0x230>)
 8003548:	f7fc fff6 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 800354c:	e02e      	b.n	80035ac <drivePageSetter+0x1e4>
	case after_charge:
		if (_menupage == 2) {
 800354e:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <drivePageSetter+0x22c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d025      	beq.n	80035a2 <drivePageSetter+0x1da>
			return;
		}
		_menupage = 2;
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <drivePageSetter+0x22c>)
 8003558:	2202      	movs	r2, #2
 800355a:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 800355c:	210a      	movs	r1, #10
 800355e:	4827      	ldr	r0, [pc, #156]	; (80035fc <drivePageSetter+0x234>)
 8003560:	f7fc ffea 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003564:	e022      	b.n	80035ac <drivePageSetter+0x1e4>
	case info:
		if (_menupage == 3) {
 8003566:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <drivePageSetter+0x22c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d01b      	beq.n	80035a6 <drivePageSetter+0x1de>
			return;
		}
		_menupage = 3;
 800356e:	4b21      	ldr	r3, [pc, #132]	; (80035f4 <drivePageSetter+0x22c>)
 8003570:	2203      	movs	r2, #3
 8003572:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 8003574:	210a      	movs	r1, #10
 8003576:	4822      	ldr	r0, [pc, #136]	; (8003600 <drivePageSetter+0x238>)
 8003578:	f7fc ffde 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 800357c:	e016      	b.n	80035ac <drivePageSetter+0x1e4>
	case settings:
		if (_menupage == 4) {
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <drivePageSetter+0x22c>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d011      	beq.n	80035aa <drivePageSetter+0x1e2>
			return;
		}
		_menupage = 4;
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <drivePageSetter+0x22c>)
 8003588:	2204      	movs	r2, #4
 800358a:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 800358c:	210a      	movs	r1, #10
 800358e:	481d      	ldr	r0, [pc, #116]	; (8003604 <drivePageSetter+0x23c>)
 8003590:	f7fc ffd2 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003594:	e00a      	b.n	80035ac <drivePageSetter+0x1e4>
	default:
		break;
 8003596:	bf00      	nop
 8003598:	e008      	b.n	80035ac <drivePageSetter+0x1e4>
		break;
 800359a:	bf00      	nop
 800359c:	e006      	b.n	80035ac <drivePageSetter+0x1e4>
			return;
 800359e:	bf00      	nop
 80035a0:	e004      	b.n	80035ac <drivePageSetter+0x1e4>
			return;
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <drivePageSetter+0x1e4>
			return;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <drivePageSetter+0x1e4>
			return;
 80035aa:	bf00      	nop

	}

}
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000cc4 	.word	0x20000cc4
 80035b8:	2000049c 	.word	0x2000049c
 80035bc:	2000046e 	.word	0x2000046e
 80035c0:	200001a8 	.word	0x200001a8
 80035c4:	200001e8 	.word	0x200001e8
 80035c8:	20000190 	.word	0x20000190
 80035cc:	20000480 	.word	0x20000480
 80035d0:	200000e4 	.word	0x200000e4
 80035d4:	20000484 	.word	0x20000484
 80035d8:	20000476 	.word	0x20000476
 80035dc:	200000f0 	.word	0x200000f0
 80035e0:	20000415 	.word	0x20000415
 80035e4:	20000280 	.word	0x20000280
 80035e8:	20000030 	.word	0x20000030
 80035ec:	200004b7 	.word	0x200004b7
 80035f0:	20000144 	.word	0x20000144
 80035f4:	20000489 	.word	0x20000489
 80035f8:	20000060 	.word	0x20000060
 80035fc:	2000006c 	.word	0x2000006c
 8003600:	20000078 	.word	0x20000078
 8003604:	200000a8 	.word	0x200000a8

08003608 <realTimeData>:


void realTimeData(void) { //Realtime updatable data sending
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
// Priority Level 1
	priorityLevel1_counter++;
 800360c:	4b70      	ldr	r3, [pc, #448]	; (80037d0 <realTimeData+0x1c8>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <realTimeData+0x1c8>)
 8003616:	701a      	strb	r2, [r3, #0]
//Speed
	if (priorityLevel1_counter == 1) {
 8003618:	4b6d      	ldr	r3, [pc, #436]	; (80037d0 <realTimeData+0x1c8>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d115      	bne.n	800364c <realTimeData+0x44>
		strDATA[4] = 0x11; //
 8003620:	4b6c      	ldr	r3, [pc, #432]	; (80037d4 <realTimeData+0x1cc>)
 8003622:	2211      	movs	r2, #17
 8003624:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x00; //
 8003626:	4b6b      	ldr	r3, [pc, #428]	; (80037d4 <realTimeData+0x1cc>)
 8003628:	2200      	movs	r2, #0
 800362a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (test_speed & 0xFF);
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <realTimeData+0x1d0>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b68      	ldr	r3, [pc, #416]	; (80037d4 <realTimeData+0x1cc>)
 8003634:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (test_speed >> 8);
 8003636:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <realTimeData+0x1d0>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	b29b      	uxth	r3, r3
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <realTimeData+0x1cc>)
 8003642:	719a      	strb	r2, [r3, #6]
#ifdef Queue
		SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 8003644:	2108      	movs	r1, #8
 8003646:	4863      	ldr	r0, [pc, #396]	; (80037d4 <realTimeData+0x1cc>)
 8003648:	f7fc ff76 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//RPM
	if (priorityLevel1_counter == 2) {
 800364c:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <realTimeData+0x1c8>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d115      	bne.n	8003680 <realTimeData+0x78>
		strDATA[4] = 0x12;
 8003654:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <realTimeData+0x1cc>)
 8003656:	2212      	movs	r2, #18
 8003658:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 800365a:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <realTimeData+0x1cc>)
 800365c:	2250      	movs	r2, #80	; 0x50
 800365e:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (rpm_meter & 0xFF);
 8003660:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <realTimeData+0x1d4>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <realTimeData+0x1cc>)
 8003668:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (rpm_meter >> 8);
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <realTimeData+0x1d4>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b29b      	uxth	r3, r3
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <realTimeData+0x1cc>)
 8003676:	719a      	strb	r2, [r3, #6]
#ifdef Queue
		SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 8003678:	2108      	movs	r1, #8
 800367a:	4856      	ldr	r0, [pc, #344]	; (80037d4 <realTimeData+0x1cc>)
 800367c:	f7fc ff5c 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//Power Bar
	if (priorityLevel1_counter == 3) {
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <realTimeData+0x1c8>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d101      	bne.n	800368c <realTimeData+0x84>
#ifdef No_DMA
		powerMeter();
#endif
#ifdef Queue
		powerMeterQueue();
 8003688:	f000 feb8 	bl	80043fc <powerMeterQueue>
#endif
	}
//DC Current
	if (priorityLevel1_counter == 4) {
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <realTimeData+0x1c8>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b04      	cmp	r3, #4
 8003692:	f040 809a 	bne.w	80037ca <realTimeData+0x1c2>
		priorityLevel1_counter = 0;
 8003696:	4b4e      	ldr	r3, [pc, #312]	; (80037d0 <realTimeData+0x1c8>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
		realTime_counter++;
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <realTimeData+0x1d8>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b4e      	ldr	r3, [pc, #312]	; (80037e0 <realTimeData+0x1d8>)
 80036a6:	701a      	strb	r2, [r3, #0]
		if (realTime_counter == 1) {
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <realTimeData+0x1d8>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d122      	bne.n	80036f6 <realTimeData+0xee>
			if (currentstate == 4) {
 80036b0:	4b4c      	ldr	r3, [pc, #304]	; (80037e4 <realTimeData+0x1dc>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d106      	bne.n	80036c6 <realTimeData+0xbe>
				strDATA[4] = 0x12;
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <realTimeData+0x1cc>)
 80036ba:	2212      	movs	r2, #18
 80036bc:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x80;
 80036be:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <realTimeData+0x1cc>)
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	715a      	strb	r2, [r3, #5]
 80036c4:	e005      	b.n	80036d2 <realTimeData+0xca>
			} else {
				strDATA[4] = 0x12;
 80036c6:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <realTimeData+0x1cc>)
 80036c8:	2212      	movs	r2, #18
 80036ca:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x30;
 80036cc:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <realTimeData+0x1cc>)
 80036ce:	2230      	movs	r2, #48	; 0x30
 80036d0:	715a      	strb	r2, [r3, #5]
			}
			strDATA[6] = (dc_current >> 8);
 80036d2:	4b45      	ldr	r3, [pc, #276]	; (80037e8 <realTimeData+0x1e0>)
 80036d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d8:	121b      	asrs	r3, r3, #8
 80036da:	b21b      	sxth	r3, r3
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b3d      	ldr	r3, [pc, #244]	; (80037d4 <realTimeData+0x1cc>)
 80036e0:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (dc_current & 0xFF);
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <realTimeData+0x1e0>)
 80036e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <realTimeData+0x1cc>)
 80036ec:	71da      	strb	r2, [r3, #7]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 80036ee:	2108      	movs	r1, #8
 80036f0:	4838      	ldr	r0, [pc, #224]	; (80037d4 <realTimeData+0x1cc>)
 80036f2:	f7fc ff21 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
		}

//Lowest Cell Voltage
		if (realTime_counter == 2) {
 80036f6:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <realTimeData+0x1d8>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d115      	bne.n	800372a <realTimeData+0x122>
			strDATA[4] = 0x12;
 80036fe:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <realTimeData+0x1cc>)
 8003700:	2212      	movs	r2, #18
 8003702:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x20;
 8003704:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <realTimeData+0x1cc>)
 8003706:	2220      	movs	r2, #32
 8003708:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (lcell_voltage & 0xFF);
 800370a:	4b38      	ldr	r3, [pc, #224]	; (80037ec <realTimeData+0x1e4>)
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	4b30      	ldr	r3, [pc, #192]	; (80037d4 <realTimeData+0x1cc>)
 8003712:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (lcell_voltage >> 8);
 8003714:	4b35      	ldr	r3, [pc, #212]	; (80037ec <realTimeData+0x1e4>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	b29b      	uxth	r3, r3
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <realTimeData+0x1cc>)
 8003720:	719a      	strb	r2, [r3, #6]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 8003722:	2108      	movs	r1, #8
 8003724:	482b      	ldr	r0, [pc, #172]	; (80037d4 <realTimeData+0x1cc>)
 8003726:	f7fc ff07 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
		}

////Trip
		if (realTime_counter == 3) {
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <realTimeData+0x1d8>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d121      	bne.n	8003776 <realTimeData+0x16e>
			strDATA2[4] = 0x11;
 8003732:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <realTimeData+0x1e8>)
 8003734:	2211      	movs	r2, #17
 8003736:	711a      	strb	r2, [r3, #4]
			strDATA2[5] = 0x40;
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <realTimeData+0x1e8>)
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	715a      	strb	r2, [r3, #5]
			strDATA2[9] = (distance.trip & 0xFF);
 800373e:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <realTimeData+0x1ec>)
 8003740:	889b      	ldrh	r3, [r3, #4]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <realTimeData+0x1e8>)
 8003746:	725a      	strb	r2, [r3, #9]
			strDATA2[8] = (distance.trip >> 8);
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <realTimeData+0x1ec>)
 800374a:	889b      	ldrh	r3, [r3, #4]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	b29b      	uxth	r3, r3
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <realTimeData+0x1e8>)
 8003754:	721a      	strb	r2, [r3, #8]
			strDATA2[7] = (distance.trip >> 16);
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <realTimeData+0x1ec>)
 8003758:	889b      	ldrh	r3, [r3, #4]
 800375a:	141b      	asrs	r3, r3, #16
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <realTimeData+0x1e8>)
 8003760:	71da      	strb	r2, [r3, #7]
			strDATA2[6] = (distance.trip >> 24);
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <realTimeData+0x1ec>)
 8003764:	889b      	ldrh	r3, [r3, #4]
 8003766:	161b      	asrs	r3, r3, #24
 8003768:	b2da      	uxtb	r2, r3
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <realTimeData+0x1e8>)
 800376c:	719a      	strb	r2, [r3, #6]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 800376e:	2108      	movs	r1, #8
 8003770:	4818      	ldr	r0, [pc, #96]	; (80037d4 <realTimeData+0x1cc>)
 8003772:	f7fc fee1 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA2;
#endif
		}
//Power
		if (realTime_counter == 4) {
 8003776:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <realTimeData+0x1d8>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d125      	bne.n	80037ca <realTimeData+0x1c2>
			realTime_counter = 0;
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <realTimeData+0x1d8>)
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
			if (currentstate == 4) {
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <realTimeData+0x1dc>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d106      	bne.n	800379a <realTimeData+0x192>
				strDATA[4] = 0x12;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <realTimeData+0x1cc>)
 800378e:	2212      	movs	r2, #18
 8003790:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x60;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <realTimeData+0x1cc>)
 8003794:	2260      	movs	r2, #96	; 0x60
 8003796:	715a      	strb	r2, [r3, #5]
 8003798:	e005      	b.n	80037a6 <realTimeData+0x19e>
			} else {
				strDATA[4] = 0x11;
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <realTimeData+0x1cc>)
 800379c:	2211      	movs	r2, #17
 800379e:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x70;
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <realTimeData+0x1cc>)
 80037a2:	2270      	movs	r2, #112	; 0x70
 80037a4:	715a      	strb	r2, [r3, #5]
			}
			strDATA[7] = (power & 0xFF);
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <realTimeData+0x1f0>)
 80037a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <realTimeData+0x1cc>)
 80037b0:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (power >> 8);
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <realTimeData+0x1f0>)
 80037b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b8:	121b      	asrs	r3, r3, #8
 80037ba:	b21b      	sxth	r3, r3
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <realTimeData+0x1cc>)
 80037c0:	719a      	strb	r2, [r3, #6]
#ifdef Queue
			SaveToUART_TxBuffer(strDATA, sizeof(strDATA));
 80037c2:	2108      	movs	r1, #8
 80037c4:	4803      	ldr	r0, [pc, #12]	; (80037d4 <realTimeData+0x1cc>)
 80037c6:	f7fc feb7 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif
		}
	}
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200004c0 	.word	0x200004c0
 80037d4:	2000041c 	.word	0x2000041c
 80037d8:	20000458 	.word	0x20000458
 80037dc:	20000464 	.word	0x20000464
 80037e0:	200004bf 	.word	0x200004bf
 80037e4:	2000046c 	.word	0x2000046c
 80037e8:	20000468 	.word	0x20000468
 80037ec:	20000462 	.word	0x20000462
 80037f0:	20000424 	.word	0x20000424
 80037f4:	20000430 	.word	0x20000430
 80037f8:	2000046a 	.word	0x2000046a

080037fc <oneTimeData>:


void oneTimeData(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0

// Priority Level 2
	priorityLevel2_counter++;
 8003800:	4b1e      	ldr	r3, [pc, #120]	; (800387c <oneTimeData+0x80>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <oneTimeData+0x80>)
 800380a:	701a      	strb	r2, [r3, #0]
	} else {
		//DriveUnit_ON_Icon;
	}

//ODO
	if (priorityLevel2_counter == 1) {
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <oneTimeData+0x80>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d124      	bne.n	800385e <oneTimeData+0x62>
		if (realTime_counter == 2) {
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <oneTimeData+0x84>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d120      	bne.n	800385e <oneTimeData+0x62>
			strDATA2[4] = 0x11;
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <oneTimeData+0x88>)
 800381e:	2211      	movs	r2, #17
 8003820:	711a      	strb	r2, [r3, #4]
			strDATA2[5] = 0x20;
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <oneTimeData+0x88>)
 8003824:	2220      	movs	r2, #32
 8003826:	715a      	strb	r2, [r3, #5]
			strDATA2[9] = (distance.ODO & 0xFF);
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <oneTimeData+0x8c>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <oneTimeData+0x88>)
 8003830:	725a      	strb	r2, [r3, #9]
			strDATA2[8] = (distance.ODO >> 8);
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <oneTimeData+0x8c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <oneTimeData+0x88>)
 800383c:	721a      	strb	r2, [r3, #8]
			strDATA2[7] = (distance.ODO >> 16);
 800383e:	4b12      	ldr	r3, [pc, #72]	; (8003888 <oneTimeData+0x8c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <oneTimeData+0x88>)
 8003848:	71da      	strb	r2, [r3, #7]
			strDATA2[6] = (distance.ODO >> 24);
 800384a:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <oneTimeData+0x8c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	0e1b      	lsrs	r3, r3, #24
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <oneTimeData+0x88>)
 8003854:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA2,sizeof(strDATA2));
 8003856:	210a      	movs	r1, #10
 8003858:	480a      	ldr	r0, [pc, #40]	; (8003884 <oneTimeData+0x88>)
 800385a:	f7fc fe6d 	bl	8000538 <SaveToUART_TxBuffer>
#endif
		}
	}

//Pack voltage
	if (priorityLevel2_counter == 2) {
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <oneTimeData+0x80>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d12c      	bne.n	80038c0 <oneTimeData+0xc4>
		if (currentstate == 4) {
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <oneTimeData+0x90>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d112      	bne.n	8003894 <oneTimeData+0x98>
			strDATA[4] = 0x12;
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <oneTimeData+0x94>)
 8003870:	2212      	movs	r2, #18
 8003872:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <oneTimeData+0x94>)
 8003876:	2210      	movs	r2, #16
 8003878:	715a      	strb	r2, [r3, #5]
 800387a:	e011      	b.n	80038a0 <oneTimeData+0xa4>
 800387c:	200004c1 	.word	0x200004c1
 8003880:	200004bf 	.word	0x200004bf
 8003884:	20000424 	.word	0x20000424
 8003888:	20000430 	.word	0x20000430
 800388c:	2000046c 	.word	0x2000046c
 8003890:	2000041c 	.word	0x2000041c
		} else {
			strDATA[4] = 0x12;
 8003894:	4b95      	ldr	r3, [pc, #596]	; (8003aec <oneTimeData+0x2f0>)
 8003896:	2212      	movs	r2, #18
 8003898:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x10;
 800389a:	4b94      	ldr	r3, [pc, #592]	; (8003aec <oneTimeData+0x2f0>)
 800389c:	2210      	movs	r2, #16
 800389e:	715a      	strb	r2, [r3, #5]
		}
		strDATA[7] = (pack_voltage & 0xFF);
 80038a0:	4b93      	ldr	r3, [pc, #588]	; (8003af0 <oneTimeData+0x2f4>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b91      	ldr	r3, [pc, #580]	; (8003aec <oneTimeData+0x2f0>)
 80038a8:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (pack_voltage >> 8);
 80038aa:	4b91      	ldr	r3, [pc, #580]	; (8003af0 <oneTimeData+0x2f4>)
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b8d      	ldr	r3, [pc, #564]	; (8003aec <oneTimeData+0x2f0>)
 80038b6:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80038b8:	2108      	movs	r1, #8
 80038ba:	488c      	ldr	r0, [pc, #560]	; (8003aec <oneTimeData+0x2f0>)
 80038bc:	f7fc fe3c 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//Highest Cell Voltage
	if (priorityLevel2_counter == 3) {
 80038c0:	4b8c      	ldr	r3, [pc, #560]	; (8003af4 <oneTimeData+0x2f8>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d115      	bne.n	80038f4 <oneTimeData+0xf8>
		strDATA[4] = 0x12;
 80038c8:	4b88      	ldr	r3, [pc, #544]	; (8003aec <oneTimeData+0x2f0>)
 80038ca:	2212      	movs	r2, #18
 80038cc:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x70;
 80038ce:	4b87      	ldr	r3, [pc, #540]	; (8003aec <oneTimeData+0x2f0>)
 80038d0:	2270      	movs	r2, #112	; 0x70
 80038d2:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (hcell_voltage & 0xFF);
 80038d4:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <oneTimeData+0x2fc>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b84      	ldr	r3, [pc, #528]	; (8003aec <oneTimeData+0x2f0>)
 80038dc:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (hcell_voltage >> 8);
 80038de:	4b86      	ldr	r3, [pc, #536]	; (8003af8 <oneTimeData+0x2fc>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	4b80      	ldr	r3, [pc, #512]	; (8003aec <oneTimeData+0x2f0>)
 80038ea:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80038ec:	2108      	movs	r1, #8
 80038ee:	487f      	ldr	r0, [pc, #508]	; (8003aec <oneTimeData+0x2f0>)
 80038f0:	f7fc fe22 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif
	}

//Estimated Range
	if (priorityLevel2_counter == 4) {
 80038f4:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <oneTimeData+0x2f8>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d115      	bne.n	8003928 <oneTimeData+0x12c>
		strDATA[4] = 0x11;
 80038fc:	4b7b      	ldr	r3, [pc, #492]	; (8003aec <oneTimeData+0x2f0>)
 80038fe:	2211      	movs	r2, #17
 8003900:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x30;
 8003902:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <oneTimeData+0x2f0>)
 8003904:	2230      	movs	r2, #48	; 0x30
 8003906:	715a      	strb	r2, [r3, #5]
		//strDATA[7] = uint32_t(distance.range);
		//strDATA[6] = 0;
		strDATA[7] = (distance.range & 0xFF);
 8003908:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <oneTimeData+0x300>)
 800390a:	88db      	ldrh	r3, [r3, #6]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	4b77      	ldr	r3, [pc, #476]	; (8003aec <oneTimeData+0x2f0>)
 8003910:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.range >> 8);
 8003912:	4b7a      	ldr	r3, [pc, #488]	; (8003afc <oneTimeData+0x300>)
 8003914:	88db      	ldrh	r3, [r3, #6]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	b2da      	uxtb	r2, r3
 800391c:	4b73      	ldr	r3, [pc, #460]	; (8003aec <oneTimeData+0x2f0>)
 800391e:	719a      	strb	r2, [r3, #6]
		//strDATA[7] = (distance.range >> 16);
		//strDATA[6] = (distance.range >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003920:	2108      	movs	r1, #8
 8003922:	4872      	ldr	r0, [pc, #456]	; (8003aec <oneTimeData+0x2f0>)
 8003924:	f7fc fe08 	bl	8000538 <SaveToUART_TxBuffer>
//#ifdef No_Queue
//	Transmit_strDATA;
//#endif
//	}
//SOC - Battery Percentage
	if (priorityLevel2_counter == 5) {
 8003928:	4b72      	ldr	r3, [pc, #456]	; (8003af4 <oneTimeData+0x2f8>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b05      	cmp	r3, #5
 800392e:	d110      	bne.n	8003952 <oneTimeData+0x156>
		strDATA[4] = 0x11;
 8003930:	4b6e      	ldr	r3, [pc, #440]	; (8003aec <oneTimeData+0x2f0>)
 8003932:	2211      	movs	r2, #17
 8003934:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x10;
 8003936:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <oneTimeData+0x2f0>)
 8003938:	2210      	movs	r2, #16
 800393a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soc_value);
 800393c:	4b70      	ldr	r3, [pc, #448]	; (8003b00 <oneTimeData+0x304>)
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <oneTimeData+0x2f0>)
 8003942:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8003944:	4b69      	ldr	r3, [pc, #420]	; (8003aec <oneTimeData+0x2f0>)
 8003946:	2200      	movs	r2, #0
 8003948:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 800394a:	2108      	movs	r1, #8
 800394c:	4867      	ldr	r0, [pc, #412]	; (8003aec <oneTimeData+0x2f0>)
 800394e:	f7fc fdf3 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

	}
	if (priorityLevel2_counter == 6) {
 8003952:	4b68      	ldr	r3, [pc, #416]	; (8003af4 <oneTimeData+0x2f8>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b06      	cmp	r3, #6
 8003958:	d101      	bne.n	800395e <oneTimeData+0x162>
#ifdef No_DMA
		batteryBar();
#endif
#ifdef Queue
		batteryBarQueue();
 800395a:	f000 fbcd 	bl	80040f8 <batteryBarQueue>
#endif
	}
	//AVG SPEED
	if (priorityLevel2_counter == 7) {
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <oneTimeData+0x2f8>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d118      	bne.n	8003998 <oneTimeData+0x19c>
		priorityLevel2_counter = 0;
 8003966:	4b63      	ldr	r3, [pc, #396]	; (8003af4 <oneTimeData+0x2f8>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
		strDATA[4] = 0x11;
 800396c:	4b5f      	ldr	r3, [pc, #380]	; (8003aec <oneTimeData+0x2f0>)
 800396e:	2211      	movs	r2, #17
 8003970:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x52;
 8003972:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <oneTimeData+0x2f0>)
 8003974:	2252      	movs	r2, #82	; 0x52
 8003976:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.tripAvgSpeed & 0xFF);
 8003978:	4b60      	ldr	r3, [pc, #384]	; (8003afc <oneTimeData+0x300>)
 800397a:	891b      	ldrh	r3, [r3, #8]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <oneTimeData+0x2f0>)
 8003980:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.tripAvgSpeed >> 8);
 8003982:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <oneTimeData+0x300>)
 8003984:	891b      	ldrh	r3, [r3, #8]
 8003986:	0a1b      	lsrs	r3, r3, #8
 8003988:	b29b      	uxth	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	4b57      	ldr	r3, [pc, #348]	; (8003aec <oneTimeData+0x2f0>)
 800398e:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003990:	2108      	movs	r1, #8
 8003992:	4856      	ldr	r0, [pc, #344]	; (8003aec <oneTimeData+0x2f0>)
 8003994:	f7fc fdd0 	bl	8000538 <SaveToUART_TxBuffer>



// Priority Level 3

	if (_After_Charge_Page) {
 8003998:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <oneTimeData+0x308>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d05a      	beq.n	8003a56 <oneTimeData+0x25a>
		_After_Charge_Page = false;
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <oneTimeData+0x308>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
		//After charge trip
		strDATA[4] = 0x11;
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <oneTimeData+0x2f0>)
 80039a8:	2211      	movs	r2, #17
 80039aa:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x62;
 80039ac:	4b4f      	ldr	r3, [pc, #316]	; (8003aec <oneTimeData+0x2f0>)
 80039ae:	2262      	movs	r2, #98	; 0x62
 80039b0:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.trip & 0xFF);
 80039b2:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <oneTimeData+0x30c>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <oneTimeData+0x2f0>)
 80039ba:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.trip >> 8);
 80039bc:	4b52      	ldr	r3, [pc, #328]	; (8003b08 <oneTimeData+0x30c>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b49      	ldr	r3, [pc, #292]	; (8003aec <oneTimeData+0x2f0>)
 80039c8:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.trip >> 16);
		//	strDATA[6] = (afterChargeData.trip >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80039ca:	2108      	movs	r1, #8
 80039cc:	4847      	ldr	r0, [pc, #284]	; (8003aec <oneTimeData+0x2f0>)
 80039ce:	f7fc fdb3 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

// After charge average speed
		strDATA[4] = 0x11;
 80039d2:	4b46      	ldr	r3, [pc, #280]	; (8003aec <oneTimeData+0x2f0>)
 80039d4:	2211      	movs	r2, #17
 80039d6:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x58;
 80039d8:	4b44      	ldr	r3, [pc, #272]	; (8003aec <oneTimeData+0x2f0>)
 80039da:	2258      	movs	r2, #88	; 0x58
 80039dc:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.avarage_Speed & 0xFF);
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <oneTimeData+0x30c>)
 80039e0:	885b      	ldrh	r3, [r3, #2]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	4b41      	ldr	r3, [pc, #260]	; (8003aec <oneTimeData+0x2f0>)
 80039e6:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.avarage_Speed >> 8);
 80039e8:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <oneTimeData+0x30c>)
 80039ea:	885b      	ldrh	r3, [r3, #2]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <oneTimeData+0x2f0>)
 80039f4:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.avarage_Speed >> 16);
		//	strDATA[6] = (afterChargeData.avarage_Speed >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 80039f6:	2108      	movs	r1, #8
 80039f8:	483c      	ldr	r0, [pc, #240]	; (8003aec <oneTimeData+0x2f0>)
 80039fa:	f7fc fd9d 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

// After Charge Economy
		strDATA[4] = 0x11;
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <oneTimeData+0x2f0>)
 8003a00:	2211      	movs	r2, #17
 8003a02:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x56;
 8003a04:	4b39      	ldr	r3, [pc, #228]	; (8003aec <oneTimeData+0x2f0>)
 8003a06:	2256      	movs	r2, #86	; 0x56
 8003a08:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.economy & 0xFF);
 8003a0a:	4b3f      	ldr	r3, [pc, #252]	; (8003b08 <oneTimeData+0x30c>)
 8003a0c:	889b      	ldrh	r3, [r3, #4]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <oneTimeData+0x2f0>)
 8003a12:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.economy >> 8);
 8003a14:	4b3c      	ldr	r3, [pc, #240]	; (8003b08 <oneTimeData+0x30c>)
 8003a16:	889b      	ldrh	r3, [r3, #4]
 8003a18:	0a1b      	lsrs	r3, r3, #8
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	4b33      	ldr	r3, [pc, #204]	; (8003aec <oneTimeData+0x2f0>)
 8003a20:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.economy >> 16);
		//	strDATA[6] = (afterChargeData.economy >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003a22:	2108      	movs	r1, #8
 8003a24:	4831      	ldr	r0, [pc, #196]	; (8003aec <oneTimeData+0x2f0>)
 8003a26:	f7fc fd87 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif

// After charge Power
		strDATA[4] = 0x11;
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <oneTimeData+0x2f0>)
 8003a2c:	2211      	movs	r2, #17
 8003a2e:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x60;
 8003a30:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <oneTimeData+0x2f0>)
 8003a32:	2260      	movs	r2, #96	; 0x60
 8003a34:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (afterChargeData.power & 0xFF);
 8003a36:	4b34      	ldr	r3, [pc, #208]	; (8003b08 <oneTimeData+0x30c>)
 8003a38:	88db      	ldrh	r3, [r3, #6]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <oneTimeData+0x2f0>)
 8003a3e:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (afterChargeData.power >> 8);
 8003a40:	4b31      	ldr	r3, [pc, #196]	; (8003b08 <oneTimeData+0x30c>)
 8003a42:	88db      	ldrh	r3, [r3, #6]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4b28      	ldr	r3, [pc, #160]	; (8003aec <oneTimeData+0x2f0>)
 8003a4c:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (afterChargeData.power >> 16);
		//	strDATA[6] = (afterChargeData.power >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003a4e:	2108      	movs	r1, #8
 8003a50:	4826      	ldr	r0, [pc, #152]	; (8003aec <oneTimeData+0x2f0>)
 8003a52:	f7fc fd71 	bl	8000538 <SaveToUART_TxBuffer>
#ifdef No_Queue
	Transmit_strDATA;
#endif
	}

	if (_Trip_Summary_Page) {
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <oneTimeData+0x310>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02e      	beq.n	8003abc <oneTimeData+0x2c0>
		_Trip_Summary_Page = false;
 8003a5e:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <oneTimeData+0x310>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
//Trip Economy -------VP
		strDATA[4] = 0x11;
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <oneTimeData+0x2f0>)
 8003a66:	2211      	movs	r2, #17
 8003a68:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x50;
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <oneTimeData+0x2f0>)
 8003a6c:	2250      	movs	r2, #80	; 0x50
 8003a6e:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Economy & 0xFF);
 8003a70:	4b22      	ldr	r3, [pc, #136]	; (8003afc <oneTimeData+0x300>)
 8003a72:	895b      	ldrh	r3, [r3, #10]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <oneTimeData+0x2f0>)
 8003a78:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Economy >> 8);
 8003a7a:	4b20      	ldr	r3, [pc, #128]	; (8003afc <oneTimeData+0x300>)
 8003a7c:	895b      	ldrh	r3, [r3, #10]
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <oneTimeData+0x2f0>)
 8003a86:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (distance.trip_Economy >> 16);
		//	strDATA[6] = (distance.trip_Economy >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003a88:	2108      	movs	r1, #8
 8003a8a:	4818      	ldr	r0, [pc, #96]	; (8003aec <oneTimeData+0x2f0>)
 8003a8c:	f7fc fd54 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif

//Trip Power----------VP

		strDATA[4] = 0x11;
 8003a90:	4b16      	ldr	r3, [pc, #88]	; (8003aec <oneTimeData+0x2f0>)
 8003a92:	2211      	movs	r2, #17
 8003a94:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x54;
 8003a96:	4b15      	ldr	r3, [pc, #84]	; (8003aec <oneTimeData+0x2f0>)
 8003a98:	2254      	movs	r2, #84	; 0x54
 8003a9a:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (distance.trip_Power & 0xFF);
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <oneTimeData+0x300>)
 8003a9e:	899b      	ldrh	r3, [r3, #12]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <oneTimeData+0x2f0>)
 8003aa4:	71da      	strb	r2, [r3, #7]
		strDATA[6] = (distance.trip_Power >> 8);
 8003aa6:	4b15      	ldr	r3, [pc, #84]	; (8003afc <oneTimeData+0x300>)
 8003aa8:	899b      	ldrh	r3, [r3, #12]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <oneTimeData+0x2f0>)
 8003ab2:	719a      	strb	r2, [r3, #6]
		//	strDATA[7] = (distance.trip_Power >> 16);
		//	strDATA[6] = (distance.trip_Power >> 24);
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003ab4:	2108      	movs	r1, #8
 8003ab6:	480d      	ldr	r0, [pc, #52]	; (8003aec <oneTimeData+0x2f0>)
 8003ab8:	f7fc fd3e 	bl	8000538 <SaveToUART_TxBuffer>
	Transmit_strDATA;
#endif

	}

	if (_Battery_Info_Page) {
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <oneTimeData+0x314>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <oneTimeData+0x2ea>
		//SOH Battery Health
		strDATA[4] = 0x11;
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <oneTimeData+0x2f0>)
 8003ac6:	2211      	movs	r2, #17
 8003ac8:	711a      	strb	r2, [r3, #4]
		strDATA[5] = 0x66;
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <oneTimeData+0x2f0>)
 8003acc:	2266      	movs	r2, #102	; 0x66
 8003ace:	715a      	strb	r2, [r3, #5]
		strDATA[7] = (soh_value);
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <oneTimeData+0x318>)
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <oneTimeData+0x2f0>)
 8003ad6:	71da      	strb	r2, [r3, #7]
		strDATA[6] = 0;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <oneTimeData+0x2f0>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	719a      	strb	r2, [r3, #6]
#ifdef Queue
	SaveToUART_TxBuffer(strDATA,sizeof(strDATA));
 8003ade:	2108      	movs	r1, #8
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <oneTimeData+0x2f0>)
 8003ae2:	f7fc fd29 	bl	8000538 <SaveToUART_TxBuffer>
//	transferCount++;
//	if (transferCount >= 9) {
//		transferCount = 1;
//	}

}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	2000041c 	.word	0x2000041c
 8003af0:	2000045e 	.word	0x2000045e
 8003af4:	200004c1 	.word	0x200004c1
 8003af8:	20000460 	.word	0x20000460
 8003afc:	20000430 	.word	0x20000430
 8003b00:	2000045c 	.word	0x2000045c
 8003b04:	200004b9 	.word	0x200004b9
 8003b08:	20000440 	.word	0x20000440
 8003b0c:	200004ba 	.word	0x200004ba
 8003b10:	200004bb 	.word	0x200004bb
 8003b14:	2000045d 	.word	0x2000045d

08003b18 <vehicleInfo_UI>:



void vehicleInfo_UI(uitype_t InfoUI) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d010      	beq.n	8003b4a <vehicleInfo_UI+0x32>
 8003b28:	2b06      	cmp	r3, #6
 8003b2a:	dc13      	bgt.n	8003b54 <vehicleInfo_UI+0x3c>
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d002      	beq.n	8003b36 <vehicleInfo_UI+0x1e>
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d005      	beq.n	8003b40 <vehicleInfo_UI+0x28>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 8003b34:	e00e      	b.n	8003b54 <vehicleInfo_UI+0x3c>
		Battery_Info_Page;
 8003b36:	210a      	movs	r1, #10
 8003b38:	4809      	ldr	r0, [pc, #36]	; (8003b60 <vehicleInfo_UI+0x48>)
 8003b3a:	f7fc fcfd 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b3e:	e00a      	b.n	8003b56 <vehicleInfo_UI+0x3e>
		Motor_Info_Page;
 8003b40:	210a      	movs	r1, #10
 8003b42:	4808      	ldr	r0, [pc, #32]	; (8003b64 <vehicleInfo_UI+0x4c>)
 8003b44:	f7fc fcf8 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b48:	e005      	b.n	8003b56 <vehicleInfo_UI+0x3e>
		Inverter_Info_Page;
 8003b4a:	210a      	movs	r1, #10
 8003b4c:	4806      	ldr	r0, [pc, #24]	; (8003b68 <vehicleInfo_UI+0x50>)
 8003b4e:	f7fc fcf3 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b52:	e000      	b.n	8003b56 <vehicleInfo_UI+0x3e>
		break;
 8003b54:	bf00      	nop
	}
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000084 	.word	0x20000084
 8003b64:	20000090 	.word	0x20000090
 8003b68:	2000009c 	.word	0x2000009c

08003b6c <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	2b0f      	cmp	r3, #15
 8003b7a:	d010      	beq.n	8003b9e <charging_UI+0x32>
 8003b7c:	2b0f      	cmp	r3, #15
 8003b7e:	dc1b      	bgt.n	8003bb8 <charging_UI+0x4c>
 8003b80:	2b0d      	cmp	r3, #13
 8003b82:	d002      	beq.n	8003b8a <charging_UI+0x1e>
 8003b84:	2b0e      	cmp	r3, #14
 8003b86:	d005      	beq.n	8003b94 <charging_UI+0x28>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 8003b88:	e016      	b.n	8003bb8 <charging_UI+0x4c>
		Charging_Page;
 8003b8a:	210a      	movs	r1, #10
 8003b8c:	480e      	ldr	r0, [pc, #56]	; (8003bc8 <charging_UI+0x5c>)
 8003b8e:	f7fc fcd3 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b92:	e014      	b.n	8003bbe <charging_UI+0x52>
		ChargeComplete_Page;
 8003b94:	210a      	movs	r1, #10
 8003b96:	480d      	ldr	r0, [pc, #52]	; (8003bcc <charging_UI+0x60>)
 8003b98:	f7fc fcce 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003b9c:	e00f      	b.n	8003bbe <charging_UI+0x52>
		Charge_Error_Page;
 8003b9e:	210a      	movs	r1, #10
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <charging_UI+0x64>)
 8003ba2:	f7fc fcc9 	bl	8000538 <SaveToUART_TxBuffer>
		if (charge_error) {
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <charging_UI+0x68>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <charging_UI+0x50>
			Charge_Connection_Error_Popup_ON;
 8003bae:	2108      	movs	r1, #8
 8003bb0:	4809      	ldr	r0, [pc, #36]	; (8003bd8 <charging_UI+0x6c>)
 8003bb2:	f7fc fcc1 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003bb6:	e001      	b.n	8003bbc <charging_UI+0x50>
		break;
 8003bb8:	bf00      	nop
 8003bba:	e000      	b.n	8003bbe <charging_UI+0x52>
		break;
 8003bbc:	bf00      	nop
	}
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000108 	.word	0x20000108
 8003bcc:	20000114 	.word	0x20000114
 8003bd0:	20000120 	.word	0x20000120
 8003bd4:	2000049f 	.word	0x2000049f
 8003bd8:	20000288 	.word	0x20000288

08003bdc <settings_UI>:

void settings_UI(uitype_t SettingsMenu, uint8_t selectedOption) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	460a      	mov	r2, r1
 8003be6:	71fb      	strb	r3, [r7, #7]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71bb      	strb	r3, [r7, #6]
	switch (SettingsMenu) {
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	3b08      	subs	r3, #8
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d87a      	bhi.n	8003cea <settings_UI+0x10e>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <settings_UI+0x20>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c17 	.word	0x08003c17
 8003c04:	08003cd1 	.word	0x08003cd1
 8003c08:	08003cdb 	.word	0x08003cdb
	case vehicleMenu:
		General_Menu_Page;
 8003c0c:	210a      	movs	r1, #10
 8003c0e:	483a      	ldr	r0, [pc, #232]	; (8003cf8 <settings_UI+0x11c>)
 8003c10:	f7fc fc92 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003c14:	e06c      	b.n	8003cf0 <settings_UI+0x114>
	case systemMenu:
		System_Menu_Page;
 8003c16:	210a      	movs	r1, #10
 8003c18:	4838      	ldr	r0, [pc, #224]	; (8003cfc <settings_UI+0x120>)
 8003c1a:	f7fc fc8d 	bl	8000538 <SaveToUART_TxBuffer>
		if(timeChanged)
 8003c1e:	4b38      	ldr	r3, [pc, #224]	; (8003d00 <settings_UI+0x124>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <settings_UI+0x6e>
		{
			timeChanged = false;
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <settings_UI+0x124>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
			timeSet[11] = timerSetValueH;
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <settings_UI+0x128>)
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <settings_UI+0x12c>)
 8003c32:	72da      	strb	r2, [r3, #11]
			timeSet[12] = timerSetValueMin;
 8003c34:	4b35      	ldr	r3, [pc, #212]	; (8003d0c <settings_UI+0x130>)
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <settings_UI+0x12c>)
 8003c3a:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart3, timeSet, sizeof(timeSet), HAL_MAX_DELAY);
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c40:	220e      	movs	r2, #14
 8003c42:	4931      	ldr	r1, [pc, #196]	; (8003d08 <settings_UI+0x12c>)
 8003c44:	4832      	ldr	r0, [pc, #200]	; (8003d10 <settings_UI+0x134>)
 8003c46:	f003 fb62 	bl	800730e <HAL_UART_Transmit>
		}
		if(selectedOption == 0) {
 8003c4a:	79bb      	ldrb	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <settings_UI+0x88>
			TimeSetting_Button;
 8003c50:	2108      	movs	r1, #8
 8003c52:	4830      	ldr	r0, [pc, #192]	; (8003d14 <settings_UI+0x138>)
 8003c54:	f7fc fc70 	bl	8000538 <SaveToUART_TxBuffer>
			BrightnessSetting_Button_OFF;
 8003c58:	2108      	movs	r1, #8
 8003c5a:	482f      	ldr	r0, [pc, #188]	; (8003d18 <settings_UI+0x13c>)
 8003c5c:	f7fc fc6c 	bl	8000538 <SaveToUART_TxBuffer>

			selectedOption = 10;
 8003c60:	230a      	movs	r3, #10
 8003c62:	71bb      	strb	r3, [r7, #6]
		}
		if(selectedOption == 1)
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d109      	bne.n	8003c7e <settings_UI+0xa2>
		{
			BrightnessSetting_Button;
 8003c6a:	2108      	movs	r1, #8
 8003c6c:	482b      	ldr	r0, [pc, #172]	; (8003d1c <settings_UI+0x140>)
 8003c6e:	f7fc fc63 	bl	8000538 <SaveToUART_TxBuffer>
			TimeSetting_Button_OFF;
 8003c72:	2108      	movs	r1, #8
 8003c74:	482a      	ldr	r0, [pc, #168]	; (8003d20 <settings_UI+0x144>)
 8003c76:	f7fc fc5f 	bl	8000538 <SaveToUART_TxBuffer>
			selectedOption = 10;
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	71bb      	strb	r3, [r7, #6]
		}
		if (selectedOption == 4) {
 8003c7e:	79bb      	ldrb	r3, [r7, #6]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d110      	bne.n	8003ca6 <settings_UI+0xca>
			strDATA[4] = 0x13;
 8003c84:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <settings_UI+0x148>)
 8003c86:	2213      	movs	r2, #19
 8003c88:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x22;
 8003c8a:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <settings_UI+0x148>)
 8003c8c:	2222      	movs	r2, #34	; 0x22
 8003c8e:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 8003c90:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <settings_UI+0x148>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueH);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <settings_UI+0x128>)
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <settings_UI+0x148>)
 8003c9c:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	4820      	ldr	r0, [pc, #128]	; (8003d24 <settings_UI+0x148>)
 8003ca2:	f7fc fc49 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (selectedOption == 3) {
 8003ca6:	79bb      	ldrb	r3, [r7, #6]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d120      	bne.n	8003cee <settings_UI+0x112>
			strDATA[4] = 0x13;
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <settings_UI+0x148>)
 8003cae:	2213      	movs	r2, #19
 8003cb0:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x21;
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <settings_UI+0x148>)
 8003cb4:	2221      	movs	r2, #33	; 0x21
 8003cb6:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <settings_UI+0x148>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueMin);
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <settings_UI+0x130>)
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <settings_UI+0x148>)
 8003cc4:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 8003cc6:	2108      	movs	r1, #8
 8003cc8:	4816      	ldr	r0, [pc, #88]	; (8003d24 <settings_UI+0x148>)
 8003cca:	f7fc fc35 	bl	8000538 <SaveToUART_TxBuffer>
		}

		break;
 8003cce:	e00e      	b.n	8003cee <settings_UI+0x112>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 8003cd0:	210a      	movs	r1, #10
 8003cd2:	4815      	ldr	r0, [pc, #84]	; (8003d28 <settings_UI+0x14c>)
 8003cd4:	f7fc fc30 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003cd8:	e00a      	b.n	8003cf0 <settings_UI+0x114>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <settings_UI+0x150>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 8003ce0:	210a      	movs	r1, #10
 8003ce2:	4813      	ldr	r0, [pc, #76]	; (8003d30 <settings_UI+0x154>)
 8003ce4:	f7fc fc28 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003ce8:	e002      	b.n	8003cf0 <settings_UI+0x114>
	default:
		break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <settings_UI+0x114>
		break;
 8003cee:	bf00      	nop
	}
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200000b4 	.word	0x200000b4
 8003cfc:	200000c0 	.word	0x200000c0
 8003d00:	20000492 	.word	0x20000492
 8003d04:	20000490 	.word	0x20000490
 8003d08:	20000020 	.word	0x20000020
 8003d0c:	20000491 	.word	0x20000491
 8003d10:	20000cc8 	.word	0x20000cc8
 8003d14:	20000230 	.word	0x20000230
 8003d18:	20000248 	.word	0x20000248
 8003d1c:	20000240 	.word	0x20000240
 8003d20:	20000238 	.word	0x20000238
 8003d24:	2000041c 	.word	0x2000041c
 8003d28:	200000cc 	.word	0x200000cc
 8003d2c:	2000049b 	.word	0x2000049b
 8003d30:	200000d8 	.word	0x200000d8

08003d34 <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 8003d3e:	210a      	movs	r1, #10
 8003d40:	4817      	ldr	r0, [pc, #92]	; (8003da0 <selection_UI+0x6c>)
 8003d42:	f7fc fbf9 	bl	8000538 <SaveToUART_TxBuffer>
	switch (SettingsMenu) {
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	3b08      	subs	r3, #8
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d81e      	bhi.n	8003d8c <selection_UI+0x58>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <selection_UI+0x20>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d6f 	.word	0x08003d6f
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	08003d83 	.word	0x08003d83
	case vehicleMenu:
		Vehicle_Button;
 8003d64:	2108      	movs	r1, #8
 8003d66:	480f      	ldr	r0, [pc, #60]	; (8003da4 <selection_UI+0x70>)
 8003d68:	f7fc fbe6 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d6c:	e013      	b.n	8003d96 <selection_UI+0x62>
	case systemMenu:
		System_Button;
 8003d6e:	2108      	movs	r1, #8
 8003d70:	480d      	ldr	r0, [pc, #52]	; (8003da8 <selection_UI+0x74>)
 8003d72:	f7fc fbe1 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d76:	e00e      	b.n	8003d96 <selection_UI+0x62>
	case bluetoothMenu:
		Bluetooth_Button;
 8003d78:	2108      	movs	r1, #8
 8003d7a:	480c      	ldr	r0, [pc, #48]	; (8003dac <selection_UI+0x78>)
 8003d7c:	f7fc fbdc 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d80:	e009      	b.n	8003d96 <selection_UI+0x62>
	case errorsMenu:
		Error_Button;
 8003d82:	2108      	movs	r1, #8
 8003d84:	480a      	ldr	r0, [pc, #40]	; (8003db0 <selection_UI+0x7c>)
 8003d86:	f7fc fbd7 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d8a:	e004      	b.n	8003d96 <selection_UI+0x62>
	default:
		NO_Button;
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	4809      	ldr	r0, [pc, #36]	; (8003db4 <selection_UI+0x80>)
 8003d90:	f7fc fbd2 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003d94:	bf00      	nop
	}
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200000a8 	.word	0x200000a8
 8003da4:	20000208 	.word	0x20000208
 8003da8:	20000210 	.word	0x20000210
 8003dac:	20000218 	.word	0x20000218
 8003db0:	20000220 	.word	0x20000220
 8003db4:	20000228 	.word	0x20000228

08003db8 <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0

	if (error_on == true) {
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <errorIcon+0x8c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <errorIcon+0x16>
		Error_ON_Icon;
 8003dc4:	2108      	movs	r1, #8
 8003dc6:	4820      	ldr	r0, [pc, #128]	; (8003e48 <errorIcon+0x90>)
 8003dc8:	f7fc fbb6 	bl	8000538 <SaveToUART_TxBuffer>
 8003dcc:	e003      	b.n	8003dd6 <errorIcon+0x1e>
	} else {
		Error_OFF_Icon;
 8003dce:	2108      	movs	r1, #8
 8003dd0:	481e      	ldr	r0, [pc, #120]	; (8003e4c <errorIcon+0x94>)
 8003dd2:	f7fc fbb1 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (milderror_on == true) {
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <errorIcon+0x98>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <errorIcon+0x30>
		Mild_Error_ON_Icon;
 8003dde:	2108      	movs	r1, #8
 8003de0:	481c      	ldr	r0, [pc, #112]	; (8003e54 <errorIcon+0x9c>)
 8003de2:	f7fc fba9 	bl	8000538 <SaveToUART_TxBuffer>
 8003de6:	e003      	b.n	8003df0 <errorIcon+0x38>
	} else {
		Mild_Error_OFF_Icon;
 8003de8:	2108      	movs	r1, #8
 8003dea:	481b      	ldr	r0, [pc, #108]	; (8003e58 <errorIcon+0xa0>)
 8003dec:	f7fc fba4 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (service_on == true) {
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <errorIcon+0xa4>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <errorIcon+0x4a>
		Service_Error_ON_Icon;
 8003df8:	2108      	movs	r1, #8
 8003dfa:	4819      	ldr	r0, [pc, #100]	; (8003e60 <errorIcon+0xa8>)
 8003dfc:	f7fc fb9c 	bl	8000538 <SaveToUART_TxBuffer>
 8003e00:	e003      	b.n	8003e0a <errorIcon+0x52>
	} else {
		Service_Error_OFF_Icon;
 8003e02:	2108      	movs	r1, #8
 8003e04:	4817      	ldr	r0, [pc, #92]	; (8003e64 <errorIcon+0xac>)
 8003e06:	f7fc fb97 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (bat_temp_high == true) {
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <errorIcon+0xb0>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <errorIcon+0x64>
		Battery_High_Temp_Popup_ON;
 8003e12:	2108      	movs	r1, #8
 8003e14:	4815      	ldr	r0, [pc, #84]	; (8003e6c <errorIcon+0xb4>)
 8003e16:	f7fc fb8f 	bl	8000538 <SaveToUART_TxBuffer>
 8003e1a:	e003      	b.n	8003e24 <errorIcon+0x6c>
	} else {
		Battery_High_Temp_Popup_OFF;
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	4814      	ldr	r0, [pc, #80]	; (8003e70 <errorIcon+0xb8>)
 8003e20:	f7fc fb8a 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (aux_low_on == true) {
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <errorIcon+0xbc>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <errorIcon+0x7e>
		Battery_ON_Icon;
 8003e2c:	2108      	movs	r1, #8
 8003e2e:	4812      	ldr	r0, [pc, #72]	; (8003e78 <errorIcon+0xc0>)
 8003e30:	f7fc fb82 	bl	8000538 <SaveToUART_TxBuffer>
	} else {
		Battery_OFF_Icon;
	}
}
 8003e34:	e003      	b.n	8003e3e <errorIcon+0x86>
		Battery_OFF_Icon;
 8003e36:	2108      	movs	r1, #8
 8003e38:	4810      	ldr	r0, [pc, #64]	; (8003e7c <errorIcon+0xc4>)
 8003e3a:	f7fc fb7d 	bl	8000538 <SaveToUART_TxBuffer>
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000496 	.word	0x20000496
 8003e48:	20000160 	.word	0x20000160
 8003e4c:	20000168 	.word	0x20000168
 8003e50:	20000497 	.word	0x20000497
 8003e54:	20000180 	.word	0x20000180
 8003e58:	20000188 	.word	0x20000188
 8003e5c:	20000498 	.word	0x20000498
 8003e60:	20000170 	.word	0x20000170
 8003e64:	20000178 	.word	0x20000178
 8003e68:	20000499 	.word	0x20000499
 8003e6c:	20000250 	.word	0x20000250
 8003e70:	20000258 	.word	0x20000258
 8003e74:	2000049a 	.word	0x2000049a
 8003e78:	20000150 	.word	0x20000150
 8003e7c:	20000158 	.word	0x20000158

08003e80 <errorPopup>:

void errorPopup(void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <errorPopup+0x24>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d104      	bne.n	8003e96 <errorPopup+0x16>
		SystemError_Critical_Popup;
 8003e8c:	210a      	movs	r1, #10
 8003e8e:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <errorPopup+0x28>)
 8003e90:	f7fc fb52 	bl	8000538 <SaveToUART_TxBuffer>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 8003e94:	e003      	b.n	8003e9e <errorPopup+0x1e>
		SystemError_Mild_Popup_Page;
 8003e96:	210a      	movs	r1, #10
 8003e98:	4804      	ldr	r0, [pc, #16]	; (8003eac <errorPopup+0x2c>)
 8003e9a:	f7fc fb4d 	bl	8000538 <SaveToUART_TxBuffer>
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000479 	.word	0x20000479
 8003ea8:	20000138 	.word	0x20000138
 8003eac:	2000012c 	.word	0x2000012c

08003eb0 <errorCode>:

void errorCode(void) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 8003eb4:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <errorCode+0xac>)
 8003eb6:	2211      	movs	r2, #17
 8003eb8:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <errorCode+0xac>)
 8003ebc:	2294      	movs	r2, #148	; 0x94
 8003ebe:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003ec0:	4b26      	ldr	r3, [pc, #152]	; (8003f5c <errorCode+0xac>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <errorCode+0xb0>)
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <errorCode+0xac>)
 8003ecc:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003ece:	2108      	movs	r1, #8
 8003ed0:	4822      	ldr	r0, [pc, #136]	; (8003f5c <errorCode+0xac>)
 8003ed2:	f7fc fb31 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Critical
 8003ed6:	4b21      	ldr	r3, [pc, #132]	; (8003f5c <errorCode+0xac>)
 8003ed8:	2211      	movs	r2, #17
 8003eda:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 8003edc:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <errorCode+0xac>)
 8003ede:	2297      	movs	r2, #151	; 0x97
 8003ee0:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003ee2:	2108      	movs	r1, #8
 8003ee4:	481d      	ldr	r0, [pc, #116]	; (8003f5c <errorCode+0xac>)
 8003ee6:	f7fc fb27 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Mild
 8003eea:	4b1c      	ldr	r3, [pc, #112]	; (8003f5c <errorCode+0xac>)
 8003eec:	2211      	movs	r2, #17
 8003eee:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <errorCode+0xac>)
 8003ef2:	2295      	movs	r2, #149	; 0x95
 8003ef4:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <errorCode+0xac>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 8003efc:	4b19      	ldr	r3, [pc, #100]	; (8003f64 <errorCode+0xb4>)
 8003efe:	781a      	ldrb	r2, [r3, #0]
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <errorCode+0xac>)
 8003f02:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003f04:	2108      	movs	r1, #8
 8003f06:	4815      	ldr	r0, [pc, #84]	; (8003f5c <errorCode+0xac>)
 8003f08:	f7fc fb16 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Critical
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <errorCode+0xac>)
 8003f0e:	2211      	movs	r2, #17
 8003f10:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <errorCode+0xac>)
 8003f14:	2298      	movs	r2, #152	; 0x98
 8003f16:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003f18:	2108      	movs	r1, #8
 8003f1a:	4810      	ldr	r0, [pc, #64]	; (8003f5c <errorCode+0xac>)
 8003f1c:	f7fc fb0c 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Mild
 8003f20:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <errorCode+0xac>)
 8003f22:	2211      	movs	r2, #17
 8003f24:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <errorCode+0xac>)
 8003f28:	2296      	movs	r2, #150	; 0x96
 8003f2a:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <errorCode+0xac>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <errorCode+0xb8>)
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <errorCode+0xac>)
 8003f38:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	4807      	ldr	r0, [pc, #28]	; (8003f5c <errorCode+0xac>)
 8003f3e:	f7fc fafb 	bl	8000538 <SaveToUART_TxBuffer>

	strDATA[4] = 0x11; //System Error Critical
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <errorCode+0xac>)
 8003f44:	2211      	movs	r2, #17
 8003f46:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <errorCode+0xac>)
 8003f4a:	2299      	movs	r2, #153	; 0x99
 8003f4c:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003f4e:	2108      	movs	r1, #8
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <errorCode+0xac>)
 8003f52:	f7fc faf1 	bl	8000538 <SaveToUART_TxBuffer>

}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2000041c 	.word	0x2000041c
 8003f60:	20000477 	.word	0x20000477
 8003f64:	20000478 	.word	0x20000478
 8003f68:	20000479 	.word	0x20000479

08003f6c <modeSelection>:

void modeSelection(uimode_t currentMode) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
//	if (!_modeChanged) {
//		drivePageSetter(currentPage);
//	}
	if (currentMode == modeCleared) {
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d104      	bne.n	8003f86 <modeSelection+0x1a>
		ModeClear_Icon;
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4828      	ldr	r0, [pc, #160]	; (8004020 <modeSelection+0xb4>)
 8003f80:	f7fc fada 	bl	8000538 <SaveToUART_TxBuffer>
		return;
 8003f84:	e048      	b.n	8004018 <modeSelection+0xac>
//	if (mode_count > 15) {
//		rtn = true;
//		mode_count = 0;
//	}

	switch (currentMode) {
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d02b      	beq.n	8003fe4 <modeSelection+0x78>
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	dc3c      	bgt.n	800400a <modeSelection+0x9e>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <modeSelection+0x2e>
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d00c      	beq.n	8003fb2 <modeSelection+0x46>
			//SportMode_Popup;
			_modeChanged = false;
		}
		break;
	default:
		break;
 8003f98:	e037      	b.n	800400a <modeSelection+0x9e>
		if (modeIcon) {
 8003f9a:	4b22      	ldr	r3, [pc, #136]	; (8004024 <modeSelection+0xb8>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d035      	beq.n	800400e <modeSelection+0xa2>
			NormalMode_Icon;
 8003fa2:	2108      	movs	r1, #8
 8003fa4:	4820      	ldr	r0, [pc, #128]	; (8004028 <modeSelection+0xbc>)
 8003fa6:	f7fc fac7 	bl	8000538 <SaveToUART_TxBuffer>
			modeIcon = false;
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <modeSelection+0xb8>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
		break;
 8003fb0:	e02d      	b.n	800400e <modeSelection+0xa2>
		if (mode_evcu == 1) {
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	; (800402c <modeSelection+0xc0>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d104      	bne.n	8003fc4 <modeSelection+0x58>
			PowerLimitON_Icon;
 8003fba:	2108      	movs	r1, #8
 8003fbc:	481c      	ldr	r0, [pc, #112]	; (8004030 <modeSelection+0xc4>)
 8003fbe:	f7fc fabb 	bl	8000538 <SaveToUART_TxBuffer>
 8003fc2:	e003      	b.n	8003fcc <modeSelection+0x60>
			PowerLimitOFF_Icon;
 8003fc4:	2108      	movs	r1, #8
 8003fc6:	481b      	ldr	r0, [pc, #108]	; (8004034 <modeSelection+0xc8>)
 8003fc8:	f7fc fab6 	bl	8000538 <SaveToUART_TxBuffer>
		if (modeIcon) {
 8003fcc:	4b15      	ldr	r3, [pc, #84]	; (8004024 <modeSelection+0xb8>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01e      	beq.n	8004012 <modeSelection+0xa6>
			modeIcon = false;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <modeSelection+0xb8>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
			EcoMode_Icon;
 8003fda:	2108      	movs	r1, #8
 8003fdc:	4816      	ldr	r0, [pc, #88]	; (8004038 <modeSelection+0xcc>)
 8003fde:	f7fc faab 	bl	8000538 <SaveToUART_TxBuffer>
		break;
 8003fe2:	e016      	b.n	8004012 <modeSelection+0xa6>
		if (modeIcon) {
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <modeSelection+0xb8>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <modeSelection+0x8e>
			modeIcon = false;
 8003fec:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <modeSelection+0xb8>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 8003ff2:	2108      	movs	r1, #8
 8003ff4:	4811      	ldr	r0, [pc, #68]	; (800403c <modeSelection+0xd0>)
 8003ff6:	f7fc fa9f 	bl	8000538 <SaveToUART_TxBuffer>
		if (_modeChanged) {
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <modeSelection+0xd4>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <modeSelection+0xaa>
			_modeChanged = false;
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <modeSelection+0xd4>)
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
		break;
 8004008:	e005      	b.n	8004016 <modeSelection+0xaa>
		break;
 800400a:	bf00      	nop
 800400c:	e004      	b.n	8004018 <modeSelection+0xac>
		break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <modeSelection+0xac>
		break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <modeSelection+0xac>
		break;
 8004016:	bf00      	nop
	}
}
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200001e8 	.word	0x200001e8
 8004024:	2000049e 	.word	0x2000049e
 8004028:	200001d8 	.word	0x200001d8
 800402c:	20000474 	.word	0x20000474
 8004030:	20000190 	.word	0x20000190
 8004034:	20000198 	.word	0x20000198
 8004038:	200001d0 	.word	0x200001d0
 800403c:	200001e0 	.word	0x200001e0
 8004040:	200004b1 	.word	0x200004b1

08004044 <popUpHandler>:

void popUpHandler(void) {
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
	//Set popup priority Here

	switch (popUpNumber) {
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <popUpHandler+0x94>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b05      	cmp	r3, #5
 800404e:	d83f      	bhi.n	80040d0 <popUpHandler+0x8c>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <popUpHandler+0x14>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	08004071 	.word	0x08004071
 800405c:	08004081 	.word	0x08004081
 8004060:	08004091 	.word	0x08004091
 8004064:	080040a1 	.word	0x080040a1
 8004068:	080040b1 	.word	0x080040b1
 800406c:	080040c1 	.word	0x080040c1
	case 0:
		popUp_OFF;
 8004070:	2108      	movs	r1, #8
 8004072:	481a      	ldr	r0, [pc, #104]	; (80040dc <popUpHandler+0x98>)
 8004074:	f7fc fa60 	bl	8000538 <SaveToUART_TxBuffer>
		//Battery_High_Temp_Popup_OFF;
		inPopup = false;
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <popUpHandler+0x9c>)
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]
		break;
 800407e:	e028      	b.n	80040d2 <popUpHandler+0x8e>
	case 1:
		NormalMode_Popup;
 8004080:	2108      	movs	r1, #8
 8004082:	4818      	ldr	r0, [pc, #96]	; (80040e4 <popUpHandler+0xa0>)
 8004084:	f7fc fa58 	bl	8000538 <SaveToUART_TxBuffer>
		//Battery_High_Temp_Popup_ON;
		inPopup = true;
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <popUpHandler+0x9c>)
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
		break;
 800408e:	e020      	b.n	80040d2 <popUpHandler+0x8e>
	case 2:
		EcoMode_Popup;
 8004090:	2108      	movs	r1, #8
 8004092:	4815      	ldr	r0, [pc, #84]	; (80040e8 <popUpHandler+0xa4>)
 8004094:	f7fc fa50 	bl	8000538 <SaveToUART_TxBuffer>
		//Battery_High_Temp_Popup_ON;
		inPopup = true;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <popUpHandler+0x9c>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
		break;
 800409e:	e018      	b.n	80040d2 <popUpHandler+0x8e>
	case 3:
		SportMode_Popup;
 80040a0:	2108      	movs	r1, #8
 80040a2:	4812      	ldr	r0, [pc, #72]	; (80040ec <popUpHandler+0xa8>)
 80040a4:	f7fc fa48 	bl	8000538 <SaveToUART_TxBuffer>
		//Battery_High_Temp_Popup_ON;
		inPopup = true;
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <popUpHandler+0x9c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
		break;
 80040ae:	e010      	b.n	80040d2 <popUpHandler+0x8e>
	case 4:
		ModeChangeOFF_Page;
 80040b0:	2108      	movs	r1, #8
 80040b2:	480f      	ldr	r0, [pc, #60]	; (80040f0 <popUpHandler+0xac>)
 80040b4:	f7fc fa40 	bl	8000538 <SaveToUART_TxBuffer>
		inPopup = true;
 80040b8:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <popUpHandler+0x9c>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
		break;
 80040be:	e008      	b.n	80040d2 <popUpHandler+0x8e>
#ifdef No_DMA
	HAL_UART_Transmit(&huart3, Tuk, sizeof(Tuk),
	HAL_MAX_DELAY);
#endif
#ifdef Queue
	SaveToUART_TxBuffer(Tuk, sizeof(Tuk));
 80040c0:	210a      	movs	r1, #10
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <popUpHandler+0xb0>)
 80040c4:	f7fc fa38 	bl	8000538 <SaveToUART_TxBuffer>
#endif
		inPopup = true;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <popUpHandler+0x9c>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
		break;
 80040ce:	e000      	b.n	80040d2 <popUpHandler+0x8e>

	default:
		break;
 80040d0:	bf00      	nop
	}

}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200004c4 	.word	0x200004c4
 80040dc:	20000278 	.word	0x20000278
 80040e0:	20000013 	.word	0x20000013
 80040e4:	20000268 	.word	0x20000268
 80040e8:	20000260 	.word	0x20000260
 80040ec:	20000270 	.word	0x20000270
 80040f0:	20000280 	.word	0x20000280
 80040f4:	200000fc 	.word	0x200000fc

080040f8 <batteryBarQueue>:
		HAL_MAX_DELAY);
#endif
	}
}

void batteryBarQueue(void) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	if (soc_value <= 5) {
 80040fc:	4b9c      	ldr	r3, [pc, #624]	; (8004370 <batteryBarQueue+0x278>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b05      	cmp	r3, #5
 8004102:	d807      	bhi.n	8004114 <batteryBarQueue+0x1c>

		SaveToUART_TxBuffer(bat0, sizeof(bat0));
 8004104:	2108      	movs	r1, #8
 8004106:	489b      	ldr	r0, [pc, #620]	; (8004374 <batteryBarQueue+0x27c>)
 8004108:	f7fc fa16 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotRedON, sizeof(BotRedON));
 800410c:	2108      	movs	r1, #8
 800410e:	489a      	ldr	r0, [pc, #616]	; (8004378 <batteryBarQueue+0x280>)
 8004110:	f7fc fa12 	bl	8000538 <SaveToUART_TxBuffer>

	}
	if (6 <= soc_value && soc_value <= 10) {
 8004114:	4b96      	ldr	r3, [pc, #600]	; (8004370 <batteryBarQueue+0x278>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b05      	cmp	r3, #5
 800411a:	d90b      	bls.n	8004134 <batteryBarQueue+0x3c>
 800411c:	4b94      	ldr	r3, [pc, #592]	; (8004370 <batteryBarQueue+0x278>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b0a      	cmp	r3, #10
 8004122:	d807      	bhi.n	8004134 <batteryBarQueue+0x3c>

		SaveToUART_TxBuffer(bat5, sizeof(bat5));
 8004124:	2108      	movs	r1, #8
 8004126:	4895      	ldr	r0, [pc, #596]	; (800437c <batteryBarQueue+0x284>)
 8004128:	f7fc fa06 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotRedON, sizeof(BotRedON));
 800412c:	2108      	movs	r1, #8
 800412e:	4892      	ldr	r0, [pc, #584]	; (8004378 <batteryBarQueue+0x280>)
 8004130:	f7fc fa02 	bl	8000538 <SaveToUART_TxBuffer>

	}
	if (11 <= soc_value && soc_value <= 15) {
 8004134:	4b8e      	ldr	r3, [pc, #568]	; (8004370 <batteryBarQueue+0x278>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b0a      	cmp	r3, #10
 800413a:	d90b      	bls.n	8004154 <batteryBarQueue+0x5c>
 800413c:	4b8c      	ldr	r3, [pc, #560]	; (8004370 <batteryBarQueue+0x278>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d807      	bhi.n	8004154 <batteryBarQueue+0x5c>

		SaveToUART_TxBuffer(bat10, sizeof(bat10));
 8004144:	2108      	movs	r1, #8
 8004146:	488e      	ldr	r0, [pc, #568]	; (8004380 <batteryBarQueue+0x288>)
 8004148:	f7fc f9f6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotRedON, sizeof(BotRedON));
 800414c:	2108      	movs	r1, #8
 800414e:	488a      	ldr	r0, [pc, #552]	; (8004378 <batteryBarQueue+0x280>)
 8004150:	f7fc f9f2 	bl	8000538 <SaveToUART_TxBuffer>

	}
	if (16 <= soc_value && soc_value <= 20) {
 8004154:	4b86      	ldr	r3, [pc, #536]	; (8004370 <batteryBarQueue+0x278>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b0f      	cmp	r3, #15
 800415a:	d90b      	bls.n	8004174 <batteryBarQueue+0x7c>
 800415c:	4b84      	ldr	r3, [pc, #528]	; (8004370 <batteryBarQueue+0x278>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b14      	cmp	r3, #20
 8004162:	d807      	bhi.n	8004174 <batteryBarQueue+0x7c>

		SaveToUART_TxBuffer(bat15, sizeof(bat15));
 8004164:	2108      	movs	r1, #8
 8004166:	4887      	ldr	r0, [pc, #540]	; (8004384 <batteryBarQueue+0x28c>)
 8004168:	f7fc f9e6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotRedON, sizeof(BotRedON));
 800416c:	2108      	movs	r1, #8
 800416e:	4882      	ldr	r0, [pc, #520]	; (8004378 <batteryBarQueue+0x280>)
 8004170:	f7fc f9e2 	bl	8000538 <SaveToUART_TxBuffer>

	}
	if (21 <= soc_value && soc_value <= 25) {
 8004174:	4b7e      	ldr	r3, [pc, #504]	; (8004370 <batteryBarQueue+0x278>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b14      	cmp	r3, #20
 800417a:	d90b      	bls.n	8004194 <batteryBarQueue+0x9c>
 800417c:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <batteryBarQueue+0x278>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b19      	cmp	r3, #25
 8004182:	d807      	bhi.n	8004194 <batteryBarQueue+0x9c>

		SaveToUART_TxBuffer(bat20, sizeof(bat20));
 8004184:	2108      	movs	r1, #8
 8004186:	4880      	ldr	r0, [pc, #512]	; (8004388 <batteryBarQueue+0x290>)
 8004188:	f7fc f9d6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotOrangeON, sizeof(BotOrangeON));
 800418c:	2108      	movs	r1, #8
 800418e:	487f      	ldr	r0, [pc, #508]	; (800438c <batteryBarQueue+0x294>)
 8004190:	f7fc f9d2 	bl	8000538 <SaveToUART_TxBuffer>

	}
	if (26 <= soc_value && soc_value <= 30) {
 8004194:	4b76      	ldr	r3, [pc, #472]	; (8004370 <batteryBarQueue+0x278>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b19      	cmp	r3, #25
 800419a:	d90b      	bls.n	80041b4 <batteryBarQueue+0xbc>
 800419c:	4b74      	ldr	r3, [pc, #464]	; (8004370 <batteryBarQueue+0x278>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b1e      	cmp	r3, #30
 80041a2:	d807      	bhi.n	80041b4 <batteryBarQueue+0xbc>
		SaveToUART_TxBuffer(bat25, sizeof(bat25));
 80041a4:	2108      	movs	r1, #8
 80041a6:	487a      	ldr	r0, [pc, #488]	; (8004390 <batteryBarQueue+0x298>)
 80041a8:	f7fc f9c6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotOrangeON, sizeof(BotOrangeON));
 80041ac:	2108      	movs	r1, #8
 80041ae:	4877      	ldr	r0, [pc, #476]	; (800438c <batteryBarQueue+0x294>)
 80041b0:	f7fc f9c2 	bl	8000538 <SaveToUART_TxBuffer>

	}
	if (31 <= soc_value && soc_value <= 35) {
 80041b4:	4b6e      	ldr	r3, [pc, #440]	; (8004370 <batteryBarQueue+0x278>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b1e      	cmp	r3, #30
 80041ba:	d90b      	bls.n	80041d4 <batteryBarQueue+0xdc>
 80041bc:	4b6c      	ldr	r3, [pc, #432]	; (8004370 <batteryBarQueue+0x278>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b23      	cmp	r3, #35	; 0x23
 80041c2:	d807      	bhi.n	80041d4 <batteryBarQueue+0xdc>
		SaveToUART_TxBuffer(bat30, sizeof(bat30));
 80041c4:	2108      	movs	r1, #8
 80041c6:	4873      	ldr	r0, [pc, #460]	; (8004394 <batteryBarQueue+0x29c>)
 80041c8:	f7fc f9b6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotOrangeON, sizeof(BotOrangeON));
 80041cc:	2108      	movs	r1, #8
 80041ce:	486f      	ldr	r0, [pc, #444]	; (800438c <batteryBarQueue+0x294>)
 80041d0:	f7fc f9b2 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (36 <= soc_value && soc_value <= 40) {
 80041d4:	4b66      	ldr	r3, [pc, #408]	; (8004370 <batteryBarQueue+0x278>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b23      	cmp	r3, #35	; 0x23
 80041da:	d90b      	bls.n	80041f4 <batteryBarQueue+0xfc>
 80041dc:	4b64      	ldr	r3, [pc, #400]	; (8004370 <batteryBarQueue+0x278>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b28      	cmp	r3, #40	; 0x28
 80041e2:	d807      	bhi.n	80041f4 <batteryBarQueue+0xfc>
		SaveToUART_TxBuffer(bat35, sizeof(bat35));
 80041e4:	2108      	movs	r1, #8
 80041e6:	486c      	ldr	r0, [pc, #432]	; (8004398 <batteryBarQueue+0x2a0>)
 80041e8:	f7fc f9a6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotOrangeON, sizeof(BotOrangeON));
 80041ec:	2108      	movs	r1, #8
 80041ee:	4867      	ldr	r0, [pc, #412]	; (800438c <batteryBarQueue+0x294>)
 80041f0:	f7fc f9a2 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (41 <= soc_value && soc_value <= 45) {
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <batteryBarQueue+0x278>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b28      	cmp	r3, #40	; 0x28
 80041fa:	d90b      	bls.n	8004214 <batteryBarQueue+0x11c>
 80041fc:	4b5c      	ldr	r3, [pc, #368]	; (8004370 <batteryBarQueue+0x278>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b2d      	cmp	r3, #45	; 0x2d
 8004202:	d807      	bhi.n	8004214 <batteryBarQueue+0x11c>

		SaveToUART_TxBuffer(bat40, sizeof(bat40));
 8004204:	2108      	movs	r1, #8
 8004206:	4865      	ldr	r0, [pc, #404]	; (800439c <batteryBarQueue+0x2a4>)
 8004208:	f7fc f996 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800420c:	2108      	movs	r1, #8
 800420e:	4864      	ldr	r0, [pc, #400]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004210:	f7fc f992 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (46 <= soc_value && soc_value <= 50) {
 8004214:	4b56      	ldr	r3, [pc, #344]	; (8004370 <batteryBarQueue+0x278>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b2d      	cmp	r3, #45	; 0x2d
 800421a:	d90b      	bls.n	8004234 <batteryBarQueue+0x13c>
 800421c:	4b54      	ldr	r3, [pc, #336]	; (8004370 <batteryBarQueue+0x278>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b32      	cmp	r3, #50	; 0x32
 8004222:	d807      	bhi.n	8004234 <batteryBarQueue+0x13c>
		SaveToUART_TxBuffer(bat45, sizeof(bat45));
 8004224:	2108      	movs	r1, #8
 8004226:	485f      	ldr	r0, [pc, #380]	; (80043a4 <batteryBarQueue+0x2ac>)
 8004228:	f7fc f986 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800422c:	2108      	movs	r1, #8
 800422e:	485c      	ldr	r0, [pc, #368]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004230:	f7fc f982 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (51 <= soc_value && soc_value <= 55) {
 8004234:	4b4e      	ldr	r3, [pc, #312]	; (8004370 <batteryBarQueue+0x278>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b32      	cmp	r3, #50	; 0x32
 800423a:	d90b      	bls.n	8004254 <batteryBarQueue+0x15c>
 800423c:	4b4c      	ldr	r3, [pc, #304]	; (8004370 <batteryBarQueue+0x278>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b37      	cmp	r3, #55	; 0x37
 8004242:	d807      	bhi.n	8004254 <batteryBarQueue+0x15c>

		SaveToUART_TxBuffer(bat50, sizeof(bat50));
 8004244:	2108      	movs	r1, #8
 8004246:	4858      	ldr	r0, [pc, #352]	; (80043a8 <batteryBarQueue+0x2b0>)
 8004248:	f7fc f976 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800424c:	2108      	movs	r1, #8
 800424e:	4854      	ldr	r0, [pc, #336]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004250:	f7fc f972 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (56 <= soc_value && soc_value <= 60) {
 8004254:	4b46      	ldr	r3, [pc, #280]	; (8004370 <batteryBarQueue+0x278>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b37      	cmp	r3, #55	; 0x37
 800425a:	d90b      	bls.n	8004274 <batteryBarQueue+0x17c>
 800425c:	4b44      	ldr	r3, [pc, #272]	; (8004370 <batteryBarQueue+0x278>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b3c      	cmp	r3, #60	; 0x3c
 8004262:	d807      	bhi.n	8004274 <batteryBarQueue+0x17c>
		SaveToUART_TxBuffer(bat55, sizeof(bat55));
 8004264:	2108      	movs	r1, #8
 8004266:	4851      	ldr	r0, [pc, #324]	; (80043ac <batteryBarQueue+0x2b4>)
 8004268:	f7fc f966 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800426c:	2108      	movs	r1, #8
 800426e:	484c      	ldr	r0, [pc, #304]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004270:	f7fc f962 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (61 <= soc_value && soc_value <= 65) {
 8004274:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <batteryBarQueue+0x278>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b3c      	cmp	r3, #60	; 0x3c
 800427a:	d90b      	bls.n	8004294 <batteryBarQueue+0x19c>
 800427c:	4b3c      	ldr	r3, [pc, #240]	; (8004370 <batteryBarQueue+0x278>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b41      	cmp	r3, #65	; 0x41
 8004282:	d807      	bhi.n	8004294 <batteryBarQueue+0x19c>
		SaveToUART_TxBuffer(bat60, sizeof(bat60));
 8004284:	2108      	movs	r1, #8
 8004286:	484a      	ldr	r0, [pc, #296]	; (80043b0 <batteryBarQueue+0x2b8>)
 8004288:	f7fc f956 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800428c:	2108      	movs	r1, #8
 800428e:	4844      	ldr	r0, [pc, #272]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004290:	f7fc f952 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (66 <= soc_value && soc_value <= 70) {
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <batteryBarQueue+0x278>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b41      	cmp	r3, #65	; 0x41
 800429a:	d90b      	bls.n	80042b4 <batteryBarQueue+0x1bc>
 800429c:	4b34      	ldr	r3, [pc, #208]	; (8004370 <batteryBarQueue+0x278>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b46      	cmp	r3, #70	; 0x46
 80042a2:	d807      	bhi.n	80042b4 <batteryBarQueue+0x1bc>
		SaveToUART_TxBuffer(bat65, sizeof(bat65));
 80042a4:	2108      	movs	r1, #8
 80042a6:	4843      	ldr	r0, [pc, #268]	; (80043b4 <batteryBarQueue+0x2bc>)
 80042a8:	f7fc f946 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 80042ac:	2108      	movs	r1, #8
 80042ae:	483c      	ldr	r0, [pc, #240]	; (80043a0 <batteryBarQueue+0x2a8>)
 80042b0:	f7fc f942 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (71 <= soc_value && soc_value <= 75) {
 80042b4:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <batteryBarQueue+0x278>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b46      	cmp	r3, #70	; 0x46
 80042ba:	d90b      	bls.n	80042d4 <batteryBarQueue+0x1dc>
 80042bc:	4b2c      	ldr	r3, [pc, #176]	; (8004370 <batteryBarQueue+0x278>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b4b      	cmp	r3, #75	; 0x4b
 80042c2:	d807      	bhi.n	80042d4 <batteryBarQueue+0x1dc>
		SaveToUART_TxBuffer(bat70, sizeof(bat70));
 80042c4:	2108      	movs	r1, #8
 80042c6:	483c      	ldr	r0, [pc, #240]	; (80043b8 <batteryBarQueue+0x2c0>)
 80042c8:	f7fc f936 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 80042cc:	2108      	movs	r1, #8
 80042ce:	4834      	ldr	r0, [pc, #208]	; (80043a0 <batteryBarQueue+0x2a8>)
 80042d0:	f7fc f932 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (76 <= soc_value && soc_value <= 80) {
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <batteryBarQueue+0x278>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b4b      	cmp	r3, #75	; 0x4b
 80042da:	d90b      	bls.n	80042f4 <batteryBarQueue+0x1fc>
 80042dc:	4b24      	ldr	r3, [pc, #144]	; (8004370 <batteryBarQueue+0x278>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b50      	cmp	r3, #80	; 0x50
 80042e2:	d807      	bhi.n	80042f4 <batteryBarQueue+0x1fc>

		SaveToUART_TxBuffer(bat75, sizeof(bat75));
 80042e4:	2108      	movs	r1, #8
 80042e6:	4835      	ldr	r0, [pc, #212]	; (80043bc <batteryBarQueue+0x2c4>)
 80042e8:	f7fc f926 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 80042ec:	2108      	movs	r1, #8
 80042ee:	482c      	ldr	r0, [pc, #176]	; (80043a0 <batteryBarQueue+0x2a8>)
 80042f0:	f7fc f922 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (81 <= soc_value && soc_value <= 85) {
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <batteryBarQueue+0x278>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b50      	cmp	r3, #80	; 0x50
 80042fa:	d90b      	bls.n	8004314 <batteryBarQueue+0x21c>
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <batteryBarQueue+0x278>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b55      	cmp	r3, #85	; 0x55
 8004302:	d807      	bhi.n	8004314 <batteryBarQueue+0x21c>

		SaveToUART_TxBuffer(bat80, sizeof(bat80));
 8004304:	2108      	movs	r1, #8
 8004306:	482e      	ldr	r0, [pc, #184]	; (80043c0 <batteryBarQueue+0x2c8>)
 8004308:	f7fc f916 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800430c:	2108      	movs	r1, #8
 800430e:	4824      	ldr	r0, [pc, #144]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004310:	f7fc f912 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (86 <= soc_value && soc_value <= 90) {
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <batteryBarQueue+0x278>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b55      	cmp	r3, #85	; 0x55
 800431a:	d90b      	bls.n	8004334 <batteryBarQueue+0x23c>
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <batteryBarQueue+0x278>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b5a      	cmp	r3, #90	; 0x5a
 8004322:	d807      	bhi.n	8004334 <batteryBarQueue+0x23c>

		SaveToUART_TxBuffer(bat85, sizeof(bat85));
 8004324:	2108      	movs	r1, #8
 8004326:	4827      	ldr	r0, [pc, #156]	; (80043c4 <batteryBarQueue+0x2cc>)
 8004328:	f7fc f906 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800432c:	2108      	movs	r1, #8
 800432e:	481c      	ldr	r0, [pc, #112]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004330:	f7fc f902 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (91 <= soc_value && soc_value <= 95) {
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <batteryBarQueue+0x278>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b5a      	cmp	r3, #90	; 0x5a
 800433a:	d90b      	bls.n	8004354 <batteryBarQueue+0x25c>
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <batteryBarQueue+0x278>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b5f      	cmp	r3, #95	; 0x5f
 8004342:	d807      	bhi.n	8004354 <batteryBarQueue+0x25c>

		SaveToUART_TxBuffer(bat90, sizeof(bat90));
 8004344:	2108      	movs	r1, #8
 8004346:	4820      	ldr	r0, [pc, #128]	; (80043c8 <batteryBarQueue+0x2d0>)
 8004348:	f7fc f8f6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800434c:	2108      	movs	r1, #8
 800434e:	4814      	ldr	r0, [pc, #80]	; (80043a0 <batteryBarQueue+0x2a8>)
 8004350:	f7fc f8f2 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (96 <= soc_value && soc_value <= 99) {
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <batteryBarQueue+0x278>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b5f      	cmp	r3, #95	; 0x5f
 800435a:	d93a      	bls.n	80043d2 <batteryBarQueue+0x2da>
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <batteryBarQueue+0x278>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b63      	cmp	r3, #99	; 0x63
 8004362:	d836      	bhi.n	80043d2 <batteryBarQueue+0x2da>

		SaveToUART_TxBuffer(bat90, sizeof(bat90));
 8004364:	2108      	movs	r1, #8
 8004366:	4818      	ldr	r0, [pc, #96]	; (80043c8 <batteryBarQueue+0x2d0>)
 8004368:	f7fc f8e6 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 800436c:	2108      	movs	r1, #8
 800436e:	e02d      	b.n	80043cc <batteryBarQueue+0x2d4>
 8004370:	2000045c 	.word	0x2000045c
 8004374:	20000298 	.word	0x20000298
 8004378:	20000200 	.word	0x20000200
 800437c:	200002a0 	.word	0x200002a0
 8004380:	200002a8 	.word	0x200002a8
 8004384:	200002b0 	.word	0x200002b0
 8004388:	200002b8 	.word	0x200002b8
 800438c:	200001f8 	.word	0x200001f8
 8004390:	200002c0 	.word	0x200002c0
 8004394:	200002c8 	.word	0x200002c8
 8004398:	200002d0 	.word	0x200002d0
 800439c:	200002d8 	.word	0x200002d8
 80043a0:	200001f0 	.word	0x200001f0
 80043a4:	200002e0 	.word	0x200002e0
 80043a8:	200002e8 	.word	0x200002e8
 80043ac:	200002f0 	.word	0x200002f0
 80043b0:	200002f8 	.word	0x200002f8
 80043b4:	20000300 	.word	0x20000300
 80043b8:	20000308 	.word	0x20000308
 80043bc:	20000310 	.word	0x20000310
 80043c0:	20000318 	.word	0x20000318
 80043c4:	20000320 	.word	0x20000320
 80043c8:	20000328 	.word	0x20000328
 80043cc:	4808      	ldr	r0, [pc, #32]	; (80043f0 <batteryBarQueue+0x2f8>)
 80043ce:	f7fc f8b3 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (100 == soc_value) {
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <batteryBarQueue+0x2fc>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d107      	bne.n	80043ea <batteryBarQueue+0x2f2>

		SaveToUART_TxBuffer(bat100, sizeof(bat100));
 80043da:	2108      	movs	r1, #8
 80043dc:	4806      	ldr	r0, [pc, #24]	; (80043f8 <batteryBarQueue+0x300>)
 80043de:	f7fc f8ab 	bl	8000538 <SaveToUART_TxBuffer>
		SaveToUART_TxBuffer(BotGreenON, sizeof(BotGreenON));
 80043e2:	2108      	movs	r1, #8
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <batteryBarQueue+0x2f8>)
 80043e6:	f7fc f8a7 	bl	8000538 <SaveToUART_TxBuffer>

	}
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	200001f0 	.word	0x200001f0
 80043f4:	2000045c 	.word	0x2000045c
 80043f8:	20000330 	.word	0x20000330

080043fc <powerMeterQueue>:
#endif
		}
	}

}
void powerMeterQueue(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	if (rpm_meter == 0) {
 8004400:	4b78      	ldr	r3, [pc, #480]	; (80045e4 <powerMeterQueue+0x1e8>)
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <powerMeterQueue+0x14>

		SaveToUART_TxBuffer(eco0, sizeof(eco0));
 8004408:	2108      	movs	r1, #8
 800440a:	4877      	ldr	r0, [pc, #476]	; (80045e8 <powerMeterQueue+0x1ec>)
 800440c:	f7fc f894 	bl	8000538 <SaveToUART_TxBuffer>

	}

	if (rpm_meter >= 1) {
 8004410:	4b74      	ldr	r3, [pc, #464]	; (80045e4 <powerMeterQueue+0x1e8>)
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80e2 	beq.w	80045de <powerMeterQueue+0x1e2>

		if (power_90 <= power) {
 800441a:	4b74      	ldr	r3, [pc, #464]	; (80045ec <powerMeterQueue+0x1f0>)
 800441c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004420:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8004424:	dd03      	ble.n	800442e <powerMeterQueue+0x32>
			SaveToUART_TxBuffer(power5, sizeof(power5));
 8004426:	2108      	movs	r1, #8
 8004428:	4871      	ldr	r0, [pc, #452]	; (80045f0 <powerMeterQueue+0x1f4>)
 800442a:	f7fc f885 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (power_80 <= power && power < power_90) {
 800442e:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <powerMeterQueue+0x1f0>)
 8004430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004434:	f240 22e6 	movw	r2, #742	; 0x2e6
 8004438:	4293      	cmp	r3, r2
 800443a:	dd09      	ble.n	8004450 <powerMeterQueue+0x54>
 800443c:	4b6b      	ldr	r3, [pc, #428]	; (80045ec <powerMeterQueue+0x1f0>)
 800443e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004442:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8004446:	dc03      	bgt.n	8004450 <powerMeterQueue+0x54>
			SaveToUART_TxBuffer(power4, sizeof(power4));
 8004448:	2108      	movs	r1, #8
 800444a:	486a      	ldr	r0, [pc, #424]	; (80045f4 <powerMeterQueue+0x1f8>)
 800444c:	f7fc f874 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (power_70 <= power && power < power_80) {
 8004450:	4b66      	ldr	r3, [pc, #408]	; (80045ec <powerMeterQueue+0x1f0>)
 8004452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004456:	f240 2295 	movw	r2, #661	; 0x295
 800445a:	4293      	cmp	r3, r2
 800445c:	dd0a      	ble.n	8004474 <powerMeterQueue+0x78>
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <powerMeterQueue+0x1f0>)
 8004460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004464:	f240 22e6 	movw	r2, #742	; 0x2e6
 8004468:	4293      	cmp	r3, r2
 800446a:	dc03      	bgt.n	8004474 <powerMeterQueue+0x78>
			SaveToUART_TxBuffer(power3, sizeof(power3));
 800446c:	2108      	movs	r1, #8
 800446e:	4862      	ldr	r0, [pc, #392]	; (80045f8 <powerMeterQueue+0x1fc>)
 8004470:	f7fc f862 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (power_60 <= power && power < power_70) {
 8004474:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <powerMeterQueue+0x1f0>)
 8004476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800447a:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 800447e:	dd0a      	ble.n	8004496 <powerMeterQueue+0x9a>
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <powerMeterQueue+0x1f0>)
 8004482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004486:	f240 2295 	movw	r2, #661	; 0x295
 800448a:	4293      	cmp	r3, r2
 800448c:	dc03      	bgt.n	8004496 <powerMeterQueue+0x9a>
			SaveToUART_TxBuffer(power2, sizeof(power2));
 800448e:	2108      	movs	r1, #8
 8004490:	485a      	ldr	r0, [pc, #360]	; (80045fc <powerMeterQueue+0x200>)
 8004492:	f7fc f851 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (eco_50 <= power && power < power_60) {
 8004496:	4b55      	ldr	r3, [pc, #340]	; (80045ec <powerMeterQueue+0x1f0>)
 8004498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800449c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044a0:	dd09      	ble.n	80044b6 <powerMeterQueue+0xba>
 80044a2:	4b52      	ldr	r3, [pc, #328]	; (80045ec <powerMeterQueue+0x1f0>)
 80044a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a8:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80044ac:	dc03      	bgt.n	80044b6 <powerMeterQueue+0xba>
			SaveToUART_TxBuffer(power1, sizeof(power1));
 80044ae:	2108      	movs	r1, #8
 80044b0:	4853      	ldr	r0, [pc, #332]	; (8004600 <powerMeterQueue+0x204>)
 80044b2:	f7fc f841 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (eco_40 <= power && power < eco_50) {
 80044b6:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <powerMeterQueue+0x1f0>)
 80044b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044bc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80044c0:	dd09      	ble.n	80044d6 <powerMeterQueue+0xda>
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <powerMeterQueue+0x1f0>)
 80044c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044cc:	dc03      	bgt.n	80044d6 <powerMeterQueue+0xda>
			SaveToUART_TxBuffer(eco5, sizeof(eco5));
 80044ce:	2108      	movs	r1, #8
 80044d0:	484c      	ldr	r0, [pc, #304]	; (8004604 <powerMeterQueue+0x208>)
 80044d2:	f7fc f831 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (eco_30 <= power && power < eco_40) {
 80044d6:	4b45      	ldr	r3, [pc, #276]	; (80045ec <powerMeterQueue+0x1f0>)
 80044d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80044e0:	dd09      	ble.n	80044f6 <powerMeterQueue+0xfa>
 80044e2:	4b42      	ldr	r3, [pc, #264]	; (80045ec <powerMeterQueue+0x1f0>)
 80044e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80044ec:	dc03      	bgt.n	80044f6 <powerMeterQueue+0xfa>
			SaveToUART_TxBuffer(eco4, sizeof(eco4));
 80044ee:	2108      	movs	r1, #8
 80044f0:	4845      	ldr	r0, [pc, #276]	; (8004608 <powerMeterQueue+0x20c>)
 80044f2:	f7fc f821 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (eco_20 <= power && power < eco_30) {
 80044f6:	4b3d      	ldr	r3, [pc, #244]	; (80045ec <powerMeterQueue+0x1f0>)
 80044f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fc:	2bc8      	cmp	r3, #200	; 0xc8
 80044fe:	dd09      	ble.n	8004514 <powerMeterQueue+0x118>
 8004500:	4b3a      	ldr	r3, [pc, #232]	; (80045ec <powerMeterQueue+0x1f0>)
 8004502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004506:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800450a:	dc03      	bgt.n	8004514 <powerMeterQueue+0x118>
			SaveToUART_TxBuffer(eco3, sizeof(eco3));
 800450c:	2108      	movs	r1, #8
 800450e:	483f      	ldr	r0, [pc, #252]	; (800460c <powerMeterQueue+0x210>)
 8004510:	f7fc f812 	bl	8000538 <SaveToUART_TxBuffer>
		}
		if (eco_10 <= power && power < eco_20) {
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <powerMeterQueue+0x1f0>)
 8004516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	dd08      	ble.n	8004530 <powerMeterQueue+0x134>
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <powerMeterQueue+0x1f0>)
 8004520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004524:	2bc8      	cmp	r3, #200	; 0xc8
 8004526:	dc03      	bgt.n	8004530 <powerMeterQueue+0x134>
			SaveToUART_TxBuffer(eco2, sizeof(eco2));
 8004528:	2108      	movs	r1, #8
 800452a:	4839      	ldr	r0, [pc, #228]	; (8004610 <powerMeterQueue+0x214>)
 800452c:	f7fc f804 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (0 <= power && power < eco_10) {
 8004530:	4b2e      	ldr	r3, [pc, #184]	; (80045ec <powerMeterQueue+0x1f0>)
 8004532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004536:	2b00      	cmp	r3, #0
 8004538:	db08      	blt.n	800454c <powerMeterQueue+0x150>
 800453a:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <powerMeterQueue+0x1f0>)
 800453c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	dc03      	bgt.n	800454c <powerMeterQueue+0x150>
			SaveToUART_TxBuffer(eco1, sizeof(eco1));
 8004544:	2108      	movs	r1, #8
 8004546:	4833      	ldr	r0, [pc, #204]	; (8004614 <powerMeterQueue+0x218>)
 8004548:	f7fb fff6 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (-1 >= power && power >= -50) {
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <powerMeterQueue+0x1f0>)
 800454e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004552:	2b00      	cmp	r3, #0
 8004554:	da09      	bge.n	800456a <powerMeterQueue+0x16e>
 8004556:	4b25      	ldr	r3, [pc, #148]	; (80045ec <powerMeterQueue+0x1f0>)
 8004558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800455c:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8004560:	db03      	blt.n	800456a <powerMeterQueue+0x16e>
			SaveToUART_TxBuffer(charge1, sizeof(charge1));
 8004562:	2108      	movs	r1, #8
 8004564:	482c      	ldr	r0, [pc, #176]	; (8004618 <powerMeterQueue+0x21c>)
 8004566:	f7fb ffe7 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (-51 >= power && power >= -101) {
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <powerMeterQueue+0x1f0>)
 800456c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004570:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8004574:	da09      	bge.n	800458a <powerMeterQueue+0x18e>
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <powerMeterQueue+0x1f0>)
 8004578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800457c:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8004580:	db03      	blt.n	800458a <powerMeterQueue+0x18e>
			SaveToUART_TxBuffer(charge2, sizeof(charge2));
 8004582:	2108      	movs	r1, #8
 8004584:	4825      	ldr	r0, [pc, #148]	; (800461c <powerMeterQueue+0x220>)
 8004586:	f7fb ffd7 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (-102 >= power && power >= -152) {
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <powerMeterQueue+0x1f0>)
 800458c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004590:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8004594:	da09      	bge.n	80045aa <powerMeterQueue+0x1ae>
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <powerMeterQueue+0x1f0>)
 8004598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459c:	f113 0f98 	cmn.w	r3, #152	; 0x98
 80045a0:	db03      	blt.n	80045aa <powerMeterQueue+0x1ae>
			SaveToUART_TxBuffer(charge3, sizeof(charge3));
 80045a2:	2108      	movs	r1, #8
 80045a4:	481e      	ldr	r0, [pc, #120]	; (8004620 <powerMeterQueue+0x224>)
 80045a6:	f7fb ffc7 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (-153 >= power && power >= -203) {
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <powerMeterQueue+0x1f0>)
 80045ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b0:	f113 0f98 	cmn.w	r3, #152	; 0x98
 80045b4:	da09      	bge.n	80045ca <powerMeterQueue+0x1ce>
 80045b6:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <powerMeterQueue+0x1f0>)
 80045b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045bc:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 80045c0:	db03      	blt.n	80045ca <powerMeterQueue+0x1ce>
			SaveToUART_TxBuffer(charge4, sizeof(charge4));
 80045c2:	2108      	movs	r1, #8
 80045c4:	4817      	ldr	r0, [pc, #92]	; (8004624 <powerMeterQueue+0x228>)
 80045c6:	f7fb ffb7 	bl	8000538 <SaveToUART_TxBuffer>
		}

		if (-204 >= power) {
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <powerMeterQueue+0x1f0>)
 80045cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d0:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 80045d4:	da03      	bge.n	80045de <powerMeterQueue+0x1e2>
			SaveToUART_TxBuffer(charge5, sizeof(charge5));
 80045d6:	2108      	movs	r1, #8
 80045d8:	4813      	ldr	r0, [pc, #76]	; (8004628 <powerMeterQueue+0x22c>)
 80045da:	f7fb ffad 	bl	8000538 <SaveToUART_TxBuffer>
		}
	}
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000464 	.word	0x20000464
 80045e8:	20000338 	.word	0x20000338
 80045ec:	2000046a 	.word	0x2000046a
 80045f0:	20000388 	.word	0x20000388
 80045f4:	20000380 	.word	0x20000380
 80045f8:	20000378 	.word	0x20000378
 80045fc:	20000370 	.word	0x20000370
 8004600:	20000368 	.word	0x20000368
 8004604:	20000360 	.word	0x20000360
 8004608:	20000358 	.word	0x20000358
 800460c:	20000350 	.word	0x20000350
 8004610:	20000348 	.word	0x20000348
 8004614:	20000340 	.word	0x20000340
 8004618:	20000390 	.word	0x20000390
 800461c:	20000398 	.word	0x20000398
 8004620:	200003a0 	.word	0x200003a0
 8004624:	200003a8 	.word	0x200003a8
 8004628:	200003b0 	.word	0x200003b0

0800462c <gearUpdate>:


void gearUpdate(void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <gearUpdate+0x58>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d103      	bne.n	8004640 <gearUpdate+0x14>
		Gear_Neutral_Icon;
 8004638:	2108      	movs	r1, #8
 800463a:	4813      	ldr	r0, [pc, #76]	; (8004688 <gearUpdate+0x5c>)
 800463c:	f7fb ff7c 	bl	8000538 <SaveToUART_TxBuffer>
	}

	if (currentstate == 2) {
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <gearUpdate+0x58>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d103      	bne.n	8004650 <gearUpdate+0x24>
		Gear_Drive_Icon;
 8004648:	2108      	movs	r1, #8
 800464a:	4810      	ldr	r0, [pc, #64]	; (800468c <gearUpdate+0x60>)
 800464c:	f7fb ff74 	bl	8000538 <SaveToUART_TxBuffer>
	}

	if (currentstate == 3) {
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <gearUpdate+0x58>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d103      	bne.n	8004660 <gearUpdate+0x34>
		Gear_Reverse_Icon;
 8004658:	2108      	movs	r1, #8
 800465a:	480d      	ldr	r0, [pc, #52]	; (8004690 <gearUpdate+0x64>)
 800465c:	f7fb ff6c 	bl	8000538 <SaveToUART_TxBuffer>
	}
	if (_gearCleared || currentstate == 0) {
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <gearUpdate+0x68>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <gearUpdate+0x44>
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <gearUpdate+0x58>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <gearUpdate+0x52>
		Gear_Clear_Icon;
 8004670:	2108      	movs	r1, #8
 8004672:	4809      	ldr	r0, [pc, #36]	; (8004698 <gearUpdate+0x6c>)
 8004674:	f7fb ff60 	bl	8000538 <SaveToUART_TxBuffer>
		_gearCleared = false;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <gearUpdate+0x68>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
	}

}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000046c 	.word	0x2000046c
 8004688:	200001b8 	.word	0x200001b8
 800468c:	200001c0 	.word	0x200001c0
 8004690:	200001b0 	.word	0x200001b0
 8004694:	200004b2 	.word	0x200004b2
 8004698:	200001c8 	.word	0x200001c8

0800469c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <MX_USART3_UART_Init+0x50>)
 80046a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80046ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046ae:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046bc:	2200      	movs	r2, #0
 80046be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046c2:	220c      	movs	r2, #12
 80046c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046cc:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046d2:	4805      	ldr	r0, [pc, #20]	; (80046e8 <MX_USART3_UART_Init+0x4c>)
 80046d4:	f002 fdce 	bl	8007274 <HAL_UART_Init>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80046de:	f7fd f83d 	bl	800175c <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000cc8 	.word	0x20000cc8
 80046ec:	40004800 	.word	0x40004800

080046f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_UART_MspInit+0x9c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d139      	bne.n	8004784 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004710:	4b1f      	ldr	r3, [pc, #124]	; (8004790 <HAL_UART_MspInit+0xa0>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_UART_MspInit+0xa0>)
 8004716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471a:	61d3      	str	r3, [r2, #28]
 800471c:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <HAL_UART_MspInit+0xa0>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_UART_MspInit+0xa0>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	4a18      	ldr	r2, [pc, #96]	; (8004790 <HAL_UART_MspInit+0xa0>)
 800472e:	f043 0308 	orr.w	r3, r3, #8
 8004732:	6193      	str	r3, [r2, #24]
 8004734:	4b16      	ldr	r3, [pc, #88]	; (8004790 <HAL_UART_MspInit+0xa0>)
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004746:	2302      	movs	r3, #2
 8004748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800474a:	2303      	movs	r3, #3
 800474c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800474e:	f107 0310 	add.w	r3, r7, #16
 8004752:	4619      	mov	r1, r3
 8004754:	480f      	ldr	r0, [pc, #60]	; (8004794 <HAL_UART_MspInit+0xa4>)
 8004756:	f001 fa33 	bl	8005bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800475a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800475e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	4619      	mov	r1, r3
 800476e:	4809      	ldr	r0, [pc, #36]	; (8004794 <HAL_UART_MspInit+0xa4>)
 8004770:	f001 fa26 	bl	8005bc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004774:	2200      	movs	r2, #0
 8004776:	2100      	movs	r1, #0
 8004778:	2027      	movs	r0, #39	; 0x27
 800477a:	f001 f8a8 	bl	80058ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800477e:	2027      	movs	r0, #39	; 0x27
 8004780:	f001 f8c1 	bl	8005906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004784:	bf00      	nop
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40004800 	.word	0x40004800
 8004790:	40021000 	.word	0x40021000
 8004794:	40010c00 	.word	0x40010c00

08004798 <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <check_ack+0x2c>)
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <check_ack+0x30>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d103      	bne.n	80047b2 <check_ack+0x1a>
		modeChangeOK = true;
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <check_ack+0x34>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e002      	b.n	80047b8 <check_ack+0x20>
	} else {
		modeChangeOK = false;
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <check_ack+0x34>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <check_ack+0x34>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	20000474 	.word	0x20000474
 80047c8:	2000048b 	.word	0x2000048b
 80047cc:	2000049d 	.word	0x2000049d

080047d0 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 80047d4:	4b45      	ldr	r3, [pc, #276]	; (80048ec <evcuMode+0x11c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d16b      	bne.n	80048b4 <evcuMode+0xe4>
 80047dc:	4b44      	ldr	r3, [pc, #272]	; (80048f0 <evcuMode+0x120>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d067      	beq.n	80048b4 <evcuMode+0xe4>
		if (currentMode == ecoMode) {
 80047e4:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <evcuMode+0x124>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d11a      	bne.n	8004824 <evcuMode+0x54>
			//Set Normal Mode
			targetMode = normalMode;
 80047ee:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <evcuMode+0x128>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 80047f4:	f7ff ffd0 	bl	8004798 <check_ack>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d05a      	beq.n	80048b4 <evcuMode+0xe4>
				currentMode = normalMode;
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <evcuMode+0x124>)
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004804:	4b3a      	ldr	r3, [pc, #232]	; (80048f0 <evcuMode+0x120>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 800480a:	4b3c      	ldr	r3, [pc, #240]	; (80048fc <evcuMode+0x12c>)
 800480c:	2201      	movs	r2, #1
 800480e:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 1;
 8004810:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <evcuMode+0x130>)
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004816:	4b3b      	ldr	r3, [pc, #236]	; (8004904 <evcuMode+0x134>)
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
				rtn = false;
 800481c:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <evcuMode+0x138>)
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e047      	b.n	80048b4 <evcuMode+0xe4>
			}
		} else if (currentMode == normalMode) {
 8004824:	4b33      	ldr	r3, [pc, #204]	; (80048f4 <evcuMode+0x124>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11d      	bne.n	800486a <evcuMode+0x9a>
			//Set Sports Mode
			targetMode = sportMode;
 800482e:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <evcuMode+0x128>)
 8004830:	2203      	movs	r2, #3
 8004832:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004834:	f7ff ffb0 	bl	8004798 <check_ack>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d03a      	beq.n	80048b4 <evcuMode+0xe4>
				currentMode = sportMode;
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <evcuMode+0x124>)
 8004840:	2203      	movs	r2, #3
 8004842:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004844:	4b2d      	ldr	r3, [pc, #180]	; (80048fc <evcuMode+0x12c>)
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 3;
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <evcuMode+0x130>)
 800484c:	2203      	movs	r2, #3
 800484e:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004850:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <evcuMode+0x134>)
 8004852:	2201      	movs	r2, #1
 8004854:	701a      	strb	r2, [r3, #0]
				mode = false;
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <evcuMode+0x120>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
				rtn = false;
 800485c:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <evcuMode+0x138>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <evcuMode+0x13c>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e024      	b.n	80048b4 <evcuMode+0xe4>
			}
		} else if (currentMode == sportMode) {
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <evcuMode+0x124>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b03      	cmp	r3, #3
 8004872:	d11f      	bne.n	80048b4 <evcuMode+0xe4>
			//Set Eco Mode
			targetMode = ecoMode;
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <evcuMode+0x128>)
 8004876:	2202      	movs	r2, #2
 8004878:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 800487a:	f7ff ff8d 	bl	8004798 <check_ack>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d017      	beq.n	80048b4 <evcuMode+0xe4>
				currentMode = ecoMode;
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <evcuMode+0x124>)
 8004886:	2202      	movs	r2, #2
 8004888:	701a      	strb	r2, [r3, #0]
				mode = false;
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <evcuMode+0x120>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <evcuMode+0x12c>)
 8004892:	2201      	movs	r2, #1
 8004894:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 2;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <evcuMode+0x130>)
 8004898:	2202      	movs	r2, #2
 800489a:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <evcuMode+0x134>)
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80048a2:	4b19      	ldr	r3, [pc, #100]	; (8004908 <evcuMode+0x138>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 80048a8:	4b18      	ldr	r3, [pc, #96]	; (800490c <evcuMode+0x13c>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <evcuMode+0x124>)
 80048b0:	2202      	movs	r2, #2
 80048b2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <evcuMode+0x11c>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d115      	bne.n	80048e8 <evcuMode+0x118>
		currentMode = ecoMode;
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <evcuMode+0x124>)
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <evcuMode+0x128>)
 80048c4:	2202      	movs	r2, #2
 80048c6:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <evcuMode+0x120>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <evcuMode+0x118>
			mode = false;
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <evcuMode+0x120>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
			_modeSelection = 1;
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <evcuMode+0x134>)
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
			modeIcon = true;
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <evcuMode+0x12c>)
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
			rtn = false;
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <evcuMode+0x138>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 80048e8:	bf00      	nop
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000473 	.word	0x20000473
 80048f0:	20000415 	.word	0x20000415
 80048f4:	2000048a 	.word	0x2000048a
 80048f8:	2000048b 	.word	0x2000048b
 80048fc:	2000049e 	.word	0x2000049e
 8004900:	200004c4 	.word	0x200004c4
 8004904:	200004a7 	.word	0x200004a7
 8004908:	20000481 	.word	0x20000481
 800490c:	2000049d 	.word	0x2000049d

08004910 <trip_reset>:

void trip_reset(void){
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <trip_reset+0x1c>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <trip_reset+0x12>
		tripreset = false;
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <trip_reset+0x20>)
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000472 	.word	0x20000472
 8004930:	20000413 	.word	0x20000413

08004934 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004934:	480c      	ldr	r0, [pc, #48]	; (8004968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004936:	490d      	ldr	r1, [pc, #52]	; (800496c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004938:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800493a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800493c:	e002      	b.n	8004944 <LoopCopyDataInit>

0800493e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800493e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004942:	3304      	adds	r3, #4

08004944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004948:	d3f9      	bcc.n	800493e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800494a:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800494c:	4c0a      	ldr	r4, [pc, #40]	; (8004978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800494e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004950:	e001      	b.n	8004956 <LoopFillZerobss>

08004952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004954:	3204      	adds	r2, #4

08004956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004958:	d3fb      	bcc.n	8004952 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800495a:	f7fe fa9b 	bl	8002e94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800495e:	f003 f99d 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004962:	f7fc fd3d 	bl	80013e0 <main>
  bx lr
 8004966:	4770      	bx	lr
  ldr r0, =_sdata
 8004968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800496c:	200003c0 	.word	0x200003c0
  ldr r2, =_sidata
 8004970:	08007d70 	.word	0x08007d70
  ldr r2, =_sbss
 8004974:	200003c0 	.word	0x200003c0
  ldr r4, =_ebss
 8004978:	20000d10 	.word	0x20000d10

0800497c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800497c:	e7fe      	b.n	800497c <ADC1_2_IRQHandler>
	...

08004980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004984:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <HAL_Init+0x28>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <HAL_Init+0x28>)
 800498a:	f043 0310 	orr.w	r3, r3, #16
 800498e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004990:	2003      	movs	r0, #3
 8004992:	f000 ff91 	bl	80058b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004996:	200f      	movs	r0, #15
 8004998:	f000 f808 	bl	80049ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800499c:	f7fe f9e4 	bl	8002d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40022000 	.word	0x40022000

080049ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_InitTick+0x54>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <HAL_InitTick+0x58>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	4619      	mov	r1, r3
 80049be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ffa9 	bl	8005922 <HAL_SYSTICK_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00e      	b.n	80049f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b0f      	cmp	r3, #15
 80049de:	d80a      	bhi.n	80049f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049e0:	2200      	movs	r2, #0
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	f04f 30ff 	mov.w	r0, #4294967295
 80049e8:	f000 ff71 	bl	80058ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049ec:	4a06      	ldr	r2, [pc, #24]	; (8004a08 <HAL_InitTick+0x5c>)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	2000001c 	.word	0x2000001c
 8004a04:	200003bc 	.word	0x200003bc
 8004a08:	200003b8 	.word	0x200003b8

08004a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_IncTick+0x1c>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_IncTick+0x20>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	4a03      	ldr	r2, [pc, #12]	; (8004a2c <HAL_IncTick+0x20>)
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	200003bc 	.word	0x200003bc
 8004a2c:	20000d0c 	.word	0x20000d0c

08004a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return uwTick;
 8004a34:	4b02      	ldr	r3, [pc, #8]	; (8004a40 <HAL_GetTick+0x10>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	20000d0c 	.word	0x20000d0c

08004a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_GetTick>
 8004a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d005      	beq.n	8004a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_Delay+0x44>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a6a:	bf00      	nop
 8004a6c:	f7ff ffe0 	bl	8004a30 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d8f7      	bhi.n	8004a6c <HAL_Delay+0x28>
  {
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200003bc 	.word	0x200003bc

08004a8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0ed      	b.n	8004c7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fb fe72 	bl	8000794 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ac0:	f7ff ffb6 	bl	8004a30 <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ac6:	e012      	b.n	8004aee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ac8:	f7ff ffb2 	bl	8004a30 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b0a      	cmp	r3, #10
 8004ad4:	d90b      	bls.n	8004aee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2205      	movs	r2, #5
 8004ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0c5      	b.n	8004c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0e5      	beq.n	8004ac8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0202 	bic.w	r2, r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b0c:	f7ff ff90 	bl	8004a30 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b12:	e012      	b.n	8004b3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b14:	f7ff ff8c 	bl	8004a30 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b0a      	cmp	r3, #10
 8004b20:	d90b      	bls.n	8004b3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2205      	movs	r2, #5
 8004b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e09f      	b.n	8004c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	7e1b      	ldrb	r3, [r3, #24]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d108      	bne.n	8004b62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e007      	b.n	8004b72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	7e5b      	ldrb	r3, [r3, #25]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d108      	bne.n	8004b8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e007      	b.n	8004b9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7e9b      	ldrb	r3, [r3, #26]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d108      	bne.n	8004bb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0220 	orr.w	r2, r2, #32
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e007      	b.n	8004bc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0220 	bic.w	r2, r2, #32
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7edb      	ldrb	r3, [r3, #27]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d108      	bne.n	8004be0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0210 	bic.w	r2, r2, #16
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e007      	b.n	8004bf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0210 	orr.w	r2, r2, #16
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7f1b      	ldrb	r3, [r3, #28]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d108      	bne.n	8004c0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e007      	b.n	8004c1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0208 	bic.w	r2, r2, #8
 8004c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	7f5b      	ldrb	r3, [r3, #29]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d108      	bne.n	8004c34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0204 	orr.w	r2, r2, #4
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e007      	b.n	8004c44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0204 	bic.w	r2, r2, #4
 8004c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	ea42 0103 	orr.w	r1, r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d003      	beq.n	8004caa <HAL_CAN_ConfigFilter+0x26>
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	f040 80be 	bne.w	8004e26 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004caa:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_CAN_ConfigFilter+0x1bc>)
 8004cac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	2201      	movs	r2, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	401a      	ands	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d123      	bne.n	8004d54 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	43db      	mvns	r3, r3
 8004d16:	401a      	ands	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	3248      	adds	r2, #72	; 0x48
 8004d34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d4a:	6979      	ldr	r1, [r7, #20]
 8004d4c:	3348      	adds	r3, #72	; 0x48
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d122      	bne.n	8004da2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	3248      	adds	r2, #72	; 0x48
 8004d82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d98:	6979      	ldr	r1, [r7, #20]
 8004d9a:	3348      	adds	r3, #72	; 0x48
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	440b      	add	r3, r1
 8004da0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	43db      	mvns	r3, r3
 8004db4:	401a      	ands	r2, r3
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004dbc:	e007      	b.n	8004dce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	43db      	mvns	r3, r3
 8004de0:	401a      	ands	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004de8:	e007      	b.n	8004dfa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d107      	bne.n	8004e12 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e18:	f023 0201 	bic.w	r2, r3, #1
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e006      	b.n	8004e34 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40006400 	.word	0x40006400

08004e44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d12e      	bne.n	8004eb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e70:	f7ff fdde 	bl	8004a30 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e76:	e012      	b.n	8004e9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e78:	f7ff fdda 	bl	8004a30 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b0a      	cmp	r3, #10
 8004e84:	d90b      	bls.n	8004e9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2205      	movs	r2, #5
 8004e96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e012      	b.n	8004ec4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e5      	bne.n	8004e78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e006      	b.n	8004ec4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004eea:	7ffb      	ldrb	r3, [r7, #31]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d003      	beq.n	8004ef8 <HAL_CAN_AddTxMessage+0x2c>
 8004ef0:	7ffb      	ldrb	r3, [r7, #31]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	f040 80b8 	bne.w	8005068 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10a      	bne.n	8004f18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80a0 	beq.w	8005058 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	0e1b      	lsrs	r3, r3, #24
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d907      	bls.n	8004f38 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e09e      	b.n	8005076 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f38:	2201      	movs	r2, #1
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10d      	bne.n	8004f66 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	6809      	ldr	r1, [r1, #0]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	3318      	adds	r3, #24
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	440b      	add	r3, r1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e00f      	b.n	8004f86 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f70:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004f7a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	3318      	adds	r3, #24
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	440b      	add	r3, r1
 8004f84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	3318      	adds	r3, #24
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	440b      	add	r3, r1
 8004f96:	3304      	adds	r3, #4
 8004f98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	7d1b      	ldrb	r3, [r3, #20]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d111      	bne.n	8004fc6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3318      	adds	r3, #24
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4413      	add	r3, r2
 8004fae:	3304      	adds	r3, #4
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	6811      	ldr	r1, [r2, #0]
 8004fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	440b      	add	r3, r1
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	061a      	lsls	r2, r3, #24
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3306      	adds	r3, #6
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3305      	adds	r3, #5
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	3204      	adds	r2, #4
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	4610      	mov	r0, r2
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	ea43 0200 	orr.w	r2, r3, r0
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004ffc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3303      	adds	r3, #3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	061a      	lsls	r2, r3, #24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3302      	adds	r3, #2
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3301      	adds	r3, #1
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4313      	orrs	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	4610      	mov	r0, r2
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	6811      	ldr	r1, [r2, #0]
 8005024:	ea43 0200 	orr.w	r2, r3, r0
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	440b      	add	r3, r1
 800502e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005032:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	3318      	adds	r3, #24
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	4413      	add	r3, r2
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	6811      	ldr	r1, [r2, #0]
 8005046:	f043 0201 	orr.w	r2, r3, #1
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3318      	adds	r3, #24
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	440b      	add	r3, r1
 8005052:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005054:	2300      	movs	r3, #0
 8005056:	e00e      	b.n	8005076 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e006      	b.n	8005076 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
  }
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005094:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d003      	beq.n	80050a4 <HAL_CAN_GetRxMessage+0x24>
 800509c:	7dfb      	ldrb	r3, [r7, #23]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	f040 80f3 	bne.w	800528a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10e      	bne.n	80050c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d116      	bne.n	80050e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0e7      	b.n	8005298 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0d8      	b.n	8005298 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	331b      	adds	r3, #27
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	4413      	add	r3, r2
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0204 	and.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10c      	bne.n	800511e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	331b      	adds	r3, #27
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4413      	add	r3, r2
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	0d5b      	lsrs	r3, r3, #21
 8005114:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e00b      	b.n	8005136 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	331b      	adds	r3, #27
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	4413      	add	r3, r2
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	331b      	adds	r3, #27
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4413      	add	r3, r2
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0202 	and.w	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	331b      	adds	r3, #27
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	4413      	add	r3, r2
 8005158:	3304      	adds	r3, #4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 020f 	and.w	r2, r3, #15
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	331b      	adds	r3, #27
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	4413      	add	r3, r2
 8005170:	3304      	adds	r3, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	0a1b      	lsrs	r3, r3, #8
 8005176:	b2da      	uxtb	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	331b      	adds	r3, #27
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	4413      	add	r3, r2
 8005188:	3304      	adds	r3, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	4413      	add	r3, r2
 800519e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	0a1a      	lsrs	r2, r3, #8
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0c1a      	lsrs	r2, r3, #16
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	3302      	adds	r3, #2
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	0e1a      	lsrs	r2, r3, #24
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	3303      	adds	r3, #3
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	4413      	add	r3, r2
 8005202:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	3304      	adds	r3, #4
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	0a1a      	lsrs	r2, r3, #8
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	3305      	adds	r3, #5
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0c1a      	lsrs	r2, r3, #16
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	3306      	adds	r3, #6
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	4413      	add	r3, r2
 800524e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e1a      	lsrs	r2, r3, #24
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	3307      	adds	r3, #7
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0220 	orr.w	r2, r2, #32
 8005272:	60da      	str	r2, [r3, #12]
 8005274:	e007      	b.n	8005286 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0220 	orr.w	r2, r2, #32
 8005284:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e006      	b.n	8005298 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
  }
}
 8005298:	4618      	mov	r0, r3
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d002      	beq.n	80052c0 <HAL_CAN_ActivateNotification+0x1e>
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d109      	bne.n	80052d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6959      	ldr	r1, [r3, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e006      	b.n	80052e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d07c      	beq.n	800542c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d023      	beq.n	8005384 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2201      	movs	r2, #1
 8005342:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f983 	bl	800565a <HAL_CAN_TxMailbox0CompleteCallback>
 8005354:	e016      	b.n	8005384 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	e00c      	b.n	8005384 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d004      	beq.n	800537e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
 800537c:	e002      	b.n	8005384 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f986 	bl	8005690 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d024      	beq.n	80053d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005396:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f962 	bl	800566c <HAL_CAN_TxMailbox1CompleteCallback>
 80053a8:	e016      	b.n	80053d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	e00c      	b.n	80053d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	e002      	b.n	80053d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f965 	bl	80056a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d024      	beq.n	800542c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f941 	bl	800567e <HAL_CAN_TxMailbox2CompleteCallback>
 80053fc:	e016      	b.n	800542c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	e00c      	b.n	800542c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
 8005424:	e002      	b.n	800542c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f944 	bl	80056b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00c      	beq.n	8005450 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005446:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2210      	movs	r2, #16
 800544e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2208      	movs	r2, #8
 800546a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f92a 	bl	80056c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc f8ac 	bl	80015e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00c      	beq.n	80054b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2210      	movs	r2, #16
 80054b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2208      	movs	r2, #8
 80054ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f901 	bl	80056d8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	f003 0310 	and.w	r3, r3, #16
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fc f8bc 	bl	800166c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d006      	beq.n	8005516 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2210      	movs	r2, #16
 800550e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8ea 	bl	80056ea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2208      	movs	r2, #8
 8005530:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8e2 	bl	80056fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d07b      	beq.n	800563a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d072      	beq.n	8005632 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	f043 0302 	orr.w	r3, r3, #2
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d043      	beq.n	8005632 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d03e      	beq.n	8005632 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055ba:	2b60      	cmp	r3, #96	; 0x60
 80055bc:	d02b      	beq.n	8005616 <HAL_CAN_IRQHandler+0x32a>
 80055be:	2b60      	cmp	r3, #96	; 0x60
 80055c0:	d82e      	bhi.n	8005620 <HAL_CAN_IRQHandler+0x334>
 80055c2:	2b50      	cmp	r3, #80	; 0x50
 80055c4:	d022      	beq.n	800560c <HAL_CAN_IRQHandler+0x320>
 80055c6:	2b50      	cmp	r3, #80	; 0x50
 80055c8:	d82a      	bhi.n	8005620 <HAL_CAN_IRQHandler+0x334>
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d019      	beq.n	8005602 <HAL_CAN_IRQHandler+0x316>
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d826      	bhi.n	8005620 <HAL_CAN_IRQHandler+0x334>
 80055d2:	2b30      	cmp	r3, #48	; 0x30
 80055d4:	d010      	beq.n	80055f8 <HAL_CAN_IRQHandler+0x30c>
 80055d6:	2b30      	cmp	r3, #48	; 0x30
 80055d8:	d822      	bhi.n	8005620 <HAL_CAN_IRQHandler+0x334>
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d002      	beq.n	80055e4 <HAL_CAN_IRQHandler+0x2f8>
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d005      	beq.n	80055ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055e2:	e01d      	b.n	8005620 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	f043 0308 	orr.w	r3, r3, #8
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055ec:	e019      	b.n	8005622 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	f043 0310 	orr.w	r3, r3, #16
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055f6:	e014      	b.n	8005622 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	f043 0320 	orr.w	r3, r3, #32
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005600:	e00f      	b.n	8005622 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800560a:	e00a      	b.n	8005622 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005614:	e005      	b.n	8005622 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800561e:	e000      	b.n	8005622 <HAL_CAN_IRQHandler+0x336>
            break;
 8005620:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005630:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2204      	movs	r2, #4
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f85e 	bl	800570e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005652:	bf00      	nop
 8005654:	3728      	adds	r7, #40	; 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr

0800567e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <__NVIC_SetPriorityGrouping+0x44>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800573c:	4013      	ands	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800574c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005752:	4a04      	ldr	r2, [pc, #16]	; (8005764 <__NVIC_SetPriorityGrouping+0x44>)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	60d3      	str	r3, [r2, #12]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	e000ed00 	.word	0xe000ed00

08005768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <__NVIC_GetPriorityGrouping+0x18>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	0a1b      	lsrs	r3, r3, #8
 8005772:	f003 0307 	and.w	r3, r3, #7
}
 8005776:	4618      	mov	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00

08005784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005792:	2b00      	cmp	r3, #0
 8005794:	db0b      	blt.n	80057ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	f003 021f 	and.w	r2, r3, #31
 800579c:	4906      	ldr	r1, [pc, #24]	; (80057b8 <__NVIC_EnableIRQ+0x34>)
 800579e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2001      	movs	r0, #1
 80057a6:	fa00 f202 	lsl.w	r2, r0, r2
 80057aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100

080057bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	db0a      	blt.n	80057e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	490c      	ldr	r1, [pc, #48]	; (8005808 <__NVIC_SetPriority+0x4c>)
 80057d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057da:	0112      	lsls	r2, r2, #4
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	440b      	add	r3, r1
 80057e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057e4:	e00a      	b.n	80057fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	4908      	ldr	r1, [pc, #32]	; (800580c <__NVIC_SetPriority+0x50>)
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	3b04      	subs	r3, #4
 80057f4:	0112      	lsls	r2, r2, #4
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	440b      	add	r3, r1
 80057fa:	761a      	strb	r2, [r3, #24]
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	e000e100 	.word	0xe000e100
 800580c:	e000ed00 	.word	0xe000ed00

08005810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f1c3 0307 	rsb	r3, r3, #7
 800582a:	2b04      	cmp	r3, #4
 800582c:	bf28      	it	cs
 800582e:	2304      	movcs	r3, #4
 8005830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3304      	adds	r3, #4
 8005836:	2b06      	cmp	r3, #6
 8005838:	d902      	bls.n	8005840 <NVIC_EncodePriority+0x30>
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	3b03      	subs	r3, #3
 800583e:	e000      	b.n	8005842 <NVIC_EncodePriority+0x32>
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	43da      	mvns	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	401a      	ands	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005858:	f04f 31ff 	mov.w	r1, #4294967295
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	43d9      	mvns	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005868:	4313      	orrs	r3, r2
         );
}
 800586a:	4618      	mov	r0, r3
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005884:	d301      	bcc.n	800588a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005886:	2301      	movs	r3, #1
 8005888:	e00f      	b.n	80058aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <SysTick_Config+0x40>)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3b01      	subs	r3, #1
 8005890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005892:	210f      	movs	r1, #15
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	f7ff ff90 	bl	80057bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <SysTick_Config+0x40>)
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058a2:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <SysTick_Config+0x40>)
 80058a4:	2207      	movs	r2, #7
 80058a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000e010 	.word	0xe000e010

080058b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff ff2d 	bl	8005720 <__NVIC_SetPriorityGrouping>
}
 80058c6:	bf00      	nop
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b086      	sub	sp, #24
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	4603      	mov	r3, r0
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058e0:	f7ff ff42 	bl	8005768 <__NVIC_GetPriorityGrouping>
 80058e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	6978      	ldr	r0, [r7, #20]
 80058ec:	f7ff ff90 	bl	8005810 <NVIC_EncodePriority>
 80058f0:	4602      	mov	r2, r0
 80058f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ff5f 	bl	80057bc <__NVIC_SetPriority>
}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	4603      	mov	r3, r0
 800590e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff35 	bl	8005784 <__NVIC_EnableIRQ>
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff ffa2 	bl	8005874 <SysTick_Config>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800593a:	b480      	push	{r7}
 800593c:	b085      	sub	sp, #20
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800594c:	2b02      	cmp	r3, #2
 800594e:	d008      	beq.n	8005962 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2204      	movs	r2, #4
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e020      	b.n	80059a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 020e 	bic.w	r2, r2, #14
 8005970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0201 	bic.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
	...

080059b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d005      	beq.n	80059d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
 80059d0:	e0d6      	b.n	8005b80 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 020e 	bic.w	r2, r2, #14
 80059e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	4b64      	ldr	r3, [pc, #400]	; (8005b8c <HAL_DMA_Abort_IT+0x1dc>)
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d958      	bls.n	8005ab0 <HAL_DMA_Abort_IT+0x100>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a63      	ldr	r2, [pc, #396]	; (8005b90 <HAL_DMA_Abort_IT+0x1e0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04f      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0xf8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a61      	ldr	r2, [pc, #388]	; (8005b94 <HAL_DMA_Abort_IT+0x1e4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d048      	beq.n	8005aa4 <HAL_DMA_Abort_IT+0xf4>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a60      	ldr	r2, [pc, #384]	; (8005b98 <HAL_DMA_Abort_IT+0x1e8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_Abort_IT+0xee>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5e      	ldr	r2, [pc, #376]	; (8005b9c <HAL_DMA_Abort_IT+0x1ec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d038      	beq.n	8005a98 <HAL_DMA_Abort_IT+0xe8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a5d      	ldr	r2, [pc, #372]	; (8005ba0 <HAL_DMA_Abort_IT+0x1f0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d030      	beq.n	8005a92 <HAL_DMA_Abort_IT+0xe2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5b      	ldr	r2, [pc, #364]	; (8005ba4 <HAL_DMA_Abort_IT+0x1f4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d028      	beq.n	8005a8c <HAL_DMA_Abort_IT+0xdc>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a53      	ldr	r2, [pc, #332]	; (8005b8c <HAL_DMA_Abort_IT+0x1dc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d020      	beq.n	8005a86 <HAL_DMA_Abort_IT+0xd6>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a57      	ldr	r2, [pc, #348]	; (8005ba8 <HAL_DMA_Abort_IT+0x1f8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d019      	beq.n	8005a82 <HAL_DMA_Abort_IT+0xd2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a56      	ldr	r2, [pc, #344]	; (8005bac <HAL_DMA_Abort_IT+0x1fc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d012      	beq.n	8005a7e <HAL_DMA_Abort_IT+0xce>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a54      	ldr	r2, [pc, #336]	; (8005bb0 <HAL_DMA_Abort_IT+0x200>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00a      	beq.n	8005a78 <HAL_DMA_Abort_IT+0xc8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a53      	ldr	r2, [pc, #332]	; (8005bb4 <HAL_DMA_Abort_IT+0x204>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d102      	bne.n	8005a72 <HAL_DMA_Abort_IT+0xc2>
 8005a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a70:	e01b      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a76:	e018      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a7c:	e015      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a7e:	2310      	movs	r3, #16
 8005a80:	e013      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e011      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a8a:	e00e      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a90:	e00b      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a96:	e008      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a9c:	e005      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa2:	e002      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	e000      	b.n	8005aaa <HAL_DMA_Abort_IT+0xfa>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4a43      	ldr	r2, [pc, #268]	; (8005bb8 <HAL_DMA_Abort_IT+0x208>)
 8005aac:	6053      	str	r3, [r2, #4]
 8005aae:	e057      	b.n	8005b60 <HAL_DMA_Abort_IT+0x1b0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a36      	ldr	r2, [pc, #216]	; (8005b90 <HAL_DMA_Abort_IT+0x1e0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d04f      	beq.n	8005b5a <HAL_DMA_Abort_IT+0x1aa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a35      	ldr	r2, [pc, #212]	; (8005b94 <HAL_DMA_Abort_IT+0x1e4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d048      	beq.n	8005b56 <HAL_DMA_Abort_IT+0x1a6>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a33      	ldr	r2, [pc, #204]	; (8005b98 <HAL_DMA_Abort_IT+0x1e8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d040      	beq.n	8005b50 <HAL_DMA_Abort_IT+0x1a0>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a32      	ldr	r2, [pc, #200]	; (8005b9c <HAL_DMA_Abort_IT+0x1ec>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d038      	beq.n	8005b4a <HAL_DMA_Abort_IT+0x19a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <HAL_DMA_Abort_IT+0x1f0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d030      	beq.n	8005b44 <HAL_DMA_Abort_IT+0x194>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <HAL_DMA_Abort_IT+0x1f4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d028      	beq.n	8005b3e <HAL_DMA_Abort_IT+0x18e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <HAL_DMA_Abort_IT+0x1dc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d020      	beq.n	8005b38 <HAL_DMA_Abort_IT+0x188>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2b      	ldr	r2, [pc, #172]	; (8005ba8 <HAL_DMA_Abort_IT+0x1f8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d019      	beq.n	8005b34 <HAL_DMA_Abort_IT+0x184>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a29      	ldr	r2, [pc, #164]	; (8005bac <HAL_DMA_Abort_IT+0x1fc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d012      	beq.n	8005b30 <HAL_DMA_Abort_IT+0x180>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a28      	ldr	r2, [pc, #160]	; (8005bb0 <HAL_DMA_Abort_IT+0x200>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00a      	beq.n	8005b2a <HAL_DMA_Abort_IT+0x17a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a26      	ldr	r2, [pc, #152]	; (8005bb4 <HAL_DMA_Abort_IT+0x204>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d102      	bne.n	8005b24 <HAL_DMA_Abort_IT+0x174>
 8005b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b22:	e01b      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b28:	e018      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b2e:	e015      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b30:	2310      	movs	r3, #16
 8005b32:	e013      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e011      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b3c:	e00e      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b42:	e00b      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b48:	e008      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b4e:	e005      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b54:	e002      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b56:	2310      	movs	r3, #16
 8005b58:	e000      	b.n	8005b5c <HAL_DMA_Abort_IT+0x1ac>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <HAL_DMA_Abort_IT+0x20c>)
 8005b5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
    } 
  }
  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40020080 	.word	0x40020080
 8005b90:	40020008 	.word	0x40020008
 8005b94:	4002001c 	.word	0x4002001c
 8005b98:	40020030 	.word	0x40020030
 8005b9c:	40020044 	.word	0x40020044
 8005ba0:	40020058 	.word	0x40020058
 8005ba4:	4002006c 	.word	0x4002006c
 8005ba8:	40020408 	.word	0x40020408
 8005bac:	4002041c 	.word	0x4002041c
 8005bb0:	40020430 	.word	0x40020430
 8005bb4:	40020444 	.word	0x40020444
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	40020000 	.word	0x40020000

08005bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b08b      	sub	sp, #44	; 0x2c
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bd2:	e169      	b.n	8005ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	f040 8158 	bne.w	8005ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	4a9a      	ldr	r2, [pc, #616]	; (8005e60 <HAL_GPIO_Init+0x2a0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d05e      	beq.n	8005cba <HAL_GPIO_Init+0xfa>
 8005bfc:	4a98      	ldr	r2, [pc, #608]	; (8005e60 <HAL_GPIO_Init+0x2a0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d875      	bhi.n	8005cee <HAL_GPIO_Init+0x12e>
 8005c02:	4a98      	ldr	r2, [pc, #608]	; (8005e64 <HAL_GPIO_Init+0x2a4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d058      	beq.n	8005cba <HAL_GPIO_Init+0xfa>
 8005c08:	4a96      	ldr	r2, [pc, #600]	; (8005e64 <HAL_GPIO_Init+0x2a4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d86f      	bhi.n	8005cee <HAL_GPIO_Init+0x12e>
 8005c0e:	4a96      	ldr	r2, [pc, #600]	; (8005e68 <HAL_GPIO_Init+0x2a8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d052      	beq.n	8005cba <HAL_GPIO_Init+0xfa>
 8005c14:	4a94      	ldr	r2, [pc, #592]	; (8005e68 <HAL_GPIO_Init+0x2a8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d869      	bhi.n	8005cee <HAL_GPIO_Init+0x12e>
 8005c1a:	4a94      	ldr	r2, [pc, #592]	; (8005e6c <HAL_GPIO_Init+0x2ac>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d04c      	beq.n	8005cba <HAL_GPIO_Init+0xfa>
 8005c20:	4a92      	ldr	r2, [pc, #584]	; (8005e6c <HAL_GPIO_Init+0x2ac>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d863      	bhi.n	8005cee <HAL_GPIO_Init+0x12e>
 8005c26:	4a92      	ldr	r2, [pc, #584]	; (8005e70 <HAL_GPIO_Init+0x2b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d046      	beq.n	8005cba <HAL_GPIO_Init+0xfa>
 8005c2c:	4a90      	ldr	r2, [pc, #576]	; (8005e70 <HAL_GPIO_Init+0x2b0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d85d      	bhi.n	8005cee <HAL_GPIO_Init+0x12e>
 8005c32:	2b12      	cmp	r3, #18
 8005c34:	d82a      	bhi.n	8005c8c <HAL_GPIO_Init+0xcc>
 8005c36:	2b12      	cmp	r3, #18
 8005c38:	d859      	bhi.n	8005cee <HAL_GPIO_Init+0x12e>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <HAL_GPIO_Init+0x80>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005cbb 	.word	0x08005cbb
 8005c44:	08005c95 	.word	0x08005c95
 8005c48:	08005ca7 	.word	0x08005ca7
 8005c4c:	08005ce9 	.word	0x08005ce9
 8005c50:	08005cef 	.word	0x08005cef
 8005c54:	08005cef 	.word	0x08005cef
 8005c58:	08005cef 	.word	0x08005cef
 8005c5c:	08005cef 	.word	0x08005cef
 8005c60:	08005cef 	.word	0x08005cef
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005cef 	.word	0x08005cef
 8005c6c:	08005cef 	.word	0x08005cef
 8005c70:	08005cef 	.word	0x08005cef
 8005c74:	08005cef 	.word	0x08005cef
 8005c78:	08005cef 	.word	0x08005cef
 8005c7c:	08005cef 	.word	0x08005cef
 8005c80:	08005cef 	.word	0x08005cef
 8005c84:	08005c9d 	.word	0x08005c9d
 8005c88:	08005cb1 	.word	0x08005cb1
 8005c8c:	4a79      	ldr	r2, [pc, #484]	; (8005e74 <HAL_GPIO_Init+0x2b4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c92:	e02c      	b.n	8005cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	623b      	str	r3, [r7, #32]
          break;
 8005c9a:	e029      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	623b      	str	r3, [r7, #32]
          break;
 8005ca4:	e024      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	3308      	adds	r3, #8
 8005cac:	623b      	str	r3, [r7, #32]
          break;
 8005cae:	e01f      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	623b      	str	r3, [r7, #32]
          break;
 8005cb8:	e01a      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	623b      	str	r3, [r7, #32]
          break;
 8005cc6:	e013      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d105      	bne.n	8005cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	611a      	str	r2, [r3, #16]
          break;
 8005cda:	e009      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005cdc:	2308      	movs	r3, #8
 8005cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	615a      	str	r2, [r3, #20]
          break;
 8005ce6:	e003      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
          break;
 8005cec:	e000      	b.n	8005cf0 <HAL_GPIO_Init+0x130>
          break;
 8005cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2bff      	cmp	r3, #255	; 0xff
 8005cf4:	d801      	bhi.n	8005cfa <HAL_GPIO_Init+0x13a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	e001      	b.n	8005cfe <HAL_GPIO_Init+0x13e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2bff      	cmp	r3, #255	; 0xff
 8005d04:	d802      	bhi.n	8005d0c <HAL_GPIO_Init+0x14c>
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	e002      	b.n	8005d12 <HAL_GPIO_Init+0x152>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	3b08      	subs	r3, #8
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	210f      	movs	r1, #15
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	6a39      	ldr	r1, [r7, #32]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80b1 	beq.w	8005ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d40:	4b4d      	ldr	r3, [pc, #308]	; (8005e78 <HAL_GPIO_Init+0x2b8>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	4a4c      	ldr	r2, [pc, #304]	; (8005e78 <HAL_GPIO_Init+0x2b8>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6193      	str	r3, [r2, #24]
 8005d4c:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <HAL_GPIO_Init+0x2b8>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	60bb      	str	r3, [r7, #8]
 8005d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005d58:	4a48      	ldr	r2, [pc, #288]	; (8005e7c <HAL_GPIO_Init+0x2bc>)
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	089b      	lsrs	r3, r3, #2
 8005d5e:	3302      	adds	r3, #2
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	220f      	movs	r2, #15
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <HAL_GPIO_Init+0x2c0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_GPIO_Init+0x1ec>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3f      	ldr	r2, [pc, #252]	; (8005e84 <HAL_GPIO_Init+0x2c4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00d      	beq.n	8005da8 <HAL_GPIO_Init+0x1e8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3e      	ldr	r2, [pc, #248]	; (8005e88 <HAL_GPIO_Init+0x2c8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <HAL_GPIO_Init+0x1e4>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3d      	ldr	r2, [pc, #244]	; (8005e8c <HAL_GPIO_Init+0x2cc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d101      	bne.n	8005da0 <HAL_GPIO_Init+0x1e0>
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e006      	b.n	8005dae <HAL_GPIO_Init+0x1ee>
 8005da0:	2304      	movs	r3, #4
 8005da2:	e004      	b.n	8005dae <HAL_GPIO_Init+0x1ee>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e002      	b.n	8005dae <HAL_GPIO_Init+0x1ee>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_GPIO_Init+0x1ee>
 8005dac:	2300      	movs	r3, #0
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	f002 0203 	and.w	r2, r2, #3
 8005db4:	0092      	lsls	r2, r2, #2
 8005db6:	4093      	lsls	r3, r2
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005dbe:	492f      	ldr	r1, [pc, #188]	; (8005e7c <HAL_GPIO_Init+0x2bc>)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	492c      	ldr	r1, [pc, #176]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]
 8005de4:	e006      	b.n	8005df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005de6:	4b2a      	ldr	r3, [pc, #168]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	4928      	ldr	r1, [pc, #160]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005e00:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	4922      	ldr	r1, [pc, #136]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	e006      	b.n	8005e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	491e      	ldr	r1, [pc, #120]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d006      	beq.n	8005e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e28:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	4918      	ldr	r1, [pc, #96]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
 8005e34:	e006      	b.n	8005e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e36:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	4914      	ldr	r1, [pc, #80]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d021      	beq.n	8005e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	490e      	ldr	r1, [pc, #56]	; (8005e90 <HAL_GPIO_Init+0x2d0>)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60cb      	str	r3, [r1, #12]
 8005e5c:	e021      	b.n	8005ea2 <HAL_GPIO_Init+0x2e2>
 8005e5e:	bf00      	nop
 8005e60:	10320000 	.word	0x10320000
 8005e64:	10310000 	.word	0x10310000
 8005e68:	10220000 	.word	0x10220000
 8005e6c:	10210000 	.word	0x10210000
 8005e70:	10120000 	.word	0x10120000
 8005e74:	10110000 	.word	0x10110000
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010800 	.word	0x40010800
 8005e84:	40010c00 	.word	0x40010c00
 8005e88:	40011000 	.word	0x40011000
 8005e8c:	40011400 	.word	0x40011400
 8005e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	4909      	ldr	r1, [pc, #36]	; (8005ec4 <HAL_GPIO_Init+0x304>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f47f ae8e 	bne.w	8005bd4 <HAL_GPIO_Init+0x14>
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	372c      	adds	r7, #44	; 0x2c
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40010400 	.word	0x40010400

08005ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	887b      	ldrh	r3, [r7, #2]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e001      	b.n	8005eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bc80      	pop	{r7}
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	807b      	strh	r3, [r7, #2]
 8005f02:	4613      	mov	r3, r2
 8005f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f06:	787b      	ldrb	r3, [r7, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f12:	e003      	b.n	8005f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	041a      	lsls	r2, r3, #16
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	611a      	str	r2, [r3, #16]
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr

08005f26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f38:	887a      	ldrh	r2, [r7, #2]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	041a      	lsls	r2, r3, #16
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	43d9      	mvns	r1, r3
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	400b      	ands	r3, r1
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	611a      	str	r2, [r3, #16]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f64:	695a      	ldr	r2, [r3, #20]
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d006      	beq.n	8005f7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f6e:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f70:	88fb      	ldrh	r3, [r7, #6]
 8005f72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f74:	88fb      	ldrh	r3, [r7, #6]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fb fb9a 	bl	80016b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40010400 	.word	0x40010400

08005f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e304      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8087 	beq.w	80060b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fa8:	4b92      	ldr	r3, [pc, #584]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f003 030c 	and.w	r3, r3, #12
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d00c      	beq.n	8005fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005fb4:	4b8f      	ldr	r3, [pc, #572]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 030c 	and.w	r3, r3, #12
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d112      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x5e>
 8005fc0:	4b8c      	ldr	r3, [pc, #560]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fce:	4b89      	ldr	r3, [pc, #548]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d06c      	beq.n	80060b4 <HAL_RCC_OscConfig+0x12c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d168      	bne.n	80060b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e2de      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fee:	d106      	bne.n	8005ffe <HAL_RCC_OscConfig+0x76>
 8005ff0:	4b80      	ldr	r3, [pc, #512]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a7f      	ldr	r2, [pc, #508]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8005ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ffa:	6013      	str	r3, [r2, #0]
 8005ffc:	e02e      	b.n	800605c <HAL_RCC_OscConfig+0xd4>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10c      	bne.n	8006020 <HAL_RCC_OscConfig+0x98>
 8006006:	4b7b      	ldr	r3, [pc, #492]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a7a      	ldr	r2, [pc, #488]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4b78      	ldr	r3, [pc, #480]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a77      	ldr	r2, [pc, #476]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e01d      	b.n	800605c <HAL_RCC_OscConfig+0xd4>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006028:	d10c      	bne.n	8006044 <HAL_RCC_OscConfig+0xbc>
 800602a:	4b72      	ldr	r3, [pc, #456]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a71      	ldr	r2, [pc, #452]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b6f      	ldr	r3, [pc, #444]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a6e      	ldr	r2, [pc, #440]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e00b      	b.n	800605c <HAL_RCC_OscConfig+0xd4>
 8006044:	4b6b      	ldr	r3, [pc, #428]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6a      	ldr	r2, [pc, #424]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800604a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	4b68      	ldr	r3, [pc, #416]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a67      	ldr	r2, [pc, #412]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006064:	f7fe fce4 	bl	8004a30 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800606c:	f7fe fce0 	bl	8004a30 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	; 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e292      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607e:	4b5d      	ldr	r3, [pc, #372]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0xe4>
 800608a:	e014      	b.n	80060b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fe fcd0 	bl	8004a30 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006094:	f7fe fccc 	bl	8004a30 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	; 0x64
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e27e      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a6:	4b53      	ldr	r3, [pc, #332]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0x10c>
 80060b2:	e000      	b.n	80060b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d063      	beq.n	800618a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060c2:	4b4c      	ldr	r3, [pc, #304]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80060ce:	4b49      	ldr	r3, [pc, #292]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f003 030c 	and.w	r3, r3, #12
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d11c      	bne.n	8006114 <HAL_RCC_OscConfig+0x18c>
 80060da:	4b46      	ldr	r3, [pc, #280]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d116      	bne.n	8006114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e6:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_RCC_OscConfig+0x176>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d001      	beq.n	80060fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e252      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fe:	4b3d      	ldr	r3, [pc, #244]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4939      	ldr	r1, [pc, #228]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006112:	e03a      	b.n	800618a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d020      	beq.n	800615e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800611c:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <HAL_RCC_OscConfig+0x270>)
 800611e:	2201      	movs	r2, #1
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006122:	f7fe fc85 	bl	8004a30 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800612a:	f7fe fc81 	bl	8004a30 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e233      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800613c:	4b2d      	ldr	r3, [pc, #180]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f0      	beq.n	800612a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006148:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4927      	ldr	r1, [pc, #156]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	600b      	str	r3, [r1, #0]
 800615c:	e015      	b.n	800618a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800615e:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <HAL_RCC_OscConfig+0x270>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006164:	f7fe fc64 	bl	8004a30 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800616c:	f7fe fc60 	bl	8004a30 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e212      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617e:	4b1d      	ldr	r3, [pc, #116]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d03a      	beq.n	800620c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d019      	beq.n	80061d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800619e:	4b17      	ldr	r3, [pc, #92]	; (80061fc <HAL_RCC_OscConfig+0x274>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a4:	f7fe fc44 	bl	8004a30 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ac:	f7fe fc40 	bl	8004a30 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e1f2      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061be:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <HAL_RCC_OscConfig+0x26c>)
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80061ca:	2001      	movs	r0, #1
 80061cc:	f000 fc20 	bl	8006a10 <RCC_Delay>
 80061d0:	e01c      	b.n	800620c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <HAL_RCC_OscConfig+0x274>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d8:	f7fe fc2a 	bl	8004a30 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061de:	e00f      	b.n	8006200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e0:	f7fe fc26 	bl	8004a30 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d908      	bls.n	8006200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e1d8      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
 80061f2:	bf00      	nop
 80061f4:	40021000 	.word	0x40021000
 80061f8:	42420000 	.word	0x42420000
 80061fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006200:	4b9b      	ldr	r3, [pc, #620]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e9      	bne.n	80061e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80a6 	beq.w	8006366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621e:	4b94      	ldr	r3, [pc, #592]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10d      	bne.n	8006246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622a:	4b91      	ldr	r3, [pc, #580]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	4a90      	ldr	r2, [pc, #576]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006234:	61d3      	str	r3, [r2, #28]
 8006236:	4b8e      	ldr	r3, [pc, #568]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006242:	2301      	movs	r3, #1
 8006244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006246:	4b8b      	ldr	r3, [pc, #556]	; (8006474 <HAL_RCC_OscConfig+0x4ec>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d118      	bne.n	8006284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006252:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCC_OscConfig+0x4ec>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a87      	ldr	r2, [pc, #540]	; (8006474 <HAL_RCC_OscConfig+0x4ec>)
 8006258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800625e:	f7fe fbe7 	bl	8004a30 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006266:	f7fe fbe3 	bl	8004a30 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b64      	cmp	r3, #100	; 0x64
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e195      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006278:	4b7e      	ldr	r3, [pc, #504]	; (8006474 <HAL_RCC_OscConfig+0x4ec>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0f0      	beq.n	8006266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d106      	bne.n	800629a <HAL_RCC_OscConfig+0x312>
 800628c:	4b78      	ldr	r3, [pc, #480]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4a77      	ldr	r2, [pc, #476]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006292:	f043 0301 	orr.w	r3, r3, #1
 8006296:	6213      	str	r3, [r2, #32]
 8006298:	e02d      	b.n	80062f6 <HAL_RCC_OscConfig+0x36e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10c      	bne.n	80062bc <HAL_RCC_OscConfig+0x334>
 80062a2:	4b73      	ldr	r3, [pc, #460]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	4a72      	ldr	r2, [pc, #456]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	6213      	str	r3, [r2, #32]
 80062ae:	4b70      	ldr	r3, [pc, #448]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	4a6f      	ldr	r2, [pc, #444]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062b4:	f023 0304 	bic.w	r3, r3, #4
 80062b8:	6213      	str	r3, [r2, #32]
 80062ba:	e01c      	b.n	80062f6 <HAL_RCC_OscConfig+0x36e>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b05      	cmp	r3, #5
 80062c2:	d10c      	bne.n	80062de <HAL_RCC_OscConfig+0x356>
 80062c4:	4b6a      	ldr	r3, [pc, #424]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	4a69      	ldr	r2, [pc, #420]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062ca:	f043 0304 	orr.w	r3, r3, #4
 80062ce:	6213      	str	r3, [r2, #32]
 80062d0:	4b67      	ldr	r3, [pc, #412]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	4a66      	ldr	r2, [pc, #408]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6213      	str	r3, [r2, #32]
 80062dc:	e00b      	b.n	80062f6 <HAL_RCC_OscConfig+0x36e>
 80062de:	4b64      	ldr	r3, [pc, #400]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	4a63      	ldr	r2, [pc, #396]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6213      	str	r3, [r2, #32]
 80062ea:	4b61      	ldr	r3, [pc, #388]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	4a60      	ldr	r2, [pc, #384]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d015      	beq.n	800632a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fe:	f7fe fb97 	bl	8004a30 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	e00a      	b.n	800631c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fe fb93 	bl	8004a30 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e143      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631c:	4b54      	ldr	r3, [pc, #336]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0ee      	beq.n	8006306 <HAL_RCC_OscConfig+0x37e>
 8006328:	e014      	b.n	8006354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632a:	f7fe fb81 	bl	8004a30 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fe fb7d 	bl	8004a30 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e12d      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006348:	4b49      	ldr	r3, [pc, #292]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ee      	bne.n	8006332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d105      	bne.n	8006366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800635a:	4b45      	ldr	r3, [pc, #276]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	4a44      	ldr	r2, [pc, #272]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006364:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 808c 	beq.w	8006488 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8006370:	4b3f      	ldr	r3, [pc, #252]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637c:	d10e      	bne.n	800639c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800637e:	4b3c      	ldr	r3, [pc, #240]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8006386:	2b08      	cmp	r3, #8
 8006388:	d108      	bne.n	800639c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800638a:	4b39      	ldr	r3, [pc, #228]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8006392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006396:	d101      	bne.n	800639c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e103      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d14e      	bne.n	8006442 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80063a4:	4b32      	ldr	r3, [pc, #200]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d009      	beq.n	80063c4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80063b0:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80063bc:	429a      	cmp	r2, r3
 80063be:	d001      	beq.n	80063c4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0ef      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80063c4:	4b2c      	ldr	r3, [pc, #176]	; (8006478 <HAL_RCC_OscConfig+0x4f0>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fe fb31 	bl	8004a30 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063d2:	f7fe fb2d 	bl	8004a30 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b64      	cmp	r3, #100	; 0x64
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e0df      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80063e4:	4b22      	ldr	r3, [pc, #136]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f0      	bne.n	80063d2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80063f0:	4b1f      	ldr	r3, [pc, #124]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	491c      	ldr	r1, [pc, #112]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006406:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640e:	4918      	ldr	r1, [pc, #96]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8006414:	4b18      	ldr	r3, [pc, #96]	; (8006478 <HAL_RCC_OscConfig+0x4f0>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7fe fb09 	bl	8004a30 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006422:	f7fe fb05 	bl	8004a30 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b64      	cmp	r3, #100	; 0x64
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e0b7      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <HAL_RCC_OscConfig+0x49a>
 8006440:	e022      	b.n	8006488 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <HAL_RCC_OscConfig+0x4e8>)
 8006448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <HAL_RCC_OscConfig+0x4f0>)
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fe faec 	bl	8004a30 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800645a:	e00f      	b.n	800647c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800645c:	f7fe fae8 	bl	8004a30 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	; 0x64
 8006468:	d908      	bls.n	800647c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e09a      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
 800646e:	bf00      	nop
 8006470:	40021000 	.word	0x40021000
 8006474:	40007000 	.word	0x40007000
 8006478:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800647c:	4b4b      	ldr	r3, [pc, #300]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e9      	bne.n	800645c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8088 	beq.w	80065a2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006492:	4b46      	ldr	r3, [pc, #280]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	2b08      	cmp	r3, #8
 800649c:	d068      	beq.n	8006570 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d14d      	bne.n	8006542 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a6:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <HAL_RCC_OscConfig+0x628>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fe fac0 	bl	8004a30 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fe fabc 	bl	8004a30 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e06e      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c6:	4b39      	ldr	r3, [pc, #228]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064da:	d10f      	bne.n	80064fc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80064dc:	4b33      	ldr	r3, [pc, #204]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4931      	ldr	r1, [pc, #196]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	f023 020f 	bic.w	r2, r3, #15
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	492d      	ldr	r1, [pc, #180]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064fc:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	430b      	orrs	r3, r1
 800650e:	4927      	ldr	r1, [pc, #156]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006514:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <HAL_RCC_OscConfig+0x628>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fe fa89 	bl	8004a30 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006522:	f7fe fa85 	bl	8004a30 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e037      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x59a>
 8006540:	e02f      	b.n	80065a2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006542:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <HAL_RCC_OscConfig+0x628>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fe fa72 	bl	8004a30 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006550:	f7fe fa6e 	bl	8004a30 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e020      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x5c8>
 800656e:	e018      	b.n	80065a2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e013      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <HAL_RCC_OscConfig+0x624>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	429a      	cmp	r2, r3
 800658e:	d106      	bne.n	800659e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40021000 	.word	0x40021000
 80065b0:	42420060 	.word	0x42420060

080065b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0d0      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c8:	4b6a      	ldr	r3, [pc, #424]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d910      	bls.n	80065f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d6:	4b67      	ldr	r3, [pc, #412]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f023 0207 	bic.w	r2, r3, #7
 80065de:	4965      	ldr	r1, [pc, #404]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b63      	ldr	r3, [pc, #396]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d001      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0b8      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d020      	beq.n	8006646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006610:	4b59      	ldr	r3, [pc, #356]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4a58      	ldr	r2, [pc, #352]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006616:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800661a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006628:	4b53      	ldr	r3, [pc, #332]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a52      	ldr	r2, [pc, #328]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800662e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006634:	4b50      	ldr	r3, [pc, #320]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	494d      	ldr	r1, [pc, #308]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006642:	4313      	orrs	r3, r2
 8006644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d040      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d107      	bne.n	800666a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665a:	4b47      	ldr	r3, [pc, #284]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d115      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e07f      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d107      	bne.n	8006682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006672:	4b41      	ldr	r3, [pc, #260]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e073      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006682:	4b3d      	ldr	r3, [pc, #244]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e06b      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006692:	4b39      	ldr	r3, [pc, #228]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f023 0203 	bic.w	r2, r3, #3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	4936      	ldr	r1, [pc, #216]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a4:	f7fe f9c4 	bl	8004a30 <HAL_GetTick>
 80066a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ac:	f7fe f9c0 	bl	8004a30 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e053      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f003 020c 	and.w	r2, r3, #12
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d1eb      	bne.n	80066ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d4:	4b27      	ldr	r3, [pc, #156]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d210      	bcs.n	8006704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e2:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f023 0207 	bic.w	r2, r3, #7
 80066ea:	4922      	ldr	r1, [pc, #136]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b20      	ldr	r3, [pc, #128]	; (8006774 <HAL_RCC_ClockConfig+0x1c0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e032      	b.n	800676a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4916      	ldr	r1, [pc, #88]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800671e:	4313      	orrs	r3, r2
 8006720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d009      	beq.n	8006742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	490e      	ldr	r1, [pc, #56]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006742:	f000 f821 	bl	8006788 <HAL_RCC_GetSysClockFreq>
 8006746:	4602      	mov	r2, r0
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <HAL_RCC_ClockConfig+0x1c4>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	091b      	lsrs	r3, r3, #4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	490a      	ldr	r1, [pc, #40]	; (800677c <HAL_RCC_ClockConfig+0x1c8>)
 8006754:	5ccb      	ldrb	r3, [r1, r3]
 8006756:	fa22 f303 	lsr.w	r3, r2, r3
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <HAL_RCC_ClockConfig+0x1cc>)
 800675c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <HAL_RCC_ClockConfig+0x1d0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe f922 	bl	80049ac <HAL_InitTick>

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40022000 	.word	0x40022000
 8006778:	40021000 	.word	0x40021000
 800677c:	08007d48 	.word	0x08007d48
 8006780:	2000001c 	.word	0x2000001c
 8006784:	200003b8 	.word	0x200003b8

08006788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	b09d      	sub	sp, #116	; 0x74
 800678e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8006790:	4b81      	ldr	r3, [pc, #516]	; (8006998 <HAL_RCC_GetSysClockFreq+0x210>)
 8006792:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8006796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006798:	c407      	stmia	r4!, {r0, r1, r2}
 800679a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800679c:	4b7f      	ldr	r3, [pc, #508]	; (800699c <HAL_RCC_GetSysClockFreq+0x214>)
 800679e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80067a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	667b      	str	r3, [r7, #100]	; 0x64
 80067ac:	2300      	movs	r3, #0
 80067ae:	663b      	str	r3, [r7, #96]	; 0x60
 80067b0:	2300      	movs	r3, #0
 80067b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067b4:	2300      	movs	r3, #0
 80067b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c0:	2300      	movs	r3, #0
 80067c2:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067c4:	4b76      	ldr	r3, [pc, #472]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x218>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067cc:	f003 030c 	and.w	r3, r3, #12
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d002      	beq.n	80067da <HAL_RCC_GetSysClockFreq+0x52>
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d003      	beq.n	80067e0 <HAL_RCC_GetSysClockFreq+0x58>
 80067d8:	e0d4      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067da:	4b72      	ldr	r3, [pc, #456]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x21c>)
 80067dc:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 80067de:	e0d4      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067e2:	0c9b      	lsrs	r3, r3, #18
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	3340      	adds	r3, #64	; 0x40
 80067ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067ee:	4413      	add	r3, r2
 80067f0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80067f4:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80b9 	beq.w	8006974 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006802:	4b67      	ldr	r3, [pc, #412]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x218>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	3340      	adds	r3, #64	; 0x40
 800680c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006810:	4413      	add	r3, r2
 8006812:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8006816:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8006818:	4b61      	ldr	r3, [pc, #388]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x218>)
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 8095 	beq.w	8006950 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8006826:	4b5e      	ldr	r3, [pc, #376]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x218>)
 8006828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682a:	091b      	lsrs	r3, r3, #4
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	3301      	adds	r3, #1
 8006832:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006834:	4b5a      	ldr	r3, [pc, #360]	; (80069a0 <HAL_RCC_GetSysClockFreq+0x218>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	3302      	adds	r3, #2
 8006840:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006844:	2200      	movs	r2, #0
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	61fa      	str	r2, [r7, #28]
 800684a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800684c:	2200      	movs	r2, #0
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006852:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006856:	4622      	mov	r2, r4
 8006858:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800685c:	4684      	mov	ip, r0
 800685e:	fb0c f202 	mul.w	r2, ip, r2
 8006862:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8006866:	468c      	mov	ip, r1
 8006868:	4618      	mov	r0, r3
 800686a:	4621      	mov	r1, r4
 800686c:	4603      	mov	r3, r0
 800686e:	fb03 f30c 	mul.w	r3, r3, ip
 8006872:	4413      	add	r3, r2
 8006874:	4602      	mov	r2, r0
 8006876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006878:	fba2 8901 	umull	r8, r9, r2, r1
 800687c:	444b      	add	r3, r9
 800687e:	4699      	mov	r9, r3
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	f04f 0000 	mov.w	r0, #0
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	0159      	lsls	r1, r3, #5
 800688e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006892:	0150      	lsls	r0, r2, #5
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	ebb2 0508 	subs.w	r5, r2, r8
 800689c:	eb63 0609 	sbc.w	r6, r3, r9
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	01b3      	lsls	r3, r6, #6
 80068aa:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 80068ae:	01aa      	lsls	r2, r5, #6
 80068b0:	ebb2 0a05 	subs.w	sl, r2, r5
 80068b4:	eb63 0b06 	sbc.w	fp, r3, r6
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068cc:	4692      	mov	sl, r2
 80068ce:	469b      	mov	fp, r3
 80068d0:	eb1a 0308 	adds.w	r3, sl, r8
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	eb4b 0309 	adc.w	r3, fp, r9
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068e8:	4629      	mov	r1, r5
 80068ea:	024b      	lsls	r3, r1, #9
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	4604      	mov	r4, r0
 80068f2:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80068f6:	4601      	mov	r1, r0
 80068f8:	024a      	lsls	r2, r1, #9
 80068fa:	4610      	mov	r0, r2
 80068fc:	4619      	mov	r1, r3
 80068fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006900:	2200      	movs	r2, #0
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	617a      	str	r2, [r7, #20]
 8006906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006908:	2200      	movs	r2, #0
 800690a:	60bb      	str	r3, [r7, #8]
 800690c:	60fa      	str	r2, [r7, #12]
 800690e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006912:	4622      	mov	r2, r4
 8006914:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006918:	4645      	mov	r5, r8
 800691a:	fb05 f202 	mul.w	r2, r5, r2
 800691e:	464e      	mov	r6, r9
 8006920:	4625      	mov	r5, r4
 8006922:	461c      	mov	r4, r3
 8006924:	4623      	mov	r3, r4
 8006926:	fb03 f306 	mul.w	r3, r3, r6
 800692a:	4413      	add	r3, r2
 800692c:	4622      	mov	r2, r4
 800692e:	4644      	mov	r4, r8
 8006930:	fba2 2404 	umull	r2, r4, r2, r4
 8006934:	627c      	str	r4, [r7, #36]	; 0x24
 8006936:	623a      	str	r2, [r7, #32]
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	4413      	add	r3, r2
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
 800693e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006942:	f7f9 fc6f 	bl	8000224 <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4613      	mov	r3, r2
 800694c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800694e:	e007      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8006950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006952:	4a14      	ldr	r2, [pc, #80]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006954:	fb03 f202 	mul.w	r2, r3, r2
 8006958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800695a:	fbb2 f3f3 	udiv	r3, r2, r3
 800695e:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006960:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8006964:	461a      	mov	r2, r3
 8006966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006972:	e004      	b.n	800697e <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x220>)
 8006978:	fb02 f303 	mul.w	r3, r2, r3
 800697c:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 800697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006980:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006982:	e002      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006986:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800698a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800698c:	4618      	mov	r0, r3
 800698e:	3774      	adds	r7, #116	; 0x74
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	bf00      	nop
 8006998:	08007d28 	.word	0x08007d28
 800699c:	08007d38 	.word	0x08007d38
 80069a0:	40021000 	.word	0x40021000
 80069a4:	007a1200 	.word	0x007a1200
 80069a8:	003d0900 	.word	0x003d0900

080069ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b02      	ldr	r3, [pc, #8]	; (80069bc <HAL_RCC_GetHCLKFreq+0x10>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	2000001c 	.word	0x2000001c

080069c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c4:	f7ff fff2 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4903      	ldr	r1, [pc, #12]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40021000 	.word	0x40021000
 80069e4:	08007d58 	.word	0x08007d58

080069e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069ec:	f7ff ffde 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	0adb      	lsrs	r3, r3, #11
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	4903      	ldr	r1, [pc, #12]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80069fe:	5ccb      	ldrb	r3, [r1, r3]
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	08007d58 	.word	0x08007d58

08006a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <RCC_Delay+0x34>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <RCC_Delay+0x38>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	fb02 f303 	mul.w	r3, r2, r3
 8006a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006a2c:	bf00      	nop
  }
  while (Delay --);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1e5a      	subs	r2, r3, #1
 8006a32:	60fa      	str	r2, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f9      	bne.n	8006a2c <RCC_Delay+0x1c>
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	2000001c 	.word	0x2000001c
 8006a48:	10624dd3 	.word	0x10624dd3

08006a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e041      	b.n	8006ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fc fa60 	bl	8002f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f000 fa78 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d001      	beq.n	8006b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e03f      	b.n	8006b84 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0201 	orr.w	r2, r2, #1
 8006b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <HAL_TIM_Base_Start_IT+0xa4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d013      	beq.n	8006b4e <HAL_TIM_Base_Start_IT+0x62>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d00e      	beq.n	8006b4e <HAL_TIM_Base_Start_IT+0x62>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <HAL_TIM_Base_Start_IT+0xa8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d009      	beq.n	8006b4e <HAL_TIM_Base_Start_IT+0x62>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a16      	ldr	r2, [pc, #88]	; (8006b98 <HAL_TIM_Base_Start_IT+0xac>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d004      	beq.n	8006b4e <HAL_TIM_Base_Start_IT+0x62>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <HAL_TIM_Base_Start_IT+0xb0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d111      	bne.n	8006b72 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b06      	cmp	r3, #6
 8006b5e:	d010      	beq.n	8006b82 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0201 	orr.w	r2, r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b70:	e007      	b.n	8006b82 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00

08006ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d122      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d11b      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0202 	mvn.w	r2, #2
 8006bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f9b1 	bl	8006f4a <HAL_TIM_IC_CaptureCallback>
 8006be8:	e005      	b.n	8006bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9a4 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f9b3 	bl	8006f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d122      	bne.n	8006c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d11b      	bne.n	8006c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0204 	mvn.w	r2, #4
 8006c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2202      	movs	r2, #2
 8006c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f987 	bl	8006f4a <HAL_TIM_IC_CaptureCallback>
 8006c3c:	e005      	b.n	8006c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f97a 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f989 	bl	8006f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d122      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d11b      	bne.n	8006ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0208 	mvn.w	r2, #8
 8006c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f95d 	bl	8006f4a <HAL_TIM_IC_CaptureCallback>
 8006c90:	e005      	b.n	8006c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f950 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f95f 	bl	8006f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b10      	cmp	r3, #16
 8006cb0:	d122      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f06f 0210 	mvn.w	r2, #16
 8006cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2208      	movs	r2, #8
 8006cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f933 	bl	8006f4a <HAL_TIM_IC_CaptureCallback>
 8006ce4:	e005      	b.n	8006cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f926 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 f935 	bl	8006f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d10e      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d107      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0201 	mvn.w	r2, #1
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fa fcda 	bl	80016d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b80      	cmp	r3, #128	; 0x80
 8006d30:	d10e      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d107      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fa89 	bl	8007262 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	d10e      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d107      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8f9 	bl	8006f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	d10e      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d107      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0220 	mvn.w	r2, #32
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa54 	bl	8007250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d101      	bne.n	8006dc8 <HAL_TIM_ConfigClockSource+0x18>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	e0b3      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x180>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e00:	d03e      	beq.n	8006e80 <HAL_TIM_ConfigClockSource+0xd0>
 8006e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e06:	f200 8087 	bhi.w	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0e:	f000 8085 	beq.w	8006f1c <HAL_TIM_ConfigClockSource+0x16c>
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e16:	d87f      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e18:	2b70      	cmp	r3, #112	; 0x70
 8006e1a:	d01a      	beq.n	8006e52 <HAL_TIM_ConfigClockSource+0xa2>
 8006e1c:	2b70      	cmp	r3, #112	; 0x70
 8006e1e:	d87b      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e20:	2b60      	cmp	r3, #96	; 0x60
 8006e22:	d050      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x116>
 8006e24:	2b60      	cmp	r3, #96	; 0x60
 8006e26:	d877      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e28:	2b50      	cmp	r3, #80	; 0x50
 8006e2a:	d03c      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0xf6>
 8006e2c:	2b50      	cmp	r3, #80	; 0x50
 8006e2e:	d873      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	d058      	beq.n	8006ee6 <HAL_TIM_ConfigClockSource+0x136>
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d86f      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d064      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x156>
 8006e3c:	2b30      	cmp	r3, #48	; 0x30
 8006e3e:	d86b      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d060      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x156>
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d867      	bhi.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d05c      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x156>
 8006e4c:	2b10      	cmp	r3, #16
 8006e4e:	d05a      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006e50:	e062      	b.n	8006f18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	6899      	ldr	r1, [r3, #8]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f000 f970 	bl	8007146 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	609a      	str	r2, [r3, #8]
      break;
 8006e7e:	e04e      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	6899      	ldr	r1, [r3, #8]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f000 f959 	bl	8007146 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ea2:	609a      	str	r2, [r3, #8]
      break;
 8006ea4:	e03b      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 f8d0 	bl	8007058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2150      	movs	r1, #80	; 0x50
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f927 	bl	8007112 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e02b      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6818      	ldr	r0, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f000 f8ee 	bl	80070b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2160      	movs	r1, #96	; 0x60
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f917 	bl	8007112 <TIM_ITRx_SetConfig>
      break;
 8006ee4:	e01b      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6859      	ldr	r1, [r3, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f000 f8b0 	bl	8007058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2140      	movs	r1, #64	; 0x40
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f907 	bl	8007112 <TIM_ITRx_SetConfig>
      break;
 8006f04:	e00b      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f000 f8fe 	bl	8007112 <TIM_ITRx_SetConfig>
        break;
 8006f16:	e002      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr

08006f4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr

08006f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a2d      	ldr	r2, [pc, #180]	; (8007048 <TIM_Base_SetConfig+0xc8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_Base_SetConfig+0x38>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_Base_SetConfig+0x38>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a2a      	ldr	r2, [pc, #168]	; (800704c <TIM_Base_SetConfig+0xcc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_Base_SetConfig+0x38>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a29      	ldr	r2, [pc, #164]	; (8007050 <TIM_Base_SetConfig+0xd0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0x38>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a28      	ldr	r2, [pc, #160]	; (8007054 <TIM_Base_SetConfig+0xd4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <TIM_Base_SetConfig+0xc8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00f      	beq.n	8006ff2 <TIM_Base_SetConfig+0x72>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d00b      	beq.n	8006ff2 <TIM_Base_SetConfig+0x72>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a1b      	ldr	r2, [pc, #108]	; (800704c <TIM_Base_SetConfig+0xcc>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <TIM_Base_SetConfig+0x72>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a1a      	ldr	r2, [pc, #104]	; (8007050 <TIM_Base_SetConfig+0xd0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_Base_SetConfig+0x72>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a19      	ldr	r2, [pc, #100]	; (8007054 <TIM_Base_SetConfig+0xd4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a07      	ldr	r2, [pc, #28]	; (8007048 <TIM_Base_SetConfig+0xc8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d103      	bne.n	8007038 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	615a      	str	r2, [r3, #20]
}
 800703e:	bf00      	nop
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	bc80      	pop	{r7}
 8007046:	4770      	bx	lr
 8007048:	40012c00 	.word	0x40012c00
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00

08007058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	f023 0201 	bic.w	r2, r3, #1
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	011b      	lsls	r3, r3, #4
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f023 030a 	bic.w	r3, r3, #10
 8007094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f023 0210 	bic.w	r2, r3, #16
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	031b      	lsls	r3, r3, #12
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	621a      	str	r2, [r3, #32]
}
 8007108:	bf00      	nop
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	bc80      	pop	{r7}
 8007110:	4770      	bx	lr

08007112 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007128:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	f043 0307 	orr.w	r3, r3, #7
 8007134:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	609a      	str	r2, [r3, #8]
}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007146:	b480      	push	{r7}
 8007148:	b087      	sub	sp, #28
 800714a:	af00      	add	r7, sp, #0
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007160:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	021a      	lsls	r2, r3, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	431a      	orrs	r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4313      	orrs	r3, r2
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	609a      	str	r2, [r3, #8]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	bc80      	pop	{r7}
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007198:	2302      	movs	r3, #2
 800719a:	e04b      	b.n	8007234 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a19      	ldr	r2, [pc, #100]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d00e      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a15      	ldr	r2, [pc, #84]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d009      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a13      	ldr	r2, [pc, #76]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a12      	ldr	r2, [pc, #72]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d10c      	bne.n	8007222 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800720e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	4313      	orrs	r3, r2
 8007218:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40000400 	.word	0x40000400
 8007248:	40000800 	.word	0x40000800
 800724c:	40000c00 	.word	0x40000c00

08007250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr

08007274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e03f      	b.n	8007306 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fd fa28 	bl	80046f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2224      	movs	r2, #36	; 0x24
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fc61 	bl	8007b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2220      	movs	r2, #32
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b08a      	sub	sp, #40	; 0x28
 8007312:	af02      	add	r7, sp, #8
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	603b      	str	r3, [r7, #0]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b20      	cmp	r3, #32
 800732c:	d17c      	bne.n	8007428 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HAL_UART_Transmit+0x2c>
 8007334:	88fb      	ldrh	r3, [r7, #6]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e075      	b.n	800742a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_UART_Transmit+0x3e>
 8007348:	2302      	movs	r3, #2
 800734a:	e06e      	b.n	800742a <HAL_UART_Transmit+0x11c>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2221      	movs	r2, #33	; 0x21
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007362:	f7fd fb65 	bl	8004a30 <HAL_GetTick>
 8007366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	88fa      	ldrh	r2, [r7, #6]
 8007372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737c:	d108      	bne.n	8007390 <HAL_UART_Transmit+0x82>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e003      	b.n	8007398 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073a0:	e02a      	b.n	80073f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2200      	movs	r2, #0
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fa4c 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e036      	b.n	800742a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	3302      	adds	r3, #2
 80073d6:	61bb      	str	r3, [r7, #24]
 80073d8:	e007      	b.n	80073ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	781a      	ldrb	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	3301      	adds	r3, #1
 80073e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1cf      	bne.n	80073a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2200      	movs	r2, #0
 800740a:	2140      	movs	r1, #64	; 0x40
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fa1c 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e006      	b.n	800742a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	e000      	b.n	800742a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007428:	2302      	movs	r3, #2
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	4613      	mov	r3, r2
 800743e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b20      	cmp	r3, #32
 800744a:	d130      	bne.n	80074ae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_UART_Transmit_IT+0x26>
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e029      	b.n	80074b0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007462:	2b01      	cmp	r3, #1
 8007464:	d101      	bne.n	800746a <HAL_UART_Transmit_IT+0x38>
 8007466:	2302      	movs	r3, #2
 8007468:	e022      	b.n	80074b0 <HAL_UART_Transmit_IT+0x7e>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	88fa      	ldrh	r2, [r7, #6]
 8007482:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2221      	movs	r2, #33	; 0x21
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr
	...

080074bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80074dc:	2300      	movs	r3, #0
 80074de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10d      	bne.n	800750e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <HAL_UART_IRQHandler+0x52>
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa90 	bl	8007a2c <UART_Receive_IT>
      return;
 800750c:	e17b      	b.n	8007806 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80b1 	beq.w	8007678 <HAL_UART_IRQHandler+0x1bc>
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <HAL_UART_IRQHandler+0x70>
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 80a6 	beq.w	8007678 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_UART_IRQHandler+0x90>
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	f043 0201 	orr.w	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	f003 0304 	and.w	r3, r3, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <HAL_UART_IRQHandler+0xb0>
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f043 0202 	orr.w	r2, r3, #2
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <HAL_UART_IRQHandler+0xd0>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	f043 0204 	orr.w	r2, r3, #4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	f003 0308 	and.w	r3, r3, #8
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <HAL_UART_IRQHandler+0xfa>
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	f003 0320 	and.w	r3, r3, #32
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_UART_IRQHandler+0xee>
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f043 0208 	orr.w	r2, r3, #8
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 811e 	beq.w	80077fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_UART_IRQHandler+0x11e>
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fa29 	bl	8007a2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bf14      	ite	ne
 80075e8:	2301      	movne	r3, #1
 80075ea:	2300      	moveq	r3, #0
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <HAL_UART_IRQHandler+0x146>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d031      	beq.n	8007666 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f96b 	bl	80078de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d023      	beq.n	800765e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	695a      	ldr	r2, [r3, #20]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007624:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	d013      	beq.n	8007656 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	4a76      	ldr	r2, [pc, #472]	; (800780c <HAL_UART_IRQHandler+0x350>)
 8007634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f9b8 	bl	80059b0 <HAL_DMA_Abort_IT>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d016      	beq.n	8007674 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	e00e      	b.n	8007674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f8e3 	bl	8007822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	e00a      	b.n	8007674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f8df 	bl	8007822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007664:	e006      	b.n	8007674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f8db 	bl	8007822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007672:	e0c3      	b.n	80077fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007674:	bf00      	nop
    return;
 8007676:	e0c1      	b.n	80077fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	2b01      	cmp	r3, #1
 800767e:	f040 80a1 	bne.w	80077c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 809b 	beq.w	80077c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800768e:	6a3b      	ldr	r3, [r7, #32]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 8095 	beq.w	80077c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d04e      	beq.n	800775c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80076c8:	8a3b      	ldrh	r3, [r7, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8098 	beq.w	8007800 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076d4:	8a3a      	ldrh	r2, [r7, #16]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	f080 8092 	bcs.w	8007800 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8a3a      	ldrh	r2, [r7, #16]
 80076e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d02b      	beq.n	8007744 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695a      	ldr	r2, [r3, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0210 	bic.w	r2, r2, #16
 8007738:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe f8fb 	bl	800593a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800774c:	b29b      	uxth	r3, r3
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	b29b      	uxth	r3, r3
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f86d 	bl	8007834 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800775a:	e051      	b.n	8007800 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007764:	b29b      	uxth	r3, r3
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d047      	beq.n	8007804 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007774:	8a7b      	ldrh	r3, [r7, #18]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d044      	beq.n	8007804 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007788:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2220      	movs	r2, #32
 800779e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0210 	bic.w	r2, r2, #16
 80077b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b8:	8a7b      	ldrh	r3, [r7, #18]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f839 	bl	8007834 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80077c2:	e01f      	b.n	8007804 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d008      	beq.n	80077e0 <HAL_UART_IRQHandler+0x324>
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f8c0 	bl	800795e <UART_Transmit_IT>
    return;
 80077de:	e012      	b.n	8007806 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00d      	beq.n	8007806 <HAL_UART_IRQHandler+0x34a>
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f901 	bl	80079fc <UART_EndTransmit_IT>
    return;
 80077fa:	e004      	b.n	8007806 <HAL_UART_IRQHandler+0x34a>
    return;
 80077fc:	bf00      	nop
 80077fe:	e002      	b.n	8007806 <HAL_UART_IRQHandler+0x34a>
      return;
 8007800:	bf00      	nop
 8007802:	e000      	b.n	8007806 <HAL_UART_IRQHandler+0x34a>
      return;
 8007804:	bf00      	nop
  }
}
 8007806:	3728      	adds	r7, #40	; 0x28
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	08007937 	.word	0x08007937

08007810 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr

08007834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr

0800784a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b084      	sub	sp, #16
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	4613      	mov	r3, r2
 8007858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785a:	e02c      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d028      	beq.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0x30>
 800786a:	f7fd f8e1 	bl	8004a30 <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	429a      	cmp	r2, r3
 8007878:	d21d      	bcs.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68da      	ldr	r2, [r3, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007888:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695a      	ldr	r2, [r3, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e00f      	b.n	80078d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4013      	ands	r3, r2
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	bf0c      	ite	eq
 80078c6:	2301      	moveq	r3, #1
 80078c8:	2300      	movne	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d0c3      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	2b01      	cmp	r3, #1
 800790c:	d107      	bne.n	800791e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68da      	ldr	r2, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f022 0210 	bic.w	r2, r2, #16
 800791c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff ff66 	bl	8007822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800795e:	b480      	push	{r7}
 8007960:	b085      	sub	sp, #20
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b21      	cmp	r3, #33	; 0x21
 8007970:	d13e      	bne.n	80079f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797a:	d114      	bne.n	80079a6 <UART_Transmit_IT+0x48>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d110      	bne.n	80079a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	621a      	str	r2, [r3, #32]
 80079a4:	e008      	b.n	80079b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	1c59      	adds	r1, r3, #1
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6211      	str	r1, [r2, #32]
 80079b0:	781a      	ldrb	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4619      	mov	r1, r3
 80079c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10f      	bne.n	80079ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	e000      	b.n	80079f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68da      	ldr	r2, [r3, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7f9 fe8b 	bl	8001738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b22      	cmp	r3, #34	; 0x22
 8007a3e:	f040 8099 	bne.w	8007b74 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4a:	d117      	bne.n	8007a7c <UART_Receive_IT+0x50>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d113      	bne.n	8007a7c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	629a      	str	r2, [r3, #40]	; 0x28
 8007a7a:	e026      	b.n	8007aca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d007      	beq.n	8007aa0 <UART_Receive_IT+0x74>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <UART_Receive_IT+0x82>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e008      	b.n	8007ac0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d148      	bne.n	8007b70 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0220 	bic.w	r2, r2, #32
 8007aec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007afc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0201 	bic.w	r2, r2, #1
 8007b0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d123      	bne.n	8007b66 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0210 	bic.w	r2, r2, #16
 8007b32:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d10a      	bne.n	8007b58 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe68 	bl	8007834 <HAL_UARTEx_RxEventCallback>
 8007b64:	e002      	b.n	8007b6c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fe52 	bl	8007810 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	e002      	b.n	8007b76 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e000      	b.n	8007b76 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
  }
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007bba:	f023 030c 	bic.w	r3, r3, #12
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	68b9      	ldr	r1, [r7, #8]
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a2c      	ldr	r2, [pc, #176]	; (8007c94 <UART_SetConfig+0x114>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d103      	bne.n	8007bf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007be8:	f7fe fefe 	bl	80069e8 <HAL_RCC_GetPCLK2Freq>
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	e002      	b.n	8007bf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007bf0:	f7fe fee6 	bl	80069c0 <HAL_RCC_GetPCLK1Freq>
 8007bf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	009a      	lsls	r2, r3, #2
 8007c00:	441a      	add	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0c:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <UART_SetConfig+0x118>)
 8007c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	0119      	lsls	r1, r3, #4
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009a      	lsls	r2, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c2c:	4b1a      	ldr	r3, [pc, #104]	; (8007c98 <UART_SetConfig+0x118>)
 8007c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	2064      	movs	r0, #100	; 0x64
 8007c36:	fb00 f303 	mul.w	r3, r0, r3
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	3332      	adds	r3, #50	; 0x32
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <UART_SetConfig+0x118>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c4c:	4419      	add	r1, r3
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009a      	lsls	r2, r3, #2
 8007c58:	441a      	add	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c64:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <UART_SetConfig+0x118>)
 8007c66:	fba3 0302 	umull	r0, r3, r3, r2
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	2064      	movs	r0, #100	; 0x64
 8007c6e:	fb00 f303 	mul.w	r3, r0, r3
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	3332      	adds	r3, #50	; 0x32
 8007c78:	4a07      	ldr	r2, [pc, #28]	; (8007c98 <UART_SetConfig+0x118>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	095b      	lsrs	r3, r3, #5
 8007c80:	f003 020f 	and.w	r2, r3, #15
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	440a      	add	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40013800 	.word	0x40013800
 8007c98:	51eb851f 	.word	0x51eb851f

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	2600      	movs	r6, #0
 8007ca0:	4d0c      	ldr	r5, [pc, #48]	; (8007cd4 <__libc_init_array+0x38>)
 8007ca2:	4c0d      	ldr	r4, [pc, #52]	; (8007cd8 <__libc_init_array+0x3c>)
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	f000 f830 	bl	8007d10 <_init>
 8007cb0:	2600      	movs	r6, #0
 8007cb2:	4d0a      	ldr	r5, [pc, #40]	; (8007cdc <__libc_init_array+0x40>)
 8007cb4:	4c0a      	ldr	r4, [pc, #40]	; (8007ce0 <__libc_init_array+0x44>)
 8007cb6:	1b64      	subs	r4, r4, r5
 8007cb8:	10a4      	asrs	r4, r4, #2
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	08007d68 	.word	0x08007d68
 8007cd8:	08007d68 	.word	0x08007d68
 8007cdc:	08007d68 	.word	0x08007d68
 8007ce0:	08007d6c 	.word	0x08007d6c

08007ce4 <memcpy>:
 8007ce4:	440a      	add	r2, r1
 8007ce6:	4291      	cmp	r1, r2
 8007ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cec:	d100      	bne.n	8007cf0 <memcpy+0xc>
 8007cee:	4770      	bx	lr
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cf6:	4291      	cmp	r1, r2
 8007cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cfc:	d1f9      	bne.n	8007cf2 <memcpy+0xe>
 8007cfe:	bd10      	pop	{r4, pc}

08007d00 <memset>:
 8007d00:	4603      	mov	r3, r0
 8007d02:	4402      	add	r2, r0
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d100      	bne.n	8007d0a <memset+0xa>
 8007d08:	4770      	bx	lr
 8007d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d0e:	e7f9      	b.n	8007d04 <memset+0x4>

08007d10 <_init>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

08007d1c <_fini>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr
