
Vega_ETX_Display_Firmware_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dc8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe4  08007fe4  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe4  08007fe4  00017fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fec  08007fec  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00017fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08007ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200002e8  080082dc  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  080082dc  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f7c  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f44  00000000  00000000  0003328d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00037250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a00  00000000  00000000  00038148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172b3  00000000  00000000  0005ab48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba5fd  00000000  00000000  00071dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004100  00000000  00000000  0012c448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200002e8 	.word	0x200002e8
 8000200:	00000000 	.word	0x00000000
 8000204:	08007f94 	.word	0x08007f94

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200002ec 	.word	0x200002ec
 8000220:	08007f94 	.word	0x08007f94

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000532:	4b25      	ldr	r3, [pc, #148]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000534:	4a25      	ldr	r2, [pc, #148]	; (80005cc <MX_CAN1_Init+0xa0>)
 8000536:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800053a:	2209      	movs	r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000544:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800054c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000550:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000554:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000558:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000566:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800056e:	2200      	movs	r2, #0
 8000570:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000574:	2200      	movs	r2, #0
 8000576:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <MX_CAN1_Init+0x9c>)
 800057a:	2200      	movs	r2, #0
 800057c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <MX_CAN1_Init+0x9c>)
 8000580:	f003 ffd6 	bl	8004530 <HAL_CAN_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800058a:	f001 f819 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil1; //CAN Bus Filter
	canfil1.FilterActivation = ENABLE;
 800058e:	2301      	movs	r3, #1
 8000590:	623b      	str	r3, [r7, #32]
	canfil1.FilterBank = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
	canfil1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
	canfil1.FilterIdHigh = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	canfil1.FilterIdLow = 0x0000;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
	canfil1.FilterMaskIdHigh = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
	canfil1.FilterMaskIdLow = 0x0000;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	canfil1.FilterMode = CAN_FILTERMODE_IDMASK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
	canfil1.FilterScale = CAN_FILTERSCALE_32BIT;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
	canfil1.SlaveStartFilterBank = 14;
 80005b2:	230e      	movs	r3, #14
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfil1);
 80005b6:	463b      	mov	r3, r7
 80005b8:	4619      	mov	r1, r3
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_CAN1_Init+0x9c>)
 80005bc:	f004 f8b4 	bl	8004728 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000304 	.word	0x20000304
 80005cc:	40006400 	.word	0x40006400

080005d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <HAL_CAN_MspInit+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d149      	bne.n	8000684 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	61d3      	str	r3, [r2, #28]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 80005fe:	69db      	ldr	r3, [r3, #28]
 8000600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <HAL_CAN_MspInit+0xc0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000636:	f005 fb55 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <HAL_CAN_MspInit+0xc4>)
 8000650:	f005 fb48 	bl	8005ce4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2014      	movs	r0, #20
 800065a:	f004 fe8a 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800065e:	2014      	movs	r0, #20
 8000660:	f004 fea3 	bl	80053aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	2015      	movs	r0, #21
 800066a:	f004 fe82 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800066e:	2015      	movs	r0, #21
 8000670:	f004 fe9b 	bl	80053aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2016      	movs	r0, #22
 800067a:	f004 fe7a 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800067e:	2016      	movs	r0, #22
 8000680:	f004 fe93 	bl	80053aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40006400 	.word	0x40006400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800

08000698 <EVCU_setData_write>:

time_t t_of_day;

struct EVCU_setData EVCU_setData_i;

void EVCU_setData_write(uint8_t *canTX) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	//timeStampSend();6
//	testFlag_1 = true;
	EVCU_setData_i.dataID = 0;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <EVCU_setData_write+0x70>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
	EVCU_setData_i.fixSetS.bit.mode = targetMode;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <EVCU_setData_write+0x74>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	b2d9      	uxtb	r1, r3
 80006b2:	4a15      	ldr	r2, [pc, #84]	; (8000708 <EVCU_setData_write+0x70>)
 80006b4:	7893      	ldrb	r3, [r2, #2]
 80006b6:	f361 0301 	bfi	r3, r1, #0, #2
 80006ba:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.trip_rst = tripreset;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <EVCU_setData_write+0x78>)
 80006be:	7819      	ldrb	r1, [r3, #0]
 80006c0:	4a11      	ldr	r2, [pc, #68]	; (8000708 <EVCU_setData_write+0x70>)
 80006c2:	7893      	ldrb	r3, [r2, #2]
 80006c4:	f361 0382 	bfi	r3, r1, #2, #1
 80006c8:	7093      	strb	r3, [r2, #2]
	EVCU_setData_i.fixSetS.bit.currentMenu = currentMenu;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <EVCU_setData_write+0x7c>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	f003 0307 	and.w	r3, r3, #7
 80006d4:	b2d9      	uxtb	r1, r3
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <EVCU_setData_write+0x70>)
 80006d8:	7893      	ldrb	r3, [r2, #2]
 80006da:	f361 03c5 	bfi	r3, r1, #3, #3
 80006de:	7093      	strb	r3, [r2, #2]
	//EVCU_setData_i.fixSetS.bit.espRequest = espDataRequest;
	canTX[0] = EVCU_setData_i.dataID;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <EVCU_setData_write+0x70>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	701a      	strb	r2, [r3, #0]
	canTX[1] = EVCU_setData_i.fixSetS.all;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <EVCU_setData_write+0x70>)
 80006f0:	7892      	ldrb	r2, [r2, #2]
 80006f2:	701a      	strb	r2, [r3, #0]
	//Time Stamp: Call time Stamp Here
//	canTX[2] = (t_of_day << 24);
//	canTX[3] = (t_of_day << 16);
//	canTX[4] = (t_of_day << 8);
//	canTX[5] = (t_of_day & 0xFF);0
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, canTX, &canMailbox);
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <EVCU_setData_write+0x80>)
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <EVCU_setData_write+0x84>)
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <EVCU_setData_write+0x88>)
 80006fc:	f004 f938 	bl	8004970 <HAL_CAN_AddTxMessage>
	//Reset Flags
	//tripreset = false;
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000032c 	.word	0x2000032c
 800070c:	200003b3 	.word	0x200003b3
 8000710:	2000033b 	.word	0x2000033b
 8000714:	2000000b 	.word	0x2000000b
 8000718:	2000045c 	.word	0x2000045c
 800071c:	200003f4 	.word	0x200003f4
 8000720:	20000304 	.word	0x20000304

08000724 <EVCU_getData_read_40>:

//Call Through the interrupt
void EVCU_getData_read_40(uint8_t *canRX) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	currentstate = ((canRX[1] & 0xFF) >> 4);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3301      	adds	r3, #1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	091b      	lsrs	r3, r3, #4
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <EVCU_getData_read_40+0x124>)
 8000738:	701a      	strb	r2, [r3, #0]
	accessory = ((canRX[1] & 0x08) >> 3);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	10db      	asrs	r3, r3, #3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <EVCU_getData_read_40+0x128>)
 800074c:	701a      	strb	r2, [r3, #0]
	readytodrive = ((canRX[1] & 0x04) >> 2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3301      	adds	r3, #1
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	109b      	asrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b3c      	ldr	r3, [pc, #240]	; (8000850 <EVCU_getData_read_40+0x12c>)
 8000760:	701a      	strb	r2, [r3, #0]
	start = ((canRX[1] & 0x02) >> 1);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	105b      	asrs	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <EVCU_getData_read_40+0x130>)
 8000774:	701a      	strb	r2, [r3, #0]
	buzzer = (canRX[1] & 0x01);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <EVCU_getData_read_40+0x134>)
 8000784:	701a      	strb	r2, [r3, #0]
	trip_ack = ((canRX[2] & 0x80) >> 7);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	3302      	adds	r3, #2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	09db      	lsrs	r3, r3, #7
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <EVCU_getData_read_40+0x138>)
 8000792:	701a      	strb	r2, [r3, #0]
	mode_override = ((canRX[2] & 0x40) >> 6);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3302      	adds	r3, #2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	119b      	asrs	r3, r3, #6
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <EVCU_getData_read_40+0x13c>)
 80007a6:	701a      	strb	r2, [r3, #0]
	mode_evcu = ((canRX[2] & 0x30) >> 4);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3302      	adds	r3, #2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	111b      	asrs	r3, r3, #4
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <EVCU_getData_read_40+0x140>)
 80007ba:	701a      	strb	r2, [r3, #0]
	chargerconn = ((canRX[2] & 0x08) >> 3);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3302      	adds	r3, #2
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	10db      	asrs	r3, r3, #3
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <EVCU_getData_read_40+0x144>)
 80007ce:	701a      	strb	r2, [r3, #0]
	shutdown = ((canRX[2] & 0x04) >> 2);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3302      	adds	r3, #2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	109b      	asrs	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <EVCU_getData_read_40+0x148>)
 80007e2:	701a      	strb	r2, [r3, #0]

	//ID 0
	power = ((canRX[4] << 8) | canRX[3]);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3304      	adds	r3, #4
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	021b      	lsls	r3, r3, #8
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3303      	adds	r3, #3
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <EVCU_getData_read_40+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	test_speed = canRX[5];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3305      	adds	r3, #5
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b29a      	uxth	r2, r3
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <EVCU_getData_read_40+0x150>)
 8000808:	801a      	strh	r2, [r3, #0]
	rpm_meter = ((canRX[7] << 8) | canRX[6]);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3307      	adds	r3, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21a      	sxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3306      	adds	r3, #6
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b21b      	sxth	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <EVCU_getData_read_40+0x154>)
 8000824:	801a      	strh	r2, [r3, #0]
	if (starupMode) {
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <EVCU_getData_read_40+0x158>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <EVCU_getData_read_40+0x118>
		starupMode = false;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <EVCU_getData_read_40+0x158>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
		currentMode = mode_evcu;
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <EVCU_getData_read_40+0x140>)
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <EVCU_getData_read_40+0x15c>)
 800083a:	701a      	strb	r2, [r3, #0]
	}


}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000394 	.word	0x20000394
 800084c:	20000396 	.word	0x20000396
 8000850:	20000397 	.word	0x20000397
 8000854:	20000398 	.word	0x20000398
 8000858:	20000399 	.word	0x20000399
 800085c:	2000039a 	.word	0x2000039a
 8000860:	2000039b 	.word	0x2000039b
 8000864:	2000039c 	.word	0x2000039c
 8000868:	200003c9 	.word	0x200003c9
 800086c:	2000039e 	.word	0x2000039e
 8000870:	20000392 	.word	0x20000392
 8000874:	20000380 	.word	0x20000380
 8000878:	2000038c 	.word	0x2000038c
 800087c:	2000000e 	.word	0x2000000e
 8000880:	200003b2 	.word	0x200003b2

08000884 <EVCU_getData_read_41>:

void EVCU_getData_read_41(uint8_t *canRX) {
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d129      	bne.n	80008e8 <EVCU_getData_read_41+0x64>
		err_error = (canRX[1] & 0x0F);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b83      	ldr	r3, [pc, #524]	; (8000ab0 <EVCU_getData_read_41+0x22c>)
 80008a2:	701a      	strb	r2, [r3, #0]
		err_device = ((canRX[1] & 0x30) >> 4);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	111b      	asrs	r3, r3, #4
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b7f      	ldr	r3, [pc, #508]	; (8000ab4 <EVCU_getData_read_41+0x230>)
 80008b6:	701a      	strb	r2, [r3, #0]
		err_crit_mild = ((canRX[1] & 0x40) >> 6);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	119b      	asrs	r3, r3, #6
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b7b      	ldr	r3, [pc, #492]	; (8000ab8 <EVCU_getData_read_41+0x234>)
 80008ca:	701a      	strb	r2, [r3, #0]
		err_or_not = ((canRX[1] & 0x80) >> 7);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	09db      	lsrs	r3, r3, #7
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b79      	ldr	r3, [pc, #484]	; (8000abc <EVCU_getData_read_41+0x238>)
 80008d8:	701a      	strb	r2, [r3, #0]

		warning = ((canRX[2] & 0xC0) >> 6);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3302      	adds	r3, #2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	099b      	lsrs	r3, r3, #6
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b76      	ldr	r3, [pc, #472]	; (8000ac0 <EVCU_getData_read_41+0x23c>)
 80008e6:	701a      	strb	r2, [r3, #0]

	}
	if (canRX[0] == 1) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d120      	bne.n	8000932 <EVCU_getData_read_41+0xae>
		//			chargingcomp = (canRX[4] & 0x1);
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3304      	adds	r3, #4
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3303      	adds	r3, #3
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	431a      	orrs	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3302      	adds	r3, #2
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	041b      	lsls	r3, r3, #16
 800090a:	431a      	orrs	r2, r3
				| (canRX[1] << 24)); //ODO
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	061b      	lsls	r3, r3, #24
 8000914:	4313      	orrs	r3, r2
 8000916:	461a      	mov	r2, r3
		distance.ODO = ((canRX[4] & 0xFF) | (canRX[3] << 8) | (canRX[2] << 16)
 8000918:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 800091a:	601a      	str	r2, [r3, #0]
		distance.range = 10 *canRX[5];
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3305      	adds	r3, #5
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b29b      	uxth	r3, r3
 8000924:	461a      	mov	r2, r3
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b65      	ldr	r3, [pc, #404]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 8000930:	80da      	strh	r2, [r3, #6]
	}

	if (canRX[0] == 2) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d127      	bne.n	800098a <EVCU_getData_read_41+0x106>

		soc_value = canRX[1];
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	785a      	ldrb	r2, [r3, #1]
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <EVCU_getData_read_41+0x244>)
 8000940:	701a      	strb	r2, [r3, #0]
		soh_value = canRX[2];
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	789a      	ldrb	r2, [r3, #2]
 8000946:	4b61      	ldr	r3, [pc, #388]	; (8000acc <EVCU_getData_read_41+0x248>)
 8000948:	701a      	strb	r2, [r3, #0]
		pack_temp = canRX[3];
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	78da      	ldrb	r2, [r3, #3]
 800094e:	4b60      	ldr	r3, [pc, #384]	; (8000ad0 <EVCU_getData_read_41+0x24c>)
 8000950:	701a      	strb	r2, [r3, #0]
		lcell_voltage = ((canRX[5] & 0xFF) | (canRX[4] << 8));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3305      	adds	r3, #5
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3304      	adds	r3, #4
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21b      	sxth	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b21b      	sxth	r3, r3
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <EVCU_getData_read_41+0x250>)
 800096c:	801a      	strh	r2, [r3, #0]
		hcell_voltage = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3307      	adds	r3, #7
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b21a      	sxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3306      	adds	r3, #6
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21b      	sxth	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b21b      	sxth	r3, r3
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b54      	ldr	r3, [pc, #336]	; (8000ad8 <EVCU_getData_read_41+0x254>)
 8000988:	801a      	strh	r2, [r3, #0]
	}

	if (canRX[0] == 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d11a      	bne.n	80009c8 <EVCU_getData_read_41+0x144>
		pack_voltage = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3302      	adds	r3, #2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b21a      	sxth	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3301      	adds	r3, #1
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <EVCU_getData_read_41+0x258>)
 80009ac:	801a      	strh	r2, [r3, #0]
		dc_current = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3304      	adds	r3, #4
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b21a      	sxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3303      	adds	r3, #3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <EVCU_getData_read_41+0x25c>)
 80009c6:	801a      	strh	r2, [r3, #0]

	}
	if (canRX[0] == 4) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d11b      	bne.n	8000a08 <EVCU_getData_read_41+0x184>
		distance.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8)); //Trip
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3302      	adds	r3, #2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21b      	sxth	r3, r3
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 80009ea:	809a      	strh	r2, [r3, #4]
		distance.tripAvgSpeed = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3306      	adds	r3, #6
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3305      	adds	r3, #5
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	4313      	orrs	r3, r2
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 8000a06:	811a      	strh	r2, [r3, #8]

	}
	if (canRX[0] == 5) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b05      	cmp	r3, #5
 8000a0e:	d129      	bne.n	8000a64 <EVCU_getData_read_41+0x1e0>
		afterChargeData.trip = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3302      	adds	r3, #2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b21a      	sxth	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000a2a:	801a      	strh	r2, [r3, #0]
		afterChargeData.avarage_Speed = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3303      	adds	r3, #3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b21b      	sxth	r3, r3
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000a46:	805a      	strh	r2, [r3, #2]
		afterChargeData.economy = ((canRX[6] & 0xFF) | (canRX[5] << 8));
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3306      	adds	r3, #6
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3305      	adds	r3, #5
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000a62:	809a      	strh	r2, [r3, #4]
	}
	if (canRX[0] == 6) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b06      	cmp	r3, #6
 8000a6a:	d11b      	bne.n	8000aa4 <EVCU_getData_read_41+0x220>
		distance.trip_Power = ((canRX[2] & 0xFF) | (canRX[1] << 8));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <EVCU_getData_read_41+0x240>)
 8000a86:	819a      	strh	r2, [r3, #12]
		;
		afterChargeData.power = ((canRX[4] & 0xFF) | (canRX[3] << 8));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3303      	adds	r3, #3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	021b      	lsls	r3, r3, #8
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <EVCU_getData_read_41+0x260>)
 8000aa2:	80da      	strh	r2, [r3, #6]
		;

	}

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	2000039f 	.word	0x2000039f
 8000ab4:	200003a0 	.word	0x200003a0
 8000ab8:	200003a1 	.word	0x200003a1
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	2000039d 	.word	0x2000039d
 8000ac4:	20000358 	.word	0x20000358
 8000ac8:	20000384 	.word	0x20000384
 8000acc:	20000385 	.word	0x20000385
 8000ad0:	2000038e 	.word	0x2000038e
 8000ad4:	2000038a 	.word	0x2000038a
 8000ad8:	20000388 	.word	0x20000388
 8000adc:	20000386 	.word	0x20000386
 8000ae0:	20000390 	.word	0x20000390
 8000ae4:	20000368 	.word	0x20000368

08000ae8 <EVCU_getData_read_43>:

void EVCU_getData_read_43(uint8_t *canRX) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if (canRX[0] == 0) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d12d      	bne.n	8000b54 <EVCU_getData_read_43+0x6c>
		appData.speed = (canRX[1]);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785a      	ldrb	r2, [r3, #1]
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000afe:	701a      	strb	r2, [r3, #0]
		appData.RPM = ((canRX[3] & 0xFF) | (canRX[4] << 8));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3303      	adds	r3, #3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b1a:	805a      	strh	r2, [r3, #2]
		appData.DC_Current = ((canRX[5] & 0xFF) | (canRX[6] << 8));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3305      	adds	r3, #5
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3306      	adds	r3, #6
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b36:	809a      	strh	r2, [r3, #4]
		appData.MC_Current = ((canRX[7] & 0xFF) | (canRX[6] << 8));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3307      	adds	r3, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b21a      	sxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b52:	80da      	strh	r2, [r3, #6]
	}
	if (canRX[0] == 1) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d121      	bne.n	8000ba0 <EVCU_getData_read_43+0xb8>
		appData.SOC = (canRX[1]);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	785a      	ldrb	r2, [r3, #1]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b62:	721a      	strb	r2, [r3, #8]
		appData.pack_Voltage = ((canRX[3] & 0xFF) | (canRX[2] << 8));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3303      	adds	r3, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3302      	adds	r3, #2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b21b      	sxth	r3, r3
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b7e:	815a      	strh	r2, [r3, #10]
		appData.mcu_Temp = (canRX[4]);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	791a      	ldrb	r2, [r3, #4]
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b86:	731a      	strb	r2, [r3, #12]
		appData.motor_Temp = (canRX[5]);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	795a      	ldrb	r2, [r3, #5]
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b8e:	735a      	strb	r2, [r3, #13]
		appData.pack_Temp = (canRX[6]);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	799a      	ldrb	r2, [r3, #6]
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b96:	739a      	strb	r2, [r3, #14]
		appData.mode = (canRX[7]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	79da      	ldrb	r2, [r3, #7]
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <EVCU_getData_read_43+0xc4>)
 8000b9e:	73da      	strb	r2, [r3, #15]
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000370 	.word	0x20000370

08000bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_DMA_Init+0x38>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <MX_DMA_Init+0x38>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_DMA_Init+0x38>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	200c      	movs	r0, #12
 8000bd4:	f004 fbcd 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bd8:	200c      	movs	r0, #12
 8000bda:	f004 fbe6 	bl	80053aa <HAL_NVIC_EnableIRQ>

}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <setError>:
	//Display Error Code and Time Stamp on the Error Log Page
	//Write errLog data into this page using display functions
	//HAL_UART_Transmit(&huart3, Errors, sizeof(Errors), HAL_MAX_DELAY);
}

void setError(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	if (err_device == 0) { //General
 8000bf0:	4b83      	ldr	r3, [pc, #524]	; (8000e00 <setError+0x214>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d13a      	bne.n	8000c6e <setError+0x82>
		switch (err_error) {
 8000bf8:	4b82      	ldr	r3, [pc, #520]	; (8000e04 <setError+0x218>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d026      	beq.n	8000c4e <setError+0x62>
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	dc36      	bgt.n	8000c72 <setError+0x86>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <setError+0x22>
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d010      	beq.n	8000c2e <setError+0x42>
			bat_temp_high = false;
			aux_low_on = true;
			//error_exit = true;
			break;
		default:
			break;
 8000c0c:	e031      	b.n	8000c72 <setError+0x86>
			error_on = true;
 8000c0e:	4b7e      	ldr	r3, [pc, #504]	; (8000e08 <setError+0x21c>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c14:	4b7d      	ldr	r3, [pc, #500]	; (8000e0c <setError+0x220>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c1a:	4b7d      	ldr	r3, [pc, #500]	; (8000e10 <setError+0x224>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c20:	4b7c      	ldr	r3, [pc, #496]	; (8000e14 <setError+0x228>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c26:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <setError+0x22c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			break;
 8000c2c:	e022      	b.n	8000c74 <setError+0x88>
			error_on = true;
 8000c2e:	4b76      	ldr	r3, [pc, #472]	; (8000e08 <setError+0x21c>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c34:	4b75      	ldr	r3, [pc, #468]	; (8000e0c <setError+0x220>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c3a:	4b75      	ldr	r3, [pc, #468]	; (8000e10 <setError+0x224>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c40:	4b74      	ldr	r3, [pc, #464]	; (8000e14 <setError+0x228>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000c46:	4b74      	ldr	r3, [pc, #464]	; (8000e18 <setError+0x22c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			break;
 8000c4c:	e012      	b.n	8000c74 <setError+0x88>
			error_on = false;
 8000c4e:	4b6e      	ldr	r3, [pc, #440]	; (8000e08 <setError+0x21c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000c54:	4b6d      	ldr	r3, [pc, #436]	; (8000e0c <setError+0x220>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000c5a:	4b6d      	ldr	r3, [pc, #436]	; (8000e10 <setError+0x224>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000c60:	4b6c      	ldr	r3, [pc, #432]	; (8000e14 <setError+0x228>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <setError+0x22c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
			break;
 8000c6c:	e002      	b.n	8000c74 <setError+0x88>
		}
	}
 8000c6e:	bf00      	nop
 8000c70:	e000      	b.n	8000c74 <setError+0x88>
			break;
 8000c72:	bf00      	nop
	if (err_device == 1) { //BMS
 8000c74:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <setError+0x214>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	f040 80bb 	bne.w	8000df4 <setError+0x208>
		switch (err_error) {
 8000c7e:	4b61      	ldr	r3, [pc, #388]	; (8000e04 <setError+0x218>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	f200 80a6 	bhi.w	8000dd4 <setError+0x1e8>
 8000c88:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <setError+0xa4>)
 8000c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8e:	bf00      	nop
 8000c90:	08000cb5 	.word	0x08000cb5
 8000c94:	08000cd5 	.word	0x08000cd5
 8000c98:	08000cf5 	.word	0x08000cf5
 8000c9c:	08000d15 	.word	0x08000d15
 8000ca0:	08000d35 	.word	0x08000d35
 8000ca4:	08000d55 	.word	0x08000d55
 8000ca8:	08000d75 	.word	0x08000d75
 8000cac:	08000d95 	.word	0x08000d95
 8000cb0:	08000db5 	.word	0x08000db5
		case 0: //Over_Discharge_Current
			error_on = true;
 8000cb4:	4b54      	ldr	r3, [pc, #336]	; (8000e08 <setError+0x21c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cba:	4b54      	ldr	r3, [pc, #336]	; (8000e0c <setError+0x220>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000cc0:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <setError+0x224>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000cc6:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <setError+0x228>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000ccc:	4b52      	ldr	r3, [pc, #328]	; (8000e18 <setError+0x22c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cd2:	e090      	b.n	8000df6 <setError+0x20a>
		case 1: //Over_Charge_Current
			error_on = false;
 8000cd4:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <setError+0x21c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <setError+0x220>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	; (8000e10 <setError+0x224>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000ce6:	4b4b      	ldr	r3, [pc, #300]	; (8000e14 <setError+0x228>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000cec:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <setError+0x22c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000cf2:	e080      	b.n	8000df6 <setError+0x20a>
		case 2: //Over_Charge_Current_Regen
			error_on = true;
 8000cf4:	4b44      	ldr	r3, [pc, #272]	; (8000e08 <setError+0x21c>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000cfa:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <setError+0x220>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d00:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <setError+0x224>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <setError+0x228>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <setError+0x22c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d12:	e070      	b.n	8000df6 <setError+0x20a>
		case 3: //Pre_Charger_Error
			error_on = true;
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <setError+0x21c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d1a:	4b3c      	ldr	r3, [pc, #240]	; (8000e0c <setError+0x220>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d20:	4b3b      	ldr	r3, [pc, #236]	; (8000e10 <setError+0x224>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d26:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <setError+0x228>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <setError+0x22c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d32:	e060      	b.n	8000df6 <setError+0x20a>
		case 4: // Cell_Deviation
			error_on = false;
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <setError+0x21c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
			milderror_on = true;
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <setError+0x220>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d40:	4b33      	ldr	r3, [pc, #204]	; (8000e10 <setError+0x224>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <setError+0x228>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d4c:	4b32      	ldr	r3, [pc, #200]	; (8000e18 <setError+0x22c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d52:	e050      	b.n	8000df6 <setError+0x20a>
		case 5: //Lowest_Cell_Error
			error_on = true;
 8000d54:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <setError+0x21c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d5a:	4b2c      	ldr	r3, [pc, #176]	; (8000e0c <setError+0x220>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <setError+0x224>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d66:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <setError+0x228>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
			aux_low_on = true;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <setError+0x22c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d72:	e040      	b.n	8000df6 <setError+0x20a>
		case 6: //Contactor_not_closing
			error_on = true;
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <setError+0x21c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <setError+0x220>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
			service_on = true;
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <setError+0x224>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <setError+0x228>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <setError+0x22c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000d92:	e030      	b.n	8000df6 <setError+0x20a>
		case 7: //Battery_Over_Temperature
			error_on = false;
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <setError+0x21c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <setError+0x220>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <setError+0x224>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = true;
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <setError+0x228>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <setError+0x22c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000db2:	e020      	b.n	8000df6 <setError+0x20a>
		case 8: //BMS_Internal_Communication_Error
			error_on = true;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <setError+0x21c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <setError+0x220>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <setError+0x224>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <setError+0x228>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <setError+0x22c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
			//error_exit = true;
			break;
 8000dd2:	e010      	b.n	8000df6 <setError+0x20a>
		default:
			error_on = false;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <setError+0x21c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
			milderror_on = false;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <setError+0x220>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
			service_on = false;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <setError+0x224>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
			bat_temp_high = false;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <setError+0x228>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
			aux_low_on = false;
 8000dec:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <setError+0x22c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
			break;
 8000df2:	e000      	b.n	8000df6 <setError+0x20a>
		}
	}
 8000df4:	bf00      	nop
	//_errorSelection = true;
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200003a0 	.word	0x200003a0
 8000e04:	2000039f 	.word	0x2000039f
 8000e08:	200003be 	.word	0x200003be
 8000e0c:	200003bf 	.word	0x200003bf
 8000e10:	200003c0 	.word	0x200003c0
 8000e14:	200003c1 	.word	0x200003c1
 8000e18:	200003c2 	.word	0x200003c2

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a39      	ldr	r2, [pc, #228]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2103      	movs	r1, #3
 8000e94:	4828      	ldr	r0, [pc, #160]	; (8000f38 <MX_GPIO_Init+0x11c>)
 8000e96:	f005 f8c0 	bl	800601a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4821      	ldr	r0, [pc, #132]	; (8000f38 <MX_GPIO_Init+0x11c>)
 8000eb2:	f004 ff17 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|IN2_Pin;
 8000eb6:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <MX_GPIO_Init+0x120>)
 8000ecc:	f004 ff0a 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IN7_Pin|IN6_Pin|IN9_Pin|IN10_Pin
 8000ed0:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 8000ed4:	613b      	str	r3, [r7, #16]
                          |IN11_Pin|IN12_Pin|IN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4814      	ldr	r0, [pc, #80]	; (8000f38 <MX_GPIO_Init+0x11c>)
 8000ee6:	f004 fefd 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IN8_Pin|IN1_Pin;
 8000eea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <MX_GPIO_Init+0x124>)
 8000f00:	f004 fef0 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Btn_Int_1_Pin|Btn_Int_2_Pin;
 8000f04:	23c0      	movs	r3, #192	; 0xc0
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_GPIO_Init+0x128>)
 8000f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <MX_GPIO_Init+0x124>)
 8000f18:	f004 fee4 	bl	8005ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2017      	movs	r0, #23
 8000f22:	f004 fa26 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f26:	2017      	movs	r0, #23
 8000f28:	f004 fa3f 	bl	80053aa <HAL_NVIC_EnableIRQ>

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	10110000 	.word	0x10110000

08000f48 <getInputs>:

/* USER CODE BEGIN 2 */
void getInputs() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
//
//	gpio.buttonInputs.bit.button_reserve = RESERVE;
//	gpio.buttonInputs.bit.button_turn_L = TURN_L;
//	gpio.buttonInputs.bit.button_turn_R = TURN_R;
//	gpio.buttonInputs.bit.button_park = PARK;
	gpio.buttonInputs.bit.in1 = IN1;
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	4851      	ldr	r0, [pc, #324]	; (8001098 <getInputs+0x150>)
 8000f52:	f005 f84b 	bl	8005fec <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <getInputs+0x154>)
 8000f60:	7813      	ldrb	r3, [r2, #0]
 8000f62:	f361 0300 	bfi	r3, r1, #0, #1
 8000f66:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in2 = IN2;
 8000f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6c:	484c      	ldr	r0, [pc, #304]	; (80010a0 <getInputs+0x158>)
 8000f6e:	f005 f83d 	bl	8005fec <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	b2d9      	uxtb	r1, r3
 8000f7a:	4a48      	ldr	r2, [pc, #288]	; (800109c <getInputs+0x154>)
 8000f7c:	7813      	ldrb	r3, [r2, #0]
 8000f7e:	f361 0341 	bfi	r3, r1, #1, #1
 8000f82:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in3 = IN3;
 8000f84:	2108      	movs	r1, #8
 8000f86:	4846      	ldr	r0, [pc, #280]	; (80010a0 <getInputs+0x158>)
 8000f88:	f005 f830 	bl	8005fec <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2d9      	uxtb	r1, r3
 8000f94:	4a41      	ldr	r2, [pc, #260]	; (800109c <getInputs+0x154>)
 8000f96:	7813      	ldrb	r3, [r2, #0]
 8000f98:	f361 0382 	bfi	r3, r1, #2, #1
 8000f9c:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in4 = IN4;
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	483f      	ldr	r0, [pc, #252]	; (80010a0 <getInputs+0x158>)
 8000fa2:	f005 f823 	bl	8005fec <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	b2d9      	uxtb	r1, r3
 8000fae:	4a3b      	ldr	r2, [pc, #236]	; (800109c <getInputs+0x154>)
 8000fb0:	7813      	ldrb	r3, [r2, #0]
 8000fb2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000fb6:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in5 = IN5;
 8000fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fbc:	4839      	ldr	r0, [pc, #228]	; (80010a4 <getInputs+0x15c>)
 8000fbe:	f005 f815 	bl	8005fec <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	4a34      	ldr	r2, [pc, #208]	; (800109c <getInputs+0x154>)
 8000fcc:	7813      	ldrb	r3, [r2, #0]
 8000fce:	f361 1304 	bfi	r3, r1, #4, #1
 8000fd2:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in6 = IN6;
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <getInputs+0x15c>)
 8000fd8:	f005 f808 	bl	8005fec <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	4a2d      	ldr	r2, [pc, #180]	; (800109c <getInputs+0x154>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f361 1345 	bfi	r3, r1, #5, #1
 8000fec:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in7 = IN7;
 8000fee:	2110      	movs	r1, #16
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <getInputs+0x15c>)
 8000ff2:	f004 fffb 	bl	8005fec <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	b2d9      	uxtb	r1, r3
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <getInputs+0x154>)
 8001000:	7813      	ldrb	r3, [r2, #0]
 8001002:	f361 1386 	bfi	r3, r1, #6, #1
 8001006:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in8 = IN8;
 8001008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100c:	4822      	ldr	r0, [pc, #136]	; (8001098 <getInputs+0x150>)
 800100e:	f004 ffed 	bl	8005fec <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2d9      	uxtb	r1, r3
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <getInputs+0x154>)
 800101c:	7813      	ldrb	r3, [r2, #0]
 800101e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001022:	7013      	strb	r3, [r2, #0]
	gpio.buttonInputs.bit.in9 = IN9;
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	481f      	ldr	r0, [pc, #124]	; (80010a4 <getInputs+0x15c>)
 8001028:	f004 ffe0 	bl	8005fec <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2d9      	uxtb	r1, r3
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <getInputs+0x154>)
 8001036:	7853      	ldrb	r3, [r2, #1]
 8001038:	f361 0300 	bfi	r3, r1, #0, #1
 800103c:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in10 = IN10;
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <getInputs+0x15c>)
 8001042:	f004 ffd3 	bl	8005fec <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <getInputs+0x154>)
 8001050:	7853      	ldrb	r3, [r2, #1]
 8001052:	f361 0341 	bfi	r3, r1, #1, #1
 8001056:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in11 = IN11;
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <getInputs+0x15c>)
 800105e:	f004 ffc5 	bl	8005fec <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <getInputs+0x154>)
 800106c:	7853      	ldrb	r3, [r2, #1]
 800106e:	f361 0382 	bfi	r3, r1, #2, #1
 8001072:	7053      	strb	r3, [r2, #1]
	gpio.buttonInputs.bit.in12 = IN12;
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <getInputs+0x15c>)
 800107a:	f004 ffb7 	bl	8005fec <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <getInputs+0x154>)
 8001088:	7853      	ldrb	r3, [r2, #1]
 800108a:	f361 03c3 	bfi	r3, r1, #3, #1
 800108e:	7053      	strb	r3, [r2, #1]

	buttonOkay();
 8001090:	f000 f8ae 	bl	80011f0 <buttonOkay>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40010c00 	.word	0x40010c00
 800109c:	20000334 	.word	0x20000334
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40011000 	.word	0x40011000

080010a8 <setInputs>:

void setInputs() {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
	//  3 - Okay
	//	4 - Back
	//	5 - Forward
	//	6 - Backward
	//	7 - Mode
	if (gpio.buttonInputs.bit.in7) //pageUp
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <setInputs+0x11c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d011      	beq.n	80010de <setInputs+0x36>
	{
		buttonCounterForward++;
 80010ba:	4b43      	ldr	r3, [pc, #268]	; (80011c8 <setInputs+0x120>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <setInputs+0x120>)
 80010c4:	701a      	strb	r2, [r3, #0]
		if (buttonCounterForward < 2) {
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <setInputs+0x120>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d803      	bhi.n	80010d6 <setInputs+0x2e>
			forward = true;
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <setInputs+0x124>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e006      	b.n	80010e4 <setInputs+0x3c>
		}
		else {
			forward = false;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <setInputs+0x124>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	e002      	b.n	80010e4 <setInputs+0x3c>
		}
	} else {
		buttonCounterForward = 0;
 80010de:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <setInputs+0x120>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in5) //pageDown
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <setInputs+0x11c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d011      	beq.n	8001116 <setInputs+0x6e>
	{
		buttonCounterBackward++;
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <setInputs+0x128>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <setInputs+0x128>)
 80010fc:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBackward < 2) {
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <setInputs+0x128>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d803      	bhi.n	800110e <setInputs+0x66>
			backward = true;
 8001106:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <setInputs+0x12c>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e006      	b.n	800111c <setInputs+0x74>
		}
		else {
			backward = false;
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <setInputs+0x12c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e002      	b.n	800111c <setInputs+0x74>
		}
	} else {
		buttonCounterBackward = 0;
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <setInputs+0x128>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in8) //back
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <setInputs+0x11c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d011      	beq.n	800114e <setInputs+0xa6>
	{
		buttonCounterBack++;
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <setInputs+0x130>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <setInputs+0x130>)
 8001134:	701a      	strb	r2, [r3, #0]
		if (buttonCounterBack < 2) {
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <setInputs+0x130>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d803      	bhi.n	8001146 <setInputs+0x9e>
			back = true;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <setInputs+0x134>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <setInputs+0xac>
		}
		else {
			back = false;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <setInputs+0x134>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e002      	b.n	8001154 <setInputs+0xac>
		}
	}
	else
	{
		buttonCounterBack = 0;
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <setInputs+0x130>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in4) //mode //After fixing the okay button change mode to okay
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <setInputs+0x11c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00d      	beq.n	800117e <setInputs+0xd6>
	{
		buttonCounterMode++;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <setInputs+0x138>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <setInputs+0x138>)
 800116c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterMode<2) {
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <setInputs+0x138>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d806      	bhi.n	8001184 <setInputs+0xdc>
			mode = true;
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <setInputs+0x13c>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e002      	b.n	8001184 <setInputs+0xdc>
			//mode = false;
		//}
	}
	else
	{
		buttonCounterMode = 0;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <setInputs+0x138>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
	}

	if (gpio.buttonInputs.bit.in6 == 1) //okay
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <setInputs+0x11c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d011      	beq.n	80011b6 <setInputs+0x10e>
	{
		buttonCounterOkay++;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <setInputs+0x140>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <setInputs+0x140>)
 800119c:	701a      	strb	r2, [r3, #0]
		if (buttonCounterOkay<2) {
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <setInputs+0x140>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d803      	bhi.n	80011ae <setInputs+0x106>
			okay = true;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <setInputs+0x144>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
//	}
//	if (gpio.buttonInputs.bit.button_park) {
//		park = true;
//		HAL_Delay(50);
//	}
}
 80011ac:	e006      	b.n	80011bc <setInputs+0x114>
			okay = false;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <setInputs+0x144>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
}
 80011b4:	e002      	b.n	80011bc <setInputs+0x114>
		buttonCounterOkay = 0;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <setInputs+0x140>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	20000334 	.word	0x20000334
 80011c8:	200003ee 	.word	0x200003ee
 80011cc:	20000338 	.word	0x20000338
 80011d0:	200003ef 	.word	0x200003ef
 80011d4:	20000339 	.word	0x20000339
 80011d8:	200003f0 	.word	0x200003f0
 80011dc:	2000033e 	.word	0x2000033e
 80011e0:	200003f2 	.word	0x200003f2
 80011e4:	2000033d 	.word	0x2000033d
 80011e8:	200003f1 	.word	0x200003f1
 80011ec:	2000033a 	.word	0x2000033a

080011f0 <buttonOkay>:

void buttonOkay(void) {
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	if (gpio.buttonInputs.bit.in6 == 1) {
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <buttonOkay+0x54>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <buttonOkay+0x20>
		buttonCounterLongPress++;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <buttonOkay+0x58>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <buttonOkay+0x58>)
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e005      	b.n	800121c <buttonOkay+0x2c>
	} else {
		buttonCounterLongPress = 0;
 8001210:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <buttonOkay+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
		okay = false;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <buttonOkay+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
	}

	if (buttonCounterLongPress >= longPress_Time) {
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <buttonOkay+0x58>)
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <buttonOkay+0x60>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d308      	bcc.n	800123a <buttonOkay+0x4a>
		longpress = true;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <buttonOkay+0x64>)
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
		okay = false;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <buttonOkay+0x5c>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
		buttonCounterLongPress = 0;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <buttonOkay+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
	}

}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000334 	.word	0x20000334
 8001248:	200003ed 	.word	0x200003ed
 800124c:	2000033a 	.word	0x2000033a
 8001250:	20000012 	.word	0x20000012
 8001254:	2000033c 	.word	0x2000033c

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f003 f8e2 	bl	8004424 <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f003 f940 	bl	80044e8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f8a4 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126c:	f7ff fdd6 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001270:	f7ff fc9e 	bl	8000bb0 <MX_DMA_Init>
  MX_CAN1_Init();
 8001274:	f7ff f95a 	bl	800052c <MX_CAN1_Init>
  MX_TIM2_Init();
 8001278:	f001 fd2c 	bl	8002cd4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800127c:	f002 ff34 	bl	80040e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	txHeader.DLC = 8; //length of data
 8001280:	4b3f      	ldr	r3, [pc, #252]	; (8001380 <main+0x128>)
 8001282:	2208      	movs	r2, #8
 8001284:	611a      	str	r2, [r3, #16]
	txHeader.ExtId = 0; //Extended ID
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <main+0x128>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
	txHeader.IDE = CAN_ID_STD;
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <main+0x128>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <main+0x128>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x42;
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <main+0x128>)
 800129a:	2242      	movs	r2, #66	; 0x42
 800129c:	601a      	str	r2, [r3, #0]
	txHeader.TransmitGlobalTime = DISABLE;
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <main+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	751a      	strb	r2, [r3, #20]
	canTX[0] = 0xf3;
 80012a4:	4b37      	ldr	r3, [pc, #220]	; (8001384 <main+0x12c>)
 80012a6:	22f3      	movs	r2, #243	; 0xf3
 80012a8:	701a      	strb	r2, [r3, #0]

	TxHeader2.DLC = 8; //length of data
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <main+0x130>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	611a      	str	r2, [r3, #16]
	TxHeader2.ExtId = 0; //Extended ID
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <main+0x130>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
	TxHeader2.IDE = CAN_ID_STD;
 80012b6:	4b34      	ldr	r3, [pc, #208]	; (8001388 <main+0x130>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <main+0x130>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x52;
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <main+0x130>)
 80012c4:	2252      	movs	r2, #82	; 0x52
 80012c6:	601a      	str	r2, [r3, #0]
	TxHeader2.TransmitGlobalTime = DISABLE;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <main+0x130>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	751a      	strb	r2, [r3, #20]
	TxData2[0] = 0xf3;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <main+0x134>)
 80012d0:	22f3      	movs	r2, #243	; 0xf3
 80012d2:	701a      	strb	r2, [r3, #0]
	//HAL_CAN_AddTxMessage(&hcan2, &TxHeader, RxData, &TxMailbox);
	//HAL_CAN1_Config();
	//HAL_CAN2_Config();
	memset(strDATA, 0, 8);
 80012d4:	2208      	movs	r2, #8
 80012d6:	2100      	movs	r1, #0
 80012d8:	482d      	ldr	r0, [pc, #180]	; (8001390 <main+0x138>)
 80012da:	f006 fe53 	bl	8007f84 <memset>
	memset(strDATA2, 0, 10);
 80012de:	220a      	movs	r2, #10
 80012e0:	2100      	movs	r1, #0
 80012e2:	482c      	ldr	r0, [pc, #176]	; (8001394 <main+0x13c>)
 80012e4:	f006 fe4e 	bl	8007f84 <memset>
	//strData - Display data array
	strDATA[0] = 0x5A;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <main+0x138>)
 80012ea:	225a      	movs	r2, #90	; 0x5a
 80012ec:	701a      	strb	r2, [r3, #0]
	strDATA[1] = 0xA5;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <main+0x138>)
 80012f0:	22a5      	movs	r2, #165	; 0xa5
 80012f2:	705a      	strb	r2, [r3, #1]
	strDATA[2] = 0x05;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <main+0x138>)
 80012f6:	2205      	movs	r2, #5
 80012f8:	709a      	strb	r2, [r3, #2]
	strDATA[3] = 0x82;
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <main+0x138>)
 80012fc:	2282      	movs	r2, #130	; 0x82
 80012fe:	70da      	strb	r2, [r3, #3]

	strDATA2[0] = 0x5A;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <main+0x13c>)
 8001302:	225a      	movs	r2, #90	; 0x5a
 8001304:	701a      	strb	r2, [r3, #0]
	strDATA2[1] = 0xA5;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <main+0x13c>)
 8001308:	22a5      	movs	r2, #165	; 0xa5
 800130a:	705a      	strb	r2, [r3, #1]
	strDATA2[2] = 0x07;
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <main+0x13c>)
 800130e:	2207      	movs	r2, #7
 8001310:	709a      	strb	r2, [r3, #2]
	strDATA2[3] = 0x82;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <main+0x13c>)
 8001314:	2282      	movs	r2, #130	; 0x82
 8001316:	70da      	strb	r2, [r3, #3]

	HAL_CAN_Start(&hcan1);
 8001318:	481f      	ldr	r0, [pc, #124]	; (8001398 <main+0x140>)
 800131a:	f003 fae5 	bl	80048e8 <HAL_CAN_Start>
	//HAL_CAN_Start(&hcan2);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800131e:	2102      	movs	r1, #2
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <main+0x140>)
 8001322:	f003 fd10 	bl	8004d46 <HAL_CAN_ActivateNotification>
	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	_fireModeEnable = 1;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <main+0x144>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim2);
 800132c:	481c      	ldr	r0, [pc, #112]	; (80013a0 <main+0x148>)
 800132e:	f005 fc6f 	bl	8006c10 <HAL_TIM_Base_Start_IT>
//				_firePage = true;
//			}
//			fireData();
//			//goto end;
//		}
		counter++;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <main+0x14c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <main+0x14c>)
 800133c:	701a      	strb	r2, [r3, #0]
		counter2++;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <main+0x150>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <main+0x150>)
 8001348:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(10);

		if (gpioSetFlag) {
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <main+0x154>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <main+0x10e>
			getInputs();
 8001352:	f7ff fdf9 	bl	8000f48 <getInputs>
			setInputs();
 8001356:	f7ff fea7 	bl	80010a8 <setInputs>
			gpioSetFlag = false;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <main+0x154>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
			//mainStateMachine();
			counter = 0;
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <main+0x14c>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]

		}
		if (timeout.timeout_0_5s == true) {
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <main+0x158>)
 8001368:	795b      	ldrb	r3, [r3, #5]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0e0      	beq.n	8001332 <main+0xda>
			if (counter2 >= 10) {
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <main+0x150>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d9dc      	bls.n	8001332 <main+0xda>
				//transmit();
				counter2 = 0;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <main+0x150>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
		counter++;
 800137e:	e7d8      	b.n	8001332 <main+0xda>
 8001380:	200003f4 	.word	0x200003f4
 8001384:	20000468 	.word	0x20000468
 8001388:	20000428 	.word	0x20000428
 800138c:	20000014 	.word	0x20000014
 8001390:	20000344 	.word	0x20000344
 8001394:	2000034c 	.word	0x2000034c
 8001398:	20000304 	.word	0x20000304
 800139c:	200003ea 	.word	0x200003ea
 80013a0:	20000480 	.word	0x20000480
 80013a4:	20000478 	.word	0x20000478
 80013a8:	20000479 	.word	0x20000479
 80013ac:	2000047c 	.word	0x2000047c
 80013b0:	200004c8 	.word	0x200004c8

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	2238      	movs	r2, #56	; 0x38
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f006 fdde 	bl	8007f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fe51 	bl	80060ac <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001410:	f000 f8d6 	bl	80015c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f005 f952 	bl	80066d8 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800143a:	f000 f8c1 	bl	80015c0 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800143e:	4b03      	ldr	r3, [pc, #12]	; (800144c <SystemClock_Config+0x98>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	3750      	adds	r7, #80	; 0x50
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	42420070 	.word	0x42420070

08001450 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	can_Counter++;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001462:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_1_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2101      	movs	r1, #1
 8001468:	4817      	ldr	r0, [pc, #92]	; (80014c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 800146a:	f004 fdd6 	bl	800601a <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001472:	2100      	movs	r1, #0
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f003 fb55 	bl	8004b24 <HAL_CAN_GetRxMessage>
	if ((rxHeader.StdId == 0x40) && (rxHeader.IDE == CAN_ID_STD)) {
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b40      	cmp	r3, #64	; 0x40
 8001480:	d106      	bne.n	8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		EVCU_getData_read_40(canRX);
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800148c:	f7ff f94a 	bl	8000724 <EVCU_getData_read_40>
	}
	if ((rxHeader.StdId == 0x41) && (rxHeader.IDE == CAN_ID_STD)) {
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b41      	cmp	r3, #65	; 0x41
 8001496:	d106      	bne.n	80014a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
		EVCU_getData_read_41(canRX);
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80014a2:	f7ff f9ef 	bl	8000884 <EVCU_getData_read_41>
	}
	if ((rxHeader.StdId == 0x43) && (rxHeader.IDE == CAN_ID_STD)) {
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b43      	cmp	r3, #67	; 0x43
 80014ac:	d106      	bne.n	80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
		EVCU_getData_read_43(canRX);
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80014b8:	f7ff fb16 	bl	8000ae8 <EVCU_getData_read_43>
	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000047a 	.word	0x2000047a
 80014c8:	40011000 	.word	0x40011000
 80014cc:	20000460 	.word	0x20000460
 80014d0:	2000040c 	.word	0x2000040c

080014d4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	counter2++;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 80014e6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, LED_2_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2102      	movs	r1, #2
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80014ee:	f004 fd94 	bl	800601a <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f003 fb13 	bl	8004b24 <HAL_CAN_GetRxMessage>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000479 	.word	0x20000479
 800150c:	40011000 	.word	0x40011000
 8001510:	20000470 	.word	0x20000470
 8001514:	20000440 	.word	0x20000440

08001518 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	if (Btn_Int_1_Pin) {
		buttonEn1 = true;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_GPIO_EXTI_Callback+0x20>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
	}
	if (Btn_Int_2_Pin) {
		buttonEn2 = true;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <HAL_GPIO_EXTI_Callback+0x24>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
	}
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000336 	.word	0x20000336
 800153c:	20000337 	.word	0x20000337

08001540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	//Timer ---> 50ms
	tick_count(&timeout);
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800154a:	f001 fc33 	bl	8002db4 <tick_count>
	gpioSetFlag = true;//50ms
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
	mainStateMachine();
 8001554:	f001 f808 	bl	8002568 <mainStateMachine>

	//Timer Indicator
	HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 8001558:	2101      	movs	r1, #1
 800155a:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800155c:	f004 fd75 	bl	800604a <HAL_GPIO_TogglePin>
	timCounter++;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800156a:	701a      	strb	r2, [r3, #0]
//			_firePage = true;
//		}
//		fireData();
//		//goto end;
//	}
	transmit();
 800156c:	f001 fc90 	bl	8002e90 <transmit>

	//gpioSetFlag = true;

	if (timeout.timeout_1s == true) {
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001572:	799b      	ldrb	r3, [r3, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <HAL_TIM_PeriodElapsedCallback+0x40>
		//CAN Transmit Starts After 1s
		EVCU_setData_write(canTX); //errorRead will send using this
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800157c:	f7ff f88c 	bl	8000698 <EVCU_setData_write>
		//tick_clear(&timeout);
	}
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200004c8 	.word	0x200004c8
 800158c:	2000047c 	.word	0x2000047c
 8001590:	40011000 	.word	0x40011000
 8001594:	2000047b 	.word	0x2000047b
 8001598:	20000468 	.word	0x20000468

0800159c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]

}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c4:	b672      	cpsid	i
}
 80015c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015c8:	e7fe      	b.n	80015c8 <Error_Handler+0x8>
	...

080015cc <navigation>:
#include <menu.h>


void navigation(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

	if (accessory == 1) {
 80015d0:	4b9f      	ldr	r3, [pc, #636]	; (8001850 <navigation+0x284>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d103      	bne.n	80015e0 <navigation+0x14>
		_navigation = true; // This will enable menu transmit
 80015d8:	4b9e      	ldr	r3, [pc, #632]	; (8001854 <navigation+0x288>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	e002      	b.n	80015e6 <navigation+0x1a>
	} else {
		_navigation = false;
 80015e0:	4b9c      	ldr	r3, [pc, #624]	; (8001854 <navigation+0x288>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
	}



	switch (currentPage) {
 80015e6:	4b9c      	ldr	r3, [pc, #624]	; (8001858 <navigation+0x28c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	f200 8121 	bhi.w	8001834 <navigation+0x268>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <navigation+0x2c>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001619 	.word	0x08001619
 80015fc:	08001681 	.word	0x08001681
 8001600:	080016ef 	.word	0x080016ef
 8001604:	0800175b 	.word	0x0800175b
 8001608:	08001835 	.word	0x08001835
 800160c:	08001835 	.word	0x08001835
 8001610:	08001835 	.word	0x08001835
 8001614:	080017d1 	.word	0x080017d1
	case front:
		front_mainPage();
 8001618:	f000 f936 	bl	8001888 <front_mainPage>
		if (currentStateSM == driving_state) {
 800161c:	4b8f      	ldr	r3, [pc, #572]	; (800185c <navigation+0x290>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <navigation+0x66>
			_realTimeData = true;
 8001626:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <navigation+0x294>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800162c:	4b8d      	ldr	r3, [pc, #564]	; (8001864 <navigation+0x298>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
			//_testPage = true;
		}
		if (currentPage != previousPage) {
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <navigation+0x28c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <navigation+0x29c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	429a      	cmp	r2, r3
 8001640:	f000 80fa 	beq.w	8001838 <navigation+0x26c>
			previousPage = front;
 8001644:	4b88      	ldr	r3, [pc, #544]	; (8001868 <navigation+0x29c>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <navigation+0x2a0>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001650:	4b83      	ldr	r3, [pc, #524]	; (8001860 <navigation+0x294>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001656:	4b83      	ldr	r3, [pc, #524]	; (8001864 <navigation+0x298>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 800165c:	4b7f      	ldr	r3, [pc, #508]	; (800185c <navigation+0x290>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <navigation+0xa0>
				_transmit_Function = 5;
 8001666:	4b82      	ldr	r3, [pc, #520]	; (8001870 <navigation+0x2a4>)
 8001668:	2205      	movs	r2, #5
 800166a:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 800166c:	4b7b      	ldr	r3, [pc, #492]	; (800185c <navigation+0x290>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 80e0 	bne.w	8001838 <navigation+0x26c>
				_transmit_Function = 2;
 8001678:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <navigation+0x2a4>)
 800167a:	2202      	movs	r2, #2
 800167c:	701a      	strb	r2, [r3, #0]
			}

		}
		break;
 800167e:	e0db      	b.n	8001838 <navigation+0x26c>
	case trip:
		_Trip_Summary_Page = true;
 8001680:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <navigation+0x2a8>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
		trip_mainPage();
 8001686:	f000 f959 	bl	800193c <trip_mainPage>
		if (currentStateSM == driving_state) {
 800168a:	4b74      	ldr	r3, [pc, #464]	; (800185c <navigation+0x290>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <navigation+0xd4>
			_realTimeData = true;
 8001694:	4b72      	ldr	r3, [pc, #456]	; (8001860 <navigation+0x294>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <navigation+0x298>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <navigation+0x28c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b70      	ldr	r3, [pc, #448]	; (8001868 <navigation+0x29c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f000 80c5 	beq.w	800183c <navigation+0x270>
			previousPage = trip;
 80016b2:	4b6d      	ldr	r3, [pc, #436]	; (8001868 <navigation+0x29c>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 80016b8:	4b6c      	ldr	r3, [pc, #432]	; (800186c <navigation+0x2a0>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80016be:	4b68      	ldr	r3, [pc, #416]	; (8001860 <navigation+0x294>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80016c4:	4b67      	ldr	r3, [pc, #412]	; (8001864 <navigation+0x298>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80016ca:	4b64      	ldr	r3, [pc, #400]	; (800185c <navigation+0x290>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d102      	bne.n	80016da <navigation+0x10e>
				_transmit_Function = 5;
 80016d4:	4b66      	ldr	r3, [pc, #408]	; (8001870 <navigation+0x2a4>)
 80016d6:	2205      	movs	r2, #5
 80016d8:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <navigation+0x290>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f040 80ab 	bne.w	800183c <navigation+0x270>
				_transmit_Function = 2;
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <navigation+0x2a4>)
 80016e8:	2202      	movs	r2, #2
 80016ea:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80016ec:	e0a6      	b.n	800183c <navigation+0x270>
	case after_charge:
		_After_Charge_Page = true;
 80016ee:	4b62      	ldr	r3, [pc, #392]	; (8001878 <navigation+0x2ac>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
		after_charge_mainPage();
 80016f4:	f000 f978 	bl	80019e8 <after_charge_mainPage>
		if (currentStateSM == driving_state) {
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <navigation+0x290>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <navigation+0x142>
			_realTimeData = true;
 8001702:	4b57      	ldr	r3, [pc, #348]	; (8001860 <navigation+0x294>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001708:	4b56      	ldr	r3, [pc, #344]	; (8001864 <navigation+0x298>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 800170e:	4b52      	ldr	r3, [pc, #328]	; (8001858 <navigation+0x28c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b54      	ldr	r3, [pc, #336]	; (8001868 <navigation+0x29c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	429a      	cmp	r2, r3
 800171c:	f000 8090 	beq.w	8001840 <navigation+0x274>
			previousPage = after_charge;
 8001720:	4b51      	ldr	r3, [pc, #324]	; (8001868 <navigation+0x29c>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 8001726:	4b51      	ldr	r3, [pc, #324]	; (800186c <navigation+0x2a0>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <navigation+0x294>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <navigation+0x298>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <navigation+0x290>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <navigation+0x17c>
				_transmit_Function = 5;
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <navigation+0x2a4>)
 8001744:	2205      	movs	r2, #5
 8001746:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <navigation+0x290>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d176      	bne.n	8001840 <navigation+0x274>
				_transmit_Function = 2;
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <navigation+0x2a4>)
 8001754:	2202      	movs	r2, #2
 8001756:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001758:	e072      	b.n	8001840 <navigation+0x274>
	case info:
		_Battery_Info_Page = true;
 800175a:	4b48      	ldr	r3, [pc, #288]	; (800187c <navigation+0x2b0>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
		_Motor_Info_Page = false;
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <navigation+0x2b4>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		_Inverter_Info_Page = false;
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <navigation+0x2b8>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
		info_mainPage();
 800176c:	f000 f984 	bl	8001a78 <info_mainPage>
		if (currentStateSM == driving_state) {
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <navigation+0x290>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d105      	bne.n	8001786 <navigation+0x1ba>
			_realTimeData = true;
 800177a:	4b39      	ldr	r3, [pc, #228]	; (8001860 <navigation+0x294>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <navigation+0x298>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <navigation+0x28c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <navigation+0x29c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	429a      	cmp	r2, r3
 8001794:	d056      	beq.n	8001844 <navigation+0x278>
			previousPage = info;
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <navigation+0x29c>)
 8001798:	2203      	movs	r2, #3
 800179a:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <navigation+0x2a0>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <navigation+0x294>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <navigation+0x298>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <navigation+0x290>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d102      	bne.n	80017be <navigation+0x1f2>
				_transmit_Function = 5;
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <navigation+0x2a4>)
 80017ba:	2205      	movs	r2, #5
 80017bc:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <navigation+0x290>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d13d      	bne.n	8001844 <navigation+0x278>
				_transmit_Function = 2;
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <navigation+0x2a4>)
 80017ca:	2202      	movs	r2, #2
 80017cc:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80017ce:	e039      	b.n	8001844 <navigation+0x278>
	case settings:
		settings_mainPage();
 80017d0:	f000 fab4 	bl	8001d3c <settings_mainPage>
		if (currentStateSM == driving_state) {
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <navigation+0x290>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d105      	bne.n	80017ea <navigation+0x21e>
			_realTimeData = true;
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <navigation+0x294>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
			_oneTimeData = true;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <navigation+0x298>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
		}
		if (currentPage != previousPage) {
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <navigation+0x28c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <navigation+0x29c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d026      	beq.n	8001848 <navigation+0x27c>
			previousPage = settings;
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <navigation+0x29c>)
 80017fc:	2207      	movs	r2, #7
 80017fe:	701a      	strb	r2, [r3, #0]
			_setDriverPage = true;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <navigation+0x2a0>)
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
			_realTimeData = false;
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <navigation+0x294>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
			_oneTimeData = false;
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <navigation+0x298>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
			if (currentStateSM == driving_state) {
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <navigation+0x290>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d102      	bne.n	8001822 <navigation+0x256>
				_transmit_Function = 5;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <navigation+0x2a4>)
 800181e:	2205      	movs	r2, #5
 8001820:	701a      	strb	r2, [r3, #0]
			}
			if (currentStateSM == startingup_state) {
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <navigation+0x290>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <navigation+0x27c>
				_transmit_Function = 2;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <navigation+0x2a4>)
 800182e:	2202      	movs	r2, #2
 8001830:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8001832:	e009      	b.n	8001848 <navigation+0x27c>
	default:
		break;
 8001834:	bf00      	nop
 8001836:	e008      	b.n	800184a <navigation+0x27e>
		break;
 8001838:	bf00      	nop
 800183a:	e006      	b.n	800184a <navigation+0x27e>
		break;
 800183c:	bf00      	nop
 800183e:	e004      	b.n	800184a <navigation+0x27e>
		break;
 8001840:	bf00      	nop
 8001842:	e002      	b.n	800184a <navigation+0x27e>
		break;
 8001844:	bf00      	nop
 8001846:	e000      	b.n	800184a <navigation+0x27e>
		break;
 8001848:	bf00      	nop
	}

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000396 	.word	0x20000396
 8001854:	200003cb 	.word	0x200003cb
 8001858:	200003aa 	.word	0x200003aa
 800185c:	200003ac 	.word	0x200003ac
 8001860:	200003cc 	.word	0x200003cc
 8001864:	200003ce 	.word	0x200003ce
 8001868:	200003ab 	.word	0x200003ab
 800186c:	200003cd 	.word	0x200003cd
 8001870:	200003e7 	.word	0x200003e7
 8001874:	200003e1 	.word	0x200003e1
 8001878:	200003e0 	.word	0x200003e0
 800187c:	200003e2 	.word	0x200003e2
 8001880:	200003e3 	.word	0x200003e3
 8001884:	200003e4 	.word	0x200003e4

08001888 <front_mainPage>:

void front_mainPage(void) {
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	if (page_entry) {
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <front_mainPage+0x8c>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <front_mainPage+0x24>
		page_entry = false;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <front_mainPage+0x8c>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		_modeSelection = true;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <front_mainPage+0x90>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
		_gearCleared = true;
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <front_mainPage+0x94>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		_gearChanged = true;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <front_mainPage+0x98>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(front);
	_drivePageSet = front;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <front_mainPage+0x9c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = Disengage_Page;
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <front_mainPage+0xa0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]

	//One time Run
//Run only if something has changed
	//

	if (forward == true) {
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <front_mainPage+0xa4>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00f      	beq.n	80018e0 <front_mainPage+0x58>
		currentPage = trip;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <front_mainPage+0xa8>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <front_mainPage+0x8c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
		forward = false;
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <front_mainPage+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
		backward = false;
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <front_mainPage+0xac>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <front_mainPage+0xb0>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
		return;
 80018de:	e016      	b.n	800190e <front_mainPage+0x86>
	}

	if (backward == true) {
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <front_mainPage+0xac>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d012      	beq.n	800190e <front_mainPage+0x86>
		backward = false;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <front_mainPage+0xac>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
		currentPage = settings;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <front_mainPage+0xa8>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <front_mainPage+0x8c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
		forward = false;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <front_mainPage+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <front_mainPage+0xb0>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <front_mainPage+0xa0>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
		return;
 800190c:	bf00      	nop
	}
}
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000010 	.word	0x20000010
 8001918:	200003cf 	.word	0x200003cf
 800191c:	200003d9 	.word	0x200003d9
 8001920:	200003da 	.word	0x200003da
 8001924:	200003eb 	.word	0x200003eb
 8001928:	200003ec 	.word	0x200003ec
 800192c:	20000338 	.word	0x20000338
 8001930:	200003aa 	.word	0x200003aa
 8001934:	20000339 	.word	0x20000339
 8001938:	200003b1 	.word	0x200003b1

0800193c <trip_mainPage>:

void trip_mainPage(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <trip_mainPage+0x88>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <trip_mainPage+0x12>
		page_entry = false;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <trip_mainPage+0x88>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
	}

	if (longpress == true) {
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <trip_mainPage+0x8c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <trip_mainPage+0x26>
		tripreset = true;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <trip_mainPage+0x90>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
		longpress = false;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <trip_mainPage+0x8c>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	}
	//drivePageSetter(trip);
	_drivePageSet = trip;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <trip_mainPage+0x94>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <trip_mainPage+0x98>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
	trip_reset();
 800196e:	f002 fd21 	bl	80043b4 <trip_reset>

	if (forward == true) {
 8001972:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <trip_mainPage+0x9c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00f      	beq.n	800199a <trip_mainPage+0x5e>

		currentPage = after_charge;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <trip_mainPage+0xa0>)
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <trip_mainPage+0x88>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <trip_mainPage+0x9c>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
		backward = false;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <trip_mainPage+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001992:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <trip_mainPage+0xa8>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		return;
 8001998:	e013      	b.n	80019c2 <trip_mainPage+0x86>
	}

	if (backward == true) {
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <trip_mainPage+0xa4>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00f      	beq.n	80019c2 <trip_mainPage+0x86>

		currentPage = front;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <trip_mainPage+0xa0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <trip_mainPage+0x88>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
		forward = false;
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <trip_mainPage+0x9c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
		backward = false;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <trip_mainPage+0xa4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <trip_mainPage+0xa8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
		return;
 80019c0:	bf00      	nop
	}
}
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000010 	.word	0x20000010
 80019c8:	2000033c 	.word	0x2000033c
 80019cc:	2000033b 	.word	0x2000033b
 80019d0:	200003eb 	.word	0x200003eb
 80019d4:	200003ec 	.word	0x200003ec
 80019d8:	20000338 	.word	0x20000338
 80019dc:	200003aa 	.word	0x200003aa
 80019e0:	20000339 	.word	0x20000339
 80019e4:	200003b1 	.word	0x200003b1

080019e8 <after_charge_mainPage>:

void after_charge_mainPage(void) {
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
	if (page_entry == true) {
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <after_charge_mainPage+0x74>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <after_charge_mainPage+0x12>
		page_entry = false;
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <after_charge_mainPage+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
	}
	_drivePageSet = after_charge;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <after_charge_mainPage+0x78>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(after_charge);
	_trasmitGlobal = MainMenuPages;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <after_charge_mainPage+0x7c>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]

	if (forward == true) {
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <after_charge_mainPage+0x80>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00f      	beq.n	8001a2e <after_charge_mainPage+0x46>

		currentPage = info;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <after_charge_mainPage+0x84>)
 8001a10:	2203      	movs	r2, #3
 8001a12:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <after_charge_mainPage+0x74>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <after_charge_mainPage+0x80>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <after_charge_mainPage+0x88>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <after_charge_mainPage+0x8c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
		return;
 8001a2c:	e013      	b.n	8001a56 <after_charge_mainPage+0x6e>
	}

	if (backward == true) {
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <after_charge_mainPage+0x88>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00f      	beq.n	8001a56 <after_charge_mainPage+0x6e>
		currentPage = trip;
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <after_charge_mainPage+0x84>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <after_charge_mainPage+0x74>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <after_charge_mainPage+0x80>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <after_charge_mainPage+0x88>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <after_charge_mainPage+0x8c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
		return;
 8001a54:	bf00      	nop
	}
}
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000010 	.word	0x20000010
 8001a60:	200003eb 	.word	0x200003eb
 8001a64:	200003ec 	.word	0x200003ec
 8001a68:	20000338 	.word	0x20000338
 8001a6c:	200003aa 	.word	0x200003aa
 8001a70:	20000339 	.word	0x20000339
 8001a74:	200003b1 	.word	0x200003b1

08001a78 <info_mainPage>:

void info_mainPage(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
//	if (page_entry == true) {
//		page_entry = false;
//	}
	_drivePageSet = info;
 8001a7c:	4b9f      	ldr	r3, [pc, #636]	; (8001cfc <info_mainPage+0x284>)
 8001a7e:	2203      	movs	r2, #3
 8001a80:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001a82:	4b9f      	ldr	r3, [pc, #636]	; (8001d00 <info_mainPage+0x288>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
	//drivePageSetter(info);

	if (!(inInfoBat)) {
 8001a88:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <info_mainPage+0x28c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	f083 0301 	eor.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <info_mainPage+0x36>
		if (okay == true) {
 8001a96:	4b9c      	ldr	r3, [pc, #624]	; (8001d08 <info_mainPage+0x290>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8103 	beq.w	8001ca6 <info_mainPage+0x22e>
			inInfoBat = true;
 8001aa0:	4b98      	ldr	r3, [pc, #608]	; (8001d04 <info_mainPage+0x28c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001aa6:	4b98      	ldr	r3, [pc, #608]	; (8001d08 <info_mainPage+0x290>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e0fb      	b.n	8001ca6 <info_mainPage+0x22e>
		}
	} else {	// When okay is pressed
		if (page_entry == true) {
 8001aae:	4b97      	ldr	r3, [pc, #604]	; (8001d0c <info_mainPage+0x294>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00f      	beq.n	8001ad6 <info_mainPage+0x5e>
			currentMenu = infobat;
 8001ab6:	4b96      	ldr	r3, [pc, #600]	; (8001d10 <info_mainPage+0x298>)
 8001ab8:	2204      	movs	r2, #4
 8001aba:	701a      	strb	r2, [r3, #0]
			previousMenuBack = infoinv;
 8001abc:	4b95      	ldr	r3, [pc, #596]	; (8001d14 <info_mainPage+0x29c>)
 8001abe:	2206      	movs	r2, #6
 8001ac0:	701a      	strb	r2, [r3, #0]
			previousMenuForward = infomot;
 8001ac2:	4b95      	ldr	r3, [pc, #596]	; (8001d18 <info_mainPage+0x2a0>)
 8001ac4:	2205      	movs	r2, #5
 8001ac6:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001ac8:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <info_mainPage+0x294>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
			vehicleInfo_UI(infobat);
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f001 fdee 	bl	80036b0 <vehicleInfo_UI>
 8001ad4:	e005      	b.n	8001ae2 <info_mainPage+0x6a>
		} else {
			vehicleInfo_UI(currentMenu);
 8001ad6:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <info_mainPage+0x298>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 fde7 	bl	80036b0 <vehicleInfo_UI>
		}
		if (forward == true) {
 8001ae2:	4b8e      	ldr	r3, [pc, #568]	; (8001d1c <info_mainPage+0x2a4>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d05f      	beq.n	8001baa <info_mainPage+0x132>

			if (currentMenu == infoinv && previousMenuBack == infomot) {
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <info_mainPage+0x298>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d11a      	bne.n	8001b2a <info_mainPage+0xb2>
 8001af4:	4b87      	ldr	r3, [pc, #540]	; (8001d14 <info_mainPage+0x29c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d115      	bne.n	8001b2a <info_mainPage+0xb2>
				_Battery_Info_Page = true;
 8001afe:	4b88      	ldr	r3, [pc, #544]	; (8001d20 <info_mainPage+0x2a8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001b04:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <info_mainPage+0x2ac>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001b0a:	4b87      	ldr	r3, [pc, #540]	; (8001d28 <info_mainPage+0x2b0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]

				currentMenu = infobat;
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <info_mainPage+0x298>)
 8001b12:	2204      	movs	r2, #4
 8001b14:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001b16:	4b7f      	ldr	r3, [pc, #508]	; (8001d14 <info_mainPage+0x29c>)
 8001b18:	2206      	movs	r2, #6
 8001b1a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001b1c:	4b7e      	ldr	r3, [pc, #504]	; (8001d18 <info_mainPage+0x2a0>)
 8001b1e:	2205      	movs	r2, #5
 8001b20:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001b22:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <info_mainPage+0x2a4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
				return;
 8001b28:	e0e6      	b.n	8001cf8 <info_mainPage+0x280>
			}

			if (currentMenu == infobat && previousMenuBack == infoinv) {
 8001b2a:	4b79      	ldr	r3, [pc, #484]	; (8001d10 <info_mainPage+0x298>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d11a      	bne.n	8001b6a <info_mainPage+0xf2>
 8001b34:	4b77      	ldr	r3, [pc, #476]	; (8001d14 <info_mainPage+0x29c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d115      	bne.n	8001b6a <info_mainPage+0xf2>
				_Battery_Info_Page = false;
 8001b3e:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <info_mainPage+0x2a8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = true;
 8001b44:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <info_mainPage+0x2ac>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001b4a:	4b77      	ldr	r3, [pc, #476]	; (8001d28 <info_mainPage+0x2b0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

				currentMenu = infomot;
 8001b50:	4b6f      	ldr	r3, [pc, #444]	; (8001d10 <info_mainPage+0x298>)
 8001b52:	2205      	movs	r2, #5
 8001b54:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001b56:	4b6f      	ldr	r3, [pc, #444]	; (8001d14 <info_mainPage+0x29c>)
 8001b58:	2204      	movs	r2, #4
 8001b5a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001b5c:	4b6e      	ldr	r3, [pc, #440]	; (8001d18 <info_mainPage+0x2a0>)
 8001b5e:	2206      	movs	r2, #6
 8001b60:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001b62:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <info_mainPage+0x2a4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
				return;
 8001b68:	e0c6      	b.n	8001cf8 <info_mainPage+0x280>
			}

			if (currentMenu == infomot && previousMenuBack == infobat) {
 8001b6a:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <info_mainPage+0x298>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d11a      	bne.n	8001baa <info_mainPage+0x132>
 8001b74:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <info_mainPage+0x29c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d115      	bne.n	8001baa <info_mainPage+0x132>
				_Battery_Info_Page = false;
 8001b7e:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <info_mainPage+0x2a8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001b84:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <info_mainPage+0x2ac>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = true;
 8001b8a:	4b67      	ldr	r3, [pc, #412]	; (8001d28 <info_mainPage+0x2b0>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]

				currentMenu = infoinv;
 8001b90:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <info_mainPage+0x298>)
 8001b92:	2206      	movs	r2, #6
 8001b94:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001b96:	4b5f      	ldr	r3, [pc, #380]	; (8001d14 <info_mainPage+0x29c>)
 8001b98:	2205      	movs	r2, #5
 8001b9a:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <info_mainPage+0x2a0>)
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	701a      	strb	r2, [r3, #0]
				forward = false;
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <info_mainPage+0x2a4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
				return;
 8001ba8:	e0a6      	b.n	8001cf8 <info_mainPage+0x280>
			}

		}

		if (backward == true) {
 8001baa:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <info_mainPage+0x2b4>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d05f      	beq.n	8001c72 <info_mainPage+0x1fa>
			//currentMenu--;
			if (currentMenu == infobat && previousMenuForward == infomot) {
 8001bb2:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <info_mainPage+0x298>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d11a      	bne.n	8001bf2 <info_mainPage+0x17a>
 8001bbc:	4b56      	ldr	r3, [pc, #344]	; (8001d18 <info_mainPage+0x2a0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d115      	bne.n	8001bf2 <info_mainPage+0x17a>
				_Battery_Info_Page = false;
 8001bc6:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <info_mainPage+0x2a8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <info_mainPage+0x2ac>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = true;
 8001bd2:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <info_mainPage+0x2b0>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]

				currentMenu = infoinv;
 8001bd8:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <info_mainPage+0x298>)
 8001bda:	2206      	movs	r2, #6
 8001bdc:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infobat;
 8001bde:	4b4e      	ldr	r3, [pc, #312]	; (8001d18 <info_mainPage+0x2a0>)
 8001be0:	2204      	movs	r2, #4
 8001be2:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infomot;
 8001be4:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <info_mainPage+0x29c>)
 8001be6:	2205      	movs	r2, #5
 8001be8:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001bea:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <info_mainPage+0x2b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
				return;
 8001bf0:	e082      	b.n	8001cf8 <info_mainPage+0x280>
			}

			if (currentMenu == infoinv && previousMenuForward == infobat) {
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <info_mainPage+0x298>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b06      	cmp	r3, #6
 8001bfa:	d11a      	bne.n	8001c32 <info_mainPage+0x1ba>
 8001bfc:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <info_mainPage+0x2a0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d115      	bne.n	8001c32 <info_mainPage+0x1ba>
				_Battery_Info_Page = false;
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <info_mainPage+0x2a8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = true;
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <info_mainPage+0x2ac>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001c12:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <info_mainPage+0x2b0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]

				currentMenu = infomot;
 8001c18:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <info_mainPage+0x298>)
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infoinv;
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <info_mainPage+0x2a0>)
 8001c20:	2206      	movs	r2, #6
 8001c22:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infobat;
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <info_mainPage+0x29c>)
 8001c26:	2204      	movs	r2, #4
 8001c28:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <info_mainPage+0x2b4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
				return;
 8001c30:	e062      	b.n	8001cf8 <info_mainPage+0x280>
			}

			if (currentMenu == infomot && previousMenuForward == infoinv) {
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <info_mainPage+0x298>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d11a      	bne.n	8001c72 <info_mainPage+0x1fa>
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <info_mainPage+0x2a0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d115      	bne.n	8001c72 <info_mainPage+0x1fa>
				_Battery_Info_Page = true;
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <info_mainPage+0x2a8>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
				_Motor_Info_Page = false;
 8001c4c:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <info_mainPage+0x2ac>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
				_Inverter_Info_Page = false;
 8001c52:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <info_mainPage+0x2b0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]

				currentMenu = infobat;
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <info_mainPage+0x298>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	701a      	strb	r2, [r3, #0]
				previousMenuForward = infomot;
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <info_mainPage+0x2a0>)
 8001c60:	2205      	movs	r2, #5
 8001c62:	701a      	strb	r2, [r3, #0]
				previousMenuBack = infoinv;
 8001c64:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <info_mainPage+0x29c>)
 8001c66:	2206      	movs	r2, #6
 8001c68:	701a      	strb	r2, [r3, #0]
				backward = false;
 8001c6a:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <info_mainPage+0x2b4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
				return;
 8001c70:	e042      	b.n	8001cf8 <info_mainPage+0x280>
			}
		}

		if (back == true) {
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <info_mainPage+0x2b8>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03d      	beq.n	8001cf6 <info_mainPage+0x27e>
			_Battery_Info_Page = true;
 8001c7a:	4b29      	ldr	r3, [pc, #164]	; (8001d20 <info_mainPage+0x2a8>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
			_Motor_Info_Page = false;
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <info_mainPage+0x2ac>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
			_Inverter_Info_Page = false;
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <info_mainPage+0x2b0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]

			page_entry = true;
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <info_mainPage+0x294>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
			inInfoBat = false;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <info_mainPage+0x28c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			back = false;
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <info_mainPage+0x2b8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
			_menupage = 0;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <info_mainPage+0x2bc>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001ca4:	e027      	b.n	8001cf6 <info_mainPage+0x27e>
	}

	if (forward == true) {
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <info_mainPage+0x2a4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00f      	beq.n	8001cce <info_mainPage+0x256>
		currentPage = settings;
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <info_mainPage+0x2c0>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <info_mainPage+0x294>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <info_mainPage+0x2a4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <info_mainPage+0x2b4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <info_mainPage+0x2bc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
		return;
 8001ccc:	e014      	b.n	8001cf8 <info_mainPage+0x280>
	}

	if (backward == true) {
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <info_mainPage+0x2b4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <info_mainPage+0x280>
		currentPage = after_charge;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <info_mainPage+0x2c0>)
 8001cd8:	2202      	movs	r2, #2
 8001cda:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <info_mainPage+0x294>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
		forward = false;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <info_mainPage+0x2a4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
		backward = false;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <info_mainPage+0x2b4>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <info_mainPage+0x2bc>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
		return;
 8001cf4:	e000      	b.n	8001cf8 <info_mainPage+0x280>
		return;
 8001cf6:	bf00      	nop
	}
}
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200003eb 	.word	0x200003eb
 8001d00:	200003ec 	.word	0x200003ec
 8001d04:	20000340 	.word	0x20000340
 8001d08:	2000033a 	.word	0x2000033a
 8001d0c:	20000010 	.word	0x20000010
 8001d10:	2000000b 	.word	0x2000000b
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	2000000d 	.word	0x2000000d
 8001d1c:	20000338 	.word	0x20000338
 8001d20:	200003e2 	.word	0x200003e2
 8001d24:	200003e3 	.word	0x200003e3
 8001d28:	200003e4 	.word	0x200003e4
 8001d2c:	20000339 	.word	0x20000339
 8001d30:	2000033e 	.word	0x2000033e
 8001d34:	200003b1 	.word	0x200003b1
 8001d38:	200003aa 	.word	0x200003aa

08001d3c <settings_mainPage>:

void settings_mainPage(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

	//selection_UI(front);
	//drivePageSetter(settings);
	_drivePageSet = settings;
 8001d40:	4b94      	ldr	r3, [pc, #592]	; (8001f94 <settings_mainPage+0x258>)
 8001d42:	2207      	movs	r2, #7
 8001d44:	701a      	strb	r2, [r3, #0]
	_trasmitGlobal = MainMenuPages;
 8001d46:	4b94      	ldr	r3, [pc, #592]	; (8001f98 <settings_mainPage+0x25c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]

	if (!(inSettings)) {
 8001d4c:	4b93      	ldr	r3, [pc, #588]	; (8001f9c <settings_mainPage+0x260>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00e      	beq.n	8001d78 <settings_mainPage+0x3c>
		selection_UI(front);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f001 fdec 	bl	8003938 <selection_UI>
		if (okay == true) {
 8001d60:	4b8f      	ldr	r3, [pc, #572]	; (8001fa0 <settings_mainPage+0x264>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8161 	beq.w	800202c <settings_mainPage+0x2f0>
			inSettings = true;
 8001d6a:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <settings_mainPage+0x260>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
			okay = false;
 8001d70:	4b8b      	ldr	r3, [pc, #556]	; (8001fa0 <settings_mainPage+0x264>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e159      	b.n	800202c <settings_mainPage+0x2f0>
		}
	} else {
		if (page_entry == true) {
 8001d78:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <settings_mainPage+0x268>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00e      	beq.n	8001d9e <settings_mainPage+0x62>
			currentMenu = vehicleMenu;
 8001d80:	4b89      	ldr	r3, [pc, #548]	; (8001fa8 <settings_mainPage+0x26c>)
 8001d82:	2208      	movs	r2, #8
 8001d84:	701a      	strb	r2, [r3, #0]
			previousMenuForward = errorsMenu;
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <settings_mainPage+0x270>)
 8001d88:	220b      	movs	r2, #11
 8001d8a:	701a      	strb	r2, [r3, #0]
			previousMenuBack = systemMenu;
 8001d8c:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <settings_mainPage+0x274>)
 8001d8e:	2209      	movs	r2, #9
 8001d90:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <settings_mainPage+0x278>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	701a      	strb	r2, [r3, #0]
			page_entry = false;
 8001d98:	4b82      	ldr	r3, [pc, #520]	; (8001fa4 <settings_mainPage+0x268>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
		}
		if(menuCounter>2)
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <settings_mainPage+0x27c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d90f      	bls.n	8001dc6 <settings_mainPage+0x8a>
		{
			if (_menuChanged) {
 8001da6:	4b83      	ldr	r3, [pc, #524]	; (8001fb4 <settings_mainPage+0x278>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <settings_mainPage+0x84>
				_menuChanged = false;
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <settings_mainPage+0x278>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
				selection_UI(currentMenu);
 8001db4:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <settings_mainPage+0x26c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fdbc 	bl	8003938 <selection_UI>
			}
			menuCounter = 0;
 8001dc0:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <settings_mainPage+0x27c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
		}


		if (!(menuAccess)) {
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <settings_mainPage+0x280>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	f083 0301 	eor.w	r3, r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 810c 	beq.w	8001fee <settings_mainPage+0x2b2>
			menuCounter++;
 8001dd6:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <settings_mainPage+0x27c>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <settings_mainPage+0x27c>)
 8001de0:	701a      	strb	r2, [r3, #0]
			if (forward == true) {
 8001de2:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <settings_mainPage+0x284>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d067      	beq.n	8001eba <settings_mainPage+0x17e>
//				currentMenu--;
//				if (currentMenu <= 7) {
//					currentMenu = errorsMenu;
//				}
				if (currentMenu == errorsMenu && previousMenuBack == vehicleMenu) {
 8001dea:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <settings_mainPage+0x26c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b0b      	cmp	r3, #11
 8001df2:	d114      	bne.n	8001e1e <settings_mainPage+0xe2>
 8001df4:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <settings_mainPage+0x274>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d10f      	bne.n	8001e1e <settings_mainPage+0xe2>
					currentMenu = bluetoothMenu;
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e00:	220a      	movs	r2, #10
 8001e02:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001e04:	4b69      	ldr	r3, [pc, #420]	; (8001fac <settings_mainPage+0x270>)
 8001e06:	2209      	movs	r2, #9
 8001e08:	701a      	strb	r2, [r3, #0]
					previousMenuBack = errorsMenu;
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <settings_mainPage+0x274>)
 8001e0c:	220b      	movs	r2, #11
 8001e0e:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e10:	4b68      	ldr	r3, [pc, #416]	; (8001fb4 <settings_mainPage+0x278>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001e16:	4b6a      	ldr	r3, [pc, #424]	; (8001fc0 <settings_mainPage+0x284>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
					return;
 8001e1c:	e12f      	b.n	800207e <settings_mainPage+0x342>
				}
				if (currentMenu == vehicleMenu && previousMenuBack == systemMenu) {
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d114      	bne.n	8001e52 <settings_mainPage+0x116>
 8001e28:	4b61      	ldr	r3, [pc, #388]	; (8001fb0 <settings_mainPage+0x274>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d10f      	bne.n	8001e52 <settings_mainPage+0x116>
					currentMenu = errorsMenu;
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e34:	220b      	movs	r2, #11
 8001e36:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001e38:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <settings_mainPage+0x270>)
 8001e3a:	220a      	movs	r2, #10
 8001e3c:	701a      	strb	r2, [r3, #0]
					previousMenuBack = vehicleMenu;
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <settings_mainPage+0x274>)
 8001e40:	2208      	movs	r2, #8
 8001e42:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e44:	4b5b      	ldr	r3, [pc, #364]	; (8001fb4 <settings_mainPage+0x278>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <settings_mainPage+0x284>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
					return;
 8001e50:	e115      	b.n	800207e <settings_mainPage+0x342>
				}
				if (currentMenu == systemMenu && previousMenuBack == bluetoothMenu) {
 8001e52:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d114      	bne.n	8001e86 <settings_mainPage+0x14a>
 8001e5c:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <settings_mainPage+0x274>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d10f      	bne.n	8001e86 <settings_mainPage+0x14a>
					currentMenu = vehicleMenu;
 8001e66:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e68:	2208      	movs	r2, #8
 8001e6a:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <settings_mainPage+0x270>)
 8001e6e:	220b      	movs	r2, #11
 8001e70:	701a      	strb	r2, [r3, #0]
					previousMenuBack = systemMenu;
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <settings_mainPage+0x274>)
 8001e74:	2209      	movs	r2, #9
 8001e76:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001e78:	4b4e      	ldr	r3, [pc, #312]	; (8001fb4 <settings_mainPage+0x278>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001e7e:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <settings_mainPage+0x284>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
					return;
 8001e84:	e0fb      	b.n	800207e <settings_mainPage+0x342>
				}
				if (currentMenu == bluetoothMenu && previousMenuBack == errorsMenu) {
 8001e86:	4b48      	ldr	r3, [pc, #288]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b0a      	cmp	r3, #10
 8001e8e:	d114      	bne.n	8001eba <settings_mainPage+0x17e>
 8001e90:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <settings_mainPage+0x274>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b0b      	cmp	r3, #11
 8001e98:	d10f      	bne.n	8001eba <settings_mainPage+0x17e>
					currentMenu = systemMenu;
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <settings_mainPage+0x26c>)
 8001e9c:	2209      	movs	r2, #9
 8001e9e:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001ea0:	4b42      	ldr	r3, [pc, #264]	; (8001fac <settings_mainPage+0x270>)
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	701a      	strb	r2, [r3, #0]
					previousMenuBack = bluetoothMenu;
 8001ea6:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <settings_mainPage+0x274>)
 8001ea8:	220a      	movs	r2, #10
 8001eaa:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <settings_mainPage+0x278>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
					forward = false;
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <settings_mainPage+0x284>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
					return;
 8001eb8:	e0e1      	b.n	800207e <settings_mainPage+0x342>
				}
			}

			if (backward == true) {
 8001eba:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <settings_mainPage+0x288>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8082 	beq.w	8001fc8 <settings_mainPage+0x28c>
//				currentMenu++;
//				if (currentMenu >= 12) {
//					currentMenu = vehicleMenu;
//				}
				if (currentMenu == vehicleMenu && previousMenuForward == errorsMenu) {
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <settings_mainPage+0x26c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d114      	bne.n	8001ef8 <settings_mainPage+0x1bc>
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <settings_mainPage+0x270>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b0b      	cmp	r3, #11
 8001ed6:	d10f      	bne.n	8001ef8 <settings_mainPage+0x1bc>
					currentMenu = systemMenu;
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <settings_mainPage+0x26c>)
 8001eda:	2209      	movs	r2, #9
 8001edc:	701a      	strb	r2, [r3, #0]
					previousMenuForward = vehicleMenu;
 8001ede:	4b33      	ldr	r3, [pc, #204]	; (8001fac <settings_mainPage+0x270>)
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	701a      	strb	r2, [r3, #0]

					previousMenuBack = bluetoothMenu;
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <settings_mainPage+0x274>)
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <settings_mainPage+0x278>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <settings_mainPage+0x288>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
					return;
 8001ef6:	e0c2      	b.n	800207e <settings_mainPage+0x342>
				}
				if (currentMenu == errorsMenu && previousMenuForward == bluetoothMenu) {
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <settings_mainPage+0x26c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b0b      	cmp	r3, #11
 8001f00:	d114      	bne.n	8001f2c <settings_mainPage+0x1f0>
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <settings_mainPage+0x270>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b0a      	cmp	r3, #10
 8001f0a:	d10f      	bne.n	8001f2c <settings_mainPage+0x1f0>
					currentMenu = vehicleMenu;
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <settings_mainPage+0x26c>)
 8001f0e:	2208      	movs	r2, #8
 8001f10:	701a      	strb	r2, [r3, #0]
					previousMenuForward = errorsMenu;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <settings_mainPage+0x270>)
 8001f14:	220b      	movs	r2, #11
 8001f16:	701a      	strb	r2, [r3, #0]

					previousMenuBack = systemMenu;
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <settings_mainPage+0x274>)
 8001f1a:	2209      	movs	r2, #9
 8001f1c:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <settings_mainPage+0x278>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <settings_mainPage+0x288>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
					return;
 8001f2a:	e0a8      	b.n	800207e <settings_mainPage+0x342>
				}
				if (currentMenu == bluetoothMenu && previousMenuForward == systemMenu) {
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <settings_mainPage+0x26c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d114      	bne.n	8001f60 <settings_mainPage+0x224>
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <settings_mainPage+0x270>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	d10f      	bne.n	8001f60 <settings_mainPage+0x224>
					currentMenu = errorsMenu;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <settings_mainPage+0x26c>)
 8001f42:	220b      	movs	r2, #11
 8001f44:	701a      	strb	r2, [r3, #0]
					previousMenuForward = bluetoothMenu;
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <settings_mainPage+0x270>)
 8001f48:	220a      	movs	r2, #10
 8001f4a:	701a      	strb	r2, [r3, #0]

					previousMenuBack = vehicleMenu;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <settings_mainPage+0x274>)
 8001f4e:	2208      	movs	r2, #8
 8001f50:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <settings_mainPage+0x278>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <settings_mainPage+0x288>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
					return;
 8001f5e:	e08e      	b.n	800207e <settings_mainPage+0x342>
				}
				if (currentMenu == systemMenu && previousMenuForward == vehicleMenu) {
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <settings_mainPage+0x26c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b09      	cmp	r3, #9
 8001f68:	d12e      	bne.n	8001fc8 <settings_mainPage+0x28c>
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <settings_mainPage+0x270>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d129      	bne.n	8001fc8 <settings_mainPage+0x28c>
					currentMenu = bluetoothMenu;
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <settings_mainPage+0x26c>)
 8001f76:	220a      	movs	r2, #10
 8001f78:	701a      	strb	r2, [r3, #0]
					previousMenuForward = systemMenu;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <settings_mainPage+0x270>)
 8001f7c:	2209      	movs	r2, #9
 8001f7e:	701a      	strb	r2, [r3, #0]

					previousMenuBack = errorsMenu;
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <settings_mainPage+0x274>)
 8001f82:	220b      	movs	r2, #11
 8001f84:	701a      	strb	r2, [r3, #0]
					_menuChanged = true;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <settings_mainPage+0x278>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
					backward = false;
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <settings_mainPage+0x288>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
					return;
 8001f92:	e074      	b.n	800207e <settings_mainPage+0x342>
 8001f94:	200003eb 	.word	0x200003eb
 8001f98:	200003ec 	.word	0x200003ec
 8001f9c:	2000033f 	.word	0x2000033f
 8001fa0:	2000033a 	.word	0x2000033a
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	2000000b 	.word	0x2000000b
 8001fac:	2000000d 	.word	0x2000000d
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	200003db 	.word	0x200003db
 8001fb8:	200003dc 	.word	0x200003dc
 8001fbc:	200003b4 	.word	0x200003b4
 8001fc0:	20000338 	.word	0x20000338
 8001fc4:	20000339 	.word	0x20000339
				}

			}
			if (back == true) {
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <settings_mainPage+0x344>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00e      	beq.n	8001fee <settings_mainPage+0x2b2>
				page_entry = true;
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <settings_mainPage+0x348>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	701a      	strb	r2, [r3, #0]
				inSettings = false;
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <settings_mainPage+0x34c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
				selection_UI(front);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f001 fcab 	bl	8003938 <selection_UI>
				_menupage = 0;
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <settings_mainPage+0x350>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
				back = false;
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <settings_mainPage+0x344>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
			}


		}
		switch (currentMenu) {
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <settings_mainPage+0x354>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3b08      	subs	r3, #8
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d816      	bhi.n	8002028 <settings_mainPage+0x2ec>
 8001ffa:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <settings_mainPage+0x2c4>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002011 	.word	0x08002011
 8002004:	08002017 	.word	0x08002017
 8002008:	0800201d 	.word	0x0800201d
 800200c:	08002023 	.word	0x08002023
		case vehicleMenu:
			vehicle_page();
 8002010:	f000 f848 	bl	80020a4 <vehicle_page>
			break;
 8002014:	e009      	b.n	800202a <settings_mainPage+0x2ee>
		case systemMenu:
			system_page();
 8002016:	f000 f891 	bl	800213c <system_page>
			break;
 800201a:	e006      	b.n	800202a <settings_mainPage+0x2ee>
		case bluetoothMenu:
			bluetooth_page();
 800201c:	f000 fa0c 	bl	8002438 <bluetooth_page>
			break;
 8002020:	e003      	b.n	800202a <settings_mainPage+0x2ee>
		case errorsMenu:
			errors_page();
 8002022:	f000 fa55 	bl	80024d0 <errors_page>
			break;
 8002026:	e000      	b.n	800202a <settings_mainPage+0x2ee>
		default:
			break;
 8002028:	bf00      	nop
		}


		return;
 800202a:	e028      	b.n	800207e <settings_mainPage+0x342>
	}

	if (forward == true) {
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <settings_mainPage+0x358>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d011      	beq.n	8002058 <settings_mainPage+0x31c>
		currentPage = front;
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <settings_mainPage+0x35c>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <settings_mainPage+0x348>)
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
		forward = false;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <settings_mainPage+0x358>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <settings_mainPage+0x350>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = Disengage_Page;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <settings_mainPage+0x360>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <settings_mainPage+0x364>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	}

	if (backward == true) {
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <settings_mainPage+0x364>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <settings_mainPage+0x342>
		currentPage = info;
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <settings_mainPage+0x35c>)
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
		page_entry = true;
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <settings_mainPage+0x348>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
		forward = false;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <settings_mainPage+0x358>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
		_menupage = 0;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <settings_mainPage+0x350>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <settings_mainPage+0x364>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
	}

}
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000033e 	.word	0x2000033e
 8002084:	20000010 	.word	0x20000010
 8002088:	2000033f 	.word	0x2000033f
 800208c:	200003b1 	.word	0x200003b1
 8002090:	2000000b 	.word	0x2000000b
 8002094:	20000338 	.word	0x20000338
 8002098:	200003aa 	.word	0x200003aa
 800209c:	200003ec 	.word	0x200003ec
 80020a0:	20000339 	.word	0x20000339

080020a4 <vehicle_page>:

void vehicle_page(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	if (!(inVehicleMenu)) {
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <vehicle_page+0x7c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f083 0301 	eor.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <vehicle_page+0x34>
		if (okay == true) {
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <vehicle_page+0x80>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d02e      	beq.n	800211c <vehicle_page+0x78>
			menuAccess = true;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <vehicle_page+0x84>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = true;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <vehicle_page+0x7c>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <vehicle_page+0x88>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
			okay = false;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <vehicle_page+0x80>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 80020d6:	e021      	b.n	800211c <vehicle_page+0x78>
		if (subMenuCounter>2) {
 80020d8:	4b15      	ldr	r3, [pc, #84]	; (8002130 <vehicle_page+0x8c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d909      	bls.n	80020f4 <vehicle_page+0x50>
			if (inTheMenu) {
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <vehicle_page+0x88>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <vehicle_page+0x4a>
				inTheMenu = false;
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <vehicle_page+0x88>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <vehicle_page+0x8c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
		settings_UI(vehicleMenu,10);
 80020f4:	210a      	movs	r1, #10
 80020f6:	2008      	movs	r0, #8
 80020f8:	f001 fb54 	bl	80037a4 <settings_UI>
		if (back == true) {
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <vehicle_page+0x90>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <vehicle_page+0x78>
			menuAccess = false;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <vehicle_page+0x84>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
			inVehicleMenu = false;
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <vehicle_page+0x7c>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <vehicle_page+0x94>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
			back = false;
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <vehicle_page+0x90>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200003b5 	.word	0x200003b5
 8002124:	2000033a 	.word	0x2000033a
 8002128:	200003b4 	.word	0x200003b4
 800212c:	200003bd 	.word	0x200003bd
 8002130:	200003dd 	.word	0x200003dd
 8002134:	2000033e 	.word	0x2000033e
 8002138:	200003db 	.word	0x200003db

0800213c <system_page>:
void system_page(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	if (!(inSystemMenu)) {
 8002140:	4b66      	ldr	r3, [pc, #408]	; (80022dc <system_page+0x1a0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f083 0301 	eor.w	r3, r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01a      	beq.n	8002184 <system_page+0x48>
		if (okay == true) {
 800214e:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <system_page+0x1a4>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8142 	beq.w	80023dc <system_page+0x2a0>
			menuAccess = true;
 8002158:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <system_page+0x1a8>)
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
			inSystemMenu = true;
 800215e:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <system_page+0x1a0>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 8002164:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <system_page+0x1ac>)
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
			okay = false;
 800216a:	4b5d      	ldr	r3, [pc, #372]	; (80022e0 <system_page+0x1a4>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
			currentSubMenu = 0;
 8002170:	4b5e      	ldr	r3, [pc, #376]	; (80022ec <system_page+0x1b0>)
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
			previousSubMenuBack = 1;
 8002176:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <system_page+0x1b4>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			previousSubMenuForward = 1;
 800217c:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <system_page+0x1b8>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e12b      	b.n	80023dc <system_page+0x2a0>
		}
	} else {
		if (subMenuCounter>2) {
 8002184:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <system_page+0x1bc>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d909      	bls.n	80021a0 <system_page+0x64>
			if (inTheMenu) {
 800218c:	4b56      	ldr	r3, [pc, #344]	; (80022e8 <system_page+0x1ac>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <system_page+0x5e>
				inTheMenu = false;
 8002194:	4b54      	ldr	r3, [pc, #336]	; (80022e8 <system_page+0x1ac>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
				//settings_UI(systemMenu);
			}
			subMenuCounter = 0;
 800219a:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <system_page+0x1bc>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
		}
		settings_UI(systemMenu,currentSubMenu);
 80021a0:	4b52      	ldr	r3, [pc, #328]	; (80022ec <system_page+0x1b0>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	2009      	movs	r0, #9
 80021aa:	f001 fafb 	bl	80037a4 <settings_UI>
		//Time Settings Menu
		if (!inTimeSettings) {
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <system_page+0x1c0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f083 0301 	eor.w	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d06f      	beq.n	800229c <system_page+0x160>
			if (forward == true) {
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <system_page+0x1c4>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d02d      	beq.n	8002220 <system_page+0xe4>

				if (currentSubMenu == 0 && previousSubMenuBack == 1) {
 80021c4:	4b49      	ldr	r3, [pc, #292]	; (80022ec <system_page+0x1b0>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d111      	bne.n	80021f2 <system_page+0xb6>
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <system_page+0x1b4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10c      	bne.n	80021f2 <system_page+0xb6>
					currentSubMenu = 1;
 80021d8:	4b44      	ldr	r3, [pc, #272]	; (80022ec <system_page+0x1b0>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <system_page+0x1b8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 0;
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <system_page+0x1b4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 80021ea:	4b45      	ldr	r3, [pc, #276]	; (8002300 <system_page+0x1c4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
					return;
 80021f0:	e104      	b.n	80023fc <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuBack == 0) {
 80021f2:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <system_page+0x1b0>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d111      	bne.n	8002220 <system_page+0xe4>
 80021fc:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <system_page+0x1b4>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <system_page+0xe4>
					currentSubMenu = 0;
 8002206:	4b39      	ldr	r3, [pc, #228]	; (80022ec <system_page+0x1b0>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <system_page+0x1b8>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
					previousSubMenuBack = 1;
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <system_page+0x1b4>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					forward = false;
 8002218:	4b39      	ldr	r3, [pc, #228]	; (8002300 <system_page+0x1c4>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
					return;
 800221e:	e0ed      	b.n	80023fc <system_page+0x2c0>
				}
			}
			if (backward == true) {
 8002220:	4b38      	ldr	r3, [pc, #224]	; (8002304 <system_page+0x1c8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d02d      	beq.n	8002284 <system_page+0x148>
				if (currentSubMenu == 0 && previousSubMenuForward == 1) {
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <system_page+0x1b0>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d111      	bne.n	8002256 <system_page+0x11a>
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <system_page+0x1b8>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10c      	bne.n	8002256 <system_page+0x11a>
					currentSubMenu = 1;
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <system_page+0x1b0>)
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 0;
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <system_page+0x1b8>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 0;
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <system_page+0x1b4>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 800224e:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <system_page+0x1c8>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
					return;
 8002254:	e0d2      	b.n	80023fc <system_page+0x2c0>
				}
				if (currentSubMenu == 1 && previousSubMenuForward == 0) {
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <system_page+0x1b0>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d111      	bne.n	8002284 <system_page+0x148>
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <system_page+0x1b8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <system_page+0x148>
					currentSubMenu = 0;
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <system_page+0x1b0>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
					previousSubMenuForward = 1;
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <system_page+0x1b8>)
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]

					previousSubMenuBack = 1;
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <system_page+0x1b4>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
					//_menuChanged = true;
					backward = false;
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <system_page+0x1c8>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
					return;
 8002282:	e0bb      	b.n	80023fc <system_page+0x2c0>
				}

			}
			if (okay) {
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <system_page+0x1a4>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a7 	beq.w	80023dc <system_page+0x2a0>
				inTimeSettings = true;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <system_page+0x1c0>)
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
				okay = false;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <system_page+0x1a4>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e09f      	b.n	80023dc <system_page+0x2a0>
			}

		}
		else
		{
			if (okay) {
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <system_page+0x1a4>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d033      	beq.n	800230c <system_page+0x1d0>
				okay = false;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <system_page+0x1a4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <system_page+0x1cc>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <system_page+0x186>
					currentSubMenu = vpCounter;
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <system_page+0x1cc>)
 80022b4:	781a      	ldrb	r2, [r3, #0]
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <system_page+0x1b0>)
 80022b8:	701a      	strb	r2, [r3, #0]
					vpCounter = 4;
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <system_page+0x1cc>)
 80022bc:	2204      	movs	r2, #4
 80022be:	701a      	strb	r2, [r3, #0]
					return;
 80022c0:	e09c      	b.n	80023fc <system_page+0x2c0>
				}
				if (vpCounter == 4) {
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <system_page+0x1cc>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d120      	bne.n	800230c <system_page+0x1d0>
					currentSubMenu = vpCounter;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <system_page+0x1cc>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <system_page+0x1b0>)
 80022d0:	701a      	strb	r2, [r3, #0]
					vpCounter = 3;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <system_page+0x1cc>)
 80022d4:	2203      	movs	r2, #3
 80022d6:	701a      	strb	r2, [r3, #0]
					return;
 80022d8:	e090      	b.n	80023fc <system_page+0x2c0>
 80022da:	bf00      	nop
 80022dc:	200003b6 	.word	0x200003b6
 80022e0:	2000033a 	.word	0x2000033a
 80022e4:	200003b4 	.word	0x200003b4
 80022e8:	200003bd 	.word	0x200003bd
 80022ec:	200003ae 	.word	0x200003ae
 80022f0:	200003af 	.word	0x200003af
 80022f4:	200003b0 	.word	0x200003b0
 80022f8:	200003dd 	.word	0x200003dd
 80022fc:	200003b7 	.word	0x200003b7
 8002300:	20000338 	.word	0x20000338
 8002304:	20000339 	.word	0x20000339
 8002308:	20000011 	.word	0x20000011
				}
			}
			if (forward) {
 800230c:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <system_page+0x2c4>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d016      	beq.n	8002342 <system_page+0x206>
			forward = false;
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <system_page+0x2c4>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
				if (vpCounter == 3) {
 800231a:	4b3a      	ldr	r3, [pc, #232]	; (8002404 <system_page+0x2c8>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d105      	bne.n	800232e <system_page+0x1f2>
					timerSetValueH++;
 8002322:	4b39      	ldr	r3, [pc, #228]	; (8002408 <system_page+0x2cc>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b37      	ldr	r3, [pc, #220]	; (8002408 <system_page+0x2cc>)
 800232c:	701a      	strb	r2, [r3, #0]
				}
				if (vpCounter == 4) {
 800232e:	4b35      	ldr	r3, [pc, #212]	; (8002404 <system_page+0x2c8>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d105      	bne.n	8002342 <system_page+0x206>
					timerSetValueMin++;
 8002336:	4b35      	ldr	r3, [pc, #212]	; (800240c <system_page+0x2d0>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b33      	ldr	r3, [pc, #204]	; (800240c <system_page+0x2d0>)
 8002340:	701a      	strb	r2, [r3, #0]
				}
			}

			if (backward) {
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <system_page+0x2d4>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d024      	beq.n	8002394 <system_page+0x258>
			backward = false;
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <system_page+0x2d4>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
			if (vpCounter == 3) {
 8002350:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <system_page+0x2c8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d105      	bne.n	8002364 <system_page+0x228>
				timerSetValueH--;
 8002358:	4b2b      	ldr	r3, [pc, #172]	; (8002408 <system_page+0x2cc>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3b01      	subs	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <system_page+0x2cc>)
 8002362:	701a      	strb	r2, [r3, #0]
			}
			if (vpCounter == 4) {
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <system_page+0x2c8>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d105      	bne.n	8002378 <system_page+0x23c>
				timerSetValueMin--;
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <system_page+0x2d0>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b25      	ldr	r3, [pc, #148]	; (800240c <system_page+0x2d0>)
 8002376:	701a      	strb	r2, [r3, #0]
			}

				if (timerSetValueH == 0) {
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <system_page+0x2cc>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <system_page+0x24a>
					timerSetValueH = 23;
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <system_page+0x2cc>)
 8002382:	2217      	movs	r2, #23
 8002384:	701a      	strb	r2, [r3, #0]
				}
				if (timerSetValueMin == 0) {
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <system_page+0x2d0>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <system_page+0x258>
					timerSetValueMin = 59;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <system_page+0x2d0>)
 8002390:	223b      	movs	r2, #59	; 0x3b
 8002392:	701a      	strb	r2, [r3, #0]
				}
			}

			if (timerSetValueH > 24) {
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <system_page+0x2cc>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b18      	cmp	r3, #24
 800239a:	d902      	bls.n	80023a2 <system_page+0x266>
				timerSetValueH = 0;
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <system_page+0x2cc>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			}

			if (timerSetValueMin > 60) {
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <system_page+0x2d0>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b3c      	cmp	r3, #60	; 0x3c
 80023a8:	d902      	bls.n	80023b0 <system_page+0x274>
				timerSetValueMin = 0;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <system_page+0x2d0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
			}


			if (back) {
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <system_page+0x2d8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d011      	beq.n	80023dc <system_page+0x2a0>
				inTimeSettings = false;
 80023b8:	4b17      	ldr	r3, [pc, #92]	; (8002418 <system_page+0x2dc>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				//Trasmit time
				currentSubMenu = 0;
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <system_page+0x2e0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
				previousSubMenuForward = 1;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <system_page+0x2e4>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
				previousSubMenuBack = 1;
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <system_page+0x2e8>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
				timeChanged = true;
 80023d0:	4b15      	ldr	r3, [pc, #84]	; (8002428 <system_page+0x2ec>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
				back = false;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <system_page+0x2d8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
//		} else {
//
//		}
	}

	if (back == true) {
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <system_page+0x2d8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00b      	beq.n	80023fc <system_page+0x2c0>
		menuAccess = false;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <system_page+0x2f0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
		inSystemMenu = false;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <system_page+0x2f4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
		_menuChanged = true;
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <system_page+0x2f8>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		back = false;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <system_page+0x2d8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]

	}
}
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000338 	.word	0x20000338
 8002404:	20000011 	.word	0x20000011
 8002408:	200003b8 	.word	0x200003b8
 800240c:	200003b9 	.word	0x200003b9
 8002410:	20000339 	.word	0x20000339
 8002414:	2000033e 	.word	0x2000033e
 8002418:	200003b7 	.word	0x200003b7
 800241c:	200003ae 	.word	0x200003ae
 8002420:	200003b0 	.word	0x200003b0
 8002424:	200003af 	.word	0x200003af
 8002428:	200003ba 	.word	0x200003ba
 800242c:	200003b4 	.word	0x200003b4
 8002430:	200003b6 	.word	0x200003b6
 8002434:	200003db 	.word	0x200003db

08002438 <bluetooth_page>:

void bluetooth_page(void) {
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	if (!(inBluetoothMenu)) {
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <bluetooth_page+0x7c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	f083 0301 	eor.w	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d010      	beq.n	800246c <bluetooth_page+0x34>
		if (okay == true) {
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <bluetooth_page+0x80>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02e      	beq.n	80024b0 <bluetooth_page+0x78>
			menuAccess = true;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <bluetooth_page+0x84>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = true;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <bluetooth_page+0x7c>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <bluetooth_page+0x88>)
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <bluetooth_page+0x80>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 800246a:	e021      	b.n	80024b0 <bluetooth_page+0x78>
		if (subMenuCounter>2) {
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <bluetooth_page+0x8c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d909      	bls.n	8002488 <bluetooth_page+0x50>
			if (inTheMenu) {
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <bluetooth_page+0x88>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <bluetooth_page+0x4a>
				inTheMenu = false;
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <bluetooth_page+0x88>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <bluetooth_page+0x8c>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
		settings_UI(bluetoothMenu,10);
 8002488:	210a      	movs	r1, #10
 800248a:	200a      	movs	r0, #10
 800248c:	f001 f98a 	bl	80037a4 <settings_UI>
		if (back == true) {
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <bluetooth_page+0x90>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <bluetooth_page+0x78>
			menuAccess = false;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <bluetooth_page+0x84>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
			inBluetoothMenu = false;
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <bluetooth_page+0x7c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <bluetooth_page+0x94>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]
			back = false;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <bluetooth_page+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200003bb 	.word	0x200003bb
 80024b8:	2000033a 	.word	0x2000033a
 80024bc:	200003b4 	.word	0x200003b4
 80024c0:	200003bd 	.word	0x200003bd
 80024c4:	200003dd 	.word	0x200003dd
 80024c8:	2000033e 	.word	0x2000033e
 80024cc:	200003db 	.word	0x200003db

080024d0 <errors_page>:
void errors_page(void) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
	if (!(inErrorsMenu)) {
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <errors_page+0x7c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <errors_page+0x34>
		if (okay == true) {
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <errors_page+0x80>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d02e      	beq.n	8002548 <errors_page+0x78>
			menuAccess = true;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <errors_page+0x84>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = true;
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <errors_page+0x7c>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
			inTheMenu = true;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <errors_page+0x88>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
			okay = false;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <errors_page+0x80>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
			_menuChanged = true;
			back = false;
		}
	}
}
 8002502:	e021      	b.n	8002548 <errors_page+0x78>
		if (subMenuCounter>2) {
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <errors_page+0x8c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d909      	bls.n	8002520 <errors_page+0x50>
			if (inTheMenu) {
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <errors_page+0x88>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <errors_page+0x4a>
				inTheMenu = false;
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <errors_page+0x88>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
			subMenuCounter = 0;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <errors_page+0x8c>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
		settings_UI(errorsMenu,10);
 8002520:	210a      	movs	r1, #10
 8002522:	200b      	movs	r0, #11
 8002524:	f001 f93e 	bl	80037a4 <settings_UI>
		if (back == true) {
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <errors_page+0x90>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <errors_page+0x78>
			menuAccess = false;
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <errors_page+0x84>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
			inErrorsMenu = false;
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <errors_page+0x7c>)
 8002538:	2200      	movs	r2, #0
 800253a:	701a      	strb	r2, [r3, #0]
			_menuChanged = true;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <errors_page+0x94>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
			back = false;
 8002542:	4b07      	ldr	r3, [pc, #28]	; (8002560 <errors_page+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200003bc 	.word	0x200003bc
 8002550:	2000033a 	.word	0x2000033a
 8002554:	200003b4 	.word	0x200003b4
 8002558:	200003bd 	.word	0x200003bd
 800255c:	200003dd 	.word	0x200003dd
 8002560:	2000033e 	.word	0x2000033e
 8002564:	200003db 	.word	0x200003db

08002568 <mainStateMachine>:

#include <state_machine.h>

uint8_t dataCounter = 0;

void mainStateMachine(void) {
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	switch (currentStateSM) {
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <mainStateMachine+0x44>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d816      	bhi.n	80025a4 <mainStateMachine+0x3c>
 8002576:	a201      	add	r2, pc, #4	; (adr r2, 800257c <mainStateMachine+0x14>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	0800258d 	.word	0x0800258d
 8002580:	08002593 	.word	0x08002593
 8002584:	08002599 	.word	0x08002599
 8002588:	0800259f 	.word	0x0800259f
	case startingup_state:
		startUpState();
 800258c:	f000 f810 	bl	80025b0 <startUpState>
		break;
 8002590:	e009      	b.n	80025a6 <mainStateMachine+0x3e>
	case driving_state:
		driveState();
 8002592:	f000 f8e3 	bl	800275c <driveState>
		break;
 8002596:	e006      	b.n	80025a6 <mainStateMachine+0x3e>
	case charging_state:
		chargeState();
 8002598:	f000 f982 	bl	80028a0 <chargeState>
		break;
 800259c:	e003      	b.n	80025a6 <mainStateMachine+0x3e>
	case Error_state:
		errorState();
 800259e:	f000 f9fd 	bl	800299c <errorState>
		break;
 80025a2:	e000      	b.n	80025a6 <mainStateMachine+0x3e>
	default:
		break;
 80025a4:	bf00      	nop
	}
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200003ac 	.word	0x200003ac

080025b0 <startUpState>:

void startUpState(void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0

	dataCounter++;
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <startUpState+0x138>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <startUpState+0x138>)
 80025be:	701a      	strb	r2, [r3, #0]

	if (state_entry) {
 80025c0:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <startUpState+0x13c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d018      	beq.n	80025fa <startUpState+0x4a>
		state_entry = false;
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <startUpState+0x13c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		currentPage = front; //Set front Page in every startup
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <startUpState+0x140>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
		//_chargingUI = true;
		okay = false;
 80025d4:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <startUpState+0x144>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <startUpState+0x148>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
		_modeSelection = 2;//Clear Mode
 80025e0:	4b46      	ldr	r3, [pc, #280]	; (80026fc <startUpState+0x14c>)
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
		_setDriverPage = false;
 80025e6:	4b46      	ldr	r3, [pc, #280]	; (8002700 <startUpState+0x150>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80025ec:	4b45      	ldr	r3, [pc, #276]	; (8002704 <startUpState+0x154>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <startUpState+0x4a>
			_errorSetIcon = false;
 80025f4:	4b44      	ldr	r3, [pc, #272]	; (8002708 <startUpState+0x158>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
		}
	}


	if (err_error != 0) {
 80025fa:	4b44      	ldr	r3, [pc, #272]	; (800270c <startUpState+0x15c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <startUpState+0x80>
		if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 8002602:	4b40      	ldr	r3, [pc, #256]	; (8002704 <startUpState+0x154>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d16a      	bne.n	80026e0 <startUpState+0x130>
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <startUpState+0x160>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <startUpState+0x164>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d064      	beq.n	80026e0 <startUpState+0x130>
			currentStateSM = Error_state;
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <startUpState+0x168>)
 8002618:	2203      	movs	r2, #3
 800261a:	701a      	strb	r2, [r3, #0]
			previousStateSM = startingup_state;
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <startUpState+0x16c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <startUpState+0x13c>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
			_errorClear = false;
 8002628:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <startUpState+0x170>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
		}
		return; //Will exit from the function
 800262e:	e057      	b.n	80026e0 <startUpState+0x130>
	}

	if (currentstate == 4) {
 8002630:	4b3c      	ldr	r3, [pc, #240]	; (8002724 <startUpState+0x174>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d109      	bne.n	800264c <startUpState+0x9c>
		currentStateSM = charging_state;
 8002638:	4b37      	ldr	r3, [pc, #220]	; (8002718 <startUpState+0x168>)
 800263a:	2202      	movs	r2, #2
 800263c:	701a      	strb	r2, [r3, #0]
		previousStateSM = startingup_state;
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <startUpState+0x16c>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <startUpState+0x13c>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
		return;
 800264a:	e04c      	b.n	80026e6 <startUpState+0x136>
	}
	if (accessory == 1) {
 800264c:	4b36      	ldr	r3, [pc, #216]	; (8002728 <startUpState+0x178>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d112      	bne.n	800267a <startUpState+0xca>
		navigation(); //enable navigation in Accessory Mode
 8002654:	f7fe ffba 	bl	80015cc <navigation>
		//_modeSelection = 2;//Clear Mode
		//_trasmitGlobal = Disengage_Page;

		if (err_or_not != 0) {
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <startUpState+0x154>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02e      	beq.n	80026be <startUpState+0x10e>
			entry = true;
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <startUpState+0x17c>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
			startup = true;
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <startUpState+0x180>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
			checklit = true;
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <startUpState+0x184>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
			_startingUp = true;
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <startUpState+0x188>)
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e021      	b.n	80026be <startUpState+0x10e>
		}
		//return;
	} else { //No buttons support when in the Press Brake
		forward = false;
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <startUpState+0x18c>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
		backward = false;
 8002680:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <startUpState+0x190>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
		_navigation = false;
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <startUpState+0x194>)
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
		//currentMode = mode_evcu;
		currentPage = front;
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <startUpState+0x140>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]

		if (dataCounter > 2) {
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <startUpState+0x138>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d905      	bls.n	80026a6 <startUpState+0xf6>
			_realTimeData = true;
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <startUpState+0x198>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
			dataCounter = 0;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <startUpState+0x138>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		}
		_oneTimeData = true;
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <startUpState+0x19c>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]

		inInfoBat = false;
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <startUpState+0x1a0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		inSettings = false;
 80026b2:	4b28      	ldr	r3, [pc, #160]	; (8002754 <startUpState+0x1a4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

		_trasmitGlobal = Disengage_Page;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <startUpState+0x148>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
		//_modeSelection = 2;//Clear Mode
	}

	//StartingUp Transmit flag
	_startingUp = true;
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <startUpState+0x188>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]

	//All clear transmit function called through flag
	if (!(readytodrive == 1)) {
 80026c4:	4b24      	ldr	r3, [pc, #144]	; (8002758 <startUpState+0x1a8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10b      	bne.n	80026e4 <startUpState+0x134>
		return;
	}

	currentStateSM = driving_state;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <startUpState+0x168>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
	previousStateSM = startingup_state;
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <startUpState+0x16c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
	//_modeSelection = true;
	if (readytodrive == 1) {

	}
	state_entry = true;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <startUpState+0x13c>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e002      	b.n	80026e6 <startUpState+0x136>
		return; //Will exit from the function
 80026e0:	bf00      	nop
 80026e2:	e000      	b.n	80026e6 <startUpState+0x136>
		return;
 80026e4:	bf00      	nop
}
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2000047d 	.word	0x2000047d
 80026ec:	2000000f 	.word	0x2000000f
 80026f0:	200003aa 	.word	0x200003aa
 80026f4:	2000033a 	.word	0x2000033a
 80026f8:	200003ec 	.word	0x200003ec
 80026fc:	200003cf 	.word	0x200003cf
 8002700:	200003cd 	.word	0x200003cd
 8002704:	20000000 	.word	0x20000000
 8002708:	200003d3 	.word	0x200003d3
 800270c:	2000039f 	.word	0x2000039f
 8002710:	20000004 	.word	0x20000004
 8002714:	200003a4 	.word	0x200003a4
 8002718:	200003ac 	.word	0x200003ac
 800271c:	200003ad 	.word	0x200003ad
 8002720:	200003d4 	.word	0x200003d4
 8002724:	20000394 	.word	0x20000394
 8002728:	20000396 	.word	0x20000396
 800272c:	20000009 	.word	0x20000009
 8002730:	20000008 	.word	0x20000008
 8002734:	2000000a 	.word	0x2000000a
 8002738:	200003ca 	.word	0x200003ca
 800273c:	20000338 	.word	0x20000338
 8002740:	20000339 	.word	0x20000339
 8002744:	200003cb 	.word	0x200003cb
 8002748:	200003cc 	.word	0x200003cc
 800274c:	200003ce 	.word	0x200003ce
 8002750:	20000340 	.word	0x20000340
 8002754:	2000033f 	.word	0x2000033f
 8002758:	20000397 	.word	0x20000397

0800275c <driveState>:

void driveState(void) {
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	if (state_entry) {
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <driveState+0xec>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d021      	beq.n	80027ac <driveState+0x50>
		state_entry = false;
 8002768:	4b37      	ldr	r3, [pc, #220]	; (8002848 <driveState+0xec>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <driveState+0xf0>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
		mode_count = 0;
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <driveState+0xf4>)
 8002776:	2200      	movs	r2, #0
 8002778:	801a      	strh	r2, [r3, #0]
		_trasmitGlobal = 0;
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <driveState+0xf8>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
		dataCounter = 0;
 8002780:	4b35      	ldr	r3, [pc, #212]	; (8002858 <driveState+0xfc>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
		_drivePageSet = front;
 8002786:	4b35      	ldr	r3, [pc, #212]	; (800285c <driveState+0x100>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
		///////////////////////
		_gearChanged = true;
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <driveState+0x104>)
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
		_modeSelection = 1;
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <driveState+0x108>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
		modeIcon = true;
 8002798:	4b33      	ldr	r3, [pc, #204]	; (8002868 <driveState+0x10c>)
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <driveState+0x110>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <driveState+0x50>
			_errorSetIcon = false;
 80027a6:	4b32      	ldr	r3, [pc, #200]	; (8002870 <driveState+0x114>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
		}
	}
	dataCounter++;
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <driveState+0xfc>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <driveState+0xfc>)
 80027b6:	701a      	strb	r2, [r3, #0]
	if ((err_or_not == 0) && (err_fullerror != err_previous)) {
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <driveState+0x110>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d112      	bne.n	80027e6 <driveState+0x8a>
 80027c0:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <driveState+0x118>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <driveState+0x11c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d00c      	beq.n	80027e6 <driveState+0x8a>
		currentStateSM = Error_state;
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <driveState+0x120>)
 80027ce:	2203      	movs	r2, #3
 80027d0:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 80027d2:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <driveState+0x124>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <driveState+0xec>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 80027de:	4b29      	ldr	r3, [pc, #164]	; (8002884 <driveState+0x128>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
		return;
 80027e4:	e02e      	b.n	8002844 <driveState+0xe8>
	}

	if (accessory == 1) {
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <driveState+0x12c>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d109      	bne.n	8002802 <driveState+0xa6>
		currentStateSM = startingup_state;
 80027ee:	4b23      	ldr	r3, [pc, #140]	; (800287c <driveState+0x120>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
		previousStateSM = driving_state;
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <driveState+0x124>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <driveState+0xec>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
		return;
 8002800:	e020      	b.n	8002844 <driveState+0xe8>
	}

	if (currentstate == 2) {
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <driveState+0x130>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d102      	bne.n	8002810 <driveState+0xb4>
		evcuMode();
 800280a:	f001 fd33 	bl	8004274 <evcuMode>
 800280e:	e002      	b.n	8002816 <driveState+0xba>
	}
	else
	{
		mode = false;
 8002810:	4b1f      	ldr	r3, [pc, #124]	; (8002890 <driveState+0x134>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
	}

	//Function to track changes of currentstate
	if (previousState != currentstate) {
 8002816:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <driveState+0x138>)
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <driveState+0x130>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d006      	beq.n	8002830 <driveState+0xd4>
		_gearChanged = true;
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <driveState+0x104>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
		previousState = currentstate;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <driveState+0x130>)
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <driveState+0x138>)
 800282e:	701a      	strb	r2, [r3, #0]
	}

	navigation();
 8002830:	f7fe fecc 	bl	80015cc <navigation>

//	if (_modeChanged) {
//		//modeSelection(currentMode);	//This should be called using a flag _modeSelection
//		_modeSelection = true;
//	}
	if (rtn) { //rtn True when there is a error
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <driveState+0x13c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <driveState+0xe8>
		_allowNavigation = true;
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <driveState+0x140>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
		return;
 8002842:	bf00      	nop
	}
}
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000000f 	.word	0x2000000f
 800284c:	200003aa 	.word	0x200003aa
 8002850:	20000382 	.word	0x20000382
 8002854:	200003ec 	.word	0x200003ec
 8002858:	2000047d 	.word	0x2000047d
 800285c:	200003eb 	.word	0x200003eb
 8002860:	200003da 	.word	0x200003da
 8002864:	200003cf 	.word	0x200003cf
 8002868:	200003c6 	.word	0x200003c6
 800286c:	20000000 	.word	0x20000000
 8002870:	200003d3 	.word	0x200003d3
 8002874:	20000004 	.word	0x20000004
 8002878:	200003a4 	.word	0x200003a4
 800287c:	200003ac 	.word	0x200003ac
 8002880:	200003ad 	.word	0x200003ad
 8002884:	200003d4 	.word	0x200003d4
 8002888:	20000396 	.word	0x20000396
 800288c:	20000394 	.word	0x20000394
 8002890:	2000033d 	.word	0x2000033d
 8002894:	20000395 	.word	0x20000395
 8002898:	200003a9 	.word	0x200003a9
 800289c:	200003d0 	.word	0x200003d0

080028a0 <chargeState>:

void chargeState(void) {
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
	if (state_entry) {
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <chargeState+0xc0>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00f      	beq.n	80028cc <chargeState+0x2c>
		state_entry = false;
 80028ac:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <chargeState+0xc0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = 0;
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <chargeState+0xc4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
		_startingUp = false;
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <chargeState+0xc8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <chargeState+0xcc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <chargeState+0x2c>
			_errorSetIcon = false;
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <chargeState+0xd0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
		}
	}
	_charingState = true;
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <chargeState+0xd4>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
	_realTimeData = true;
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <chargeState+0xd8>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
	///////////////////////
	_oneTimeData = true;
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <chargeState+0xdc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
	//////////////////////

	if (!(currentstate == 4)) {
 80028de:	4b28      	ldr	r3, [pc, #160]	; (8002980 <chargeState+0xe0>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d009      	beq.n	80028fa <chargeState+0x5a>
		currentStateSM = startingup_state;
 80028e6:	4b27      	ldr	r3, [pc, #156]	; (8002984 <chargeState+0xe4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 80028ec:	4b26      	ldr	r3, [pc, #152]	; (8002988 <chargeState+0xe8>)
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 80028f2:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <chargeState+0xc0>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
		return;
 80028f8:	e02e      	b.n	8002958 <chargeState+0xb8>
	}

	if ((err_or_not == 0)) {
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <chargeState+0xcc>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d113      	bne.n	800292a <chargeState+0x8a>
		currentStateSM = Error_state;
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <chargeState+0xe4>)
 8002904:	2203      	movs	r2, #3
 8002906:	701a      	strb	r2, [r3, #0]
		previousStateSM = charging_state;
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <chargeState+0xe8>)
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <chargeState+0xc0>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
		_errorClear = false;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <chargeState+0xec>)
 8002916:	2200      	movs	r2, #0
 8002918:	701a      	strb	r2, [r3, #0]

		if (err_or_not != 0) {
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <chargeState+0xcc>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <chargeState+0xb6>
			_errorSetIcon = false;
 8002922:	4b13      	ldr	r3, [pc, #76]	; (8002970 <chargeState+0xd0>)
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
		}
		return;
 8002928:	e015      	b.n	8002956 <chargeState+0xb6>

//	if (_trasmitGlobal == 3) {
//		return;
//	}

	if (chargingcomp == 1) {
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <chargeState+0xf0>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d106      	bne.n	8002940 <chargeState+0xa0>
		_chargeComplete = true;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <chargeState+0xf4>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <chargeState+0xf8>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
		return;
 800293e:	e00b      	b.n	8002958 <chargeState+0xb8>
	}
//
//	if (_trasmitGlobal == 2) {
//		return;
//	}
	if (!_chargingUI) {
 8002940:	4b15      	ldr	r3, [pc, #84]	; (8002998 <chargeState+0xf8>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d004      	beq.n	8002958 <chargeState+0xb8>
		_chargingUI = true; //this has been set to false from startup and error state
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <chargeState+0xf8>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e000      	b.n	8002958 <chargeState+0xb8>
		return;
 8002956:	bf00      	nop
	}

}
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000000f 	.word	0x2000000f
 8002964:	200003ec 	.word	0x200003ec
 8002968:	200003ca 	.word	0x200003ca
 800296c:	20000000 	.word	0x20000000
 8002970:	200003d3 	.word	0x200003d3
 8002974:	200003d5 	.word	0x200003d5
 8002978:	200003cc 	.word	0x200003cc
 800297c:	200003ce 	.word	0x200003ce
 8002980:	20000394 	.word	0x20000394
 8002984:	200003ac 	.word	0x200003ac
 8002988:	200003ad 	.word	0x200003ad
 800298c:	200003d4 	.word	0x200003d4
 8002990:	200003c8 	.word	0x200003c8
 8002994:	200003d7 	.word	0x200003d7
 8002998:	200003d6 	.word	0x200003d6

0800299c <errorState>:

void errorState(void) {
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0

	if (state_entry) {
 80029a0:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <errorState+0x194>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01b      	beq.n	80029e0 <errorState+0x44>
		state_entry = false;
 80029a8:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <errorState+0x194>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
		currentPage = front;
 80029ae:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <errorState+0x198>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
		error_check = true;
 80029b4:	4b60      	ldr	r3, [pc, #384]	; (8002b38 <errorState+0x19c>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = false;
 80029ba:	4b60      	ldr	r3, [pc, #384]	; (8002b3c <errorState+0x1a0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
		rtn = true;
 80029c0:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <errorState+0x1a4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
		_chargingUI = false;
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <errorState+0x1a8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
		_trasmitGlobal = front;
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <errorState+0x1ac>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
		if (err_or_not != 0) {
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <errorState+0x1b0>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <errorState+0x44>
			_errorSetIcon = false;
 80029da:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <errorState+0x1b4>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
		}
	}
	_realTimeData = true; //Real-time Data Update
 80029e0:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <errorState+0x1b8>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]

	setError();
 80029e6:	f7fe f901 	bl	8000bec <setError>

	_errorSetPopup = true; //Transmit pop-up
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <errorState+0x1bc>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
	_errorSetIcon = true; //set error icon
 80029f0:	4b57      	ldr	r3, [pc, #348]	; (8002b50 <errorState+0x1b4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
	_errorSetCode = true;
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <errorState+0x1c0>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]

	if (_errorClear) {
 80029fc:	4b58      	ldr	r3, [pc, #352]	; (8002b60 <errorState+0x1c4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <errorState+0x74>
		_errorSetPopup = false;
 8002a04:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <errorState+0x1bc>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002a0a:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <errorState+0x1c0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
	}
	evcuMode();
 8002a10:	f001 fc30 	bl	8004274 <evcuMode>

	if (previousStateSM == driving_state) {
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <errorState+0x1c8>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d123      	bne.n	8002a66 <errorState+0xca>
		modeSelection(currentMode);
 8002a1e:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <errorState+0x1cc>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f8f3 	bl	8003c10 <modeSelection>
		//Press Okay to Disable PopUp
		if (okay) {
 8002a2a:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <errorState+0x1d0>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <errorState+0xca>
			err_previous = err_fullerror;
 8002a32:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <errorState+0x1d4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a4f      	ldr	r2, [pc, #316]	; (8002b74 <errorState+0x1d8>)
 8002a38:	6013      	str	r3, [r2, #0]
			currentStateSM = driving_state;
 8002a3a:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <errorState+0x1dc>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
			previousStateSM = Error_state;
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <errorState+0x1c8>)
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
			state_entry = true;
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <errorState+0x194>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
			okay = false;
 8002a4c:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <errorState+0x1d0>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]

			_errorSetPopup = false;
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <errorState+0x1bc>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002a58:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <errorState+0x1c0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
			_errorClear = true;
 8002a5e:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <errorState+0x1c4>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
			return;
 8002a64:	e063      	b.n	8002b2e <errorState+0x192>
		}
	}

	//Error Selection for Charging State
	if (previousStateSM == charging_state && error_check) {
 8002a66:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <errorState+0x1c8>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d10d      	bne.n	8002a8c <errorState+0xf0>
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <errorState+0x19c>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d009      	beq.n	8002a8c <errorState+0xf0>
		charge_error = true;
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <errorState+0x1e0>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <errorState+0x194>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
		charging_UI(chargingerr_ui);
 8002a84:	200f      	movs	r0, #15
 8002a86:	f000 fe47 	bl	8003718 <charging_UI>
		return;
 8002a8a:	e050      	b.n	8002b2e <errorState+0x192>
	}

	if (accessory == 1) {
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <errorState+0x1e4>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d110      	bne.n	8002ab6 <errorState+0x11a>
		err_previous = err_fullerror;
 8002a94:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <errorState+0x1d4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a36      	ldr	r2, [pc, #216]	; (8002b74 <errorState+0x1d8>)
 8002a9a:	6013      	str	r3, [r2, #0]
		currentStateSM = startingup_state;
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <errorState+0x1dc>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
		previousStateSM = Error_state;
 8002aa2:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <errorState+0x1c8>)
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	701a      	strb	r2, [r3, #0]
		state_entry = true;
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <errorState+0x194>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <errorState+0x1bc>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
		//navigation();
		return;
 8002ab4:	e03b      	b.n	8002b2e <errorState+0x192>
	}

	if (okay) {
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <errorState+0x1d0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00e      	beq.n	8002adc <errorState+0x140>
		okay = false;
 8002abe:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <errorState+0x1d0>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
		err_State_Navigation = true;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <errorState+0x1a0>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]

		_errorSetPopup = false;
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <errorState+0x1bc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
		_errorSetCode = false;
 8002ad0:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <errorState+0x1c0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
		_errorClear = true;
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <errorState+0x1c4>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
	}

	if (rtn) { //rtn true when there is an error
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <errorState+0x1a4>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d024      	beq.n	8002b2e <errorState+0x192>
		if (err_State_Navigation) {
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <errorState+0x1a0>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <errorState+0x162>
			navigation(); //this should be replaced with _navigation flag
 8002aec:	f7fe fd6e 	bl	80015cc <navigation>
			_errorSetPopup = false;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <errorState+0x1bc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
			_errorSetCode = false;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <errorState+0x1c0>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
			} else {
				_errorSetCode = true;
			}
		}
		return;
 8002afc:	e016      	b.n	8002b2c <errorState+0x190>
			if (mode) {
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <errorState+0x1e8>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00f      	beq.n	8002b26 <errorState+0x18a>
				mode = false;
 8002b06:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <errorState+0x1e8>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
				_errorSetPopup = false;
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <errorState+0x1bc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
				_errorSetCode = false;
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <errorState+0x1c0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
				modeSelection(currentMode);
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <errorState+0x1cc>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 f876 	bl	8003c10 <modeSelection>
		return;
 8002b24:	e002      	b.n	8002b2c <errorState+0x190>
				_errorSetCode = true;
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <errorState+0x1c0>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
		return;
 8002b2c:	bf00      	nop
	}
}
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	2000000f 	.word	0x2000000f
 8002b34:	200003aa 	.word	0x200003aa
 8002b38:	200003c4 	.word	0x200003c4
 8002b3c:	200003a8 	.word	0x200003a8
 8002b40:	200003a9 	.word	0x200003a9
 8002b44:	200003d6 	.word	0x200003d6
 8002b48:	200003ec 	.word	0x200003ec
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	200003d3 	.word	0x200003d3
 8002b54:	200003cc 	.word	0x200003cc
 8002b58:	200003d1 	.word	0x200003d1
 8002b5c:	200003d2 	.word	0x200003d2
 8002b60:	200003d4 	.word	0x200003d4
 8002b64:	200003ad 	.word	0x200003ad
 8002b68:	200003b2 	.word	0x200003b2
 8002b6c:	2000033a 	.word	0x2000033a
 8002b70:	20000004 	.word	0x20000004
 8002b74:	200003a4 	.word	0x200003a4
 8002b78:	200003ac 	.word	0x200003ac
 8002b7c:	200003c7 	.word	0x200003c7
 8002b80:	20000396 	.word	0x20000396
 8002b84:	2000033d 	.word	0x2000033d

08002b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_MspInit+0x5c>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <HAL_MspInit+0x5c>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6193      	str	r3, [r2, #24]
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_MspInit+0x5c>)
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_MspInit+0x5c>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_MspInit+0x5c>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	61d3      	str	r3, [r2, #28]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_MspInit+0x5c>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_MspInit+0x60>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_MspInit+0x60>)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40010000 	.word	0x40010000

08002bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <NMI_Handler+0x4>

08002bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <HardFault_Handler+0x4>

08002bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <MemManage_Handler+0x4>

08002bfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <BusFault_Handler+0x4>

08002c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <UsageFault_Handler+0x4>

08002c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr

08002c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c32:	f001 fc3d 	bl	80044b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <DMA1_Channel2_IRQHandler+0x10>)
 8002c42:	f002 fde5 	bl	8005810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000520 	.word	0x20000520

08002c50 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <CAN1_RX0_IRQHandler+0x10>)
 8002c56:	f002 f89b 	bl	8004d90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000304 	.word	0x20000304

08002c64 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <CAN1_RX1_IRQHandler+0x10>)
 8002c6a:	f002 f891 	bl	8004d90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000304 	.word	0x20000304

08002c78 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <CAN1_SCE_IRQHandler+0x10>)
 8002c7e:	f002 f887 	bl	8004d90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000304 	.word	0x20000304

08002c8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_1_Pin);
 8002c90:	2040      	movs	r0, #64	; 0x40
 8002c92:	f003 f9f3 	bl	800607c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Btn_Int_2_Pin);
 8002c96:	2080      	movs	r0, #128	; 0x80
 8002c98:	f003 f9f0 	bl	800607c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <TIM2_IRQHandler+0x10>)
 8002ca6:	f004 f80d 	bl	8006cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000480 	.word	0x20000480

08002cb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <USART3_IRQHandler+0x10>)
 8002cba:	f004 fcb9 	bl	8007630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200004dc 	.word	0x200004dc

08002cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cda:	f107 0308 	add.w	r3, r7, #8
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce8:	463b      	mov	r3, r7
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002cfa:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8002cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002d06:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d08:	2264      	movs	r2, #100	; 0x64
 8002d0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0c:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d18:	4813      	ldr	r0, [pc, #76]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d1a:	f003 ff29 	bl	8006b70 <HAL_TIM_Base_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d24:	f7fe fc4c 	bl	80015c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d2e:	f107 0308 	add.w	r3, r7, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d36:	f004 f8cd 	bl	8006ed4 <HAL_TIM_ConfigClockSource>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d40:	f7fe fc3e 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d44:	2300      	movs	r3, #0
 8002d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4805      	ldr	r0, [pc, #20]	; (8002d68 <MX_TIM2_Init+0x94>)
 8002d52:	f004 faa9 	bl	80072a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d5c:	f7fe fc30 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000480 	.word	0x20000480

08002d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7c:	d113      	bne.n	8002da6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_TIM_Base_MspInit+0x44>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <HAL_TIM_Base_MspInit+0x44>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	61d3      	str	r3, [r2, #28]
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_TIM_Base_MspInit+0x44>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	201c      	movs	r0, #28
 8002d9c:	f002 fae9 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002da0:	201c      	movs	r0, #28
 8002da2:	f002 fb02 	bl	80053aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000

08002db4 <tick_count>:
	timer_ptr->timeout_30s = 0;
	timer_ptr->timeout_5m = 0;
}

void tick_count(volatile tick_tock *timer_ptr)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	timer_ptr->counter++;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]

	switch (timer_ptr->counter)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f241 7270 	movw	r2, #6000	; 0x1770
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d054      	beq.n	8002e7c <tick_count+0xc8>
 8002dd2:	f241 7270 	movw	r2, #6000	; 0x1770
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d854      	bhi.n	8002e84 <tick_count+0xd0>
 8002dda:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002dde:	d049      	beq.n	8002e74 <tick_count+0xc0>
 8002de0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002de4:	d84e      	bhi.n	8002e84 <tick_count+0xd0>
 8002de6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002dea:	d03f      	beq.n	8002e6c <tick_count+0xb8>
 8002dec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002df0:	d848      	bhi.n	8002e84 <tick_count+0xd0>
 8002df2:	2bc8      	cmp	r3, #200	; 0xc8
 8002df4:	d036      	beq.n	8002e64 <tick_count+0xb0>
 8002df6:	2bc8      	cmp	r3, #200	; 0xc8
 8002df8:	d844      	bhi.n	8002e84 <tick_count+0xd0>
 8002dfa:	2ba0      	cmp	r3, #160	; 0xa0
 8002dfc:	d02e      	beq.n	8002e5c <tick_count+0xa8>
 8002dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8002e00:	d840      	bhi.n	8002e84 <tick_count+0xd0>
 8002e02:	2b78      	cmp	r3, #120	; 0x78
 8002e04:	d026      	beq.n	8002e54 <tick_count+0xa0>
 8002e06:	2b78      	cmp	r3, #120	; 0x78
 8002e08:	d83c      	bhi.n	8002e84 <tick_count+0xd0>
 8002e0a:	2b50      	cmp	r3, #80	; 0x50
 8002e0c:	d01e      	beq.n	8002e4c <tick_count+0x98>
 8002e0e:	2b50      	cmp	r3, #80	; 0x50
 8002e10:	d838      	bhi.n	8002e84 <tick_count+0xd0>
 8002e12:	2b28      	cmp	r3, #40	; 0x28
 8002e14:	d016      	beq.n	8002e44 <tick_count+0x90>
 8002e16:	2b28      	cmp	r3, #40	; 0x28
 8002e18:	d834      	bhi.n	8002e84 <tick_count+0xd0>
 8002e1a:	2b14      	cmp	r3, #20
 8002e1c:	d00e      	beq.n	8002e3c <tick_count+0x88>
 8002e1e:	2b14      	cmp	r3, #20
 8002e20:	d830      	bhi.n	8002e84 <tick_count+0xd0>
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d002      	beq.n	8002e2c <tick_count+0x78>
 8002e26:	2b0a      	cmp	r3, #10
 8002e28:	d004      	beq.n	8002e34 <tick_count+0x80>
			break;
		case 6000:
			timer_ptr->timeout_5m = true;
			break;
		default:
			break;
 8002e2a:	e02b      	b.n	8002e84 <tick_count+0xd0>
			timer_ptr->timeout_50ms = true;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	711a      	strb	r2, [r3, #4]
			break;
 8002e32:	e028      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_0_5s = true;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	715a      	strb	r2, [r3, #5]
			break;
 8002e3a:	e024      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_1s = true;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	719a      	strb	r2, [r3, #6]
			break;
 8002e42:	e020      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_2s = true;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	71da      	strb	r2, [r3, #7]
			break;
 8002e4a:	e01c      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_4s = true;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	721a      	strb	r2, [r3, #8]
			break;
 8002e52:	e018      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_6s = true;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	725a      	strb	r2, [r3, #9]
			break;
 8002e5a:	e014      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_8s = true;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	729a      	strb	r2, [r3, #10]
			break;
 8002e62:	e010      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_10s = true;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	72da      	strb	r2, [r3, #11]
			break;
 8002e6a:	e00c      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_15s = true;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	731a      	strb	r2, [r3, #12]
			break;
 8002e72:	e008      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_30s = true;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	735a      	strb	r2, [r3, #13]
			break;
 8002e7a:	e004      	b.n	8002e86 <tick_count+0xd2>
			timer_ptr->timeout_5m = true;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	739a      	strb	r2, [r3, #14]
			break;
 8002e82:	e000      	b.n	8002e86 <tick_count+0xd2>
			break;
 8002e84:	bf00      	nop
	}
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <transmit>:

void fireData(void) {
	//return;
}

void transmit() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	_transmit_Function++;
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <transmit+0x1b0>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <transmit+0x1b0>)
 8002e9e:	701a      	strb	r2, [r3, #0]
	//if (_transmit_Function == 1) {
		if (_realTimeData) {
 8002ea0:	4b68      	ldr	r3, [pc, #416]	; (8003044 <transmit+0x1b4>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <transmit+0x24>
			realTimeData();
 8002ea8:	f000 fb14 	bl	80034d4 <realTimeData>
			_realTimeData = false;
 8002eac:	4b65      	ldr	r3, [pc, #404]	; (8003044 <transmit+0x1b4>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
			return;
 8002eb2:	e0c4      	b.n	800303e <transmit+0x1ae>
		}
	//}

	if (_transmit_Function == 1) {
 8002eb4:	4b62      	ldr	r3, [pc, #392]	; (8003040 <transmit+0x1b0>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <transmit+0x3a>
		if (_oneTimeData) {
 8002ebc:	4b62      	ldr	r3, [pc, #392]	; (8003048 <transmit+0x1b8>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <transmit+0x3a>
			//oneTimeData();
			_oneTimeData = false;
 8002ec4:	4b60      	ldr	r3, [pc, #384]	; (8003048 <transmit+0x1b8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
			//return;
		}
	}

	if (_transmit_Function == 2) {
 8002eca:	4b5d      	ldr	r3, [pc, #372]	; (8003040 <transmit+0x1b0>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d109      	bne.n	8002ee6 <transmit+0x56>
		if (_startingUp) {
 8002ed2:	4b5e      	ldr	r3, [pc, #376]	; (800304c <transmit+0x1bc>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <transmit+0x56>
			_startingUp = false;
 8002eda:	4b5c      	ldr	r3, [pc, #368]	; (800304c <transmit+0x1bc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
			startingUp();
 8002ee0:	f000 f8d8 	bl	8003094 <startingUp>
			return;
 8002ee4:	e0ab      	b.n	800303e <transmit+0x1ae>
		}
	}

	if (_transmit_Function == 3) {
 8002ee6:	4b56      	ldr	r3, [pc, #344]	; (8003040 <transmit+0x1b0>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d109      	bne.n	8002f02 <transmit+0x72>
		if (_gearChanged) {
 8002eee:	4b58      	ldr	r3, [pc, #352]	; (8003050 <transmit+0x1c0>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <transmit+0x72>
			_gearChanged = false;
 8002ef6:	4b56      	ldr	r3, [pc, #344]	; (8003050 <transmit+0x1c0>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
			gearUpdate();
 8002efc:	f001 f8ae 	bl	800405c <gearUpdate>
			return;
 8002f00:	e09d      	b.n	800303e <transmit+0x1ae>
		}
	}

	if (_transmit_Function == 4) {
 8002f02:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <transmit+0x1b0>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d11b      	bne.n	8002f42 <transmit+0xb2>
		//_transmit_Function = 0;
		if (_modeSelection == 1 && currentstate == 2) {
 8002f0a:	4b52      	ldr	r3, [pc, #328]	; (8003054 <transmit+0x1c4>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10d      	bne.n	8002f2e <transmit+0x9e>
 8002f12:	4b51      	ldr	r3, [pc, #324]	; (8003058 <transmit+0x1c8>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d109      	bne.n	8002f2e <transmit+0x9e>
			modeSelection(currentMode);
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <transmit+0x1cc>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fe75 	bl	8003c10 <modeSelection>
			_modeSelection = 0;
 8002f26:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <transmit+0x1c4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
			return;
 8002f2c:	e087      	b.n	800303e <transmit+0x1ae>
		}
		if (_modeSelection == 2) {
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <transmit+0x1c4>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d105      	bne.n	8002f42 <transmit+0xb2>
			_modeSelection = 0;
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <transmit+0x1c4>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
			modeSelection(modeCleared);
 8002f3c:	2004      	movs	r0, #4
 8002f3e:	f000 fe67 	bl	8003c10 <modeSelection>

		}
	}

	if (_transmit_Function == 5) {
 8002f42:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <transmit+0x1b0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d119      	bne.n	8002f7e <transmit+0xee>
		if (currentStateSM == driving_state && _setDriverPage == true && !_setPoup) {
 8002f4a:	4b45      	ldr	r3, [pc, #276]	; (8003060 <transmit+0x1d0>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d114      	bne.n	8002f7e <transmit+0xee>
 8002f54:	4b43      	ldr	r3, [pc, #268]	; (8003064 <transmit+0x1d4>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <transmit+0xee>
 8002f5c:	4b42      	ldr	r3, [pc, #264]	; (8003068 <transmit+0x1d8>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <transmit+0xee>
			_setDriverPage = false;
 8002f6a:	4b3e      	ldr	r3, [pc, #248]	; (8003064 <transmit+0x1d4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
			drivePageSetter(_drivePageSet);
 8002f70:	4b3e      	ldr	r3, [pc, #248]	; (800306c <transmit+0x1dc>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f95e 	bl	8003238 <drivePageSetter>
			return;
 8002f7c:	e05f      	b.n	800303e <transmit+0x1ae>
		}

	}

	if (_transmit_Function == 6) {
 8002f7e:	4b30      	ldr	r3, [pc, #192]	; (8003040 <transmit+0x1b0>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b06      	cmp	r3, #6
 8002f84:	d122      	bne.n	8002fcc <transmit+0x13c>
		_transmit_Function = 0;
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <transmit+0x1b0>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
		popUpCounter++;
 8002f8c:	4b38      	ldr	r3, [pc, #224]	; (8003070 <transmit+0x1e0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <transmit+0x1e0>)
 8002f96:	701a      	strb	r2, [r3, #0]
		if (popUpCounter > 3) {
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <transmit+0x1e0>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d90c      	bls.n	8002fba <transmit+0x12a>
			popUpCounter = 0;
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <transmit+0x1e0>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
			popUpNumber = 0;
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <transmit+0x1e4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
			if (inPopup) {
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <transmit+0x1e8>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <transmit+0x12a>
				_setPoup = true;
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <transmit+0x1d8>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
			}
		}
		//_setPoup and Popup Number should be set from else where
		if (_setPoup) {
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <transmit+0x1d8>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <transmit+0x13c>
			_setPoup = false;
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <transmit+0x1d8>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
			//HAL_UART_AbortTransmit(&huart3);
			popUpHandler();
 8002fc8:	f000 fea2 	bl	8003d10 <popUpHandler>
		}

	}

	if (_errorSetIcon) {
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <transmit+0x1ec>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <transmit+0x148>
		errorIcon();
 8002fd4:	f000 fd06 	bl	80039e4 <errorIcon>
	}

	if (_errorSetPopup && !_errorClear) {
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <transmit+0x1f0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <transmit+0x166>
 8002fe0:	4b28      	ldr	r3, [pc, #160]	; (8003084 <transmit+0x1f4>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f083 0301 	eor.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <transmit+0x166>
		errorCode();
 8002fee:	f000 fd9d 	bl	8003b2c <errorCode>
		errorPopup();
 8002ff2:	f000 fd7b 	bl	8003aec <errorPopup>
	}

	if (_charingState) {
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <transmit+0x1f8>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01f      	beq.n	800303e <transmit+0x1ae>
		_charingState = false;
 8002ffe:	4b22      	ldr	r3, [pc, #136]	; (8003088 <transmit+0x1f8>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
		if (_transmit_Function == 3) {
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <transmit+0x1b0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d102      	bne.n	8003012 <transmit+0x182>
			_transmit_Function = 0;
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <transmit+0x1b0>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
		}

		if (_chargingUI) {
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <transmit+0x1fc>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <transmit+0x198>
			charging_UI(charging_ui);
 800301a:	200d      	movs	r0, #13
 800301c:	f000 fb7c 	bl	8003718 <charging_UI>
			_chargingUI = false;
 8003020:	4b1a      	ldr	r3, [pc, #104]	; (800308c <transmit+0x1fc>)
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 2;
			return;
 8003026:	e00a      	b.n	800303e <transmit+0x1ae>
		}
		if (_chargeComplete) {
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <transmit+0x200>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <transmit+0x1ae>
			charging_UI(chargingcomp_ui);
 8003030:	200e      	movs	r0, #14
 8003032:	f000 fb71 	bl	8003718 <charging_UI>
			_chargeComplete = false;
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <transmit+0x200>)
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
			//_trasmitGlobal = 3;
			return;
 800303c:	bf00      	nop
		}
	}
}
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200003e7 	.word	0x200003e7
 8003044:	200003cc 	.word	0x200003cc
 8003048:	200003ce 	.word	0x200003ce
 800304c:	200003ca 	.word	0x200003ca
 8003050:	200003da 	.word	0x200003da
 8003054:	200003cf 	.word	0x200003cf
 8003058:	20000394 	.word	0x20000394
 800305c:	200003b2 	.word	0x200003b2
 8003060:	200003ac 	.word	0x200003ac
 8003064:	200003cd 	.word	0x200003cd
 8003068:	200003df 	.word	0x200003df
 800306c:	200003eb 	.word	0x200003eb
 8003070:	200003e8 	.word	0x200003e8
 8003074:	200003e9 	.word	0x200003e9
 8003078:	20000013 	.word	0x20000013
 800307c:	200003d3 	.word	0x200003d3
 8003080:	200003d1 	.word	0x200003d1
 8003084:	200003d4 	.word	0x200003d4
 8003088:	200003d5 	.word	0x200003d5
 800308c:	200003d6 	.word	0x200003d6
 8003090:	200003d7 	.word	0x200003d7

08003094 <startingUp>:

void startingUp(void) {
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

	if (error_check) {
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <startingUp+0x144>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <startingUp+0x22>
		if (err_State_Navigation == true) {
 80030a0:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <startingUp+0x148>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <startingUp+0x22>
			SysError_Shutdown_Page;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ac:	220a      	movs	r2, #10
 80030ae:	494c      	ldr	r1, [pc, #304]	; (80031e0 <startingUp+0x14c>)
 80030b0:	484c      	ldr	r0, [pc, #304]	; (80031e4 <startingUp+0x150>)
 80030b2:	f004 f9be 	bl	8007432 <HAL_UART_Transmit>
		}
	}

	if (entry == true) {
 80030b6:	4b4c      	ldr	r3, [pc, #304]	; (80031e8 <startingUp+0x154>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <startingUp+0x74>
		if (_navigation) {
 80030be:	4b4b      	ldr	r3, [pc, #300]	; (80031ec <startingUp+0x158>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d019      	beq.n	80030fa <startingUp+0x66>
			if (_trasmitGlobal == MainMenuPages) {
 80030c6:	4b4a      	ldr	r3, [pc, #296]	; (80031f0 <startingUp+0x15c>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <startingUp+0x4a>
				drivePageSetter(_drivePageSet);
 80030d0:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <startingUp+0x160>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f8ae 	bl	8003238 <drivePageSetter>
				return;
 80030dc:	e07b      	b.n	80031d6 <startingUp+0x142>
			}
			_trasmitGlobal = MainMenuPages;
 80030de:	4b44      	ldr	r3, [pc, #272]	; (80031f0 <startingUp+0x15c>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
			Disengage_KillSwitch_Page;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	220a      	movs	r2, #10
 80030ea:	4943      	ldr	r1, [pc, #268]	; (80031f8 <startingUp+0x164>)
 80030ec:	483d      	ldr	r0, [pc, #244]	; (80031e4 <startingUp+0x150>)
 80030ee:	f004 f9a0 	bl	8007432 <HAL_UART_Transmit>
			_navigation = false;
 80030f2:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <startingUp+0x158>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
			return;
 80030f8:	e06d      	b.n	80031d6 <startingUp+0x142>
		}
		Press_Brake_Page;
 80030fa:	f04f 33ff 	mov.w	r3, #4294967295
 80030fe:	220a      	movs	r2, #10
 8003100:	493e      	ldr	r1, [pc, #248]	; (80031fc <startingUp+0x168>)
 8003102:	4838      	ldr	r0, [pc, #224]	; (80031e4 <startingUp+0x150>)
 8003104:	f004 f995 	bl	8007432 <HAL_UART_Transmit>
	}

	if (start == 1) {
 8003108:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <startingUp+0x16c>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d141      	bne.n	8003194 <startingUp+0x100>
		entry = false;
 8003110:	4b35      	ldr	r3, [pc, #212]	; (80031e8 <startingUp+0x154>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
		//If start is set by EVCU, Then run this Gimmick Part//
		if (checklit == true) {
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <startingUp+0x170>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <startingUp+0x90>
			//bootAnimation();
			checklit = false;
 800311e:	4b39      	ldr	r3, [pc, #228]	; (8003204 <startingUp+0x170>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
		}

		if (readytodrive == 1) {
 8003124:	4b38      	ldr	r3, [pc, #224]	; (8003208 <startingUp+0x174>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d118      	bne.n	800315e <startingUp+0xca>
			ReadytoDrive_ON_Icon;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
 8003130:	2208      	movs	r2, #8
 8003132:	4936      	ldr	r1, [pc, #216]	; (800320c <startingUp+0x178>)
 8003134:	482b      	ldr	r0, [pc, #172]	; (80031e4 <startingUp+0x150>)
 8003136:	f004 f97c 	bl	8007432 <HAL_UART_Transmit>
			//If ready to drive is ok, Then run this Gimmick Part//
			if (startup == true) {
 800313a:	4b35      	ldr	r3, [pc, #212]	; (8003210 <startingUp+0x17c>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d014      	beq.n	800316c <startingUp+0xd8>
				ReadytoDrive_Page;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	220a      	movs	r2, #10
 8003148:	4932      	ldr	r1, [pc, #200]	; (8003214 <startingUp+0x180>)
 800314a:	4826      	ldr	r0, [pc, #152]	; (80031e4 <startingUp+0x150>)
 800314c:	f004 f971 	bl	8007432 <HAL_UART_Transmit>
				_testPage = true;
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <startingUp+0x184>)
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
				startup = false;
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <startingUp+0x17c>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e006      	b.n	800316c <startingUp+0xd8>
			}
		} else {
			System_Check_Okay_No_Icon_Page;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	220a      	movs	r2, #10
 8003164:	492d      	ldr	r1, [pc, #180]	; (800321c <startingUp+0x188>)
 8003166:	481f      	ldr	r0, [pc, #124]	; (80031e4 <startingUp+0x150>)
 8003168:	f004 f963 	bl	8007432 <HAL_UART_Transmit>
		}

		/////////////////////////////////////////////////////////
		if (chargerconn == 1) {
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <startingUp+0x18c>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <startingUp+0xf0>
			Charge_Connection_Error_Popup_ON;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
 8003178:	2208      	movs	r2, #8
 800317a:	492a      	ldr	r1, [pc, #168]	; (8003224 <startingUp+0x190>)
 800317c:	4819      	ldr	r0, [pc, #100]	; (80031e4 <startingUp+0x150>)
 800317e:	f004 f958 	bl	8007432 <HAL_UART_Transmit>
 8003182:	e028      	b.n	80031d6 <startingUp+0x142>
		} else {
			Charge_Connection_Error_Popup_OFF;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	2208      	movs	r2, #8
 800318a:	4927      	ldr	r1, [pc, #156]	; (8003228 <startingUp+0x194>)
 800318c:	4815      	ldr	r0, [pc, #84]	; (80031e4 <startingUp+0x150>)
 800318e:	f004 f950 	bl	8007432 <HAL_UART_Transmit>
 8003192:	e020      	b.n	80031d6 <startingUp+0x142>
//		if (mode) {
//			startupModeChange(); //Show Tuk Page as Mode Change Unavailable
//			//Final: Mode Change unavailable before ignition
//			mode = false;
//		}
		if (warning == 1) {
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <startingUp+0x198>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d106      	bne.n	80031aa <startingUp+0x116>
			Press_Brake_Page;
 800319c:	f04f 33ff 	mov.w	r3, #4294967295
 80031a0:	220a      	movs	r2, #10
 80031a2:	4916      	ldr	r1, [pc, #88]	; (80031fc <startingUp+0x168>)
 80031a4:	480f      	ldr	r0, [pc, #60]	; (80031e4 <startingUp+0x150>)
 80031a6:	f004 f944 	bl	8007432 <HAL_UART_Transmit>
		}
		if (warning == 2) {
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <startingUp+0x198>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d106      	bne.n	80031c0 <startingUp+0x12c>
			Mild_Error_ON_Icon;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	2208      	movs	r2, #8
 80031b8:	491d      	ldr	r1, [pc, #116]	; (8003230 <startingUp+0x19c>)
 80031ba:	480a      	ldr	r0, [pc, #40]	; (80031e4 <startingUp+0x150>)
 80031bc:	f004 f939 	bl	8007432 <HAL_UART_Transmit>
		}
		if (warning == 3) {
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <startingUp+0x198>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d106      	bne.n	80031d6 <startingUp+0x142>
			Gear_Error_Page;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	220a      	movs	r2, #10
 80031ce:	4919      	ldr	r1, [pc, #100]	; (8003234 <startingUp+0x1a0>)
 80031d0:	4804      	ldr	r0, [pc, #16]	; (80031e4 <startingUp+0x150>)
 80031d2:	f004 f92e 	bl	8007432 <HAL_UART_Transmit>

		}
	}

}
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200003c4 	.word	0x200003c4
 80031dc:	200003a8 	.word	0x200003a8
 80031e0:	200000f0 	.word	0x200000f0
 80031e4:	200004dc 	.word	0x200004dc
 80031e8:	20000009 	.word	0x20000009
 80031ec:	200003cb 	.word	0x200003cb
 80031f0:	200003ec 	.word	0x200003ec
 80031f4:	200003eb 	.word	0x200003eb
 80031f8:	20000030 	.word	0x20000030
 80031fc:	2000003c 	.word	0x2000003c
 8003200:	20000398 	.word	0x20000398
 8003204:	2000000a 	.word	0x2000000a
 8003208:	20000397 	.word	0x20000397
 800320c:	200001a0 	.word	0x200001a0
 8003210:	20000008 	.word	0x20000008
 8003214:	20000060 	.word	0x20000060
 8003218:	200003de 	.word	0x200003de
 800321c:	20000054 	.word	0x20000054
 8003220:	200003c9 	.word	0x200003c9
 8003224:	20000250 	.word	0x20000250
 8003228:	20000258 	.word	0x20000258
 800322c:	2000039d 	.word	0x2000039d
 8003230:	20000180 	.word	0x20000180
 8003234:	20000048 	.word	0x20000048

08003238 <drivePageSetter>:


uint8_t drivePageTransmit = 0;


void drivePageSetter(uitype_t page) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
	drivePageTransmit++;
 8003242:	4b8e      	ldr	r3, [pc, #568]	; (800347c <drivePageSetter+0x244>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b8c      	ldr	r3, [pc, #560]	; (800347c <drivePageSetter+0x244>)
 800324c:	701a      	strb	r2, [r3, #0]
	switch (page) {
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	2b07      	cmp	r3, #7
 8003252:	f200 8104 	bhi.w	800345e <drivePageSetter+0x226>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <drivePageSetter+0x24>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	0800327d 	.word	0x0800327d
 8003260:	080033e7 	.word	0x080033e7
 8003264:	08003405 	.word	0x08003405
 8003268:	08003423 	.word	0x08003423
 800326c:	0800345f 	.word	0x0800345f
 8003270:	0800345f 	.word	0x0800345f
 8003274:	0800345f 	.word	0x0800345f
 8003278:	08003441 	.word	0x08003441
	case front:
		//Checking for Errors
		if (error_check) {
 800327c:	4b80      	ldr	r3, [pc, #512]	; (8003480 <drivePageSetter+0x248>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d07b      	beq.n	800337c <drivePageSetter+0x144>
			if (accessory == 1) {
 8003284:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <drivePageSetter+0x24c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d123      	bne.n	80032d4 <drivePageSetter+0x9c>
				if (drivePageTransmit == 1) {
 800328c:	4b7b      	ldr	r3, [pc, #492]	; (800347c <drivePageSetter+0x244>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d106      	bne.n	80032a2 <drivePageSetter+0x6a>
					ReadytoDrive_OFF_Icon;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	2208      	movs	r2, #8
 800329a:	497b      	ldr	r1, [pc, #492]	; (8003488 <drivePageSetter+0x250>)
 800329c:	487b      	ldr	r0, [pc, #492]	; (800348c <drivePageSetter+0x254>)
 800329e:	f004 f8c8 	bl	8007432 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 2) {
 80032a2:	4b76      	ldr	r3, [pc, #472]	; (800347c <drivePageSetter+0x244>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d106      	bne.n	80032b8 <drivePageSetter+0x80>
					ModeClear_Icon;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	2208      	movs	r2, #8
 80032b0:	4977      	ldr	r1, [pc, #476]	; (8003490 <drivePageSetter+0x258>)
 80032b2:	4876      	ldr	r0, [pc, #472]	; (800348c <drivePageSetter+0x254>)
 80032b4:	f004 f8bd 	bl	8007432 <HAL_UART_Transmit>
				}
				if (drivePageTransmit == 3) {
 80032b8:	4b70      	ldr	r3, [pc, #448]	; (800347c <drivePageSetter+0x244>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d109      	bne.n	80032d4 <drivePageSetter+0x9c>
					PowerLimitON_Icon;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	2208      	movs	r2, #8
 80032c6:	4973      	ldr	r1, [pc, #460]	; (8003494 <drivePageSetter+0x25c>)
 80032c8:	4870      	ldr	r0, [pc, #448]	; (800348c <drivePageSetter+0x254>)
 80032ca:	f004 f8b2 	bl	8007432 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 80032ce:	4b6b      	ldr	r3, [pc, #428]	; (800347c <drivePageSetter+0x244>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
				}

			}
			//Ready to drive icon
			if (err_State_Navigation == true) {
 80032d4:	4b70      	ldr	r3, [pc, #448]	; (8003498 <drivePageSetter+0x260>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <drivePageSetter+0xc0>
//				if (_trasmitGlobal == 10) {
//					return;
//				}
//				_trasmitGlobal = 10;
				if (drivePageTransmit == 1) {
 80032dc:	4b67      	ldr	r3, [pc, #412]	; (800347c <drivePageSetter+0x244>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d109      	bne.n	80032f8 <drivePageSetter+0xc0>
					SysError_Shutdown_Page;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	220a      	movs	r2, #10
 80032ea:	496c      	ldr	r1, [pc, #432]	; (800349c <drivePageSetter+0x264>)
 80032ec:	4867      	ldr	r0, [pc, #412]	; (800348c <drivePageSetter+0x254>)
 80032ee:	f004 f8a0 	bl	8007432 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 80032f2:	4b62      	ldr	r3, [pc, #392]	; (800347c <drivePageSetter+0x244>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
				}

			}

			if (currentStateSM == driving_state) {
 80032f8:	4b69      	ldr	r3, [pc, #420]	; (80034a0 <drivePageSetter+0x268>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	f040 80af 	bne.w	8003462 <drivePageSetter+0x22a>
				if (shutdown == 1) {
 8003304:	4b67      	ldr	r3, [pc, #412]	; (80034a4 <drivePageSetter+0x26c>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10d      	bne.n	8003328 <drivePageSetter+0xf0>
					if (drivePageTransmit == 1) {
 800330c:	4b5b      	ldr	r3, [pc, #364]	; (800347c <drivePageSetter+0x244>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d109      	bne.n	8003328 <drivePageSetter+0xf0>
						SysError_StopDrive_Page;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	220a      	movs	r2, #10
 800331a:	4963      	ldr	r1, [pc, #396]	; (80034a8 <drivePageSetter+0x270>)
 800331c:	485b      	ldr	r0, [pc, #364]	; (800348c <drivePageSetter+0x254>)
 800331e:	f004 f888 	bl	8007432 <HAL_UART_Transmit>
						drivePageTransmit = 0;
 8003322:	4b56      	ldr	r3, [pc, #344]	; (800347c <drivePageSetter+0x244>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
					}

				}
				if (shutdown == 0) {
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <drivePageSetter+0x26c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 8098 	bne.w	8003462 <drivePageSetter+0x22a>
					if (mode) {
 8003332:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <drivePageSetter+0x274>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d011      	beq.n	800335e <drivePageSetter+0x126>
						if (drivePageTransmit == 1) {
 800333a:	4b50      	ldr	r3, [pc, #320]	; (800347c <drivePageSetter+0x244>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d109      	bne.n	8003356 <drivePageSetter+0x11e>
							ModeChangeOFF_Page;
 8003342:	f04f 33ff 	mov.w	r3, #4294967295
 8003346:	2208      	movs	r2, #8
 8003348:	4959      	ldr	r1, [pc, #356]	; (80034b0 <drivePageSetter+0x278>)
 800334a:	4850      	ldr	r0, [pc, #320]	; (800348c <drivePageSetter+0x254>)
 800334c:	f004 f871 	bl	8007432 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8003350:	4b4a      	ldr	r3, [pc, #296]	; (800347c <drivePageSetter+0x244>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
						}

						mode = false;
 8003356:	4b55      	ldr	r3, [pc, #340]	; (80034ac <drivePageSetter+0x274>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
				//drivePageTransmit = 0;
				//}
			}
		}
		break;
 800335c:	e081      	b.n	8003462 <drivePageSetter+0x22a>
						if (drivePageTransmit == 1) {
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <drivePageSetter+0x244>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d17d      	bne.n	8003462 <drivePageSetter+0x22a>
							SysError_StopDrive_Page;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	220a      	movs	r2, #10
 800336c:	494e      	ldr	r1, [pc, #312]	; (80034a8 <drivePageSetter+0x270>)
 800336e:	4847      	ldr	r0, [pc, #284]	; (800348c <drivePageSetter+0x254>)
 8003370:	f004 f85f 	bl	8007432 <HAL_UART_Transmit>
							drivePageTransmit = 0;
 8003374:	4b41      	ldr	r3, [pc, #260]	; (800347c <drivePageSetter+0x244>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		break;
 800337a:	e072      	b.n	8003462 <drivePageSetter+0x22a>
			if (accessory == 1) {
 800337c:	4b41      	ldr	r3, [pc, #260]	; (8003484 <drivePageSetter+0x24c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d123      	bne.n	80033cc <drivePageSetter+0x194>
				if (drivePageTransmit == 1) {
 8003384:	4b3d      	ldr	r3, [pc, #244]	; (800347c <drivePageSetter+0x244>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <drivePageSetter+0x162>
					ReadytoDrive_OFF_Icon;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	2208      	movs	r2, #8
 8003392:	493d      	ldr	r1, [pc, #244]	; (8003488 <drivePageSetter+0x250>)
 8003394:	483d      	ldr	r0, [pc, #244]	; (800348c <drivePageSetter+0x254>)
 8003396:	f004 f84c 	bl	8007432 <HAL_UART_Transmit>
				if (drivePageTransmit == 2) {
 800339a:	4b38      	ldr	r3, [pc, #224]	; (800347c <drivePageSetter+0x244>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d106      	bne.n	80033b0 <drivePageSetter+0x178>
					ModeClear_Icon;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	2208      	movs	r2, #8
 80033a8:	4939      	ldr	r1, [pc, #228]	; (8003490 <drivePageSetter+0x258>)
 80033aa:	4838      	ldr	r0, [pc, #224]	; (800348c <drivePageSetter+0x254>)
 80033ac:	f004 f841 	bl	8007432 <HAL_UART_Transmit>
				if (drivePageTransmit == 3) {
 80033b0:	4b32      	ldr	r3, [pc, #200]	; (800347c <drivePageSetter+0x244>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d109      	bne.n	80033cc <drivePageSetter+0x194>
					Disengage_KillSwitch_Page;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295
 80033bc:	220a      	movs	r2, #10
 80033be:	493d      	ldr	r1, [pc, #244]	; (80034b4 <drivePageSetter+0x27c>)
 80033c0:	4832      	ldr	r0, [pc, #200]	; (800348c <drivePageSetter+0x254>)
 80033c2:	f004 f836 	bl	8007432 <HAL_UART_Transmit>
					drivePageTransmit = 0;
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <drivePageSetter+0x244>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
			if (_testPage) {
 80033cc:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <drivePageSetter+0x280>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d046      	beq.n	8003462 <drivePageSetter+0x22a>
				_testPage = false;
 80033d4:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <drivePageSetter+0x280>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_DMA(&huart3, Test, sizeof(Test));
 80033da:	220a      	movs	r2, #10
 80033dc:	4937      	ldr	r1, [pc, #220]	; (80034bc <drivePageSetter+0x284>)
 80033de:	482b      	ldr	r0, [pc, #172]	; (800348c <drivePageSetter+0x254>)
 80033e0:	f004 f8ba 	bl	8007558 <HAL_UART_Transmit_DMA>
		break;
 80033e4:	e03d      	b.n	8003462 <drivePageSetter+0x22a>
	case trip:
		if (_menupage == 1) {
 80033e6:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <drivePageSetter+0x288>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d03b      	beq.n	8003466 <drivePageSetter+0x22e>
			return;
		}
		_menupage = 1;
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <drivePageSetter+0x288>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
		Trip_Summary_Page;
 80033f4:	f04f 33ff 	mov.w	r3, #4294967295
 80033f8:	220a      	movs	r2, #10
 80033fa:	4932      	ldr	r1, [pc, #200]	; (80034c4 <drivePageSetter+0x28c>)
 80033fc:	4823      	ldr	r0, [pc, #140]	; (800348c <drivePageSetter+0x254>)
 80033fe:	f004 f818 	bl	8007432 <HAL_UART_Transmit>
		break;
 8003402:	e037      	b.n	8003474 <drivePageSetter+0x23c>
	case after_charge:
		if (_menupage == 2) {
 8003404:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <drivePageSetter+0x288>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d02e      	beq.n	800346a <drivePageSetter+0x232>
			return;
		}
		_menupage = 2;
 800340c:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <drivePageSetter+0x288>)
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
		After_Charge_Page;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	220a      	movs	r2, #10
 8003418:	492b      	ldr	r1, [pc, #172]	; (80034c8 <drivePageSetter+0x290>)
 800341a:	481c      	ldr	r0, [pc, #112]	; (800348c <drivePageSetter+0x254>)
 800341c:	f004 f809 	bl	8007432 <HAL_UART_Transmit>
		break;
 8003420:	e028      	b.n	8003474 <drivePageSetter+0x23c>
	case info:
		if (_menupage == 3) {
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <drivePageSetter+0x288>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d021      	beq.n	800346e <drivePageSetter+0x236>
			return;
		}
		_menupage = 3;
 800342a:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <drivePageSetter+0x288>)
 800342c:	2203      	movs	r2, #3
 800342e:	701a      	strb	r2, [r3, #0]
		//Add info pages of inverter, Motor
		Vehicle_Info_Page;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	220a      	movs	r2, #10
 8003436:	4925      	ldr	r1, [pc, #148]	; (80034cc <drivePageSetter+0x294>)
 8003438:	4814      	ldr	r0, [pc, #80]	; (800348c <drivePageSetter+0x254>)
 800343a:	f003 fffa 	bl	8007432 <HAL_UART_Transmit>
		break;
 800343e:	e019      	b.n	8003474 <drivePageSetter+0x23c>
	case settings:
		if (_menupage == 4) {
 8003440:	4b1f      	ldr	r3, [pc, #124]	; (80034c0 <drivePageSetter+0x288>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d014      	beq.n	8003472 <drivePageSetter+0x23a>
			return;
		}
		_menupage = 4;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <drivePageSetter+0x288>)
 800344a:	2204      	movs	r2, #4
 800344c:	701a      	strb	r2, [r3, #0]
		Vehicle_Settings_Page;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	220a      	movs	r2, #10
 8003454:	491e      	ldr	r1, [pc, #120]	; (80034d0 <drivePageSetter+0x298>)
 8003456:	480d      	ldr	r0, [pc, #52]	; (800348c <drivePageSetter+0x254>)
 8003458:	f003 ffeb 	bl	8007432 <HAL_UART_Transmit>
		break;
 800345c:	e00a      	b.n	8003474 <drivePageSetter+0x23c>
	default:
		break;
 800345e:	bf00      	nop
 8003460:	e008      	b.n	8003474 <drivePageSetter+0x23c>
		break;
 8003462:	bf00      	nop
 8003464:	e006      	b.n	8003474 <drivePageSetter+0x23c>
			return;
 8003466:	bf00      	nop
 8003468:	e004      	b.n	8003474 <drivePageSetter+0x23c>
			return;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <drivePageSetter+0x23c>
			return;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <drivePageSetter+0x23c>
			return;
 8003472:	bf00      	nop

	}

}
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200004d8 	.word	0x200004d8
 8003480:	200003c4 	.word	0x200003c4
 8003484:	20000396 	.word	0x20000396
 8003488:	200001a8 	.word	0x200001a8
 800348c:	200004dc 	.word	0x200004dc
 8003490:	200001e8 	.word	0x200001e8
 8003494:	20000190 	.word	0x20000190
 8003498:	200003a8 	.word	0x200003a8
 800349c:	200000f0 	.word	0x200000f0
 80034a0:	200003ac 	.word	0x200003ac
 80034a4:	2000039e 	.word	0x2000039e
 80034a8:	200000fc 	.word	0x200000fc
 80034ac:	2000033d 	.word	0x2000033d
 80034b0:	20000248 	.word	0x20000248
 80034b4:	20000030 	.word	0x20000030
 80034b8:	200003de 	.word	0x200003de
 80034bc:	20000144 	.word	0x20000144
 80034c0:	200003b1 	.word	0x200003b1
 80034c4:	2000006c 	.word	0x2000006c
 80034c8:	20000078 	.word	0x20000078
 80034cc:	20000084 	.word	0x20000084
 80034d0:	200000b4 	.word	0x200000b4

080034d4 <realTimeData>:


void realTimeData(void) { //Realtime updatable data sending
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
// Priority Level 1
	priorityLevel1_counter++;
 80034d8:	4b6a      	ldr	r3, [pc, #424]	; (8003684 <realTimeData+0x1b0>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <realTimeData+0x1b0>)
 80034e2:	701a      	strb	r2, [r3, #0]
//Speed
	if (priorityLevel1_counter == 1) {
 80034e4:	4b67      	ldr	r3, [pc, #412]	; (8003684 <realTimeData+0x1b0>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d118      	bne.n	800351e <realTimeData+0x4a>
	strDATA[4] = 0x11; //
 80034ec:	4b66      	ldr	r3, [pc, #408]	; (8003688 <realTimeData+0x1b4>)
 80034ee:	2211      	movs	r2, #17
 80034f0:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x00; //
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <realTimeData+0x1b4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	715a      	strb	r2, [r3, #5]
	strDATA[7] = (test_speed & 0xFF);
 80034f8:	4b64      	ldr	r3, [pc, #400]	; (800368c <realTimeData+0x1b8>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4b62      	ldr	r3, [pc, #392]	; (8003688 <realTimeData+0x1b4>)
 8003500:	71da      	strb	r2, [r3, #7]
	strDATA[6] = (test_speed >> 8);
 8003502:	4b62      	ldr	r3, [pc, #392]	; (800368c <realTimeData+0x1b8>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	b29b      	uxth	r3, r3
 800350a:	b2da      	uxtb	r2, r3
 800350c:	4b5e      	ldr	r3, [pc, #376]	; (8003688 <realTimeData+0x1b4>)
 800350e:	719a      	strb	r2, [r3, #6]
	Transmit_strDATA;
 8003510:	f04f 33ff 	mov.w	r3, #4294967295
 8003514:	2208      	movs	r2, #8
 8003516:	495c      	ldr	r1, [pc, #368]	; (8003688 <realTimeData+0x1b4>)
 8003518:	485d      	ldr	r0, [pc, #372]	; (8003690 <realTimeData+0x1bc>)
 800351a:	f003 ff8a 	bl	8007432 <HAL_UART_Transmit>
//	strDATA[7] = (rpm_meter & 0xFF);
//	strDATA[6] = (rpm_meter >> 8);
//	Transmit_strDATA;

//Power Bar
	if (priorityLevel1_counter == 2) {
 800351e:	4b59      	ldr	r3, [pc, #356]	; (8003684 <realTimeData+0x1b0>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d101      	bne.n	800352a <realTimeData+0x56>
		powerMeter();
 8003526:	f000 fc4f 	bl	8003dc8 <powerMeter>
	}
//DC Current
	if (priorityLevel1_counter == 3) {
 800352a:	4b56      	ldr	r3, [pc, #344]	; (8003684 <realTimeData+0x1b0>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b03      	cmp	r3, #3
 8003530:	f040 80a6 	bne.w	8003680 <realTimeData+0x1ac>
		priorityLevel1_counter = 0;
 8003534:	4b53      	ldr	r3, [pc, #332]	; (8003684 <realTimeData+0x1b0>)
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
		realTime_counter++;
 800353a:	4b56      	ldr	r3, [pc, #344]	; (8003694 <realTimeData+0x1c0>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <realTimeData+0x1c0>)
 8003544:	701a      	strb	r2, [r3, #0]
		if (realTime_counter == 1) {
 8003546:	4b53      	ldr	r3, [pc, #332]	; (8003694 <realTimeData+0x1c0>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d125      	bne.n	800359a <realTimeData+0xc6>
			if (currentstate == 4) {
 800354e:	4b52      	ldr	r3, [pc, #328]	; (8003698 <realTimeData+0x1c4>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d106      	bne.n	8003564 <realTimeData+0x90>
				strDATA[4] = 0x12;
 8003556:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <realTimeData+0x1b4>)
 8003558:	2212      	movs	r2, #18
 800355a:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x80;
 800355c:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <realTimeData+0x1b4>)
 800355e:	2280      	movs	r2, #128	; 0x80
 8003560:	715a      	strb	r2, [r3, #5]
 8003562:	e005      	b.n	8003570 <realTimeData+0x9c>
			} else {
				strDATA[4] = 0x12;
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <realTimeData+0x1b4>)
 8003566:	2212      	movs	r2, #18
 8003568:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x30;
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <realTimeData+0x1b4>)
 800356c:	2230      	movs	r2, #48	; 0x30
 800356e:	715a      	strb	r2, [r3, #5]
			}
			strDATA[6] = (dc_current >> 8);
 8003570:	4b4a      	ldr	r3, [pc, #296]	; (800369c <realTimeData+0x1c8>)
 8003572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003576:	121b      	asrs	r3, r3, #8
 8003578:	b21b      	sxth	r3, r3
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b42      	ldr	r3, [pc, #264]	; (8003688 <realTimeData+0x1b4>)
 800357e:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (dc_current & 0xFF);
 8003580:	4b46      	ldr	r3, [pc, #280]	; (800369c <realTimeData+0x1c8>)
 8003582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <realTimeData+0x1b4>)
 800358a:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	2208      	movs	r2, #8
 8003592:	493d      	ldr	r1, [pc, #244]	; (8003688 <realTimeData+0x1b4>)
 8003594:	483e      	ldr	r0, [pc, #248]	; (8003690 <realTimeData+0x1bc>)
 8003596:	f003 ff4c 	bl	8007432 <HAL_UART_Transmit>
		}

//Lowest Cell Voltage
		if (realTime_counter == 2) {
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <realTimeData+0x1c0>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d118      	bne.n	80035d4 <realTimeData+0x100>
			strDATA[4] = 0x12;
 80035a2:	4b39      	ldr	r3, [pc, #228]	; (8003688 <realTimeData+0x1b4>)
 80035a4:	2212      	movs	r2, #18
 80035a6:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x20;
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <realTimeData+0x1b4>)
 80035aa:	2220      	movs	r2, #32
 80035ac:	715a      	strb	r2, [r3, #5]
			strDATA[7] = (lcell_voltage & 0xFF);
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <realTimeData+0x1cc>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <realTimeData+0x1b4>)
 80035b6:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (lcell_voltage >> 8);
 80035b8:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <realTimeData+0x1cc>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <realTimeData+0x1b4>)
 80035c4:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA;
 80035c6:	f04f 33ff 	mov.w	r3, #4294967295
 80035ca:	2208      	movs	r2, #8
 80035cc:	492e      	ldr	r1, [pc, #184]	; (8003688 <realTimeData+0x1b4>)
 80035ce:	4830      	ldr	r0, [pc, #192]	; (8003690 <realTimeData+0x1bc>)
 80035d0:	f003 ff2f 	bl	8007432 <HAL_UART_Transmit>
		}

////Trip
		if (realTime_counter == 3) {
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <realTimeData+0x1c0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d124      	bne.n	8003626 <realTimeData+0x152>
			strDATA2[4] = 0x11;
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <realTimeData+0x1d0>)
 80035de:	2211      	movs	r2, #17
 80035e0:	711a      	strb	r2, [r3, #4]
			strDATA2[5] = 0x40;
 80035e2:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <realTimeData+0x1d0>)
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	715a      	strb	r2, [r3, #5]
			strDATA2[9] = (distance.trip & 0xFF);
 80035e8:	4b2f      	ldr	r3, [pc, #188]	; (80036a8 <realTimeData+0x1d4>)
 80035ea:	889b      	ldrh	r3, [r3, #4]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <realTimeData+0x1d0>)
 80035f0:	725a      	strb	r2, [r3, #9]
			strDATA2[8] = (distance.trip >> 8);
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <realTimeData+0x1d4>)
 80035f4:	889b      	ldrh	r3, [r3, #4]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <realTimeData+0x1d0>)
 80035fe:	721a      	strb	r2, [r3, #8]
			strDATA2[7] = (distance.trip >> 16);
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <realTimeData+0x1d4>)
 8003602:	889b      	ldrh	r3, [r3, #4]
 8003604:	141b      	asrs	r3, r3, #16
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <realTimeData+0x1d0>)
 800360a:	71da      	strb	r2, [r3, #7]
			strDATA2[6] = (distance.trip >> 24);
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <realTimeData+0x1d4>)
 800360e:	889b      	ldrh	r3, [r3, #4]
 8003610:	161b      	asrs	r3, r3, #24
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <realTimeData+0x1d0>)
 8003616:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA2;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	220a      	movs	r2, #10
 800361e:	4921      	ldr	r1, [pc, #132]	; (80036a4 <realTimeData+0x1d0>)
 8003620:	481b      	ldr	r0, [pc, #108]	; (8003690 <realTimeData+0x1bc>)
 8003622:	f003 ff06 	bl	8007432 <HAL_UART_Transmit>
		}
//Power
		if (realTime_counter == 4) {
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <realTimeData+0x1c0>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d128      	bne.n	8003680 <realTimeData+0x1ac>
			realTime_counter = 0;
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <realTimeData+0x1c0>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
			if (currentstate == 4) {
 8003634:	4b18      	ldr	r3, [pc, #96]	; (8003698 <realTimeData+0x1c4>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d106      	bne.n	800364a <realTimeData+0x176>
				strDATA[4] = 0x12;
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <realTimeData+0x1b4>)
 800363e:	2212      	movs	r2, #18
 8003640:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x60;
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <realTimeData+0x1b4>)
 8003644:	2260      	movs	r2, #96	; 0x60
 8003646:	715a      	strb	r2, [r3, #5]
 8003648:	e005      	b.n	8003656 <realTimeData+0x182>
			} else {
				strDATA[4] = 0x11;
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <realTimeData+0x1b4>)
 800364c:	2211      	movs	r2, #17
 800364e:	711a      	strb	r2, [r3, #4]
				strDATA[5] = 0x70;
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <realTimeData+0x1b4>)
 8003652:	2270      	movs	r2, #112	; 0x70
 8003654:	715a      	strb	r2, [r3, #5]
			}
			strDATA[7] = (power & 0xFF);
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <realTimeData+0x1d8>)
 8003658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <realTimeData+0x1b4>)
 8003660:	71da      	strb	r2, [r3, #7]
			strDATA[6] = (power >> 8);
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <realTimeData+0x1d8>)
 8003664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003668:	121b      	asrs	r3, r3, #8
 800366a:	b21b      	sxth	r3, r3
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <realTimeData+0x1b4>)
 8003670:	719a      	strb	r2, [r3, #6]
			Transmit_strDATA;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	2208      	movs	r2, #8
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <realTimeData+0x1b4>)
 800367a:	4805      	ldr	r0, [pc, #20]	; (8003690 <realTimeData+0x1bc>)
 800367c:	f003 fed9 	bl	8007432 <HAL_UART_Transmit>
		}
	}
}
 8003680:	bf00      	nop
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200003e6 	.word	0x200003e6
 8003688:	20000344 	.word	0x20000344
 800368c:	20000380 	.word	0x20000380
 8003690:	200004dc 	.word	0x200004dc
 8003694:	200003e5 	.word	0x200003e5
 8003698:	20000394 	.word	0x20000394
 800369c:	20000390 	.word	0x20000390
 80036a0:	2000038a 	.word	0x2000038a
 80036a4:	2000034c 	.word	0x2000034c
 80036a8:	20000358 	.word	0x20000358
 80036ac:	20000392 	.word	0x20000392

080036b0 <vehicleInfo_UI>:

}



void vehicleInfo_UI(uitype_t InfoUI) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
	switch (InfoUI) {
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d016      	beq.n	80036ee <vehicleInfo_UI+0x3e>
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	dc1c      	bgt.n	80036fe <vehicleInfo_UI+0x4e>
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d002      	beq.n	80036ce <vehicleInfo_UI+0x1e>
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d008      	beq.n	80036de <vehicleInfo_UI+0x2e>
		break;
	case infoinv:
		Inverter_Info_Page;
		break;
	default:
		break;
 80036cc:	e017      	b.n	80036fe <vehicleInfo_UI+0x4e>
		Battery_Info_Page;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	220a      	movs	r2, #10
 80036d4:	490c      	ldr	r1, [pc, #48]	; (8003708 <vehicleInfo_UI+0x58>)
 80036d6:	480d      	ldr	r0, [pc, #52]	; (800370c <vehicleInfo_UI+0x5c>)
 80036d8:	f003 feab 	bl	8007432 <HAL_UART_Transmit>
		break;
 80036dc:	e010      	b.n	8003700 <vehicleInfo_UI+0x50>
		Motor_Info_Page;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	220a      	movs	r2, #10
 80036e4:	490a      	ldr	r1, [pc, #40]	; (8003710 <vehicleInfo_UI+0x60>)
 80036e6:	4809      	ldr	r0, [pc, #36]	; (800370c <vehicleInfo_UI+0x5c>)
 80036e8:	f003 fea3 	bl	8007432 <HAL_UART_Transmit>
		break;
 80036ec:	e008      	b.n	8003700 <vehicleInfo_UI+0x50>
		Inverter_Info_Page;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	220a      	movs	r2, #10
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <vehicleInfo_UI+0x64>)
 80036f6:	4805      	ldr	r0, [pc, #20]	; (800370c <vehicleInfo_UI+0x5c>)
 80036f8:	f003 fe9b 	bl	8007432 <HAL_UART_Transmit>
		break;
 80036fc:	e000      	b.n	8003700 <vehicleInfo_UI+0x50>
		break;
 80036fe:	bf00      	nop
	}
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000090 	.word	0x20000090
 800370c:	200004dc 	.word	0x200004dc
 8003710:	2000009c 	.word	0x2000009c
 8003714:	200000a8 	.word	0x200000a8

08003718 <charging_UI>:

void charging_UI(uitype_t ChargeUI) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
	switch (ChargeUI) {
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b0f      	cmp	r3, #15
 8003726:	d016      	beq.n	8003756 <charging_UI+0x3e>
 8003728:	2b0f      	cmp	r3, #15
 800372a:	dc27      	bgt.n	800377c <charging_UI+0x64>
 800372c:	2b0d      	cmp	r3, #13
 800372e:	d002      	beq.n	8003736 <charging_UI+0x1e>
 8003730:	2b0e      	cmp	r3, #14
 8003732:	d008      	beq.n	8003746 <charging_UI+0x2e>
		if (charge_error) {
			Charge_Connection_Error_Popup_ON;
		}
		break;
	default:
		break;
 8003734:	e022      	b.n	800377c <charging_UI+0x64>
		Charging_Page;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	220a      	movs	r2, #10
 800373c:	4913      	ldr	r1, [pc, #76]	; (800378c <charging_UI+0x74>)
 800373e:	4814      	ldr	r0, [pc, #80]	; (8003790 <charging_UI+0x78>)
 8003740:	f003 fe77 	bl	8007432 <HAL_UART_Transmit>
		break;
 8003744:	e01d      	b.n	8003782 <charging_UI+0x6a>
		ChargeComplete_Page;
 8003746:	f04f 33ff 	mov.w	r3, #4294967295
 800374a:	220a      	movs	r2, #10
 800374c:	4911      	ldr	r1, [pc, #68]	; (8003794 <charging_UI+0x7c>)
 800374e:	4810      	ldr	r0, [pc, #64]	; (8003790 <charging_UI+0x78>)
 8003750:	f003 fe6f 	bl	8007432 <HAL_UART_Transmit>
		break;
 8003754:	e015      	b.n	8003782 <charging_UI+0x6a>
		Charge_Error_Page;
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	220a      	movs	r2, #10
 800375c:	490e      	ldr	r1, [pc, #56]	; (8003798 <charging_UI+0x80>)
 800375e:	480c      	ldr	r0, [pc, #48]	; (8003790 <charging_UI+0x78>)
 8003760:	f003 fe67 	bl	8007432 <HAL_UART_Transmit>
		if (charge_error) {
 8003764:	4b0d      	ldr	r3, [pc, #52]	; (800379c <charging_UI+0x84>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <charging_UI+0x68>
			Charge_Connection_Error_Popup_ON;
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	2208      	movs	r2, #8
 8003772:	490b      	ldr	r1, [pc, #44]	; (80037a0 <charging_UI+0x88>)
 8003774:	4806      	ldr	r0, [pc, #24]	; (8003790 <charging_UI+0x78>)
 8003776:	f003 fe5c 	bl	8007432 <HAL_UART_Transmit>
		break;
 800377a:	e001      	b.n	8003780 <charging_UI+0x68>
		break;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <charging_UI+0x6a>
		break;
 8003780:	bf00      	nop
	}
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000108 	.word	0x20000108
 8003790:	200004dc 	.word	0x200004dc
 8003794:	20000114 	.word	0x20000114
 8003798:	20000120 	.word	0x20000120
 800379c:	200003c7 	.word	0x200003c7
 80037a0:	20000250 	.word	0x20000250

080037a4 <settings_UI>:

void settings_UI(uitype_t SettingsMenu, uint8_t selectedOption) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	460a      	mov	r2, r1
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71bb      	strb	r3, [r7, #6]
	switch (SettingsMenu) {
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	3b08      	subs	r3, #8
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	f200 8098 	bhi.w	80038ee <settings_UI+0x14a>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <settings_UI+0x20>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	080038c9 	.word	0x080038c9
 80037d0:	080038d9 	.word	0x080038d9
	case vehicleMenu:
		General_Menu_Page;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	220a      	movs	r2, #10
 80037da:	4948      	ldr	r1, [pc, #288]	; (80038fc <settings_UI+0x158>)
 80037dc:	4848      	ldr	r0, [pc, #288]	; (8003900 <settings_UI+0x15c>)
 80037de:	f003 fe28 	bl	8007432 <HAL_UART_Transmit>
		break;
 80037e2:	e087      	b.n	80038f4 <settings_UI+0x150>
	case systemMenu:
		System_Menu_Page;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	220a      	movs	r2, #10
 80037ea:	4946      	ldr	r1, [pc, #280]	; (8003904 <settings_UI+0x160>)
 80037ec:	4844      	ldr	r0, [pc, #272]	; (8003900 <settings_UI+0x15c>)
 80037ee:	f003 fe20 	bl	8007432 <HAL_UART_Transmit>
		if(timeChanged)
 80037f2:	4b45      	ldr	r3, [pc, #276]	; (8003908 <settings_UI+0x164>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <settings_UI+0x7a>
		{
			timeChanged = false;
 80037fa:	4b43      	ldr	r3, [pc, #268]	; (8003908 <settings_UI+0x164>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
			timeSet[11] = timerSetValueH;
 8003800:	4b42      	ldr	r3, [pc, #264]	; (800390c <settings_UI+0x168>)
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	4b42      	ldr	r3, [pc, #264]	; (8003910 <settings_UI+0x16c>)
 8003806:	72da      	strb	r2, [r3, #11]
			timeSet[12] = timerSetValueMin;
 8003808:	4b42      	ldr	r3, [pc, #264]	; (8003914 <settings_UI+0x170>)
 800380a:	781a      	ldrb	r2, [r3, #0]
 800380c:	4b40      	ldr	r3, [pc, #256]	; (8003910 <settings_UI+0x16c>)
 800380e:	731a      	strb	r2, [r3, #12]
			HAL_UART_Transmit(&huart3, timeSet, sizeof(timeSet), HAL_MAX_DELAY);
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	220e      	movs	r2, #14
 8003816:	493e      	ldr	r1, [pc, #248]	; (8003910 <settings_UI+0x16c>)
 8003818:	4839      	ldr	r0, [pc, #228]	; (8003900 <settings_UI+0x15c>)
 800381a:	f003 fe0a 	bl	8007432 <HAL_UART_Transmit>
		}
		if(selectedOption == 0) {
 800381e:	79bb      	ldrb	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <settings_UI+0xa0>
			TimeSetting_Button;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	2208      	movs	r2, #8
 800382a:	493b      	ldr	r1, [pc, #236]	; (8003918 <settings_UI+0x174>)
 800382c:	4834      	ldr	r0, [pc, #208]	; (8003900 <settings_UI+0x15c>)
 800382e:	f003 fe00 	bl	8007432 <HAL_UART_Transmit>
			BrightnessSetting_Button_OFF;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	2208      	movs	r2, #8
 8003838:	4938      	ldr	r1, [pc, #224]	; (800391c <settings_UI+0x178>)
 800383a:	4831      	ldr	r0, [pc, #196]	; (8003900 <settings_UI+0x15c>)
 800383c:	f003 fdf9 	bl	8007432 <HAL_UART_Transmit>

			selectedOption = 10;
 8003840:	230a      	movs	r3, #10
 8003842:	71bb      	strb	r3, [r7, #6]
		}
		if(selectedOption == 1)
 8003844:	79bb      	ldrb	r3, [r7, #6]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10f      	bne.n	800386a <settings_UI+0xc6>
		{
			BrightnessSetting_Button;
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	2208      	movs	r2, #8
 8003850:	4933      	ldr	r1, [pc, #204]	; (8003920 <settings_UI+0x17c>)
 8003852:	482b      	ldr	r0, [pc, #172]	; (8003900 <settings_UI+0x15c>)
 8003854:	f003 fded 	bl	8007432 <HAL_UART_Transmit>
			TimeSetting_Button_OFF;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	2208      	movs	r2, #8
 800385e:	4931      	ldr	r1, [pc, #196]	; (8003924 <settings_UI+0x180>)
 8003860:	4827      	ldr	r0, [pc, #156]	; (8003900 <settings_UI+0x15c>)
 8003862:	f003 fde6 	bl	8007432 <HAL_UART_Transmit>
			selectedOption = 10;
 8003866:	230a      	movs	r3, #10
 8003868:	71bb      	strb	r3, [r7, #6]
		}
		if (selectedOption == 4) {
 800386a:	79bb      	ldrb	r3, [r7, #6]
 800386c:	2b04      	cmp	r3, #4
 800386e:	d113      	bne.n	8003898 <settings_UI+0xf4>
			strDATA[4] = 0x13;
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <settings_UI+0x184>)
 8003872:	2213      	movs	r2, #19
 8003874:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x22;
 8003876:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <settings_UI+0x184>)
 8003878:	2222      	movs	r2, #34	; 0x22
 800387a:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <settings_UI+0x184>)
 800387e:	2200      	movs	r2, #0
 8003880:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueH);
 8003882:	4b22      	ldr	r3, [pc, #136]	; (800390c <settings_UI+0x168>)
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	4b28      	ldr	r3, [pc, #160]	; (8003928 <settings_UI+0x184>)
 8003888:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295
 800388e:	2208      	movs	r2, #8
 8003890:	4925      	ldr	r1, [pc, #148]	; (8003928 <settings_UI+0x184>)
 8003892:	481b      	ldr	r0, [pc, #108]	; (8003900 <settings_UI+0x15c>)
 8003894:	f003 fdcd 	bl	8007432 <HAL_UART_Transmit>
		}
		if (selectedOption == 3) {
 8003898:	79bb      	ldrb	r3, [r7, #6]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d129      	bne.n	80038f2 <settings_UI+0x14e>
			strDATA[4] = 0x13;
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <settings_UI+0x184>)
 80038a0:	2213      	movs	r2, #19
 80038a2:	711a      	strb	r2, [r3, #4]
			strDATA[5] = 0x21;
 80038a4:	4b20      	ldr	r3, [pc, #128]	; (8003928 <settings_UI+0x184>)
 80038a6:	2221      	movs	r2, #33	; 0x21
 80038a8:	715a      	strb	r2, [r3, #5]
			strDATA[6] = 0;
 80038aa:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <settings_UI+0x184>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	719a      	strb	r2, [r3, #6]
			strDATA[7] = (timerSetValueMin);
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <settings_UI+0x170>)
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <settings_UI+0x184>)
 80038b6:	71da      	strb	r2, [r3, #7]
			Transmit_strDATA;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
 80038bc:	2208      	movs	r2, #8
 80038be:	491a      	ldr	r1, [pc, #104]	; (8003928 <settings_UI+0x184>)
 80038c0:	480f      	ldr	r0, [pc, #60]	; (8003900 <settings_UI+0x15c>)
 80038c2:	f003 fdb6 	bl	8007432 <HAL_UART_Transmit>
		}

		break;
 80038c6:	e014      	b.n	80038f2 <settings_UI+0x14e>
	case bluetoothMenu:
		Bluetooth_Menu_Page;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	220a      	movs	r2, #10
 80038ce:	4917      	ldr	r1, [pc, #92]	; (800392c <settings_UI+0x188>)
 80038d0:	480b      	ldr	r0, [pc, #44]	; (8003900 <settings_UI+0x15c>)
 80038d2:	f003 fdae 	bl	8007432 <HAL_UART_Transmit>
		break;
 80038d6:	e00d      	b.n	80038f4 <settings_UI+0x150>
	case errorsMenu:
		//To get the error log from the EVCU
		errorRead = 1; //To get the error log from the EVCU
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <settings_UI+0x18c>)
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
//					errLog[byteIndex][j] = canRX[j];
//				}
//			}
//		}
		////////////////////////
		Error_Menu_Page; //Display the Error Log
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	220a      	movs	r2, #10
 80038e4:	4913      	ldr	r1, [pc, #76]	; (8003934 <settings_UI+0x190>)
 80038e6:	4806      	ldr	r0, [pc, #24]	; (8003900 <settings_UI+0x15c>)
 80038e8:	f003 fda3 	bl	8007432 <HAL_UART_Transmit>
		break;
 80038ec:	e002      	b.n	80038f4 <settings_UI+0x150>
	default:
		break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <settings_UI+0x150>
		break;
 80038f2:	bf00      	nop
	}
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200000c0 	.word	0x200000c0
 8003900:	200004dc 	.word	0x200004dc
 8003904:	200000cc 	.word	0x200000cc
 8003908:	200003ba 	.word	0x200003ba
 800390c:	200003b8 	.word	0x200003b8
 8003910:	20000020 	.word	0x20000020
 8003914:	200003b9 	.word	0x200003b9
 8003918:	20000218 	.word	0x20000218
 800391c:	20000230 	.word	0x20000230
 8003920:	20000228 	.word	0x20000228
 8003924:	20000220 	.word	0x20000220
 8003928:	20000344 	.word	0x20000344
 800392c:	200000d8 	.word	0x200000d8
 8003930:	200003c3 	.word	0x200003c3
 8003934:	200000e4 	.word	0x200000e4

08003938 <selection_UI>:

void selection_UI(uitype_t SettingsMenu) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
	Vehicle_Settings_Page;
 8003942:	f04f 33ff 	mov.w	r3, #4294967295
 8003946:	220a      	movs	r2, #10
 8003948:	491f      	ldr	r1, [pc, #124]	; (80039c8 <selection_UI+0x90>)
 800394a:	4820      	ldr	r0, [pc, #128]	; (80039cc <selection_UI+0x94>)
 800394c:	f003 fd71 	bl	8007432 <HAL_UART_Transmit>
	switch (SettingsMenu) {
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	3b08      	subs	r3, #8
 8003954:	2b03      	cmp	r3, #3
 8003956:	d82b      	bhi.n	80039b0 <selection_UI+0x78>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <selection_UI+0x28>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003971 	.word	0x08003971
 8003964:	08003981 	.word	0x08003981
 8003968:	08003991 	.word	0x08003991
 800396c:	080039a1 	.word	0x080039a1
	case vehicleMenu:
		Vehicle_Button;
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	2208      	movs	r2, #8
 8003976:	4916      	ldr	r1, [pc, #88]	; (80039d0 <selection_UI+0x98>)
 8003978:	4814      	ldr	r0, [pc, #80]	; (80039cc <selection_UI+0x94>)
 800397a:	f003 fd5a 	bl	8007432 <HAL_UART_Transmit>
		break;
 800397e:	e01f      	b.n	80039c0 <selection_UI+0x88>
	case systemMenu:
		System_Button;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
 8003984:	2208      	movs	r2, #8
 8003986:	4913      	ldr	r1, [pc, #76]	; (80039d4 <selection_UI+0x9c>)
 8003988:	4810      	ldr	r0, [pc, #64]	; (80039cc <selection_UI+0x94>)
 800398a:	f003 fd52 	bl	8007432 <HAL_UART_Transmit>
		break;
 800398e:	e017      	b.n	80039c0 <selection_UI+0x88>
	case bluetoothMenu:
		Bluetooth_Button;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	2208      	movs	r2, #8
 8003996:	4910      	ldr	r1, [pc, #64]	; (80039d8 <selection_UI+0xa0>)
 8003998:	480c      	ldr	r0, [pc, #48]	; (80039cc <selection_UI+0x94>)
 800399a:	f003 fd4a 	bl	8007432 <HAL_UART_Transmit>
		break;
 800399e:	e00f      	b.n	80039c0 <selection_UI+0x88>
	case errorsMenu:
		Error_Button;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295
 80039a4:	2208      	movs	r2, #8
 80039a6:	490d      	ldr	r1, [pc, #52]	; (80039dc <selection_UI+0xa4>)
 80039a8:	4808      	ldr	r0, [pc, #32]	; (80039cc <selection_UI+0x94>)
 80039aa:	f003 fd42 	bl	8007432 <HAL_UART_Transmit>
		break;
 80039ae:	e007      	b.n	80039c0 <selection_UI+0x88>
	default:
		NO_Button;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
 80039b4:	2208      	movs	r2, #8
 80039b6:	490a      	ldr	r1, [pc, #40]	; (80039e0 <selection_UI+0xa8>)
 80039b8:	4804      	ldr	r0, [pc, #16]	; (80039cc <selection_UI+0x94>)
 80039ba:	f003 fd3a 	bl	8007432 <HAL_UART_Transmit>
		break;
 80039be:	bf00      	nop
	}
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200000b4 	.word	0x200000b4
 80039cc:	200004dc 	.word	0x200004dc
 80039d0:	200001f0 	.word	0x200001f0
 80039d4:	200001f8 	.word	0x200001f8
 80039d8:	20000200 	.word	0x20000200
 80039dc:	20000208 	.word	0x20000208
 80039e0:	20000210 	.word	0x20000210

080039e4 <errorIcon>:
	ts = *localtime(&rawtime);
	strftime(timebuf, sizeof(timebuf), "%Y-%m-%d %H:%M:%S %Z", &ts); //Year-Month-Day-Hours-Minutes-Seconds
	return;
}

void errorIcon(void) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

	if (error_on == true) {
 80039e8:	4b30      	ldr	r3, [pc, #192]	; (8003aac <errorIcon+0xc8>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <errorIcon+0x1c>
		Error_ON_Icon;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295
 80039f4:	2208      	movs	r2, #8
 80039f6:	492e      	ldr	r1, [pc, #184]	; (8003ab0 <errorIcon+0xcc>)
 80039f8:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <errorIcon+0xd0>)
 80039fa:	f003 fd1a 	bl	8007432 <HAL_UART_Transmit>
 80039fe:	e006      	b.n	8003a0e <errorIcon+0x2a>
	} else {
		Error_OFF_Icon;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	2208      	movs	r2, #8
 8003a06:	492c      	ldr	r1, [pc, #176]	; (8003ab8 <errorIcon+0xd4>)
 8003a08:	482a      	ldr	r0, [pc, #168]	; (8003ab4 <errorIcon+0xd0>)
 8003a0a:	f003 fd12 	bl	8007432 <HAL_UART_Transmit>
	}
	if (milderror_on == true) {
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <errorIcon+0xd8>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d007      	beq.n	8003a26 <errorIcon+0x42>
		Mild_Error_ON_Icon;
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4928      	ldr	r1, [pc, #160]	; (8003ac0 <errorIcon+0xdc>)
 8003a1e:	4825      	ldr	r0, [pc, #148]	; (8003ab4 <errorIcon+0xd0>)
 8003a20:	f003 fd07 	bl	8007432 <HAL_UART_Transmit>
 8003a24:	e006      	b.n	8003a34 <errorIcon+0x50>
	} else {
		Mild_Error_OFF_Icon;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4925      	ldr	r1, [pc, #148]	; (8003ac4 <errorIcon+0xe0>)
 8003a2e:	4821      	ldr	r0, [pc, #132]	; (8003ab4 <errorIcon+0xd0>)
 8003a30:	f003 fcff 	bl	8007432 <HAL_UART_Transmit>
	}
	if (service_on == true) {
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <errorIcon+0xe4>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <errorIcon+0x68>
		Service_Error_ON_Icon;
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	2208      	movs	r2, #8
 8003a42:	4922      	ldr	r1, [pc, #136]	; (8003acc <errorIcon+0xe8>)
 8003a44:	481b      	ldr	r0, [pc, #108]	; (8003ab4 <errorIcon+0xd0>)
 8003a46:	f003 fcf4 	bl	8007432 <HAL_UART_Transmit>
 8003a4a:	e006      	b.n	8003a5a <errorIcon+0x76>
	} else {
		Service_Error_OFF_Icon;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	2208      	movs	r2, #8
 8003a52:	491f      	ldr	r1, [pc, #124]	; (8003ad0 <errorIcon+0xec>)
 8003a54:	4817      	ldr	r0, [pc, #92]	; (8003ab4 <errorIcon+0xd0>)
 8003a56:	f003 fcec 	bl	8007432 <HAL_UART_Transmit>
	}
	if (bat_temp_high == true) {
 8003a5a:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <errorIcon+0xf0>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <errorIcon+0x8e>
		Battery_High_Temp_Popup_ON;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	2208      	movs	r2, #8
 8003a68:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <errorIcon+0xf4>)
 8003a6a:	4812      	ldr	r0, [pc, #72]	; (8003ab4 <errorIcon+0xd0>)
 8003a6c:	f003 fce1 	bl	8007432 <HAL_UART_Transmit>
 8003a70:	e006      	b.n	8003a80 <errorIcon+0x9c>
	} else {
		Battery_High_Temp_Popup_OFF;
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	2208      	movs	r2, #8
 8003a78:	4918      	ldr	r1, [pc, #96]	; (8003adc <errorIcon+0xf8>)
 8003a7a:	480e      	ldr	r0, [pc, #56]	; (8003ab4 <errorIcon+0xd0>)
 8003a7c:	f003 fcd9 	bl	8007432 <HAL_UART_Transmit>
	}
	if (aux_low_on == true) {
 8003a80:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <errorIcon+0xfc>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <errorIcon+0xb4>
		Battery_ON_Icon;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	4915      	ldr	r1, [pc, #84]	; (8003ae4 <errorIcon+0x100>)
 8003a90:	4808      	ldr	r0, [pc, #32]	; (8003ab4 <errorIcon+0xd0>)
 8003a92:	f003 fcce 	bl	8007432 <HAL_UART_Transmit>
	} else {
		Battery_OFF_Icon;
	}
}
 8003a96:	e006      	b.n	8003aa6 <errorIcon+0xc2>
		Battery_OFF_Icon;
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <errorIcon+0x104>)
 8003aa0:	4804      	ldr	r0, [pc, #16]	; (8003ab4 <errorIcon+0xd0>)
 8003aa2:	f003 fcc6 	bl	8007432 <HAL_UART_Transmit>
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	200003be 	.word	0x200003be
 8003ab0:	20000160 	.word	0x20000160
 8003ab4:	200004dc 	.word	0x200004dc
 8003ab8:	20000168 	.word	0x20000168
 8003abc:	200003bf 	.word	0x200003bf
 8003ac0:	20000180 	.word	0x20000180
 8003ac4:	20000188 	.word	0x20000188
 8003ac8:	200003c0 	.word	0x200003c0
 8003acc:	20000170 	.word	0x20000170
 8003ad0:	20000178 	.word	0x20000178
 8003ad4:	200003c1 	.word	0x200003c1
 8003ad8:	20000238 	.word	0x20000238
 8003adc:	20000240 	.word	0x20000240
 8003ae0:	200003c2 	.word	0x200003c2
 8003ae4:	20000150 	.word	0x20000150
 8003ae8:	20000158 	.word	0x20000158

08003aec <errorPopup>:

void errorPopup(void) {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	if (err_crit_mild == 1) {
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <errorPopup+0x30>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <errorPopup+0x1c>
		SystemError_Critical_Popup;
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
 8003afc:	220a      	movs	r2, #10
 8003afe:	4908      	ldr	r1, [pc, #32]	; (8003b20 <errorPopup+0x34>)
 8003b00:	4808      	ldr	r0, [pc, #32]	; (8003b24 <errorPopup+0x38>)
 8003b02:	f003 fc96 	bl	8007432 <HAL_UART_Transmit>

	} else {
		SystemError_Mild_Popup_Page;
	}
}
 8003b06:	e006      	b.n	8003b16 <errorPopup+0x2a>
		SystemError_Mild_Popup_Page;
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0c:	220a      	movs	r2, #10
 8003b0e:	4906      	ldr	r1, [pc, #24]	; (8003b28 <errorPopup+0x3c>)
 8003b10:	4804      	ldr	r0, [pc, #16]	; (8003b24 <errorPopup+0x38>)
 8003b12:	f003 fc8e 	bl	8007432 <HAL_UART_Transmit>
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200003a1 	.word	0x200003a1
 8003b20:	20000138 	.word	0x20000138
 8003b24:	200004dc 	.word	0x200004dc
 8003b28:	2000012c 	.word	0x2000012c

08003b2c <errorCode>:

void errorCode(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0

	strDATA[4] = 0x11; //System Error Mild
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <errorCode+0xd0>)
 8003b32:	2211      	movs	r2, #17
 8003b34:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x94;
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <errorCode+0xd0>)
 8003b38:	2294      	movs	r2, #148	; 0x94
 8003b3a:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003b3c:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <errorCode+0xd0>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_error);
 8003b42:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <errorCode+0xd4>)
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <errorCode+0xd0>)
 8003b48:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	2208      	movs	r2, #8
 8003b50:	492a      	ldr	r1, [pc, #168]	; (8003bfc <errorCode+0xd0>)
 8003b52:	482c      	ldr	r0, [pc, #176]	; (8003c04 <errorCode+0xd8>)
 8003b54:	f003 fc6d 	bl	8007432 <HAL_UART_Transmit>

	strDATA[4] = 0x11; //System Error Critical
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <errorCode+0xd0>)
 8003b5a:	2211      	movs	r2, #17
 8003b5c:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x97;
 8003b5e:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <errorCode+0xd0>)
 8003b60:	2297      	movs	r2, #151	; 0x97
 8003b62:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	2208      	movs	r2, #8
 8003b6a:	4924      	ldr	r1, [pc, #144]	; (8003bfc <errorCode+0xd0>)
 8003b6c:	4825      	ldr	r0, [pc, #148]	; (8003c04 <errorCode+0xd8>)
 8003b6e:	f003 fc60 	bl	8007432 <HAL_UART_Transmit>

	strDATA[4] = 0x11; //System Error Mild
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <errorCode+0xd0>)
 8003b74:	2211      	movs	r2, #17
 8003b76:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x95;
 8003b78:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <errorCode+0xd0>)
 8003b7a:	2295      	movs	r2, #149	; 0x95
 8003b7c:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <errorCode+0xd0>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_device);
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <errorCode+0xdc>)
 8003b86:	781a      	ldrb	r2, [r3, #0]
 8003b88:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <errorCode+0xd0>)
 8003b8a:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	2208      	movs	r2, #8
 8003b92:	491a      	ldr	r1, [pc, #104]	; (8003bfc <errorCode+0xd0>)
 8003b94:	481b      	ldr	r0, [pc, #108]	; (8003c04 <errorCode+0xd8>)
 8003b96:	f003 fc4c 	bl	8007432 <HAL_UART_Transmit>

	strDATA[4] = 0x11; //System Error Critical
 8003b9a:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <errorCode+0xd0>)
 8003b9c:	2211      	movs	r2, #17
 8003b9e:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x98;
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <errorCode+0xd0>)
 8003ba2:	2298      	movs	r2, #152	; 0x98
 8003ba4:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	2208      	movs	r2, #8
 8003bac:	4913      	ldr	r1, [pc, #76]	; (8003bfc <errorCode+0xd0>)
 8003bae:	4815      	ldr	r0, [pc, #84]	; (8003c04 <errorCode+0xd8>)
 8003bb0:	f003 fc3f 	bl	8007432 <HAL_UART_Transmit>

	strDATA[4] = 0x11; //System Error Mild
 8003bb4:	4b11      	ldr	r3, [pc, #68]	; (8003bfc <errorCode+0xd0>)
 8003bb6:	2211      	movs	r2, #17
 8003bb8:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x96;
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <errorCode+0xd0>)
 8003bbc:	2296      	movs	r2, #150	; 0x96
 8003bbe:	715a      	strb	r2, [r3, #5]
	strDATA[6] = 0;
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <errorCode+0xd0>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	719a      	strb	r2, [r3, #6]
	strDATA[7] = (err_crit_mild);
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <errorCode+0xe0>)
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <errorCode+0xd0>)
 8003bcc:	71da      	strb	r2, [r3, #7]
	Transmit_strDATA;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	4909      	ldr	r1, [pc, #36]	; (8003bfc <errorCode+0xd0>)
 8003bd6:	480b      	ldr	r0, [pc, #44]	; (8003c04 <errorCode+0xd8>)
 8003bd8:	f003 fc2b 	bl	8007432 <HAL_UART_Transmit>

	strDATA[4] = 0x11; //System Error Critical
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <errorCode+0xd0>)
 8003bde:	2211      	movs	r2, #17
 8003be0:	711a      	strb	r2, [r3, #4]
	strDATA[5] = 0x99;
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <errorCode+0xd0>)
 8003be4:	2299      	movs	r2, #153	; 0x99
 8003be6:	715a      	strb	r2, [r3, #5]
	Transmit_strDATA;
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	2208      	movs	r2, #8
 8003bee:	4903      	ldr	r1, [pc, #12]	; (8003bfc <errorCode+0xd0>)
 8003bf0:	4804      	ldr	r0, [pc, #16]	; (8003c04 <errorCode+0xd8>)
 8003bf2:	f003 fc1e 	bl	8007432 <HAL_UART_Transmit>

}
 8003bf6:	bf00      	nop
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000344 	.word	0x20000344
 8003c00:	2000039f 	.word	0x2000039f
 8003c04:	200004dc 	.word	0x200004dc
 8003c08:	200003a0 	.word	0x200003a0
 8003c0c:	200003a1 	.word	0x200003a1

08003c10 <modeSelection>:

void modeSelection(uimode_t currentMode) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
//	if (!_modeChanged) {
//		drivePageSetter(currentPage);
//	}
	if (currentMode == modeCleared) {
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d107      	bne.n	8003c30 <modeSelection+0x20>
		ModeClear_Icon;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
 8003c24:	2208      	movs	r2, #8
 8003c26:	4930      	ldr	r1, [pc, #192]	; (8003ce8 <modeSelection+0xd8>)
 8003c28:	4830      	ldr	r0, [pc, #192]	; (8003cec <modeSelection+0xdc>)
 8003c2a:	f003 fc02 	bl	8007432 <HAL_UART_Transmit>
		return;
 8003c2e:	e057      	b.n	8003ce0 <modeSelection+0xd0>
//	if (mode_count > 15) {
//		rtn = true;
//		mode_count = 0;
//	}

	switch (currentMode) {
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d037      	beq.n	8003ca6 <modeSelection+0x96>
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	dc4b      	bgt.n	8003cd2 <modeSelection+0xc2>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <modeSelection+0x34>
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d00f      	beq.n	8003c62 <modeSelection+0x52>
			//SportMode_Popup;
			_modeChanged = false;
		}
		break;
	default:
		break;
 8003c42:	e046      	b.n	8003cd2 <modeSelection+0xc2>
		if (modeIcon) {
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <modeSelection+0xe0>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d044      	beq.n	8003cd6 <modeSelection+0xc6>
			NormalMode_Icon;
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	2208      	movs	r2, #8
 8003c52:	4928      	ldr	r1, [pc, #160]	; (8003cf4 <modeSelection+0xe4>)
 8003c54:	4825      	ldr	r0, [pc, #148]	; (8003cec <modeSelection+0xdc>)
 8003c56:	f003 fbec 	bl	8007432 <HAL_UART_Transmit>
			modeIcon = false;
 8003c5a:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <modeSelection+0xe0>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
		break;
 8003c60:	e039      	b.n	8003cd6 <modeSelection+0xc6>
		if (mode_evcu == 1) {
 8003c62:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <modeSelection+0xe8>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d107      	bne.n	8003c7a <modeSelection+0x6a>
			PowerLimitON_Icon;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	2208      	movs	r2, #8
 8003c70:	4922      	ldr	r1, [pc, #136]	; (8003cfc <modeSelection+0xec>)
 8003c72:	481e      	ldr	r0, [pc, #120]	; (8003cec <modeSelection+0xdc>)
 8003c74:	f003 fbdd 	bl	8007432 <HAL_UART_Transmit>
 8003c78:	e006      	b.n	8003c88 <modeSelection+0x78>
			PowerLimitOFF_Icon;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	2208      	movs	r2, #8
 8003c80:	491f      	ldr	r1, [pc, #124]	; (8003d00 <modeSelection+0xf0>)
 8003c82:	481a      	ldr	r0, [pc, #104]	; (8003cec <modeSelection+0xdc>)
 8003c84:	f003 fbd5 	bl	8007432 <HAL_UART_Transmit>
		if (modeIcon) {
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <modeSelection+0xe0>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d024      	beq.n	8003cda <modeSelection+0xca>
			modeIcon = false;
 8003c90:	4b17      	ldr	r3, [pc, #92]	; (8003cf0 <modeSelection+0xe0>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
			EcoMode_Icon;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	4919      	ldr	r1, [pc, #100]	; (8003d04 <modeSelection+0xf4>)
 8003c9e:	4813      	ldr	r0, [pc, #76]	; (8003cec <modeSelection+0xdc>)
 8003ca0:	f003 fbc7 	bl	8007432 <HAL_UART_Transmit>
		break;
 8003ca4:	e019      	b.n	8003cda <modeSelection+0xca>
		if (modeIcon) {
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <modeSelection+0xe0>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <modeSelection+0xb2>
			modeIcon = false;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <modeSelection+0xe0>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
			SportMode_Icon;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	2208      	movs	r2, #8
 8003cba:	4913      	ldr	r1, [pc, #76]	; (8003d08 <modeSelection+0xf8>)
 8003cbc:	480b      	ldr	r0, [pc, #44]	; (8003cec <modeSelection+0xdc>)
 8003cbe:	f003 fbb8 	bl	8007432 <HAL_UART_Transmit>
		if (_modeChanged) {
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <modeSelection+0xfc>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <modeSelection+0xce>
			_modeChanged = false;
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <modeSelection+0xfc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
		break;
 8003cd0:	e005      	b.n	8003cde <modeSelection+0xce>
		break;
 8003cd2:	bf00      	nop
 8003cd4:	e004      	b.n	8003ce0 <modeSelection+0xd0>
		break;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <modeSelection+0xd0>
		break;
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <modeSelection+0xd0>
		break;
 8003cde:	bf00      	nop
	}
}
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200001e8 	.word	0x200001e8
 8003cec:	200004dc 	.word	0x200004dc
 8003cf0:	200003c6 	.word	0x200003c6
 8003cf4:	200001d8 	.word	0x200001d8
 8003cf8:	2000039c 	.word	0x2000039c
 8003cfc:	20000190 	.word	0x20000190
 8003d00:	20000198 	.word	0x20000198
 8003d04:	200001d0 	.word	0x200001d0
 8003d08:	200001e0 	.word	0x200001e0
 8003d0c:	200003d8 	.word	0x200003d8

08003d10 <popUpHandler>:

void popUpHandler(void) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
	//Set popup priority Here

	switch (popUpNumber) {
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <popUpHandler+0xa0>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	d846      	bhi.n	8003daa <popUpHandler+0x9a>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <popUpHandler+0x14>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d3d 	.word	0x08003d3d
 8003d28:	08003d53 	.word	0x08003d53
 8003d2c:	08003d69 	.word	0x08003d69
 8003d30:	08003d7f 	.word	0x08003d7f
 8003d34:	08003d95 	.word	0x08003d95
 8003d38:	08003dab 	.word	0x08003dab
	case 0:
		//popUp_OFF;
		Battery_High_Temp_Popup_OFF;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	2208      	movs	r2, #8
 8003d42:	491c      	ldr	r1, [pc, #112]	; (8003db4 <popUpHandler+0xa4>)
 8003d44:	481c      	ldr	r0, [pc, #112]	; (8003db8 <popUpHandler+0xa8>)
 8003d46:	f003 fb74 	bl	8007432 <HAL_UART_Transmit>
		inPopup = false;
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <popUpHandler+0xac>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
		break;
 8003d50:	e02c      	b.n	8003dac <popUpHandler+0x9c>
	case 1:
		//NormalMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	2208      	movs	r2, #8
 8003d58:	4919      	ldr	r1, [pc, #100]	; (8003dc0 <popUpHandler+0xb0>)
 8003d5a:	4817      	ldr	r0, [pc, #92]	; (8003db8 <popUpHandler+0xa8>)
 8003d5c:	f003 fb69 	bl	8007432 <HAL_UART_Transmit>
		inPopup = true;
 8003d60:	4b16      	ldr	r3, [pc, #88]	; (8003dbc <popUpHandler+0xac>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]
		break;
 8003d66:	e021      	b.n	8003dac <popUpHandler+0x9c>
	case 2:
		//EcoMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4914      	ldr	r1, [pc, #80]	; (8003dc0 <popUpHandler+0xb0>)
 8003d70:	4811      	ldr	r0, [pc, #68]	; (8003db8 <popUpHandler+0xa8>)
 8003d72:	f003 fb5e 	bl	8007432 <HAL_UART_Transmit>
		inPopup = true;
 8003d76:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <popUpHandler+0xac>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
		break;
 8003d7c:	e016      	b.n	8003dac <popUpHandler+0x9c>
	case 3:
		//SportMode_Popup;
		Battery_High_Temp_Popup_ON;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d82:	2208      	movs	r2, #8
 8003d84:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <popUpHandler+0xb0>)
 8003d86:	480c      	ldr	r0, [pc, #48]	; (8003db8 <popUpHandler+0xa8>)
 8003d88:	f003 fb53 	bl	8007432 <HAL_UART_Transmit>
		inPopup = true;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <popUpHandler+0xac>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
		break;
 8003d92:	e00b      	b.n	8003dac <popUpHandler+0x9c>
	case 4:
		ModeChangeOFF_Page;
 8003d94:	f04f 33ff 	mov.w	r3, #4294967295
 8003d98:	2208      	movs	r2, #8
 8003d9a:	490a      	ldr	r1, [pc, #40]	; (8003dc4 <popUpHandler+0xb4>)
 8003d9c:	4806      	ldr	r0, [pc, #24]	; (8003db8 <popUpHandler+0xa8>)
 8003d9e:	f003 fb48 	bl	8007432 <HAL_UART_Transmit>
		inPopup = true;
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <popUpHandler+0xac>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
		break;
 8003da8:	e000      	b.n	8003dac <popUpHandler+0x9c>
	case 5:
		//ModeChangeOFF_Page;
		break;

	default:
		break;
 8003daa:	bf00      	nop
	}

}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	200003e9 	.word	0x200003e9
 8003db4:	20000240 	.word	0x20000240
 8003db8:	200004dc 	.word	0x200004dc
 8003dbc:	20000013 	.word	0x20000013
 8003dc0:	20000238 	.word	0x20000238
 8003dc4:	20000248 	.word	0x20000248

08003dc8 <powerMeter>:
		HAL_MAX_DELAY);
#endif
	}
}

void powerMeter(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0

	if (rpm_meter == 0) {
 8003dcc:	4b90      	ldr	r3, [pc, #576]	; (8004010 <powerMeter+0x248>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <powerMeter+0x1a>
#ifdef DMA
			HAL_UART_Transmit_DMA(&huart3, eco0, sizeof(eco0));
	#endif
#ifdef No_DMA
		HAL_UART_Transmit(&huart3, eco0, sizeof(eco0), HAL_MAX_DELAY);
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	2208      	movs	r2, #8
 8003dda:	498e      	ldr	r1, [pc, #568]	; (8004014 <powerMeter+0x24c>)
 8003ddc:	488e      	ldr	r0, [pc, #568]	; (8004018 <powerMeter+0x250>)
 8003dde:	f003 fb28 	bl	8007432 <HAL_UART_Transmit>
#endif
	}

	if (rpm_meter >= 1) {
 8003de2:	4b8b      	ldr	r3, [pc, #556]	; (8004010 <powerMeter+0x248>)
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 810f 	beq.w	800400a <powerMeter+0x242>

		if (power_90 <= power) {
 8003dec:	4b8b      	ldr	r3, [pc, #556]	; (800401c <powerMeter+0x254>)
 8003dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003df2:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003df6:	dd06      	ble.n	8003e06 <powerMeter+0x3e>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, power5, sizeof(power5));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, power5, sizeof(power5),
 8003df8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	4988      	ldr	r1, [pc, #544]	; (8004020 <powerMeter+0x258>)
 8003e00:	4885      	ldr	r0, [pc, #532]	; (8004018 <powerMeter+0x250>)
 8003e02:	f003 fb16 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (power_80 <= power && power < power_90) {
 8003e06:	4b85      	ldr	r3, [pc, #532]	; (800401c <powerMeter+0x254>)
 8003e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e0c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003e10:	4293      	cmp	r3, r2
 8003e12:	dd0c      	ble.n	8003e2e <powerMeter+0x66>
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <powerMeter+0x254>)
 8003e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1a:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8003e1e:	dc06      	bgt.n	8003e2e <powerMeter+0x66>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, power4, sizeof(power4));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, power4, sizeof(power4),
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	2208      	movs	r2, #8
 8003e26:	497f      	ldr	r1, [pc, #508]	; (8004024 <powerMeter+0x25c>)
 8003e28:	487b      	ldr	r0, [pc, #492]	; (8004018 <powerMeter+0x250>)
 8003e2a:	f003 fb02 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (power_70 <= power && power < power_80) {
 8003e2e:	4b7b      	ldr	r3, [pc, #492]	; (800401c <powerMeter+0x254>)
 8003e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e34:	f240 2295 	movw	r2, #661	; 0x295
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	dd0d      	ble.n	8003e58 <powerMeter+0x90>
 8003e3c:	4b77      	ldr	r3, [pc, #476]	; (800401c <powerMeter+0x254>)
 8003e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e42:	f240 22e6 	movw	r2, #742	; 0x2e6
 8003e46:	4293      	cmp	r3, r2
 8003e48:	dc06      	bgt.n	8003e58 <powerMeter+0x90>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, power3, sizeof(power3));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, power3, sizeof(power3),
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	2208      	movs	r2, #8
 8003e50:	4975      	ldr	r1, [pc, #468]	; (8004028 <powerMeter+0x260>)
 8003e52:	4871      	ldr	r0, [pc, #452]	; (8004018 <powerMeter+0x250>)
 8003e54:	f003 faed 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (power_60 <= power && power < power_70) {
 8003e58:	4b70      	ldr	r3, [pc, #448]	; (800401c <powerMeter+0x254>)
 8003e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e5e:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8003e62:	dd0d      	ble.n	8003e80 <powerMeter+0xb8>
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <powerMeter+0x254>)
 8003e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e6a:	f240 2295 	movw	r2, #661	; 0x295
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	dc06      	bgt.n	8003e80 <powerMeter+0xb8>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, power2, sizeof(power2));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, power2, sizeof(power2),
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	2208      	movs	r2, #8
 8003e78:	496c      	ldr	r1, [pc, #432]	; (800402c <powerMeter+0x264>)
 8003e7a:	4867      	ldr	r0, [pc, #412]	; (8004018 <powerMeter+0x250>)
 8003e7c:	f003 fad9 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (eco_50 <= power && power < power_60) {
 8003e80:	4b66      	ldr	r3, [pc, #408]	; (800401c <powerMeter+0x254>)
 8003e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e8a:	dd0c      	ble.n	8003ea6 <powerMeter+0xde>
 8003e8c:	4b63      	ldr	r3, [pc, #396]	; (800401c <powerMeter+0x254>)
 8003e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e92:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8003e96:	dc06      	bgt.n	8003ea6 <powerMeter+0xde>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, power1, sizeof(power1));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, power1, sizeof(power1),
 8003e98:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	4964      	ldr	r1, [pc, #400]	; (8004030 <powerMeter+0x268>)
 8003ea0:	485d      	ldr	r0, [pc, #372]	; (8004018 <powerMeter+0x250>)
 8003ea2:	f003 fac6 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (eco_40 <= power && power < eco_50) {
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <powerMeter+0x254>)
 8003ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003eb0:	dd0c      	ble.n	8003ecc <powerMeter+0x104>
 8003eb2:	4b5a      	ldr	r3, [pc, #360]	; (800401c <powerMeter+0x254>)
 8003eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ebc:	dc06      	bgt.n	8003ecc <powerMeter+0x104>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, eco5, sizeof(eco5));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, eco5, sizeof(eco5),
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	495b      	ldr	r1, [pc, #364]	; (8004034 <powerMeter+0x26c>)
 8003ec6:	4854      	ldr	r0, [pc, #336]	; (8004018 <powerMeter+0x250>)
 8003ec8:	f003 fab3 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (eco_30 <= power && power < eco_40) {
 8003ecc:	4b53      	ldr	r3, [pc, #332]	; (800401c <powerMeter+0x254>)
 8003ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003ed6:	dd0c      	ble.n	8003ef2 <powerMeter+0x12a>
 8003ed8:	4b50      	ldr	r3, [pc, #320]	; (800401c <powerMeter+0x254>)
 8003eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ede:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003ee2:	dc06      	bgt.n	8003ef2 <powerMeter+0x12a>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, eco4, sizeof(eco4));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, eco4, sizeof(eco4),
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	2208      	movs	r2, #8
 8003eea:	4953      	ldr	r1, [pc, #332]	; (8004038 <powerMeter+0x270>)
 8003eec:	484a      	ldr	r0, [pc, #296]	; (8004018 <powerMeter+0x250>)
 8003eee:	f003 faa0 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (eco_20 <= power && power < eco_30) {
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	; (800401c <powerMeter+0x254>)
 8003ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ef8:	2bc8      	cmp	r3, #200	; 0xc8
 8003efa:	dd0c      	ble.n	8003f16 <powerMeter+0x14e>
 8003efc:	4b47      	ldr	r3, [pc, #284]	; (800401c <powerMeter+0x254>)
 8003efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f06:	dc06      	bgt.n	8003f16 <powerMeter+0x14e>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, eco3, sizeof(eco3));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, eco3, sizeof(eco3),
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	494b      	ldr	r1, [pc, #300]	; (800403c <powerMeter+0x274>)
 8003f10:	4841      	ldr	r0, [pc, #260]	; (8004018 <powerMeter+0x250>)
 8003f12:	f003 fa8e 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (eco_10 <= power && power < eco_20) {
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <powerMeter+0x254>)
 8003f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	dd0b      	ble.n	8003f38 <powerMeter+0x170>
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <powerMeter+0x254>)
 8003f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f26:	2bc8      	cmp	r3, #200	; 0xc8
 8003f28:	dc06      	bgt.n	8003f38 <powerMeter+0x170>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, eco2, sizeof(eco2));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, eco2, sizeof(eco2),
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	2208      	movs	r2, #8
 8003f30:	4943      	ldr	r1, [pc, #268]	; (8004040 <powerMeter+0x278>)
 8003f32:	4839      	ldr	r0, [pc, #228]	; (8004018 <powerMeter+0x250>)
 8003f34:	f003 fa7d 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (0 <= power && power < eco_10) {
 8003f38:	4b38      	ldr	r3, [pc, #224]	; (800401c <powerMeter+0x254>)
 8003f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db0b      	blt.n	8003f5a <powerMeter+0x192>
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <powerMeter+0x254>)
 8003f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	dc06      	bgt.n	8003f5a <powerMeter+0x192>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, eco1, sizeof(eco1));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, eco1, sizeof(eco1),
 8003f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f50:	2208      	movs	r2, #8
 8003f52:	493c      	ldr	r1, [pc, #240]	; (8004044 <powerMeter+0x27c>)
 8003f54:	4830      	ldr	r0, [pc, #192]	; (8004018 <powerMeter+0x250>)
 8003f56:	f003 fa6c 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (-1 >= power && power >= -50) {
 8003f5a:	4b30      	ldr	r3, [pc, #192]	; (800401c <powerMeter+0x254>)
 8003f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da0c      	bge.n	8003f7e <powerMeter+0x1b6>
 8003f64:	4b2d      	ldr	r3, [pc, #180]	; (800401c <powerMeter+0x254>)
 8003f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f6a:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8003f6e:	db06      	blt.n	8003f7e <powerMeter+0x1b6>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, charge1, sizeof(charge1));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, charge1, sizeof(charge1),
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295
 8003f74:	2208      	movs	r2, #8
 8003f76:	4934      	ldr	r1, [pc, #208]	; (8004048 <powerMeter+0x280>)
 8003f78:	4827      	ldr	r0, [pc, #156]	; (8004018 <powerMeter+0x250>)
 8003f7a:	f003 fa5a 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (-51 >= power && power >= -101) {
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <powerMeter+0x254>)
 8003f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f84:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8003f88:	da0c      	bge.n	8003fa4 <powerMeter+0x1dc>
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <powerMeter+0x254>)
 8003f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f90:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8003f94:	db06      	blt.n	8003fa4 <powerMeter+0x1dc>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, charge2, sizeof(charge2));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, charge2, sizeof(charge2),
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	492b      	ldr	r1, [pc, #172]	; (800404c <powerMeter+0x284>)
 8003f9e:	481e      	ldr	r0, [pc, #120]	; (8004018 <powerMeter+0x250>)
 8003fa0:	f003 fa47 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (-102 >= power && power >= -152) {
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <powerMeter+0x254>)
 8003fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003faa:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8003fae:	da0c      	bge.n	8003fca <powerMeter+0x202>
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <powerMeter+0x254>)
 8003fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fb6:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003fba:	db06      	blt.n	8003fca <powerMeter+0x202>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, charge3, sizeof(charge3));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, charge3, sizeof(charge3),
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4923      	ldr	r1, [pc, #140]	; (8004050 <powerMeter+0x288>)
 8003fc4:	4814      	ldr	r0, [pc, #80]	; (8004018 <powerMeter+0x250>)
 8003fc6:	f003 fa34 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (-153 >= power && power >= -203) {
 8003fca:	4b14      	ldr	r3, [pc, #80]	; (800401c <powerMeter+0x254>)
 8003fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fd0:	f113 0f98 	cmn.w	r3, #152	; 0x98
 8003fd4:	da0c      	bge.n	8003ff0 <powerMeter+0x228>
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <powerMeter+0x254>)
 8003fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fdc:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003fe0:	db06      	blt.n	8003ff0 <powerMeter+0x228>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, charge4, sizeof(charge4));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, charge4, sizeof(charge4),
 8003fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	491a      	ldr	r1, [pc, #104]	; (8004054 <powerMeter+0x28c>)
 8003fea:	480b      	ldr	r0, [pc, #44]	; (8004018 <powerMeter+0x250>)
 8003fec:	f003 fa21 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}

		if (-204 >= power) {
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <powerMeter+0x254>)
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	f113 0fcb 	cmn.w	r3, #203	; 0xcb
 8003ffa:	da06      	bge.n	800400a <powerMeter+0x242>
#ifdef DMA
				HAL_UART_Transmit_DMA(&huart3, charge5, sizeof(charge5));
#endif
#ifdef No_DMA
			HAL_UART_Transmit(&huart3, charge5, sizeof(charge5),
 8003ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8004000:	2208      	movs	r2, #8
 8004002:	4915      	ldr	r1, [pc, #84]	; (8004058 <powerMeter+0x290>)
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <powerMeter+0x250>)
 8004006:	f003 fa14 	bl	8007432 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
#endif
		}
	}

}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	2000038c 	.word	0x2000038c
 8004014:	20000260 	.word	0x20000260
 8004018:	200004dc 	.word	0x200004dc
 800401c:	20000392 	.word	0x20000392
 8004020:	200002b0 	.word	0x200002b0
 8004024:	200002a8 	.word	0x200002a8
 8004028:	200002a0 	.word	0x200002a0
 800402c:	20000298 	.word	0x20000298
 8004030:	20000290 	.word	0x20000290
 8004034:	20000288 	.word	0x20000288
 8004038:	20000280 	.word	0x20000280
 800403c:	20000278 	.word	0x20000278
 8004040:	20000270 	.word	0x20000270
 8004044:	20000268 	.word	0x20000268
 8004048:	200002b8 	.word	0x200002b8
 800404c:	200002c0 	.word	0x200002c0
 8004050:	200002c8 	.word	0x200002c8
 8004054:	200002d0 	.word	0x200002d0
 8004058:	200002d8 	.word	0x200002d8

0800405c <gearUpdate>:


void gearUpdate(void) {
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
	if (currentstate == 1) {
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <gearUpdate+0x70>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <gearUpdate+0x1a>
		Gear_Neutral_Icon;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	2208      	movs	r2, #8
 800406e:	4918      	ldr	r1, [pc, #96]	; (80040d0 <gearUpdate+0x74>)
 8004070:	4818      	ldr	r0, [pc, #96]	; (80040d4 <gearUpdate+0x78>)
 8004072:	f003 f9de 	bl	8007432 <HAL_UART_Transmit>
	}

	if (currentstate == 2) {
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <gearUpdate+0x70>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d106      	bne.n	800408c <gearUpdate+0x30>
		Gear_Drive_Icon;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	2208      	movs	r2, #8
 8004084:	4914      	ldr	r1, [pc, #80]	; (80040d8 <gearUpdate+0x7c>)
 8004086:	4813      	ldr	r0, [pc, #76]	; (80040d4 <gearUpdate+0x78>)
 8004088:	f003 f9d3 	bl	8007432 <HAL_UART_Transmit>
	}

	if (currentstate == 3) {
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <gearUpdate+0x70>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d106      	bne.n	80040a2 <gearUpdate+0x46>
		Gear_Reverse_Icon;
 8004094:	f04f 33ff 	mov.w	r3, #4294967295
 8004098:	2208      	movs	r2, #8
 800409a:	4910      	ldr	r1, [pc, #64]	; (80040dc <gearUpdate+0x80>)
 800409c:	480d      	ldr	r0, [pc, #52]	; (80040d4 <gearUpdate+0x78>)
 800409e:	f003 f9c8 	bl	8007432 <HAL_UART_Transmit>
	}
	if (_gearCleared || currentstate == 0) {
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <gearUpdate+0x84>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <gearUpdate+0x56>
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <gearUpdate+0x70>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <gearUpdate+0x6a>
		Gear_Clear_Icon;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295
 80040b6:	2208      	movs	r2, #8
 80040b8:	490a      	ldr	r1, [pc, #40]	; (80040e4 <gearUpdate+0x88>)
 80040ba:	4806      	ldr	r0, [pc, #24]	; (80040d4 <gearUpdate+0x78>)
 80040bc:	f003 f9b9 	bl	8007432 <HAL_UART_Transmit>
		_gearCleared = false;
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <gearUpdate+0x84>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
	}

}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000394 	.word	0x20000394
 80040d0:	200001b8 	.word	0x200001b8
 80040d4:	200004dc 	.word	0x200004dc
 80040d8:	200001c0 	.word	0x200001c0
 80040dc:	200001b0 	.word	0x200001b0
 80040e0:	200003d9 	.word	0x200003d9
 80040e4:	200001c8 	.word	0x200001c8

080040e8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <MX_USART3_UART_Init+0x50>)
 80040f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 80040f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80040f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040fa:	4b0e      	ldr	r3, [pc, #56]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 800410e:	220c      	movs	r2, #12
 8004110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 8004114:	2200      	movs	r2, #0
 8004116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800411e:	4805      	ldr	r0, [pc, #20]	; (8004134 <MX_USART3_UART_Init+0x4c>)
 8004120:	f003 f93a 	bl	8007398 <HAL_UART_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800412a:	f7fd fa49 	bl	80015c0 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  dma_Status = HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID,
//  			&DMATransferComplete);
  /* USER CODE END USART3_Init 2 */

}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	200004dc 	.word	0x200004dc
 8004138:	40004800 	.word	0x40004800

0800413c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004144:	f107 0310 	add.w	r3, r7, #16
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	609a      	str	r2, [r3, #8]
 8004150:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a34      	ldr	r2, [pc, #208]	; (8004228 <HAL_UART_MspInit+0xec>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d160      	bne.n	800421e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800415c:	4b33      	ldr	r3, [pc, #204]	; (800422c <HAL_UART_MspInit+0xf0>)
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	4a32      	ldr	r2, [pc, #200]	; (800422c <HAL_UART_MspInit+0xf0>)
 8004162:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004166:	61d3      	str	r3, [r2, #28]
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <HAL_UART_MspInit+0xf0>)
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004174:	4b2d      	ldr	r3, [pc, #180]	; (800422c <HAL_UART_MspInit+0xf0>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <HAL_UART_MspInit+0xf0>)
 800417a:	f043 0308 	orr.w	r3, r3, #8
 800417e:	6193      	str	r3, [r2, #24]
 8004180:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_UART_MspInit+0xf0>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800418c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004190:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004196:	2303      	movs	r3, #3
 8004198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	4619      	mov	r1, r3
 80041a0:	4823      	ldr	r0, [pc, #140]	; (8004230 <HAL_UART_MspInit+0xf4>)
 80041a2:	f001 fd9f 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	4619      	mov	r1, r3
 80041ba:	481d      	ldr	r0, [pc, #116]	; (8004230 <HAL_UART_MspInit+0xf4>)
 80041bc:	f001 fd92 	bl	8005ce4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80041c0:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041c2:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <HAL_UART_MspInit+0xfc>)
 80041c4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041c6:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041c8:	2210      	movs	r2, #16
 80041ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041d2:	4b18      	ldr	r3, [pc, #96]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80041e4:	4b13      	ldr	r3, [pc, #76]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041ec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80041f0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80041f2:	4810      	ldr	r0, [pc, #64]	; (8004234 <HAL_UART_MspInit+0xf8>)
 80041f4:	f001 f8f4 	bl	80053e0 <HAL_DMA_Init>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80041fe:	f7fd f9df 	bl	80015c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <HAL_UART_MspInit+0xf8>)
 8004206:	635a      	str	r2, [r3, #52]	; 0x34
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_UART_MspInit+0xf8>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	2027      	movs	r0, #39	; 0x27
 8004214:	f001 f8ad 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004218:	2027      	movs	r0, #39	; 0x27
 800421a:	f001 f8c6 	bl	80053aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800421e:	bf00      	nop
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40004800 	.word	0x40004800
 800422c:	40021000 	.word	0x40021000
 8004230:	40010c00 	.word	0x40010c00
 8004234:	20000520 	.word	0x20000520
 8004238:	4002001c 	.word	0x4002001c

0800423c <check_ack>:
 *      Author: Akila
 */
#include "vehicleControl.h"

//Check EVCU Confirmation on mode change
bool check_ack() {
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	//Mode Change request
	if (mode_evcu == targetMode) {
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <check_ack+0x2c>)
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	4b09      	ldr	r3, [pc, #36]	; (800426c <check_ack+0x30>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	429a      	cmp	r2, r3
 800424c:	d103      	bne.n	8004256 <check_ack+0x1a>
		modeChangeOK = true;
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <check_ack+0x34>)
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e002      	b.n	800425c <check_ack+0x20>
	} else {
		modeChangeOK = false;
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <check_ack+0x34>)
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]

	//Debug//
	//modeChangeOK = true;
	//////////////////

	return modeChangeOK;
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <check_ack+0x34>)
 800425e:	781b      	ldrb	r3, [r3, #0]
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	2000039c 	.word	0x2000039c
 800426c:	200003b3 	.word	0x200003b3
 8004270:	200003c5 	.word	0x200003c5

08004274 <evcuMode>:

//Read CAN
//Set Driving Mode of the EVCU
//Set targerMode to corresponding mode
//This will call on external interrupt
void evcuMode() {
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	if (mode_override == false && mode == true) { //Mode Override
 8004278:	4b45      	ldr	r3, [pc, #276]	; (8004390 <evcuMode+0x11c>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d16b      	bne.n	8004358 <evcuMode+0xe4>
 8004280:	4b44      	ldr	r3, [pc, #272]	; (8004394 <evcuMode+0x120>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d067      	beq.n	8004358 <evcuMode+0xe4>
		if (currentMode == ecoMode) {
 8004288:	4b43      	ldr	r3, [pc, #268]	; (8004398 <evcuMode+0x124>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d11a      	bne.n	80042c8 <evcuMode+0x54>
			//Set Normal Mode
			targetMode = normalMode;
 8004292:	4b42      	ldr	r3, [pc, #264]	; (800439c <evcuMode+0x128>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 8004298:	f7ff ffd0 	bl	800423c <check_ack>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d05a      	beq.n	8004358 <evcuMode+0xe4>
				currentMode = normalMode;
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <evcuMode+0x124>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
				mode = false;
 80042a8:	4b3a      	ldr	r3, [pc, #232]	; (8004394 <evcuMode+0x120>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 80042ae:	4b3c      	ldr	r3, [pc, #240]	; (80043a0 <evcuMode+0x12c>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 1;
 80042b4:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <evcuMode+0x130>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <evcuMode+0x134>)
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
				rtn = false;
 80042c0:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <evcuMode+0x138>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e047      	b.n	8004358 <evcuMode+0xe4>
			}
		} else if (currentMode == normalMode) {
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <evcuMode+0x124>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11d      	bne.n	800430e <evcuMode+0x9a>
			//Set Sports Mode
			targetMode = sportMode;
 80042d2:	4b32      	ldr	r3, [pc, #200]	; (800439c <evcuMode+0x128>)
 80042d4:	2203      	movs	r2, #3
 80042d6:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 80042d8:	f7ff ffb0 	bl	800423c <check_ack>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d03a      	beq.n	8004358 <evcuMode+0xe4>
				currentMode = sportMode;
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <evcuMode+0x124>)
 80042e4:	2203      	movs	r2, #3
 80042e6:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <evcuMode+0x12c>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 3;
 80042ee:	4b2d      	ldr	r3, [pc, #180]	; (80043a4 <evcuMode+0x130>)
 80042f0:	2203      	movs	r2, #3
 80042f2:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 80042f4:	4b2c      	ldr	r3, [pc, #176]	; (80043a8 <evcuMode+0x134>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	701a      	strb	r2, [r3, #0]
				mode = false;
 80042fa:	4b26      	ldr	r3, [pc, #152]	; (8004394 <evcuMode+0x120>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <evcuMode+0x138>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 8004306:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <evcuMode+0x13c>)
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e024      	b.n	8004358 <evcuMode+0xe4>
			}
		} else if (currentMode == sportMode) {
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <evcuMode+0x124>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b03      	cmp	r3, #3
 8004316:	d11f      	bne.n	8004358 <evcuMode+0xe4>
			//Set Eco Mode
			targetMode = ecoMode;
 8004318:	4b20      	ldr	r3, [pc, #128]	; (800439c <evcuMode+0x128>)
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
			if (check_ack()) {
 800431e:	f7ff ff8d 	bl	800423c <check_ack>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d017      	beq.n	8004358 <evcuMode+0xe4>
				currentMode = ecoMode;
 8004328:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <evcuMode+0x124>)
 800432a:	2202      	movs	r2, #2
 800432c:	701a      	strb	r2, [r3, #0]
				mode = false;
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <evcuMode+0x120>)
 8004330:	2200      	movs	r2, #0
 8004332:	701a      	strb	r2, [r3, #0]
				modeIcon = true;
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <evcuMode+0x12c>)
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
				//_setPoup = true;
				popUpNumber = 2;
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <evcuMode+0x130>)
 800433c:	2202      	movs	r2, #2
 800433e:	701a      	strb	r2, [r3, #0]

				_modeSelection = 1;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <evcuMode+0x134>)
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
				rtn = false;
 8004346:	4b19      	ldr	r3, [pc, #100]	; (80043ac <evcuMode+0x138>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
				modeChangeOK = false;
 800434c:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <evcuMode+0x13c>)
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
				currentMode = ecoMode;
 8004352:	4b11      	ldr	r3, [pc, #68]	; (8004398 <evcuMode+0x124>)
 8004354:	2202      	movs	r2, #2
 8004356:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	//Turtle Mode: Show as Eco Mode but EVCU will set as turtle Mode. Limited Power
	//Power Limit Icon Should be appeared
	if (mode_override == true) {
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <evcuMode+0x11c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d115      	bne.n	800438c <evcuMode+0x118>
		currentMode = ecoMode;
 8004360:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <evcuMode+0x124>)
 8004362:	2202      	movs	r2, #2
 8004364:	701a      	strb	r2, [r3, #0]
		targetMode = ecoMode;
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <evcuMode+0x128>)
 8004368:	2202      	movs	r2, #2
 800436a:	701a      	strb	r2, [r3, #0]
		if (mode == true) {
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <evcuMode+0x120>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <evcuMode+0x118>
			mode = false;
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <evcuMode+0x120>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
			_modeSelection = 1;
 800437a:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <evcuMode+0x134>)
 800437c:	2201      	movs	r2, #1
 800437e:	701a      	strb	r2, [r3, #0]
			modeIcon = true;
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <evcuMode+0x12c>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
			rtn = false;
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <evcuMode+0x138>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
		}
	}
	//modeSelection -  set false in transmit function
	//_modeSelection = true;
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	2000039b 	.word	0x2000039b
 8004394:	2000033d 	.word	0x2000033d
 8004398:	200003b2 	.word	0x200003b2
 800439c:	200003b3 	.word	0x200003b3
 80043a0:	200003c6 	.word	0x200003c6
 80043a4:	200003e9 	.word	0x200003e9
 80043a8:	200003cf 	.word	0x200003cf
 80043ac:	200003a9 	.word	0x200003a9
 80043b0:	200003c5 	.word	0x200003c5

080043b4 <trip_reset>:

void trip_reset(void){
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0

	if(trip_ack == 1){
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <trip_reset+0x1c>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d102      	bne.n	80043c6 <trip_reset+0x12>
		tripreset = false;
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <trip_reset+0x20>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	701a      	strb	r2, [r3, #0]
		//resetThings();
	}
}
 80043c6:	bf00      	nop
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	2000039a 	.word	0x2000039a
 80043d4:	2000033b 	.word	0x2000033b

080043d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d8:	480c      	ldr	r0, [pc, #48]	; (800440c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043dc:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e0:	e002      	b.n	80043e8 <LoopCopyDataInit>

080043e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e6:	3304      	adds	r3, #4

080043e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043ec:	d3f9      	bcc.n	80043e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ee:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043f0:	4c0a      	ldr	r4, [pc, #40]	; (800441c <LoopFillZerobss+0x22>)
  movs r3, #0
 80043f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f4:	e001      	b.n	80043fa <LoopFillZerobss>

080043f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f8:	3204      	adds	r2, #4

080043fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043fc:	d3fb      	bcc.n	80043f6 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043fe:	f7fe fc63 	bl	8002cc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004402:	f003 fd9b 	bl	8007f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004406:	f7fc ff27 	bl	8001258 <main>
  bx lr
 800440a:	4770      	bx	lr
  ldr r0, =_sdata
 800440c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004410:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8004414:	08007ff4 	.word	0x08007ff4
  ldr r2, =_sbss
 8004418:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 800441c:	20000568 	.word	0x20000568

08004420 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004420:	e7fe      	b.n	8004420 <ADC1_2_IRQHandler>
	...

08004424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_Init+0x28>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <HAL_Init+0x28>)
 800442e:	f043 0310 	orr.w	r3, r3, #16
 8004432:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004434:	2003      	movs	r0, #3
 8004436:	f000 ff91 	bl	800535c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800443a:	200f      	movs	r0, #15
 800443c:	f000 f808 	bl	8004450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004440:	f7fe fba2 	bl	8002b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40022000 	.word	0x40022000

08004450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_InitTick+0x54>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <HAL_InitTick+0x58>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004466:	fbb3 f3f1 	udiv	r3, r3, r1
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	4618      	mov	r0, r3
 8004470:	f000 ffa9 	bl	80053c6 <HAL_SYSTICK_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e00e      	b.n	800449c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d80a      	bhi.n	800449a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004484:	2200      	movs	r2, #0
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	f04f 30ff 	mov.w	r0, #4294967295
 800448c:	f000 ff71 	bl	8005372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004490:	4a06      	ldr	r2, [pc, #24]	; (80044ac <HAL_InitTick+0x5c>)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	e000      	b.n	800449c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	2000001c 	.word	0x2000001c
 80044a8:	200002e4 	.word	0x200002e4
 80044ac:	200002e0 	.word	0x200002e0

080044b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_IncTick+0x1c>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <HAL_IncTick+0x20>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <HAL_IncTick+0x20>)
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	200002e4 	.word	0x200002e4
 80044d0:	20000564 	.word	0x20000564

080044d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return uwTick;
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <HAL_GetTick+0x10>)
 80044da:	681b      	ldr	r3, [r3, #0]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	20000564 	.word	0x20000564

080044e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f0:	f7ff fff0 	bl	80044d4 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d005      	beq.n	800450e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <HAL_Delay+0x44>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800450e:	bf00      	nop
 8004510:	f7ff ffe0 	bl	80044d4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	d8f7      	bhi.n	8004510 <HAL_Delay+0x28>
  {
  }
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200002e4 	.word	0x200002e4

08004530 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0ed      	b.n	800471e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc f83e 	bl	80005d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004564:	f7ff ffb6 	bl	80044d4 <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800456a:	e012      	b.n	8004592 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800456c:	f7ff ffb2 	bl	80044d4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b0a      	cmp	r3, #10
 8004578:	d90b      	bls.n	8004592 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2205      	movs	r2, #5
 800458a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e0c5      	b.n	800471e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0e5      	beq.n	800456c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0202 	bic.w	r2, r2, #2
 80045ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b0:	f7ff ff90 	bl	80044d4 <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045b6:	e012      	b.n	80045de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045b8:	f7ff ff8c 	bl	80044d4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b0a      	cmp	r3, #10
 80045c4:	d90b      	bls.n	80045de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2205      	movs	r2, #5
 80045d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e09f      	b.n	800471e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	7e1b      	ldrb	r3, [r3, #24]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e007      	b.n	8004616 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7e5b      	ldrb	r3, [r3, #25]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d108      	bne.n	8004630 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e007      	b.n	8004640 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7e9b      	ldrb	r3, [r3, #26]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d108      	bne.n	800465a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0220 	orr.w	r2, r2, #32
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e007      	b.n	800466a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0220 	bic.w	r2, r2, #32
 8004668:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7edb      	ldrb	r3, [r3, #27]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d108      	bne.n	8004684 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0210 	bic.w	r2, r2, #16
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e007      	b.n	8004694 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0210 	orr.w	r2, r2, #16
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7f1b      	ldrb	r3, [r3, #28]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d108      	bne.n	80046ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e007      	b.n	80046be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0208 	bic.w	r2, r2, #8
 80046bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7f5b      	ldrb	r3, [r3, #29]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d108      	bne.n	80046d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0204 	orr.w	r2, r2, #4
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	e007      	b.n	80046e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	ea42 0103 	orr.w	r1, r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	1e5a      	subs	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800473e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d003      	beq.n	800474e <HAL_CAN_ConfigFilter+0x26>
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b02      	cmp	r3, #2
 800474a:	f040 80be 	bne.w	80048ca <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800474e:	4b65      	ldr	r3, [pc, #404]	; (80048e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004750:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004768:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	431a      	orrs	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2201      	movs	r2, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	43db      	mvns	r3, r3
 80047a0:	401a      	ands	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d123      	bne.n	80047f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80047d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3248      	adds	r2, #72	; 0x48
 80047d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80047ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80047ee:	6979      	ldr	r1, [r7, #20]
 80047f0:	3348      	adds	r3, #72	; 0x48
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	440b      	add	r3, r1
 80047f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d122      	bne.n	8004846 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	431a      	orrs	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004820:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3248      	adds	r2, #72	; 0x48
 8004826:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800483a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	3348      	adds	r3, #72	; 0x48
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004860:	e007      	b.n	8004872 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	431a      	orrs	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	43db      	mvns	r3, r3
 8004884:	401a      	ands	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800488c:	e007      	b.n	800489e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	431a      	orrs	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048bc:	f023 0201 	bic.w	r2, r3, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e006      	b.n	80048d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
  }
}
 80048d8:	4618      	mov	r0, r3
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40006400 	.word	0x40006400

080048e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d12e      	bne.n	800495a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004914:	f7ff fdde 	bl	80044d4 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800491a:	e012      	b.n	8004942 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800491c:	f7ff fdda 	bl	80044d4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b0a      	cmp	r3, #10
 8004928:	d90b      	bls.n	8004942 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2205      	movs	r2, #5
 800493a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e012      	b.n	8004968 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e006      	b.n	8004968 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
  }
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004984:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800498e:	7ffb      	ldrb	r3, [r7, #31]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d003      	beq.n	800499c <HAL_CAN_AddTxMessage+0x2c>
 8004994:	7ffb      	ldrb	r3, [r7, #31]
 8004996:	2b02      	cmp	r3, #2
 8004998:	f040 80b8 	bne.w	8004b0c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80a0 	beq.w	8004afc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	0e1b      	lsrs	r3, r3, #24
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d907      	bls.n	80049dc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e09e      	b.n	8004b1a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80049dc:	2201      	movs	r2, #1
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	409a      	lsls	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10d      	bne.n	8004a0a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	6809      	ldr	r1, [r1, #0]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	3318      	adds	r3, #24
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	440b      	add	r3, r1
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e00f      	b.n	8004a2a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a14:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004a1e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3318      	adds	r3, #24
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	440b      	add	r3, r1
 8004a28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3318      	adds	r3, #24
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	440b      	add	r3, r1
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	7d1b      	ldrb	r3, [r3, #20]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d111      	bne.n	8004a6a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3318      	adds	r3, #24
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3318      	adds	r3, #24
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	440b      	add	r3, r1
 8004a66:	3304      	adds	r3, #4
 8004a68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	061a      	lsls	r2, r3, #24
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3306      	adds	r3, #6
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	041b      	lsls	r3, r3, #16
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3305      	adds	r3, #5
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	4313      	orrs	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	3204      	adds	r2, #4
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	ea43 0200 	orr.w	r2, r3, r0
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004aa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	061a      	lsls	r2, r3, #24
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3302      	adds	r3, #2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	4313      	orrs	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	6811      	ldr	r1, [r2, #0]
 8004ac8:	ea43 0200 	orr.w	r2, r3, r0
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	440b      	add	r3, r1
 8004ad2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004ad6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3318      	adds	r3, #24
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4413      	add	r3, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	6811      	ldr	r1, [r2, #0]
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3318      	adds	r3, #24
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	440b      	add	r3, r1
 8004af6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	e00e      	b.n	8004b1a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e006      	b.n	8004b1a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3724      	adds	r7, #36	; 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b38:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d003      	beq.n	8004b48 <HAL_CAN_GetRxMessage+0x24>
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	f040 80f3 	bne.w	8004d2e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d116      	bne.n	8004b8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0e7      	b.n	8004d3c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0d8      	b.n	8004d3c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	331b      	adds	r3, #27
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	4413      	add	r3, r2
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0204 	and.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10c      	bne.n	8004bc2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	331b      	adds	r3, #27
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	4413      	add	r3, r2
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	0d5b      	lsrs	r3, r3, #21
 8004bb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e00b      	b.n	8004bda <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	331b      	adds	r3, #27
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	4413      	add	r3, r2
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	331b      	adds	r3, #27
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0202 	and.w	r2, r3, #2
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	331b      	adds	r3, #27
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	331b      	adds	r3, #27
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4413      	add	r3, r2
 8004c14:	3304      	adds	r3, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	331b      	adds	r3, #27
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	4413      	add	r3, r2
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	0a1a      	lsrs	r2, r3, #8
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0c1a      	lsrs	r2, r3, #16
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	0e1a      	lsrs	r2, r3, #24
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	3303      	adds	r3, #3
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	0a1a      	lsrs	r2, r3, #8
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	3305      	adds	r3, #5
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	4413      	add	r3, r2
 8004cd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	0c1a      	lsrs	r2, r3, #16
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	3306      	adds	r3, #6
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0e1a      	lsrs	r2, r3, #24
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	3307      	adds	r3, #7
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d108      	bne.n	8004d1a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0220 	orr.w	r2, r2, #32
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	e007      	b.n	8004d2a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0220 	orr.w	r2, r2, #32
 8004d28:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e006      	b.n	8004d3c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d002      	beq.n	8004d64 <HAL_CAN_ActivateNotification+0x1e>
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d109      	bne.n	8004d78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6959      	ldr	r1, [r3, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e006      	b.n	8004d86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d07c      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d023      	beq.n	8004e28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2201      	movs	r2, #1
 8004de6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f983 	bl	80050fe <HAL_CAN_TxMailbox0CompleteCallback>
 8004df8:	e016      	b.n	8004e28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e0c:	e00c      	b.n	8004e28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	e002      	b.n	8004e28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f986 	bl	8005134 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d024      	beq.n	8004e7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f962 	bl	8005110 <HAL_CAN_TxMailbox1CompleteCallback>
 8004e4c:	e016      	b.n	8004e7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e60:	e00c      	b.n	8004e7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
 8004e74:	e002      	b.n	8004e7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f965 	bl	8005146 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d024      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f941 	bl	8005122 <HAL_CAN_TxMailbox2CompleteCallback>
 8004ea0:	e016      	b.n	8004ed0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	e00c      	b.n	8004ed0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	e002      	b.n	8004ed0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f944 	bl	8005158 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00c      	beq.n	8004ef4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d007      	beq.n	8004ef4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d006      	beq.n	8004f16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f92a 	bl	800516a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fc fa8e 	bl	8001450 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2210      	movs	r2, #16
 8004f56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d006      	beq.n	8004f7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f901 	bl	800517c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc fa9e 	bl	80014d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8ea 	bl	800518e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8e2 	bl	80051a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d07b      	beq.n	80050de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d072      	beq.n	80050d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	f043 0302 	orr.w	r3, r3, #2
 8005026:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800504a:	2b00      	cmp	r3, #0
 800504c:	d043      	beq.n	80050d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005054:	2b00      	cmp	r3, #0
 8005056:	d03e      	beq.n	80050d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800505e:	2b60      	cmp	r3, #96	; 0x60
 8005060:	d02b      	beq.n	80050ba <HAL_CAN_IRQHandler+0x32a>
 8005062:	2b60      	cmp	r3, #96	; 0x60
 8005064:	d82e      	bhi.n	80050c4 <HAL_CAN_IRQHandler+0x334>
 8005066:	2b50      	cmp	r3, #80	; 0x50
 8005068:	d022      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x320>
 800506a:	2b50      	cmp	r3, #80	; 0x50
 800506c:	d82a      	bhi.n	80050c4 <HAL_CAN_IRQHandler+0x334>
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d019      	beq.n	80050a6 <HAL_CAN_IRQHandler+0x316>
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d826      	bhi.n	80050c4 <HAL_CAN_IRQHandler+0x334>
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d010      	beq.n	800509c <HAL_CAN_IRQHandler+0x30c>
 800507a:	2b30      	cmp	r3, #48	; 0x30
 800507c:	d822      	bhi.n	80050c4 <HAL_CAN_IRQHandler+0x334>
 800507e:	2b10      	cmp	r3, #16
 8005080:	d002      	beq.n	8005088 <HAL_CAN_IRQHandler+0x2f8>
 8005082:	2b20      	cmp	r3, #32
 8005084:	d005      	beq.n	8005092 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005086:	e01d      	b.n	80050c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	f043 0308 	orr.w	r3, r3, #8
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005090:	e019      	b.n	80050c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	f043 0310 	orr.w	r3, r3, #16
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800509a:	e014      	b.n	80050c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	f043 0320 	orr.w	r3, r3, #32
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050a4:	e00f      	b.n	80050c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050ae:	e00a      	b.n	80050c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050b8:	e005      	b.n	80050c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80050c2:	e000      	b.n	80050c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80050c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2204      	movs	r2, #4
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f85e 	bl	80051b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80050f6:	bf00      	nop
 80050f8:	3728      	adds	r7, #40	; 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <__NVIC_SetPriorityGrouping+0x44>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051e0:	4013      	ands	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051f6:	4a04      	ldr	r2, [pc, #16]	; (8005208 <__NVIC_SetPriorityGrouping+0x44>)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	60d3      	str	r3, [r2, #12]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <__NVIC_GetPriorityGrouping+0x18>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	f003 0307 	and.w	r3, r3, #7
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	2b00      	cmp	r3, #0
 8005238:	db0b      	blt.n	8005252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	f003 021f 	and.w	r2, r3, #31
 8005240:	4906      	ldr	r1, [pc, #24]	; (800525c <__NVIC_EnableIRQ+0x34>)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2001      	movs	r0, #1
 800524a:	fa00 f202 	lsl.w	r2, r0, r2
 800524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	e000e100 	.word	0xe000e100

08005260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	6039      	str	r1, [r7, #0]
 800526a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800526c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005270:	2b00      	cmp	r3, #0
 8005272:	db0a      	blt.n	800528a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	b2da      	uxtb	r2, r3
 8005278:	490c      	ldr	r1, [pc, #48]	; (80052ac <__NVIC_SetPriority+0x4c>)
 800527a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527e:	0112      	lsls	r2, r2, #4
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	440b      	add	r3, r1
 8005284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005288:	e00a      	b.n	80052a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	b2da      	uxtb	r2, r3
 800528e:	4908      	ldr	r1, [pc, #32]	; (80052b0 <__NVIC_SetPriority+0x50>)
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	3b04      	subs	r3, #4
 8005298:	0112      	lsls	r2, r2, #4
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	440b      	add	r3, r1
 800529e:	761a      	strb	r2, [r3, #24]
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	e000e100 	.word	0xe000e100
 80052b0:	e000ed00 	.word	0xe000ed00

080052b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b089      	sub	sp, #36	; 0x24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f1c3 0307 	rsb	r3, r3, #7
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	bf28      	it	cs
 80052d2:	2304      	movcs	r3, #4
 80052d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3304      	adds	r3, #4
 80052da:	2b06      	cmp	r3, #6
 80052dc:	d902      	bls.n	80052e4 <NVIC_EncodePriority+0x30>
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3b03      	subs	r3, #3
 80052e2:	e000      	b.n	80052e6 <NVIC_EncodePriority+0x32>
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	43da      	mvns	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	401a      	ands	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	43d9      	mvns	r1, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800530c:	4313      	orrs	r3, r2
         );
}
 800530e:	4618      	mov	r0, r3
 8005310:	3724      	adds	r7, #36	; 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3b01      	subs	r3, #1
 8005324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005328:	d301      	bcc.n	800532e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800532a:	2301      	movs	r3, #1
 800532c:	e00f      	b.n	800534e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <SysTick_Config+0x40>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005336:	210f      	movs	r1, #15
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	f7ff ff90 	bl	8005260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <SysTick_Config+0x40>)
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <SysTick_Config+0x40>)
 8005348:	2207      	movs	r2, #7
 800534a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000e010 	.word	0xe000e010

0800535c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff2d 	bl	80051c4 <__NVIC_SetPriorityGrouping>
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	4603      	mov	r3, r0
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005384:	f7ff ff42 	bl	800520c <__NVIC_GetPriorityGrouping>
 8005388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	6978      	ldr	r0, [r7, #20]
 8005390:	f7ff ff90 	bl	80052b4 <NVIC_EncodePriority>
 8005394:	4602      	mov	r2, r0
 8005396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff ff5f 	bl	8005260 <__NVIC_SetPriority>
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	4603      	mov	r3, r0
 80053b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff35 	bl	8005228 <__NVIC_EnableIRQ>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff ffa2 	bl	8005318 <SysTick_Config>
 80053d4:	4603      	mov	r3, r0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e059      	b.n	80054aa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	4b2d      	ldr	r3, [pc, #180]	; (80054b4 <HAL_DMA_Init+0xd4>)
 80053fe:	429a      	cmp	r2, r3
 8005400:	d80f      	bhi.n	8005422 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	4b2b      	ldr	r3, [pc, #172]	; (80054b8 <HAL_DMA_Init+0xd8>)
 800540a:	4413      	add	r3, r2
 800540c:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <HAL_DMA_Init+0xdc>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	009a      	lsls	r2, r3, #2
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a28      	ldr	r2, [pc, #160]	; (80054c0 <HAL_DMA_Init+0xe0>)
 800541e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005420:	e00e      	b.n	8005440 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <HAL_DMA_Init+0xe4>)
 800542a:	4413      	add	r3, r2
 800542c:	4a23      	ldr	r2, [pc, #140]	; (80054bc <HAL_DMA_Init+0xdc>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	091b      	lsrs	r3, r3, #4
 8005434:	009a      	lsls	r2, r3, #2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <HAL_DMA_Init+0xe8>)
 800543e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005456:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800545a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800547c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	40020407 	.word	0x40020407
 80054b8:	bffdfff8 	.word	0xbffdfff8
 80054bc:	cccccccd 	.word	0xcccccccd
 80054c0:	40020000 	.word	0x40020000
 80054c4:	bffdfbf8 	.word	0xbffdfbf8
 80054c8:	40020400 	.word	0x40020400

080054cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_DMA_Start_IT+0x20>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e04a      	b.n	8005582 <HAL_DMA_Start_IT+0xb6>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d13a      	bne.n	8005574 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fbb0 	bl	8005c88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 020e 	orr.w	r2, r2, #14
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e00f      	b.n	8005562 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0204 	bic.w	r2, r2, #4
 8005550:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 020a 	orr.w	r2, r2, #10
 8005560:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e005      	b.n	8005580 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005580:	7dfb      	ldrb	r3, [r7, #23]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800559c:	2b02      	cmp	r3, #2
 800559e:	d008      	beq.n	80055b2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2204      	movs	r2, #4
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e020      	b.n	80055f4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 020e 	bic.w	r2, r2, #14
 80055c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f202 	lsl.w	r2, r1, r2
 80055e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr
	...

08005600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005612:	2b02      	cmp	r3, #2
 8005614:	d005      	beq.n	8005622 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2204      	movs	r2, #4
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e0d6      	b.n	80057d0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 020e 	bic.w	r2, r2, #14
 8005630:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	4b64      	ldr	r3, [pc, #400]	; (80057dc <HAL_DMA_Abort_IT+0x1dc>)
 800564a:	429a      	cmp	r2, r3
 800564c:	d958      	bls.n	8005700 <HAL_DMA_Abort_IT+0x100>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a63      	ldr	r2, [pc, #396]	; (80057e0 <HAL_DMA_Abort_IT+0x1e0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d04f      	beq.n	80056f8 <HAL_DMA_Abort_IT+0xf8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a61      	ldr	r2, [pc, #388]	; (80057e4 <HAL_DMA_Abort_IT+0x1e4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d048      	beq.n	80056f4 <HAL_DMA_Abort_IT+0xf4>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a60      	ldr	r2, [pc, #384]	; (80057e8 <HAL_DMA_Abort_IT+0x1e8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d040      	beq.n	80056ee <HAL_DMA_Abort_IT+0xee>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5e      	ldr	r2, [pc, #376]	; (80057ec <HAL_DMA_Abort_IT+0x1ec>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d038      	beq.n	80056e8 <HAL_DMA_Abort_IT+0xe8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a5d      	ldr	r2, [pc, #372]	; (80057f0 <HAL_DMA_Abort_IT+0x1f0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d030      	beq.n	80056e2 <HAL_DMA_Abort_IT+0xe2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <HAL_DMA_Abort_IT+0x1f4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d028      	beq.n	80056dc <HAL_DMA_Abort_IT+0xdc>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a53      	ldr	r2, [pc, #332]	; (80057dc <HAL_DMA_Abort_IT+0x1dc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d020      	beq.n	80056d6 <HAL_DMA_Abort_IT+0xd6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a57      	ldr	r2, [pc, #348]	; (80057f8 <HAL_DMA_Abort_IT+0x1f8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d019      	beq.n	80056d2 <HAL_DMA_Abort_IT+0xd2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a56      	ldr	r2, [pc, #344]	; (80057fc <HAL_DMA_Abort_IT+0x1fc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d012      	beq.n	80056ce <HAL_DMA_Abort_IT+0xce>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a54      	ldr	r2, [pc, #336]	; (8005800 <HAL_DMA_Abort_IT+0x200>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00a      	beq.n	80056c8 <HAL_DMA_Abort_IT+0xc8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a53      	ldr	r2, [pc, #332]	; (8005804 <HAL_DMA_Abort_IT+0x204>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d102      	bne.n	80056c2 <HAL_DMA_Abort_IT+0xc2>
 80056bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056c0:	e01b      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056c6:	e018      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056cc:	e015      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056ce:	2310      	movs	r3, #16
 80056d0:	e013      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e011      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056da:	e00e      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056e0:	e00b      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056e6:	e008      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ec:	e005      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056f2:	e002      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056f4:	2310      	movs	r3, #16
 80056f6:	e000      	b.n	80056fa <HAL_DMA_Abort_IT+0xfa>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4a43      	ldr	r2, [pc, #268]	; (8005808 <HAL_DMA_Abort_IT+0x208>)
 80056fc:	6053      	str	r3, [r2, #4]
 80056fe:	e057      	b.n	80057b0 <HAL_DMA_Abort_IT+0x1b0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a36      	ldr	r2, [pc, #216]	; (80057e0 <HAL_DMA_Abort_IT+0x1e0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d04f      	beq.n	80057aa <HAL_DMA_Abort_IT+0x1aa>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a35      	ldr	r2, [pc, #212]	; (80057e4 <HAL_DMA_Abort_IT+0x1e4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d048      	beq.n	80057a6 <HAL_DMA_Abort_IT+0x1a6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a33      	ldr	r2, [pc, #204]	; (80057e8 <HAL_DMA_Abort_IT+0x1e8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d040      	beq.n	80057a0 <HAL_DMA_Abort_IT+0x1a0>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a32      	ldr	r2, [pc, #200]	; (80057ec <HAL_DMA_Abort_IT+0x1ec>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d038      	beq.n	800579a <HAL_DMA_Abort_IT+0x19a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a30      	ldr	r2, [pc, #192]	; (80057f0 <HAL_DMA_Abort_IT+0x1f0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d030      	beq.n	8005794 <HAL_DMA_Abort_IT+0x194>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2f      	ldr	r2, [pc, #188]	; (80057f4 <HAL_DMA_Abort_IT+0x1f4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d028      	beq.n	800578e <HAL_DMA_Abort_IT+0x18e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a26      	ldr	r2, [pc, #152]	; (80057dc <HAL_DMA_Abort_IT+0x1dc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d020      	beq.n	8005788 <HAL_DMA_Abort_IT+0x188>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <HAL_DMA_Abort_IT+0x1f8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d019      	beq.n	8005784 <HAL_DMA_Abort_IT+0x184>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a29      	ldr	r2, [pc, #164]	; (80057fc <HAL_DMA_Abort_IT+0x1fc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d012      	beq.n	8005780 <HAL_DMA_Abort_IT+0x180>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a28      	ldr	r2, [pc, #160]	; (8005800 <HAL_DMA_Abort_IT+0x200>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00a      	beq.n	800577a <HAL_DMA_Abort_IT+0x17a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a26      	ldr	r2, [pc, #152]	; (8005804 <HAL_DMA_Abort_IT+0x204>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d102      	bne.n	8005774 <HAL_DMA_Abort_IT+0x174>
 800576e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005772:	e01b      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 8005774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005778:	e018      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 800577a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800577e:	e015      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 8005780:	2310      	movs	r3, #16
 8005782:	e013      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 8005784:	2301      	movs	r3, #1
 8005786:	e011      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 8005788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800578c:	e00e      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 800578e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005792:	e00b      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 8005794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005798:	e008      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 800579a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800579e:	e005      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 80057a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057a4:	e002      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 80057a6:	2310      	movs	r3, #16
 80057a8:	e000      	b.n	80057ac <HAL_DMA_Abort_IT+0x1ac>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_DMA_Abort_IT+0x20c>)
 80057ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
    } 
  }
  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40020080 	.word	0x40020080
 80057e0:	40020008 	.word	0x40020008
 80057e4:	4002001c 	.word	0x4002001c
 80057e8:	40020030 	.word	0x40020030
 80057ec:	40020044 	.word	0x40020044
 80057f0:	40020058 	.word	0x40020058
 80057f4:	4002006c 	.word	0x4002006c
 80057f8:	40020408 	.word	0x40020408
 80057fc:	4002041c 	.word	0x4002041c
 8005800:	40020430 	.word	0x40020430
 8005804:	40020444 	.word	0x40020444
 8005808:	40020400 	.word	0x40020400
 800580c:	40020000 	.word	0x40020000

08005810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	2204      	movs	r2, #4
 800582e:	409a      	lsls	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80f1 	beq.w	8005a1c <HAL_DMA_IRQHandler+0x20c>
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80eb 	beq.w	8005a1c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0204 	bic.w	r2, r2, #4
 8005862:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	4b5f      	ldr	r3, [pc, #380]	; (80059e8 <HAL_DMA_IRQHandler+0x1d8>)
 800586c:	429a      	cmp	r2, r3
 800586e:	d958      	bls.n	8005922 <HAL_DMA_IRQHandler+0x112>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5d      	ldr	r2, [pc, #372]	; (80059ec <HAL_DMA_IRQHandler+0x1dc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d04f      	beq.n	800591a <HAL_DMA_IRQHandler+0x10a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_DMA_IRQHandler+0x1e0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d048      	beq.n	8005916 <HAL_DMA_IRQHandler+0x106>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a5a      	ldr	r2, [pc, #360]	; (80059f4 <HAL_DMA_IRQHandler+0x1e4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d040      	beq.n	8005910 <HAL_DMA_IRQHandler+0x100>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a59      	ldr	r2, [pc, #356]	; (80059f8 <HAL_DMA_IRQHandler+0x1e8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d038      	beq.n	800590a <HAL_DMA_IRQHandler+0xfa>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a57      	ldr	r2, [pc, #348]	; (80059fc <HAL_DMA_IRQHandler+0x1ec>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d030      	beq.n	8005904 <HAL_DMA_IRQHandler+0xf4>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a56      	ldr	r2, [pc, #344]	; (8005a00 <HAL_DMA_IRQHandler+0x1f0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d028      	beq.n	80058fe <HAL_DMA_IRQHandler+0xee>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a4d      	ldr	r2, [pc, #308]	; (80059e8 <HAL_DMA_IRQHandler+0x1d8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d020      	beq.n	80058f8 <HAL_DMA_IRQHandler+0xe8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a52      	ldr	r2, [pc, #328]	; (8005a04 <HAL_DMA_IRQHandler+0x1f4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d019      	beq.n	80058f4 <HAL_DMA_IRQHandler+0xe4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a50      	ldr	r2, [pc, #320]	; (8005a08 <HAL_DMA_IRQHandler+0x1f8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d012      	beq.n	80058f0 <HAL_DMA_IRQHandler+0xe0>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a4f      	ldr	r2, [pc, #316]	; (8005a0c <HAL_DMA_IRQHandler+0x1fc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00a      	beq.n	80058ea <HAL_DMA_IRQHandler+0xda>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a4d      	ldr	r2, [pc, #308]	; (8005a10 <HAL_DMA_IRQHandler+0x200>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d102      	bne.n	80058e4 <HAL_DMA_IRQHandler+0xd4>
 80058de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058e2:	e01b      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 80058e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80058e8:	e018      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 80058ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ee:	e015      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 80058f0:	2340      	movs	r3, #64	; 0x40
 80058f2:	e013      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 80058f4:	2304      	movs	r3, #4
 80058f6:	e011      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 80058f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058fc:	e00e      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 80058fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005902:	e00b      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 8005904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005908:	e008      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 800590a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800590e:	e005      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 8005910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005914:	e002      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	e000      	b.n	800591c <HAL_DMA_IRQHandler+0x10c>
 800591a:	2304      	movs	r3, #4
 800591c:	4a3d      	ldr	r2, [pc, #244]	; (8005a14 <HAL_DMA_IRQHandler+0x204>)
 800591e:	6053      	str	r3, [r2, #4]
 8005920:	e057      	b.n	80059d2 <HAL_DMA_IRQHandler+0x1c2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a31      	ldr	r2, [pc, #196]	; (80059ec <HAL_DMA_IRQHandler+0x1dc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04f      	beq.n	80059cc <HAL_DMA_IRQHandler+0x1bc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2f      	ldr	r2, [pc, #188]	; (80059f0 <HAL_DMA_IRQHandler+0x1e0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d048      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x1b8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2e      	ldr	r2, [pc, #184]	; (80059f4 <HAL_DMA_IRQHandler+0x1e4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_IRQHandler+0x1b2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <HAL_DMA_IRQHandler+0x1e8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d038      	beq.n	80059bc <HAL_DMA_IRQHandler+0x1ac>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <HAL_DMA_IRQHandler+0x1ec>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d030      	beq.n	80059b6 <HAL_DMA_IRQHandler+0x1a6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a29      	ldr	r2, [pc, #164]	; (8005a00 <HAL_DMA_IRQHandler+0x1f0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d028      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x1a0>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a21      	ldr	r2, [pc, #132]	; (80059e8 <HAL_DMA_IRQHandler+0x1d8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d020      	beq.n	80059aa <HAL_DMA_IRQHandler+0x19a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a25      	ldr	r2, [pc, #148]	; (8005a04 <HAL_DMA_IRQHandler+0x1f4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d019      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x196>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <HAL_DMA_IRQHandler+0x1f8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d012      	beq.n	80059a2 <HAL_DMA_IRQHandler+0x192>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a22      	ldr	r2, [pc, #136]	; (8005a0c <HAL_DMA_IRQHandler+0x1fc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d00a      	beq.n	800599c <HAL_DMA_IRQHandler+0x18c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <HAL_DMA_IRQHandler+0x200>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d102      	bne.n	8005996 <HAL_DMA_IRQHandler+0x186>
 8005990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005994:	e01b      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 8005996:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800599a:	e018      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 800599c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a0:	e015      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059a2:	2340      	movs	r3, #64	; 0x40
 80059a4:	e013      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059a6:	2304      	movs	r3, #4
 80059a8:	e011      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059ae:	e00e      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059b4:	e00b      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80059ba:	e008      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059c0:	e005      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c6:	e002      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	e000      	b.n	80059ce <HAL_DMA_IRQHandler+0x1be>
 80059cc:	2304      	movs	r3, #4
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <HAL_DMA_IRQHandler+0x208>)
 80059d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8136 	beq.w	8005c48 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80059e4:	e130      	b.n	8005c48 <HAL_DMA_IRQHandler+0x438>
 80059e6:	bf00      	nop
 80059e8:	40020080 	.word	0x40020080
 80059ec:	40020008 	.word	0x40020008
 80059f0:	4002001c 	.word	0x4002001c
 80059f4:	40020030 	.word	0x40020030
 80059f8:	40020044 	.word	0x40020044
 80059fc:	40020058 	.word	0x40020058
 8005a00:	4002006c 	.word	0x4002006c
 8005a04:	40020408 	.word	0x40020408
 8005a08:	4002041c 	.word	0x4002041c
 8005a0c:	40020430 	.word	0x40020430
 8005a10:	40020444 	.word	0x40020444
 8005a14:	40020400 	.word	0x40020400
 8005a18:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	2202      	movs	r2, #2
 8005a22:	409a      	lsls	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80dd 	beq.w	8005be8 <HAL_DMA_IRQHandler+0x3d8>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80d7 	beq.w	8005be8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10b      	bne.n	8005a60 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 020a 	bic.w	r2, r2, #10
 8005a56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b7b      	ldr	r3, [pc, #492]	; (8005c54 <HAL_DMA_IRQHandler+0x444>)
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d958      	bls.n	8005b1e <HAL_DMA_IRQHandler+0x30e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a79      	ldr	r2, [pc, #484]	; (8005c58 <HAL_DMA_IRQHandler+0x448>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d04f      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x306>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a78      	ldr	r2, [pc, #480]	; (8005c5c <HAL_DMA_IRQHandler+0x44c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d048      	beq.n	8005b12 <HAL_DMA_IRQHandler+0x302>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a76      	ldr	r2, [pc, #472]	; (8005c60 <HAL_DMA_IRQHandler+0x450>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d040      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x2fc>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a75      	ldr	r2, [pc, #468]	; (8005c64 <HAL_DMA_IRQHandler+0x454>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d038      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x2f6>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a73      	ldr	r2, [pc, #460]	; (8005c68 <HAL_DMA_IRQHandler+0x458>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d030      	beq.n	8005b00 <HAL_DMA_IRQHandler+0x2f0>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a72      	ldr	r2, [pc, #456]	; (8005c6c <HAL_DMA_IRQHandler+0x45c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d028      	beq.n	8005afa <HAL_DMA_IRQHandler+0x2ea>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a69      	ldr	r2, [pc, #420]	; (8005c54 <HAL_DMA_IRQHandler+0x444>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d020      	beq.n	8005af4 <HAL_DMA_IRQHandler+0x2e4>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a6e      	ldr	r2, [pc, #440]	; (8005c70 <HAL_DMA_IRQHandler+0x460>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d019      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x2e0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a6c      	ldr	r2, [pc, #432]	; (8005c74 <HAL_DMA_IRQHandler+0x464>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d012      	beq.n	8005aec <HAL_DMA_IRQHandler+0x2dc>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a6b      	ldr	r2, [pc, #428]	; (8005c78 <HAL_DMA_IRQHandler+0x468>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00a      	beq.n	8005ae6 <HAL_DMA_IRQHandler+0x2d6>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a69      	ldr	r2, [pc, #420]	; (8005c7c <HAL_DMA_IRQHandler+0x46c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d102      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x2d0>
 8005ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ade:	e01b      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ae4:	e018      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aea:	e015      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005aec:	2320      	movs	r3, #32
 8005aee:	e013      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e011      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005af8:	e00e      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005afa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005afe:	e00b      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b04:	e008      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b0a:	e005      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b10:	e002      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005b12:	2320      	movs	r3, #32
 8005b14:	e000      	b.n	8005b18 <HAL_DMA_IRQHandler+0x308>
 8005b16:	2302      	movs	r3, #2
 8005b18:	4a59      	ldr	r2, [pc, #356]	; (8005c80 <HAL_DMA_IRQHandler+0x470>)
 8005b1a:	6053      	str	r3, [r2, #4]
 8005b1c:	e057      	b.n	8005bce <HAL_DMA_IRQHandler+0x3be>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4d      	ldr	r2, [pc, #308]	; (8005c58 <HAL_DMA_IRQHandler+0x448>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d04f      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x3b8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a4b      	ldr	r2, [pc, #300]	; (8005c5c <HAL_DMA_IRQHandler+0x44c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d048      	beq.n	8005bc4 <HAL_DMA_IRQHandler+0x3b4>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <HAL_DMA_IRQHandler+0x450>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d040      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3ae>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a48      	ldr	r2, [pc, #288]	; (8005c64 <HAL_DMA_IRQHandler+0x454>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d038      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x3a8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a47      	ldr	r2, [pc, #284]	; (8005c68 <HAL_DMA_IRQHandler+0x458>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d030      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x3a2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a45      	ldr	r2, [pc, #276]	; (8005c6c <HAL_DMA_IRQHandler+0x45c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d028      	beq.n	8005bac <HAL_DMA_IRQHandler+0x39c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a3d      	ldr	r2, [pc, #244]	; (8005c54 <HAL_DMA_IRQHandler+0x444>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d020      	beq.n	8005ba6 <HAL_DMA_IRQHandler+0x396>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a41      	ldr	r2, [pc, #260]	; (8005c70 <HAL_DMA_IRQHandler+0x460>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d019      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x392>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a40      	ldr	r2, [pc, #256]	; (8005c74 <HAL_DMA_IRQHandler+0x464>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d012      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x38e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a3e      	ldr	r2, [pc, #248]	; (8005c78 <HAL_DMA_IRQHandler+0x468>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00a      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x388>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a3d      	ldr	r2, [pc, #244]	; (8005c7c <HAL_DMA_IRQHandler+0x46c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d102      	bne.n	8005b92 <HAL_DMA_IRQHandler+0x382>
 8005b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b90:	e01b      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b96:	e018      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b9c:	e015      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005b9e:	2320      	movs	r3, #32
 8005ba0:	e013      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e011      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005baa:	e00e      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005bac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bb0:	e00b      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb6:	e008      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bbc:	e005      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bc2:	e002      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	e000      	b.n	8005bca <HAL_DMA_IRQHandler+0x3ba>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	4a2e      	ldr	r2, [pc, #184]	; (8005c84 <HAL_DMA_IRQHandler+0x474>)
 8005bcc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d034      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005be6:	e02f      	b.n	8005c48 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	2208      	movs	r2, #8
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d028      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x43a>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d023      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 020e 	bic.w	r2, r2, #14
 8005c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
    }
  }
  return;
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
}
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40020080 	.word	0x40020080
 8005c58:	40020008 	.word	0x40020008
 8005c5c:	4002001c 	.word	0x4002001c
 8005c60:	40020030 	.word	0x40020030
 8005c64:	40020044 	.word	0x40020044
 8005c68:	40020058 	.word	0x40020058
 8005c6c:	4002006c 	.word	0x4002006c
 8005c70:	40020408 	.word	0x40020408
 8005c74:	4002041c 	.word	0x4002041c
 8005c78:	40020430 	.word	0x40020430
 8005c7c:	40020444 	.word	0x40020444
 8005c80:	40020400 	.word	0x40020400
 8005c84:	40020000 	.word	0x40020000

08005c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d108      	bne.n	8005cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cc6:	e007      	b.n	8005cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b08b      	sub	sp, #44	; 0x2c
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf6:	e169      	b.n	8005fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	f040 8158 	bne.w	8005fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4a9a      	ldr	r2, [pc, #616]	; (8005f84 <HAL_GPIO_Init+0x2a0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d05e      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d20:	4a98      	ldr	r2, [pc, #608]	; (8005f84 <HAL_GPIO_Init+0x2a0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d875      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d26:	4a98      	ldr	r2, [pc, #608]	; (8005f88 <HAL_GPIO_Init+0x2a4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d058      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d2c:	4a96      	ldr	r2, [pc, #600]	; (8005f88 <HAL_GPIO_Init+0x2a4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d86f      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d32:	4a96      	ldr	r2, [pc, #600]	; (8005f8c <HAL_GPIO_Init+0x2a8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d052      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d38:	4a94      	ldr	r2, [pc, #592]	; (8005f8c <HAL_GPIO_Init+0x2a8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d869      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d3e:	4a94      	ldr	r2, [pc, #592]	; (8005f90 <HAL_GPIO_Init+0x2ac>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d04c      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d44:	4a92      	ldr	r2, [pc, #584]	; (8005f90 <HAL_GPIO_Init+0x2ac>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d863      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d4a:	4a92      	ldr	r2, [pc, #584]	; (8005f94 <HAL_GPIO_Init+0x2b0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d046      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d50:	4a90      	ldr	r2, [pc, #576]	; (8005f94 <HAL_GPIO_Init+0x2b0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d85d      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d56:	2b12      	cmp	r3, #18
 8005d58:	d82a      	bhi.n	8005db0 <HAL_GPIO_Init+0xcc>
 8005d5a:	2b12      	cmp	r3, #18
 8005d5c:	d859      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <HAL_GPIO_Init+0x80>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005ddf 	.word	0x08005ddf
 8005d68:	08005db9 	.word	0x08005db9
 8005d6c:	08005dcb 	.word	0x08005dcb
 8005d70:	08005e0d 	.word	0x08005e0d
 8005d74:	08005e13 	.word	0x08005e13
 8005d78:	08005e13 	.word	0x08005e13
 8005d7c:	08005e13 	.word	0x08005e13
 8005d80:	08005e13 	.word	0x08005e13
 8005d84:	08005e13 	.word	0x08005e13
 8005d88:	08005e13 	.word	0x08005e13
 8005d8c:	08005e13 	.word	0x08005e13
 8005d90:	08005e13 	.word	0x08005e13
 8005d94:	08005e13 	.word	0x08005e13
 8005d98:	08005e13 	.word	0x08005e13
 8005d9c:	08005e13 	.word	0x08005e13
 8005da0:	08005e13 	.word	0x08005e13
 8005da4:	08005e13 	.word	0x08005e13
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	4a79      	ldr	r2, [pc, #484]	; (8005f98 <HAL_GPIO_Init+0x2b4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005db6:	e02c      	b.n	8005e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	623b      	str	r3, [r7, #32]
          break;
 8005dbe:	e029      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	623b      	str	r3, [r7, #32]
          break;
 8005dc8:	e024      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	623b      	str	r3, [r7, #32]
          break;
 8005dd2:	e01f      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	623b      	str	r3, [r7, #32]
          break;
 8005ddc:	e01a      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005de6:	2304      	movs	r3, #4
 8005de8:	623b      	str	r3, [r7, #32]
          break;
 8005dea:	e013      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d105      	bne.n	8005e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005df4:	2308      	movs	r3, #8
 8005df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	611a      	str	r2, [r3, #16]
          break;
 8005dfe:	e009      	b.n	8005e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e00:	2308      	movs	r3, #8
 8005e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	615a      	str	r2, [r3, #20]
          break;
 8005e0a:	e003      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	623b      	str	r3, [r7, #32]
          break;
 8005e10:	e000      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          break;
 8005e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2bff      	cmp	r3, #255	; 0xff
 8005e18:	d801      	bhi.n	8005e1e <HAL_GPIO_Init+0x13a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	e001      	b.n	8005e22 <HAL_GPIO_Init+0x13e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2bff      	cmp	r3, #255	; 0xff
 8005e28:	d802      	bhi.n	8005e30 <HAL_GPIO_Init+0x14c>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	e002      	b.n	8005e36 <HAL_GPIO_Init+0x152>
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	3b08      	subs	r3, #8
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	6a39      	ldr	r1, [r7, #32]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	431a      	orrs	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80b1 	beq.w	8005fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005e64:	4b4d      	ldr	r3, [pc, #308]	; (8005f9c <HAL_GPIO_Init+0x2b8>)
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	4a4c      	ldr	r2, [pc, #304]	; (8005f9c <HAL_GPIO_Init+0x2b8>)
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	6193      	str	r3, [r2, #24]
 8005e70:	4b4a      	ldr	r3, [pc, #296]	; (8005f9c <HAL_GPIO_Init+0x2b8>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005e7c:	4a48      	ldr	r2, [pc, #288]	; (8005fa0 <HAL_GPIO_Init+0x2bc>)
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	089b      	lsrs	r3, r3, #2
 8005e82:	3302      	adds	r3, #2
 8005e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	220f      	movs	r2, #15
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <HAL_GPIO_Init+0x2c0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <HAL_GPIO_Init+0x1ec>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <HAL_GPIO_Init+0x2c4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00d      	beq.n	8005ecc <HAL_GPIO_Init+0x1e8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3e      	ldr	r2, [pc, #248]	; (8005fac <HAL_GPIO_Init+0x2c8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <HAL_GPIO_Init+0x1e4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3d      	ldr	r2, [pc, #244]	; (8005fb0 <HAL_GPIO_Init+0x2cc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d101      	bne.n	8005ec4 <HAL_GPIO_Init+0x1e0>
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e006      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	e004      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e002      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	f002 0203 	and.w	r2, r2, #3
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	4093      	lsls	r3, r2
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ee2:	492f      	ldr	r1, [pc, #188]	; (8005fa0 <HAL_GPIO_Init+0x2bc>)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3302      	adds	r3, #2
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005efc:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	492c      	ldr	r1, [pc, #176]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	e006      	b.n	8005f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	4928      	ldr	r1, [pc, #160]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	4922      	ldr	r1, [pc, #136]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	604b      	str	r3, [r1, #4]
 8005f30:	e006      	b.n	8005f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	491e      	ldr	r1, [pc, #120]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d006      	beq.n	8005f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005f4c:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	4918      	ldr	r1, [pc, #96]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	608b      	str	r3, [r1, #8]
 8005f58:	e006      	b.n	8005f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005f5a:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	4914      	ldr	r1, [pc, #80]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d021      	beq.n	8005fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	490e      	ldr	r1, [pc, #56]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60cb      	str	r3, [r1, #12]
 8005f80:	e021      	b.n	8005fc6 <HAL_GPIO_Init+0x2e2>
 8005f82:	bf00      	nop
 8005f84:	10320000 	.word	0x10320000
 8005f88:	10310000 	.word	0x10310000
 8005f8c:	10220000 	.word	0x10220000
 8005f90:	10210000 	.word	0x10210000
 8005f94:	10120000 	.word	0x10120000
 8005f98:	10110000 	.word	0x10110000
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40010800 	.word	0x40010800
 8005fa8:	40010c00 	.word	0x40010c00
 8005fac:	40011000 	.word	0x40011000
 8005fb0:	40011400 	.word	0x40011400
 8005fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_GPIO_Init+0x304>)
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	4909      	ldr	r1, [pc, #36]	; (8005fe8 <HAL_GPIO_Init+0x304>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	3301      	adds	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f47f ae8e 	bne.w	8005cf8 <HAL_GPIO_Init+0x14>
  }
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	372c      	adds	r7, #44	; 0x2c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	40010400 	.word	0x40010400

08005fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	887b      	ldrh	r3, [r7, #2]
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	e001      	b.n	800600e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	807b      	strh	r3, [r7, #2]
 8006026:	4613      	mov	r3, r2
 8006028:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800602a:	787b      	ldrb	r3, [r7, #1]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006030:	887a      	ldrh	r2, [r7, #2]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006036:	e003      	b.n	8006040 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006038:	887b      	ldrh	r3, [r7, #2]
 800603a:	041a      	lsls	r2, r3, #16
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	611a      	str	r2, [r3, #16]
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800604a:	b480      	push	{r7}
 800604c:	b085      	sub	sp, #20
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800605c:	887a      	ldrh	r2, [r7, #2]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4013      	ands	r3, r2
 8006062:	041a      	lsls	r2, r3, #16
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	43d9      	mvns	r1, r3
 8006068:	887b      	ldrh	r3, [r7, #2]
 800606a:	400b      	ands	r3, r1
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	611a      	str	r2, [r3, #16]
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	4013      	ands	r3, r2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d006      	beq.n	80060a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006092:	4a05      	ldr	r2, [pc, #20]	; (80060a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fb fa3c 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40010400 	.word	0x40010400

080060ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e304      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8087 	beq.w	80061da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060cc:	4b92      	ldr	r3, [pc, #584]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f003 030c 	and.w	r3, r3, #12
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d00c      	beq.n	80060f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060d8:	4b8f      	ldr	r3, [pc, #572]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d112      	bne.n	800610a <HAL_RCC_OscConfig+0x5e>
 80060e4:	4b8c      	ldr	r3, [pc, #560]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d10b      	bne.n	800610a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060f2:	4b89      	ldr	r3, [pc, #548]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d06c      	beq.n	80061d8 <HAL_RCC_OscConfig+0x12c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d168      	bne.n	80061d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e2de      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006112:	d106      	bne.n	8006122 <HAL_RCC_OscConfig+0x76>
 8006114:	4b80      	ldr	r3, [pc, #512]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a7f      	ldr	r2, [pc, #508]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800611a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	e02e      	b.n	8006180 <HAL_RCC_OscConfig+0xd4>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10c      	bne.n	8006144 <HAL_RCC_OscConfig+0x98>
 800612a:	4b7b      	ldr	r3, [pc, #492]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a7a      	ldr	r2, [pc, #488]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4b78      	ldr	r3, [pc, #480]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a77      	ldr	r2, [pc, #476]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800613c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e01d      	b.n	8006180 <HAL_RCC_OscConfig+0xd4>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800614c:	d10c      	bne.n	8006168 <HAL_RCC_OscConfig+0xbc>
 800614e:	4b72      	ldr	r3, [pc, #456]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a71      	ldr	r2, [pc, #452]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	4b6f      	ldr	r3, [pc, #444]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6e      	ldr	r2, [pc, #440]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	e00b      	b.n	8006180 <HAL_RCC_OscConfig+0xd4>
 8006168:	4b6b      	ldr	r3, [pc, #428]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a6a      	ldr	r2, [pc, #424]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800616e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4b68      	ldr	r3, [pc, #416]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a67      	ldr	r2, [pc, #412]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800617a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800617e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d013      	beq.n	80061b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006188:	f7fe f9a4 	bl	80044d4 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006190:	f7fe f9a0 	bl	80044d4 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b64      	cmp	r3, #100	; 0x64
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e292      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061a2:	4b5d      	ldr	r3, [pc, #372]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0xe4>
 80061ae:	e014      	b.n	80061da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b0:	f7fe f990 	bl	80044d4 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b8:	f7fe f98c 	bl	80044d4 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	; 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e27e      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ca:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x10c>
 80061d6:	e000      	b.n	80061da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d063      	beq.n	80062ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061f2:	4b49      	ldr	r3, [pc, #292]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d11c      	bne.n	8006238 <HAL_RCC_OscConfig+0x18c>
 80061fe:	4b46      	ldr	r3, [pc, #280]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d116      	bne.n	8006238 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800620a:	4b43      	ldr	r3, [pc, #268]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_RCC_OscConfig+0x176>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d001      	beq.n	8006222 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e252      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006222:	4b3d      	ldr	r3, [pc, #244]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4939      	ldr	r1, [pc, #228]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006236:	e03a      	b.n	80062ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006240:	4b36      	ldr	r3, [pc, #216]	; (800631c <HAL_RCC_OscConfig+0x270>)
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006246:	f7fe f945 	bl	80044d4 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800624e:	f7fe f941 	bl	80044d4 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e233      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006260:	4b2d      	ldr	r3, [pc, #180]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626c:	4b2a      	ldr	r3, [pc, #168]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	00db      	lsls	r3, r3, #3
 800627a:	4927      	ldr	r1, [pc, #156]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 800627c:	4313      	orrs	r3, r2
 800627e:	600b      	str	r3, [r1, #0]
 8006280:	e015      	b.n	80062ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006282:	4b26      	ldr	r3, [pc, #152]	; (800631c <HAL_RCC_OscConfig+0x270>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006288:	f7fe f924 	bl	80044d4 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006290:	f7fe f920 	bl	80044d4 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e212      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d03a      	beq.n	8006330 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d019      	beq.n	80062f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c2:	4b17      	ldr	r3, [pc, #92]	; (8006320 <HAL_RCC_OscConfig+0x274>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c8:	f7fe f904 	bl	80044d4 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d0:	f7fe f900 	bl	80044d4 <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e1f2      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_RCC_OscConfig+0x26c>)
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062ee:	2001      	movs	r0, #1
 80062f0:	f000 fc20 	bl	8006b34 <RCC_Delay>
 80062f4:	e01c      	b.n	8006330 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f6:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <HAL_RCC_OscConfig+0x274>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fc:	f7fe f8ea 	bl	80044d4 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006302:	e00f      	b.n	8006324 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006304:	f7fe f8e6 	bl	80044d4 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d908      	bls.n	8006324 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e1d8      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
 8006316:	bf00      	nop
 8006318:	40021000 	.word	0x40021000
 800631c:	42420000 	.word	0x42420000
 8006320:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006324:	4b9b      	ldr	r3, [pc, #620]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e9      	bne.n	8006304 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 80a6 	beq.w	800648a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800633e:	2300      	movs	r3, #0
 8006340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006342:	4b94      	ldr	r3, [pc, #592]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10d      	bne.n	800636a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800634e:	4b91      	ldr	r3, [pc, #580]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	4a90      	ldr	r2, [pc, #576]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006358:	61d3      	str	r3, [r2, #28]
 800635a:	4b8e      	ldr	r3, [pc, #568]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636a:	4b8b      	ldr	r3, [pc, #556]	; (8006598 <HAL_RCC_OscConfig+0x4ec>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d118      	bne.n	80063a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006376:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_OscConfig+0x4ec>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a87      	ldr	r2, [pc, #540]	; (8006598 <HAL_RCC_OscConfig+0x4ec>)
 800637c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006382:	f7fe f8a7 	bl	80044d4 <HAL_GetTick>
 8006386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006388:	e008      	b.n	800639c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800638a:	f7fe f8a3 	bl	80044d4 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b64      	cmp	r3, #100	; 0x64
 8006396:	d901      	bls.n	800639c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	e195      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800639c:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_OscConfig+0x4ec>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0f0      	beq.n	800638a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d106      	bne.n	80063be <HAL_RCC_OscConfig+0x312>
 80063b0:	4b78      	ldr	r3, [pc, #480]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	4a77      	ldr	r2, [pc, #476]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	6213      	str	r3, [r2, #32]
 80063bc:	e02d      	b.n	800641a <HAL_RCC_OscConfig+0x36e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x334>
 80063c6:	4b73      	ldr	r3, [pc, #460]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	4a72      	ldr	r2, [pc, #456]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	6213      	str	r3, [r2, #32]
 80063d2:	4b70      	ldr	r3, [pc, #448]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	4a6f      	ldr	r2, [pc, #444]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063d8:	f023 0304 	bic.w	r3, r3, #4
 80063dc:	6213      	str	r3, [r2, #32]
 80063de:	e01c      	b.n	800641a <HAL_RCC_OscConfig+0x36e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	d10c      	bne.n	8006402 <HAL_RCC_OscConfig+0x356>
 80063e8:	4b6a      	ldr	r3, [pc, #424]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	4a69      	ldr	r2, [pc, #420]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	6213      	str	r3, [r2, #32]
 80063f4:	4b67      	ldr	r3, [pc, #412]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	4a66      	ldr	r2, [pc, #408]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	6213      	str	r3, [r2, #32]
 8006400:	e00b      	b.n	800641a <HAL_RCC_OscConfig+0x36e>
 8006402:	4b64      	ldr	r3, [pc, #400]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	4a63      	ldr	r2, [pc, #396]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	6213      	str	r3, [r2, #32]
 800640e:	4b61      	ldr	r3, [pc, #388]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	4a60      	ldr	r2, [pc, #384]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006414:	f023 0304 	bic.w	r3, r3, #4
 8006418:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d015      	beq.n	800644e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006422:	f7fe f857 	bl	80044d4 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006428:	e00a      	b.n	8006440 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800642a:	f7fe f853 	bl	80044d4 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	f241 3288 	movw	r2, #5000	; 0x1388
 8006438:	4293      	cmp	r3, r2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e143      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006440:	4b54      	ldr	r3, [pc, #336]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0ee      	beq.n	800642a <HAL_RCC_OscConfig+0x37e>
 800644c:	e014      	b.n	8006478 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800644e:	f7fe f841 	bl	80044d4 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006454:	e00a      	b.n	800646c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006456:	f7fe f83d 	bl	80044d4 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	f241 3288 	movw	r2, #5000	; 0x1388
 8006464:	4293      	cmp	r3, r2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e12d      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800646c:	4b49      	ldr	r3, [pc, #292]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1ee      	bne.n	8006456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647e:	4b45      	ldr	r3, [pc, #276]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4a44      	ldr	r2, [pc, #272]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006488:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 808c 	beq.w	80065ac <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8006494:	4b3f      	ldr	r3, [pc, #252]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d10e      	bne.n	80064c0 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80064a2:	4b3c      	ldr	r3, [pc, #240]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80064aa:	2b08      	cmp	r3, #8
 80064ac:	d108      	bne.n	80064c0 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80064ae:	4b39      	ldr	r3, [pc, #228]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ba:	d101      	bne.n	80064c0 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e103      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d14e      	bne.n	8006566 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80064d4:	4b2f      	ldr	r3, [pc, #188]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d001      	beq.n	80064e8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0ef      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80064e8:	4b2c      	ldr	r3, [pc, #176]	; (800659c <HAL_RCC_OscConfig+0x4f0>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ee:	f7fd fff1 	bl	80044d4 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80064f4:	e008      	b.n	8006508 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064f6:	f7fd ffed 	bl	80044d4 <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b64      	cmp	r3, #100	; 0x64
 8006502:	d901      	bls.n	8006508 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e0df      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8006508:	4b22      	ldr	r3, [pc, #136]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f0      	bne.n	80064f6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8006514:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006520:	491c      	ldr	r1, [pc, #112]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006522:	4313      	orrs	r3, r2
 8006524:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8006526:	4b1b      	ldr	r3, [pc, #108]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	4918      	ldr	r1, [pc, #96]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006534:	4313      	orrs	r3, r2
 8006536:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8006538:	4b18      	ldr	r3, [pc, #96]	; (800659c <HAL_RCC_OscConfig+0x4f0>)
 800653a:	2201      	movs	r2, #1
 800653c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653e:	f7fd ffc9 	bl	80044d4 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006544:	e008      	b.n	8006558 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006546:	f7fd ffc5 	bl	80044d4 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b64      	cmp	r3, #100	; 0x64
 8006552:	d901      	bls.n	8006558 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e0b7      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8006558:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0f0      	beq.n	8006546 <HAL_RCC_OscConfig+0x49a>
 8006564:	e022      	b.n	80065ac <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8006566:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <HAL_RCC_OscConfig+0x4e8>)
 800656c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8006572:	4b0a      	ldr	r3, [pc, #40]	; (800659c <HAL_RCC_OscConfig+0x4f0>)
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006578:	f7fd ffac 	bl	80044d4 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800657e:	e00f      	b.n	80065a0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006580:	f7fd ffa8 	bl	80044d4 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b64      	cmp	r3, #100	; 0x64
 800658c:	d908      	bls.n	80065a0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e09a      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
 8006592:	bf00      	nop
 8006594:	40021000 	.word	0x40021000
 8006598:	40007000 	.word	0x40007000
 800659c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e9      	bne.n	8006580 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8088 	beq.w	80066c6 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b6:	4b46      	ldr	r3, [pc, #280]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 030c 	and.w	r3, r3, #12
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d068      	beq.n	8006694 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d14d      	bne.n	8006666 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ca:	4b42      	ldr	r3, [pc, #264]	; (80066d4 <HAL_RCC_OscConfig+0x628>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fd ff80 	bl	80044d4 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d8:	f7fd ff7c 	bl	80044d4 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e06e      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fe:	d10f      	bne.n	8006620 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8006600:	4b33      	ldr	r3, [pc, #204]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 800660a:	4313      	orrs	r3, r2
 800660c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f023 020f 	bic.w	r2, r3, #15
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	492d      	ldr	r1, [pc, #180]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 800661c:	4313      	orrs	r3, r2
 800661e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	430b      	orrs	r3, r1
 8006632:	4927      	ldr	r1, [pc, #156]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006638:	4b26      	ldr	r3, [pc, #152]	; (80066d4 <HAL_RCC_OscConfig+0x628>)
 800663a:	2201      	movs	r2, #1
 800663c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663e:	f7fd ff49 	bl	80044d4 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006646:	f7fd ff45 	bl	80044d4 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e037      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0f0      	beq.n	8006646 <HAL_RCC_OscConfig+0x59a>
 8006664:	e02f      	b.n	80066c6 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006666:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <HAL_RCC_OscConfig+0x628>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fd ff32 	bl	80044d4 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006674:	f7fd ff2e 	bl	80044d4 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b02      	cmp	r3, #2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e020      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f0      	bne.n	8006674 <HAL_RCC_OscConfig+0x5c8>
 8006692:	e018      	b.n	80066c6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e013      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <HAL_RCC_OscConfig+0x624>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d106      	bne.n	80066c2 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	42420060 	.word	0x42420060

080066d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0d0      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066ec:	4b6a      	ldr	r3, [pc, #424]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d910      	bls.n	800671c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b67      	ldr	r3, [pc, #412]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 0207 	bic.w	r2, r3, #7
 8006702:	4965      	ldr	r1, [pc, #404]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b63      	ldr	r3, [pc, #396]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d001      	beq.n	800671c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0b8      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b00      	cmp	r3, #0
 8006726:	d020      	beq.n	800676a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006734:	4b59      	ldr	r3, [pc, #356]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a58      	ldr	r2, [pc, #352]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 800673a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800673e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800674c:	4b53      	ldr	r3, [pc, #332]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4a52      	ldr	r2, [pc, #328]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006756:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006758:	4b50      	ldr	r3, [pc, #320]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	494d      	ldr	r1, [pc, #308]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006766:	4313      	orrs	r3, r2
 8006768:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d040      	beq.n	80067f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677e:	4b47      	ldr	r3, [pc, #284]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d115      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e07f      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006796:	4b41      	ldr	r3, [pc, #260]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d109      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e073      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a6:	4b3d      	ldr	r3, [pc, #244]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e06b      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f023 0203 	bic.w	r2, r3, #3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4936      	ldr	r1, [pc, #216]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067c8:	f7fd fe84 	bl	80044d4 <HAL_GetTick>
 80067cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	e00a      	b.n	80067e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067d0:	f7fd fe80 	bl	80044d4 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	f241 3288 	movw	r2, #5000	; 0x1388
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e053      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	4b2d      	ldr	r3, [pc, #180]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f003 020c 	and.w	r2, r3, #12
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1eb      	bne.n	80067d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067f8:	4b27      	ldr	r3, [pc, #156]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d210      	bcs.n	8006828 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f023 0207 	bic.w	r2, r3, #7
 800680e:	4922      	ldr	r1, [pc, #136]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	4313      	orrs	r3, r2
 8006814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006816:	4b20      	ldr	r3, [pc, #128]	; (8006898 <HAL_RCC_ClockConfig+0x1c0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d001      	beq.n	8006828 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e032      	b.n	800688e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d008      	beq.n	8006846 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006834:	4b19      	ldr	r3, [pc, #100]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	4916      	ldr	r1, [pc, #88]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006842:	4313      	orrs	r3, r2
 8006844:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b00      	cmp	r3, #0
 8006850:	d009      	beq.n	8006866 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	490e      	ldr	r1, [pc, #56]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 8006862:	4313      	orrs	r3, r2
 8006864:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006866:	f000 f821 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_RCC_ClockConfig+0x1c4>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	091b      	lsrs	r3, r3, #4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	490a      	ldr	r1, [pc, #40]	; (80068a0 <HAL_RCC_ClockConfig+0x1c8>)
 8006878:	5ccb      	ldrb	r3, [r1, r3]
 800687a:	fa22 f303 	lsr.w	r3, r2, r3
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <HAL_RCC_ClockConfig+0x1cc>)
 8006880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_RCC_ClockConfig+0x1d0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7fd fde2 	bl	8004450 <HAL_InitTick>

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40022000 	.word	0x40022000
 800689c:	40021000 	.word	0x40021000
 80068a0:	08007fcc 	.word	0x08007fcc
 80068a4:	2000001c 	.word	0x2000001c
 80068a8:	200002e0 	.word	0x200002e0

080068ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	b09d      	sub	sp, #116	; 0x74
 80068b2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80068b4:	4b81      	ldr	r3, [pc, #516]	; (8006abc <HAL_RCC_GetSysClockFreq+0x210>)
 80068b6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80068ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068bc:	c407      	stmia	r4!, {r0, r1, r2}
 80068be:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80068c0:	4b7f      	ldr	r3, [pc, #508]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x214>)
 80068c2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80068c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	667b      	str	r3, [r7, #100]	; 0x64
 80068d0:	2300      	movs	r3, #0
 80068d2:	663b      	str	r3, [r7, #96]	; 0x60
 80068d4:	2300      	movs	r3, #0
 80068d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068d8:	2300      	movs	r3, #0
 80068da:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t sysclockfreq = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	66bb      	str	r3, [r7, #104]	; 0x68
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068e4:	2300      	movs	r3, #0
 80068e6:	657b      	str	r3, [r7, #84]	; 0x54
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068e8:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x218>)
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	667b      	str	r3, [r7, #100]	; 0x64

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	d002      	beq.n	80068fe <HAL_RCC_GetSysClockFreq+0x52>
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d003      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x58>
 80068fc:	e0d4      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x1fc>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068fe:	4b72      	ldr	r3, [pc, #456]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006900:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006902:	e0d4      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006906:	0c9b      	lsrs	r3, r3, #18
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	3340      	adds	r3, #64	; 0x40
 800690e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006912:	4413      	add	r3, r2
 8006914:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8006918:	65fb      	str	r3, [r7, #92]	; 0x5c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800691a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800691c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80b9 	beq.w	8006a98 <HAL_RCC_GetSysClockFreq+0x1ec>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8006926:	4b67      	ldr	r3, [pc, #412]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x218>)
 8006928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	3340      	adds	r3, #64	; 0x40
 8006930:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006934:	4413      	add	r3, r2
 8006936:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800693a:	663b      	str	r3, [r7, #96]	; 0x60
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800693c:	4b61      	ldr	r3, [pc, #388]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x218>)
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8095 	beq.w	8006a74 <HAL_RCC_GetSysClockFreq+0x1c8>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800694a:	4b5e      	ldr	r3, [pc, #376]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x218>)
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	3301      	adds	r3, #1
 8006956:	65bb      	str	r3, [r7, #88]	; 0x58
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8006958:	4b5a      	ldr	r3, [pc, #360]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x218>)
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	0a1b      	lsrs	r3, r3, #8
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	3302      	adds	r3, #2
 8006964:	657b      	str	r3, [r7, #84]	; 0x54
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8006966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006968:	2200      	movs	r2, #0
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	61fa      	str	r2, [r7, #28]
 800696e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006970:	2200      	movs	r2, #0
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
 8006974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006976:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800697a:	4622      	mov	r2, r4
 800697c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006980:	4684      	mov	ip, r0
 8006982:	fb0c f202 	mul.w	r2, ip, r2
 8006986:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800698a:	468c      	mov	ip, r1
 800698c:	4618      	mov	r0, r3
 800698e:	4621      	mov	r1, r4
 8006990:	4603      	mov	r3, r0
 8006992:	fb03 f30c 	mul.w	r3, r3, ip
 8006996:	4413      	add	r3, r2
 8006998:	4602      	mov	r2, r0
 800699a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800699c:	fba2 8901 	umull	r8, r9, r2, r1
 80069a0:	444b      	add	r3, r9
 80069a2:	4699      	mov	r9, r3
 80069a4:	4642      	mov	r2, r8
 80069a6:	464b      	mov	r3, r9
 80069a8:	f04f 0000 	mov.w	r0, #0
 80069ac:	f04f 0100 	mov.w	r1, #0
 80069b0:	0159      	lsls	r1, r3, #5
 80069b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069b6:	0150      	lsls	r0, r2, #5
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	ebb2 0508 	subs.w	r5, r2, r8
 80069c0:	eb63 0609 	sbc.w	r6, r3, r9
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	01b3      	lsls	r3, r6, #6
 80069ce:	ea43 6395 	orr.w	r3, r3, r5, lsr #26
 80069d2:	01aa      	lsls	r2, r5, #6
 80069d4:	ebb2 0a05 	subs.w	sl, r2, r5
 80069d8:	eb63 0b06 	sbc.w	fp, r3, r6
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069f0:	4692      	mov	sl, r2
 80069f2:	469b      	mov	fp, r3
 80069f4:	eb1a 0308 	adds.w	r3, sl, r8
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	eb4b 0309 	adc.w	r3, fp, r9
 80069fe:	607b      	str	r3, [r7, #4]
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	024b      	lsls	r3, r1, #9
 8006a10:	4620      	mov	r0, r4
 8006a12:	4629      	mov	r1, r5
 8006a14:	4604      	mov	r4, r0
 8006a16:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	024a      	lsls	r2, r1, #9
 8006a1e:	4610      	mov	r0, r2
 8006a20:	4619      	mov	r1, r3
 8006a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a24:	2200      	movs	r2, #0
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	617a      	str	r2, [r7, #20]
 8006a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	60fa      	str	r2, [r7, #12]
 8006a32:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006a36:	4622      	mov	r2, r4
 8006a38:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8006a3c:	4645      	mov	r5, r8
 8006a3e:	fb05 f202 	mul.w	r2, r5, r2
 8006a42:	464e      	mov	r6, r9
 8006a44:	4625      	mov	r5, r4
 8006a46:	461c      	mov	r4, r3
 8006a48:	4623      	mov	r3, r4
 8006a4a:	fb03 f306 	mul.w	r3, r3, r6
 8006a4e:	4413      	add	r3, r2
 8006a50:	4622      	mov	r2, r4
 8006a52:	4644      	mov	r4, r8
 8006a54:	fba2 2404 	umull	r2, r4, r2, r4
 8006a58:	627c      	str	r4, [r7, #36]	; 0x24
 8006a5a:	623a      	str	r2, [r7, #32]
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	4413      	add	r3, r2
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
 8006a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a66:	f7f9 fbdd 	bl	8000224 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4613      	mov	r3, r2
 8006a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a72:	e007      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x1d8>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8006a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a76:	4a14      	ldr	r2, [pc, #80]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006a78:	fb03 f202 	mul.w	r2, r3, r2
 8006a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a82:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8006a84:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d108      	bne.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x1f6>
        {
          pllclk = pllclk / 2;
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	085b      	lsrs	r3, r3, #1
 8006a94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a96:	e004      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x1f6>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <HAL_RCC_GetSysClockFreq+0x220>)
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
      sysclockfreq = pllclk;
 8006aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa4:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x202>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x21c>)
 8006aaa:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3774      	adds	r7, #116	; 0x74
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	bf00      	nop
 8006abc:	08007fac 	.word	0x08007fac
 8006ac0:	08007fbc 	.word	0x08007fbc
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	007a1200 	.word	0x007a1200
 8006acc:	003d0900 	.word	0x003d0900

08006ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	2000001c 	.word	0x2000001c

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ae8:	f7ff fff2 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	; (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40021000 	.word	0x40021000
 8006b08:	08007fdc 	.word	0x08007fdc

08006b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b10:	f7ff ffde 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b14:	4602      	mov	r2, r0
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	0adb      	lsrs	r3, r3, #11
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	4903      	ldr	r1, [pc, #12]	; (8006b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b22:	5ccb      	ldrb	r3, [r1, r3]
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	08007fdc 	.word	0x08007fdc

08006b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <RCC_Delay+0x34>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <RCC_Delay+0x38>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	0a5b      	lsrs	r3, r3, #9
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b50:	bf00      	nop
  }
  while (Delay --);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1e5a      	subs	r2, r3, #1
 8006b56:	60fa      	str	r2, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f9      	bne.n	8006b50 <RCC_Delay+0x1c>
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr
 8006b68:	2000001c 	.word	0x2000001c
 8006b6c:	10624dd3 	.word	0x10624dd3

08006b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e041      	b.n	8006c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fc f8e8 	bl	8002d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3304      	adds	r3, #4
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f000 fa78 	bl	80070a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d001      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e03f      	b.n	8006ca8 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0201 	orr.w	r2, r2, #1
 8006c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x62>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d00e      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x62>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_TIM_Base_Start_IT+0xa8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x62>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <HAL_TIM_Base_Start_IT+0xac>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_TIM_Base_Start_IT+0x62>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d111      	bne.n	8006c96 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b06      	cmp	r3, #6
 8006c82:	d010      	beq.n	8006ca6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c94:	e007      	b.n	8006ca6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f042 0201 	orr.w	r2, r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	40012c00 	.word	0x40012c00
 8006cb8:	40000400 	.word	0x40000400
 8006cbc:	40000800 	.word	0x40000800
 8006cc0:	40000c00 	.word	0x40000c00

08006cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d122      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d11b      	bne.n	8006d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f06f 0202 	mvn.w	r2, #2
 8006cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9b1 	bl	800706e <HAL_TIM_IC_CaptureCallback>
 8006d0c:	e005      	b.n	8006d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9a4 	bl	800705c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9b3 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d122      	bne.n	8006d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d11b      	bne.n	8006d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f06f 0204 	mvn.w	r2, #4
 8006d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f987 	bl	800706e <HAL_TIM_IC_CaptureCallback>
 8006d60:	e005      	b.n	8006d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f97a 	bl	800705c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f989 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b08      	cmp	r3, #8
 8006d80:	d122      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d11b      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0208 	mvn.w	r2, #8
 8006d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2204      	movs	r2, #4
 8006d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f95d 	bl	800706e <HAL_TIM_IC_CaptureCallback>
 8006db4:	e005      	b.n	8006dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f950 	bl	800705c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f95f 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d122      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f003 0310 	and.w	r3, r3, #16
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d11b      	bne.n	8006e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f06f 0210 	mvn.w	r2, #16
 8006dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2208      	movs	r2, #8
 8006df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f933 	bl	800706e <HAL_TIM_IC_CaptureCallback>
 8006e08:	e005      	b.n	8006e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f926 	bl	800705c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f935 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d10e      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d107      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0201 	mvn.w	r2, #1
 8006e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fa fb7c 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e52:	2b80      	cmp	r3, #128	; 0x80
 8006e54:	d10e      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e60:	2b80      	cmp	r3, #128	; 0x80
 8006e62:	d107      	bne.n	8006e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa89 	bl	8007386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7e:	2b40      	cmp	r3, #64	; 0x40
 8006e80:	d10e      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d107      	bne.n	8006ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8f9 	bl	8007092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d10e      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d107      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0220 	mvn.w	r2, #32
 8006ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fa54 	bl	8007374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIM_ConfigClockSource+0x18>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e0b3      	b.n	8007054 <HAL_TIM_ConfigClockSource+0x180>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f24:	d03e      	beq.n	8006fa4 <HAL_TIM_ConfigClockSource+0xd0>
 8006f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2a:	f200 8087 	bhi.w	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	f000 8085 	beq.w	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3a:	d87f      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f3c:	2b70      	cmp	r3, #112	; 0x70
 8006f3e:	d01a      	beq.n	8006f76 <HAL_TIM_ConfigClockSource+0xa2>
 8006f40:	2b70      	cmp	r3, #112	; 0x70
 8006f42:	d87b      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f44:	2b60      	cmp	r3, #96	; 0x60
 8006f46:	d050      	beq.n	8006fea <HAL_TIM_ConfigClockSource+0x116>
 8006f48:	2b60      	cmp	r3, #96	; 0x60
 8006f4a:	d877      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f4c:	2b50      	cmp	r3, #80	; 0x50
 8006f4e:	d03c      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0xf6>
 8006f50:	2b50      	cmp	r3, #80	; 0x50
 8006f52:	d873      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f54:	2b40      	cmp	r3, #64	; 0x40
 8006f56:	d058      	beq.n	800700a <HAL_TIM_ConfigClockSource+0x136>
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	d86f      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f5c:	2b30      	cmp	r3, #48	; 0x30
 8006f5e:	d064      	beq.n	800702a <HAL_TIM_ConfigClockSource+0x156>
 8006f60:	2b30      	cmp	r3, #48	; 0x30
 8006f62:	d86b      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d060      	beq.n	800702a <HAL_TIM_ConfigClockSource+0x156>
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d867      	bhi.n	800703c <HAL_TIM_ConfigClockSource+0x168>
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d05c      	beq.n	800702a <HAL_TIM_ConfigClockSource+0x156>
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d05a      	beq.n	800702a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f74:	e062      	b.n	800703c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	6899      	ldr	r1, [r3, #8]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f000 f970 	bl	800726a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	609a      	str	r2, [r3, #8]
      break;
 8006fa2:	e04e      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6818      	ldr	r0, [r3, #0]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	6899      	ldr	r1, [r3, #8]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f000 f959 	bl	800726a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fc6:	609a      	str	r2, [r3, #8]
      break;
 8006fc8:	e03b      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	6859      	ldr	r1, [r3, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f000 f8d0 	bl	800717c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2150      	movs	r1, #80	; 0x50
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 f927 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8006fe8:	e02b      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6818      	ldr	r0, [r3, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	6859      	ldr	r1, [r3, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f000 f8ee 	bl	80071d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2160      	movs	r1, #96	; 0x60
 8007002:	4618      	mov	r0, r3
 8007004:	f000 f917 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8007008:	e01b      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6859      	ldr	r1, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	461a      	mov	r2, r3
 8007018:	f000 f8b0 	bl	800717c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2140      	movs	r1, #64	; 0x40
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f907 	bl	8007236 <TIM_ITRx_SetConfig>
      break;
 8007028:	e00b      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f000 f8fe 	bl	8007236 <TIM_ITRx_SetConfig>
        break;
 800703a:	e002      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007040:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr

08007080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr

08007092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a2d      	ldr	r2, [pc, #180]	; (800716c <TIM_Base_SetConfig+0xc8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00f      	beq.n	80070dc <TIM_Base_SetConfig+0x38>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d00b      	beq.n	80070dc <TIM_Base_SetConfig+0x38>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a2a      	ldr	r2, [pc, #168]	; (8007170 <TIM_Base_SetConfig+0xcc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d007      	beq.n	80070dc <TIM_Base_SetConfig+0x38>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a29      	ldr	r2, [pc, #164]	; (8007174 <TIM_Base_SetConfig+0xd0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_Base_SetConfig+0x38>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a28      	ldr	r2, [pc, #160]	; (8007178 <TIM_Base_SetConfig+0xd4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d108      	bne.n	80070ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1e      	ldr	r2, [pc, #120]	; (800716c <TIM_Base_SetConfig+0xc8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00f      	beq.n	8007116 <TIM_Base_SetConfig+0x72>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fc:	d00b      	beq.n	8007116 <TIM_Base_SetConfig+0x72>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <TIM_Base_SetConfig+0xcc>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <TIM_Base_SetConfig+0x72>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <TIM_Base_SetConfig+0xd0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d003      	beq.n	8007116 <TIM_Base_SetConfig+0x72>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a19      	ldr	r2, [pc, #100]	; (8007178 <TIM_Base_SetConfig+0xd4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d108      	bne.n	8007128 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a07      	ldr	r2, [pc, #28]	; (800716c <TIM_Base_SetConfig+0xc8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d103      	bne.n	800715c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	615a      	str	r2, [r3, #20]
}
 8007162:	bf00      	nop
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00

0800717c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f023 0201 	bic.w	r2, r3, #1
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	011b      	lsls	r3, r3, #4
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 030a 	bic.w	r3, r3, #10
 80071b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	f023 0210 	bic.w	r2, r3, #16
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007202:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	031b      	lsls	r3, r3, #12
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4313      	orrs	r3, r2
 800720c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007214:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	011b      	lsls	r3, r3, #4
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	621a      	str	r2, [r3, #32]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	f043 0307 	orr.w	r3, r3, #7
 8007258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	609a      	str	r2, [r3, #8]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800726a:	b480      	push	{r7}
 800726c:	b087      	sub	sp, #28
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007284:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	021a      	lsls	r2, r3, #8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	431a      	orrs	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4313      	orrs	r3, r2
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	609a      	str	r2, [r3, #8]
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072bc:	2302      	movs	r3, #2
 80072be:	e04b      	b.n	8007358 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a19      	ldr	r2, [pc, #100]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730c:	d00e      	beq.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d009      	beq.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a13      	ldr	r2, [pc, #76]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d10c      	bne.n	8007346 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	4313      	orrs	r3, r2
 800733c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40012c00 	.word	0x40012c00
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00

08007374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	bc80      	pop	{r7}
 8007384:	4770      	bx	lr

08007386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	bc80      	pop	{r7}
 8007396:	4770      	bx	lr

08007398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e03f      	b.n	800742a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fc febc 	bl	800413c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2224      	movs	r2, #36	; 0x24
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fd1f 	bl	8007e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	695a      	ldr	r2, [r3, #20]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b08a      	sub	sp, #40	; 0x28
 8007436:	af02      	add	r7, sp, #8
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b20      	cmp	r3, #32
 8007450:	d17c      	bne.n	800754c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_UART_Transmit+0x2c>
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e075      	b.n	800754e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_UART_Transmit+0x3e>
 800746c:	2302      	movs	r3, #2
 800746e:	e06e      	b.n	800754e <HAL_UART_Transmit+0x11c>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2221      	movs	r2, #33	; 0x21
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007486:	f7fd f825 	bl	80044d4 <HAL_GetTick>
 800748a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	88fa      	ldrh	r2, [r7, #6]
 8007490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a0:	d108      	bne.n	80074b4 <HAL_UART_Transmit+0x82>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e003      	b.n	80074bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c4:	e02a      	b.n	800751c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2200      	movs	r2, #0
 80074ce:	2180      	movs	r1, #128	; 0x80
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 faf5 	bl	8007ac0 <UART_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e036      	b.n	800754e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10b      	bne.n	80074fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	3302      	adds	r3, #2
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	e007      	b.n	800750e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	3301      	adds	r3, #1
 800750c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007512:	b29b      	uxth	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1cf      	bne.n	80074c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	2140      	movs	r1, #64	; 0x40
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fac5 	bl	8007ac0 <UART_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e006      	b.n	800754e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	3720      	adds	r7, #32
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b20      	cmp	r3, #32
 8007570:	d153      	bne.n	800761a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_UART_Transmit_DMA+0x26>
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e04c      	b.n	800761c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007588:	2b01      	cmp	r3, #1
 800758a:	d101      	bne.n	8007590 <HAL_UART_Transmit_DMA+0x38>
 800758c:	2302      	movs	r3, #2
 800758e:	e045      	b.n	800761c <HAL_UART_Transmit_DMA+0xc4>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2221      	movs	r2, #33	; 0x21
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	4a19      	ldr	r2, [pc, #100]	; (8007624 <HAL_UART_Transmit_DMA+0xcc>)
 80075be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	4a18      	ldr	r2, [pc, #96]	; (8007628 <HAL_UART_Transmit_DMA+0xd0>)
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075cc:	4a17      	ldr	r2, [pc, #92]	; (800762c <HAL_UART_Transmit_DMA+0xd4>)
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d4:	2200      	movs	r2, #0
 80075d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80075d8:	f107 0308 	add.w	r3, r7, #8
 80075dc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	6819      	ldr	r1, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3304      	adds	r3, #4
 80075ec:	461a      	mov	r2, r3
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	f7fd ff6c 	bl	80054cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007614:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	e000      	b.n	800761c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	080079bf 	.word	0x080079bf
 8007628:	08007a11 	.word	0x08007a11
 800762c:	08007a2d 	.word	0x08007a2d

08007630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007650:	2300      	movs	r3, #0
 8007652:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_UART_IRQHandler+0x52>
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	f003 0320 	and.w	r3, r3, #32
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fb26 	bl	8007ccc <UART_Receive_IT>
      return;
 8007680:	e17b      	b.n	800797a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 80b1 	beq.w	80077ec <HAL_UART_IRQHandler+0x1bc>
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <HAL_UART_IRQHandler+0x70>
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80a6 	beq.w	80077ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <HAL_UART_IRQHandler+0x90>
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	f043 0201 	orr.w	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <HAL_UART_IRQHandler+0xb0>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f043 0202 	orr.w	r2, r3, #2
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_UART_IRQHandler+0xd0>
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	f043 0204 	orr.w	r2, r3, #4
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00f      	beq.n	800772a <HAL_UART_IRQHandler+0xfa>
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <HAL_UART_IRQHandler+0xee>
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f043 0208 	orr.w	r2, r3, #8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 811e 	beq.w	8007970 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <HAL_UART_IRQHandler+0x11e>
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fabf 	bl	8007ccc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf14      	ite	ne
 800775c:	2301      	movne	r3, #1
 800775e:	2300      	moveq	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <HAL_UART_IRQHandler+0x146>
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d031      	beq.n	80077da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa01 	bl	8007b7e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d023      	beq.n	80077d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695a      	ldr	r2, [r3, #20]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007798:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d013      	beq.n	80077ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a6:	4a76      	ldr	r2, [pc, #472]	; (8007980 <HAL_UART_IRQHandler+0x350>)
 80077a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fd ff26 	bl	8005600 <HAL_DMA_Abort_IT>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d016      	beq.n	80077e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077c4:	4610      	mov	r0, r2
 80077c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	e00e      	b.n	80077e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f8e3 	bl	8007996 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d0:	e00a      	b.n	80077e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8df 	bl	8007996 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d8:	e006      	b.n	80077e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8db 	bl	8007996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80077e6:	e0c3      	b.n	8007970 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	bf00      	nop
    return;
 80077ea:	e0c1      	b.n	8007970 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f040 80a1 	bne.w	8007938 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 809b 	beq.w	8007938 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8095 	beq.w	8007938 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04e      	beq.n	80078d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800783c:	8a3b      	ldrh	r3, [r7, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 8098 	beq.w	8007974 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007848:	8a3a      	ldrh	r2, [r7, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	f080 8092 	bcs.w	8007974 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8a3a      	ldrh	r2, [r7, #16]
 8007854:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b20      	cmp	r3, #32
 800785e:	d02b      	beq.n	80078b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800786e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695a      	ldr	r2, [r3, #20]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0201 	bic.w	r2, r2, #1
 800787e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695a      	ldr	r2, [r3, #20]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800788e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0210 	bic.w	r2, r2, #16
 80078ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd fe69 	bl	800558a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f86d 	bl	80079a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80078ce:	e051      	b.n	8007974 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078d8:	b29b      	uxth	r3, r3
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d047      	beq.n	8007978 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80078e8:	8a7b      	ldrh	r3, [r7, #18]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d044      	beq.n	8007978 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80078fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0201 	bic.w	r2, r2, #1
 800790c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0210 	bic.w	r2, r2, #16
 800792a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800792c:	8a7b      	ldrh	r3, [r7, #18]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f839 	bl	80079a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007936:	e01f      	b.n	8007978 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b00      	cmp	r3, #0
 8007940:	d008      	beq.n	8007954 <HAL_UART_IRQHandler+0x324>
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f956 	bl	8007bfe <UART_Transmit_IT>
    return;
 8007952:	e012      	b.n	800797a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <HAL_UART_IRQHandler+0x34a>
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f997 	bl	8007c9c <UART_EndTransmit_IT>
    return;
 800796e:	e004      	b.n	800797a <HAL_UART_IRQHandler+0x34a>
    return;
 8007970:	bf00      	nop
 8007972:	e002      	b.n	800797a <HAL_UART_IRQHandler+0x34a>
      return;
 8007974:	bf00      	nop
 8007976:	e000      	b.n	800797a <HAL_UART_IRQHandler+0x34a>
      return;
 8007978:	bf00      	nop
  }
}
 800797a:	3728      	adds	r7, #40	; 0x28
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	08007bd7 	.word	0x08007bd7

08007984 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr

08007996 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d113      	bne.n	8007a02 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695a      	ldr	r2, [r3, #20]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ee:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68da      	ldr	r2, [r3, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fe:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a00:	e002      	b.n	8007a08 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7f9 fdca 	bl	800159c <HAL_UART_TxCpltCallback>
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7f9 fdc5 	bl	80015ae <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	bf14      	ite	ne
 8007a4c:	2301      	movne	r3, #1
 8007a4e:	2300      	moveq	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b21      	cmp	r3, #33	; 0x21
 8007a5e:	d108      	bne.n	8007a72 <UART_DMAError+0x46>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007a6c:	68b8      	ldr	r0, [r7, #8]
 8007a6e:	f000 f871 	bl	8007b54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf14      	ite	ne
 8007a80:	2301      	movne	r3, #1
 8007a82:	2300      	moveq	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b22      	cmp	r3, #34	; 0x22
 8007a92:	d108      	bne.n	8007aa6 <UART_DMAError+0x7a>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f000 f86c 	bl	8007b7e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f043 0210 	orr.w	r2, r3, #16
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ab2:	68b8      	ldr	r0, [r7, #8]
 8007ab4:	f7ff ff6f 	bl	8007996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	4613      	mov	r3, r2
 8007ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad0:	e02c      	b.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad8:	d028      	beq.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ae0:	f7fc fcf8 	bl	80044d4 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d21d      	bcs.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007afe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695a      	ldr	r2, [r3, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0201 	bic.w	r2, r2, #1
 8007b0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e00f      	b.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4013      	ands	r3, r2
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2301      	moveq	r3, #1
 8007b3e:	2300      	movne	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d0c3      	beq.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr

08007b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b083      	sub	sp, #12
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b94:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0201 	bic.w	r2, r2, #1
 8007ba4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d107      	bne.n	8007bbe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0210 	bic.w	r2, r2, #16
 8007bbc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff fed0 	bl	8007996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b21      	cmp	r3, #33	; 0x21
 8007c10:	d13e      	bne.n	8007c90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1a:	d114      	bne.n	8007c46 <UART_Transmit_IT+0x48>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d110      	bne.n	8007c46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	621a      	str	r2, [r3, #32]
 8007c44:	e008      	b.n	8007c58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	1c59      	adds	r1, r3, #1
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6211      	str	r1, [r2, #32]
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	4619      	mov	r1, r3
 8007c66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10f      	bne.n	8007c8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68da      	ldr	r2, [r3, #12]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e000      	b.n	8007c92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c90:	2302      	movs	r3, #2
  }
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7f9 fc6d 	bl	800159c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b22      	cmp	r3, #34	; 0x22
 8007cde:	f040 8099 	bne.w	8007e14 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cea:	d117      	bne.n	8007d1c <UART_Receive_IT+0x50>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d113      	bne.n	8007d1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfc:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	1c9a      	adds	r2, r3, #2
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	629a      	str	r2, [r3, #40]	; 0x28
 8007d1a:	e026      	b.n	8007d6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007d22:	2300      	movs	r3, #0
 8007d24:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	d007      	beq.n	8007d40 <UART_Receive_IT+0x74>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <UART_Receive_IT+0x82>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	701a      	strb	r2, [r3, #0]
 8007d4c:	e008      	b.n	8007d60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4619      	mov	r1, r3
 8007d78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d148      	bne.n	8007e10 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0220 	bic.w	r2, r2, #32
 8007d8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	695a      	ldr	r2, [r3, #20]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0201 	bic.w	r2, r2, #1
 8007dac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2220      	movs	r2, #32
 8007db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d123      	bne.n	8007e06 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0210 	bic.w	r2, r2, #16
 8007dd2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0310 	and.w	r3, r3, #16
 8007dde:	2b10      	cmp	r3, #16
 8007de0:	d10a      	bne.n	8007df8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fdd2 	bl	80079a8 <HAL_UARTEx_RxEventCallback>
 8007e04:	e002      	b.n	8007e0c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fdbc 	bl	8007984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e002      	b.n	8007e16 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	e000      	b.n	8007e16 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e14:	2302      	movs	r3, #2
  }
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e5a:	f023 030c 	bic.w	r3, r3, #12
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6812      	ldr	r2, [r2, #0]
 8007e62:	68b9      	ldr	r1, [r7, #8]
 8007e64:	430b      	orrs	r3, r1
 8007e66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a2c      	ldr	r2, [pc, #176]	; (8007f34 <UART_SetConfig+0x114>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d103      	bne.n	8007e90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007e88:	f7fe fe40 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	e002      	b.n	8007e96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e90:	f7fe fe28 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 8007e94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009a      	lsls	r2, r3, #2
 8007ea0:	441a      	add	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eac:	4a22      	ldr	r2, [pc, #136]	; (8007f38 <UART_SetConfig+0x118>)
 8007eae:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	0119      	lsls	r1, r3, #4
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009a      	lsls	r2, r3, #2
 8007ec0:	441a      	add	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ecc:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <UART_SetConfig+0x118>)
 8007ece:	fba3 0302 	umull	r0, r3, r3, r2
 8007ed2:	095b      	lsrs	r3, r3, #5
 8007ed4:	2064      	movs	r0, #100	; 0x64
 8007ed6:	fb00 f303 	mul.w	r3, r0, r3
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	3332      	adds	r3, #50	; 0x32
 8007ee0:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <UART_SetConfig+0x118>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	095b      	lsrs	r3, r3, #5
 8007ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eec:	4419      	add	r1, r3
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	009a      	lsls	r2, r3, #2
 8007ef8:	441a      	add	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <UART_SetConfig+0x118>)
 8007f06:	fba3 0302 	umull	r0, r3, r3, r2
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	2064      	movs	r0, #100	; 0x64
 8007f0e:	fb00 f303 	mul.w	r3, r0, r3
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	3332      	adds	r3, #50	; 0x32
 8007f18:	4a07      	ldr	r2, [pc, #28]	; (8007f38 <UART_SetConfig+0x118>)
 8007f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	440a      	add	r2, r1
 8007f2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40013800 	.word	0x40013800
 8007f38:	51eb851f 	.word	0x51eb851f

08007f3c <__libc_init_array>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	2600      	movs	r6, #0
 8007f40:	4d0c      	ldr	r5, [pc, #48]	; (8007f74 <__libc_init_array+0x38>)
 8007f42:	4c0d      	ldr	r4, [pc, #52]	; (8007f78 <__libc_init_array+0x3c>)
 8007f44:	1b64      	subs	r4, r4, r5
 8007f46:	10a4      	asrs	r4, r4, #2
 8007f48:	42a6      	cmp	r6, r4
 8007f4a:	d109      	bne.n	8007f60 <__libc_init_array+0x24>
 8007f4c:	f000 f822 	bl	8007f94 <_init>
 8007f50:	2600      	movs	r6, #0
 8007f52:	4d0a      	ldr	r5, [pc, #40]	; (8007f7c <__libc_init_array+0x40>)
 8007f54:	4c0a      	ldr	r4, [pc, #40]	; (8007f80 <__libc_init_array+0x44>)
 8007f56:	1b64      	subs	r4, r4, r5
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	42a6      	cmp	r6, r4
 8007f5c:	d105      	bne.n	8007f6a <__libc_init_array+0x2e>
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f64:	4798      	blx	r3
 8007f66:	3601      	adds	r6, #1
 8007f68:	e7ee      	b.n	8007f48 <__libc_init_array+0xc>
 8007f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6e:	4798      	blx	r3
 8007f70:	3601      	adds	r6, #1
 8007f72:	e7f2      	b.n	8007f5a <__libc_init_array+0x1e>
 8007f74:	08007fec 	.word	0x08007fec
 8007f78:	08007fec 	.word	0x08007fec
 8007f7c:	08007fec 	.word	0x08007fec
 8007f80:	08007ff0 	.word	0x08007ff0

08007f84 <memset>:
 8007f84:	4603      	mov	r3, r0
 8007f86:	4402      	add	r2, r0
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memset+0xa>
 8007f8c:	4770      	bx	lr
 8007f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f92:	e7f9      	b.n	8007f88 <memset+0x4>

08007f94 <_init>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	bf00      	nop
 8007f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9a:	bc08      	pop	{r3}
 8007f9c:	469e      	mov	lr, r3
 8007f9e:	4770      	bx	lr

08007fa0 <_fini>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr
